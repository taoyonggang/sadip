// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cam.proto

#include "cam.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace seisys {
namespace dds {
PROTOBUF_CONSTEXPR Cam::Cam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgtype_)*/0
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.createdat_)*/int64_t{0}
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamDefaultTypeInternal() {}
  union {
    Cam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamDefaultTypeInternal _Cam_default_instance_;
PROTOBUF_CONSTEXPR CamReply::CamReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createdat_)*/int64_t{0}
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamReplyDefaultTypeInternal() {}
  union {
    CamReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamReplyDefaultTypeInternal _CamReply_default_instance_;
PROTOBUF_CONSTEXPR RteDistribution::RteDistribution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgtype_)*/0
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RteDistributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RteDistributionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RteDistributionDefaultTypeInternal() {}
  union {
    RteDistribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RteDistributionDefaultTypeInternal _RteDistribution_default_instance_;
PROTOBUF_CONSTEXPR RteDistributionReply::RteDistributionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RteDistributionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RteDistributionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RteDistributionReplyDefaultTypeInternal() {}
  union {
    RteDistributionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RteDistributionReplyDefaultTypeInternal _RteDistributionReply_default_instance_;
PROTOBUF_CONSTEXPR RtsDistribution::RtsDistribution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgtype_)*/0
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtsDistributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtsDistributionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtsDistributionDefaultTypeInternal() {}
  union {
    RtsDistribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtsDistributionDefaultTypeInternal _RtsDistribution_default_instance_;
PROTOBUF_CONSTEXPR RtsDistributionReply::RtsDistributionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtsDistributionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtsDistributionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtsDistributionReplyDefaultTypeInternal() {}
  union {
    RtsDistributionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtsDistributionReplyDefaultTypeInternal _RtsDistributionReply_default_instance_;
PROTOBUF_CONSTEXPR Objects::Objects(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ptcid_)*/0
  , /*decltype(_impl_.lat_)*/0
  , /*decltype(_impl_.lon_)*/0
  , /*decltype(_impl_.ele_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.ptctype_)*/0
  , /*decltype(_impl_.vehtype_)*/0
  , /*decltype(_impl_.datasource_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectsDefaultTypeInternal() {}
  union {
    Objects _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectsDefaultTypeInternal _Objects_default_instance_;
PROTOBUF_CONSTEXPR ObjectList::ObjectList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectListDefaultTypeInternal() {}
  union {
    ObjectList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectListDefaultTypeInternal _ObjectList_default_instance_;
PROTOBUF_CONSTEXPR SimplifiedCam::SimplifiedCam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimplifiedCamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimplifiedCamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimplifiedCamDefaultTypeInternal() {}
  union {
    SimplifiedCam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimplifiedCamDefaultTypeInternal _SimplifiedCam_default_instance_;
PROTOBUF_CONSTEXPR SimplifiedCamReply::SimplifiedCamReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updatedat_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimplifiedCamReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimplifiedCamReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimplifiedCamReplyDefaultTypeInternal() {}
  union {
    SimplifiedCamReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimplifiedCamReplyDefaultTypeInternal _SimplifiedCamReply_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
static ::_pb::Metadata file_level_metadata_cam_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cam_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cam_2eproto = nullptr;

const uint32_t TableStruct_cam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.createdat_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cam, _impl_.updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.replyid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.createdat_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::CamReply, _impl_.updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistribution, _impl_.updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistributionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistributionReply, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistributionReply, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistributionReply, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistributionReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistributionReply, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RteDistributionReply, _impl_.updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistribution, _impl_.updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistributionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistributionReply, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistributionReply, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistributionReply, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistributionReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistributionReply, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::RtsDistributionReply, _impl_.updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.ptcid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.lat_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.lon_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.ele_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.deviceidlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.ptctype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.vehtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.datasource_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Objects, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::ObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::ObjectList, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCam, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCam, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCam, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCam, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCam, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCam, _impl_.updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCamReply, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCamReply, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCamReply, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCamReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCamReply, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::SimplifiedCamReply, _impl_.updatedat_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cn::seisys::dds::Cam)},
  { 14, -1, -1, sizeof(::cn::seisys::dds::CamReply)},
  { 28, -1, -1, sizeof(::cn::seisys::dds::RteDistribution)},
  { 41, -1, -1, sizeof(::cn::seisys::dds::RteDistributionReply)},
  { 53, -1, -1, sizeof(::cn::seisys::dds::RtsDistribution)},
  { 66, -1, -1, sizeof(::cn::seisys::dds::RtsDistributionReply)},
  { 78, -1, -1, sizeof(::cn::seisys::dds::Objects)},
  { 98, -1, -1, sizeof(::cn::seisys::dds::ObjectList)},
  { 105, -1, -1, sizeof(::cn::seisys::dds::SimplifiedCam)},
  { 117, -1, -1, sizeof(::cn::seisys::dds::SimplifiedCamReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::seisys::dds::_Cam_default_instance_._instance,
  &::cn::seisys::dds::_CamReply_default_instance_._instance,
  &::cn::seisys::dds::_RteDistribution_default_instance_._instance,
  &::cn::seisys::dds::_RteDistributionReply_default_instance_._instance,
  &::cn::seisys::dds::_RtsDistribution_default_instance_._instance,
  &::cn::seisys::dds::_RtsDistributionReply_default_instance_._instance,
  &::cn::seisys::dds::_Objects_default_instance_._instance,
  &::cn::seisys::dds::_ObjectList_default_instance_._instance,
  &::cn::seisys::dds::_SimplifiedCam_default_instance_._instance,
  &::cn::seisys::dds::_SimplifiedCamReply_default_instance_._instance,
};

const char descriptor_table_protodef_cam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tcam.proto\022\rcn.seisys.dds\"\216\001\n\003Cam\022\r\n\005ms"
  "gId\030\001 \001(\t\022\021\n\tsrcNodeId\030\002 \001(\t\022\020\n\010toNodeId"
  "\030\003 \001(\t\022\017\n\007msgType\030\004 \001(\005\022\016\n\006length\030\005 \001(\r\022"
  "\014\n\004data\030\006 \001(\014\022\021\n\tcreatedAt\030\007 \001(\003\022\021\n\tupda"
  "tedAt\030\010 \001(\003\"\223\001\n\010CamReply\022\r\n\005msgId\030\001 \001(\t\022"
  "\017\n\007replyId\030\002 \001(\t\022\021\n\tsrcNodeId\030\003 \001(\t\022\020\n\010t"
  "oNodeId\030\004 \001(\t\022\016\n\006status\030\005 \001(\r\022\014\n\004desc\030\006 "
  "\001(\t\022\021\n\tcreatedAt\030\007 \001(\003\022\021\n\tupdatedAt\030\010 \001("
  "\003\"\207\001\n\017RteDistribution\022\r\n\005msgId\030\001 \001(\t\022\021\n\t"
  "srcNodeId\030\002 \001(\t\022\020\n\010toNodeId\030\003 \001(\t\022\017\n\007msg"
  "Type\030\004 \001(\005\022\016\n\006length\030\005 \001(\r\022\014\n\004data\030\006 \001(\014"
  "\022\021\n\tupdatedAt\030\007 \001(\003\"{\n\024RteDistributionRe"
  "ply\022\r\n\005msgId\030\001 \001(\t\022\021\n\tsrcNodeId\030\002 \001(\t\022\020\n"
  "\010toNodeId\030\003 \001(\t\022\016\n\006status\030\004 \001(\r\022\014\n\004desc\030"
  "\005 \001(\t\022\021\n\tupdatedAt\030\006 \001(\003\"\207\001\n\017RtsDistribu"
  "tion\022\r\n\005msgId\030\001 \001(\t\022\021\n\tsrcNodeId\030\002 \001(\t\022\020"
  "\n\010toNodeId\030\003 \001(\t\022\017\n\007msgType\030\004 \001(\005\022\016\n\006len"
  "gth\030\005 \001(\r\022\014\n\004data\030\006 \001(\014\022\021\n\tupdatedAt\030\007 \001"
  "(\003\"{\n\024RtsDistributionReply\022\r\n\005msgId\030\001 \001("
  "\t\022\021\n\tsrcNodeId\030\002 \001(\t\022\020\n\010toNodeId\030\003 \001(\t\022\016"
  "\n\006status\030\004 \001(\r\022\014\n\004desc\030\005 \001(\t\022\021\n\tupdatedA"
  "t\030\006 \001(\003\"\355\001\n\007Objects\022\r\n\005ptcId\030\001 \001(\005\022\013\n\003la"
  "t\030\002 \001(\005\022\013\n\003lon\030\003 \001(\005\022\013\n\003ele\030\004 \001(\005\022\r\n\005spe"
  "ed\030\005 \001(\005\022\017\n\007heading\030\006 \001(\005\022\021\n\ttimestamp\030\007"
  " \001(\003\022\024\n\014deviceIdList\030\010 \001(\t\022\017\n\007ptcType\030\t "
  "\001(\005\022\017\n\007vehType\030\n \001(\005\022\022\n\ndataSource\030\013 \001(\005"
  "\022\r\n\005width\030\014 \001(\005\022\016\n\006length\030\r \001(\005\022\016\n\006heigh"
  "t\030\016 \001(\005\"3\n\nObjectList\022%\n\005items\030\001 \003(\0132\026.c"
  "n.seisys.dds.Objects\"\217\001\n\rSimplifiedCam\022\r"
  "\n\005msgId\030\001 \001(\t\022\021\n\tsrcNodeId\030\002 \001(\t\022\020\n\010toNo"
  "deId\030\003 \001(\t\022\016\n\006length\030\004 \001(\r\022\'\n\004data\030\005 \001(\013"
  "2\031.cn.seisys.dds.ObjectList\022\021\n\tupdatedAt"
  "\030\006 \001(\003\"y\n\022SimplifiedCamReply\022\r\n\005msgId\030\001 "
  "\001(\t\022\021\n\tsrcNodeId\030\002 \001(\t\022\020\n\010toNodeId\030\003 \001(\t"
  "\022\016\n\006status\030\004 \001(\r\022\014\n\004desc\030\005 \001(\t\022\021\n\tupdate"
  "dAt\030\006 \001(\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_cam_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cam_2eproto = {
    false, false, 1417, descriptor_table_protodef_cam_2eproto,
    "cam.proto",
    &descriptor_table_cam_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_cam_2eproto::offsets,
    file_level_metadata_cam_2eproto, file_level_enum_descriptors_cam_2eproto,
    file_level_service_descriptors_cam_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cam_2eproto_getter() {
  return &descriptor_table_cam_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cam_2eproto(&descriptor_table_cam_2eproto);
namespace cn {
namespace seisys {
namespace dds {

// ===================================================================

class Cam::_Internal {
 public:
};

Cam::Cam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Cam)
}
Cam::Cam(const Cam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.updatedat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msgtype_, &from._impl_.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updatedat_) -
    reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.updatedat_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Cam)
}

inline void Cam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){0}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.createdat_){int64_t{0}}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cam::~Cam() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Cam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.data_.Destroy();
}

void Cam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cam::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Cam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updatedat_) -
      reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.updatedat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Cam.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Cam.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Cam.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // int32 msgType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 createdAt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Cam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Cam.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Cam.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Cam.toNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tonodeid(), target);
  }

  // int32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_msgtype(), target);
  }

  // uint32 length = 5;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_length(), target);
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  // int64 createdAt = 7;
  if (this->_internal_createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 8;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Cam)
  return target;
}

size_t Cam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Cam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
  }

  // uint32 length = 5;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  // int64 createdAt = 7;
  if (this->_internal_createdat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createdat());
  }

  // int64 updatedAt = 8;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cam::GetClassData() const { return &_class_data_; }


void Cam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cam*>(&to_msg);
  auto& from = static_cast<const Cam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Cam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_createdat() != 0) {
    _this->_internal_set_createdat(from._internal_createdat());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cam::CopyFrom(const Cam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Cam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cam::IsInitialized() const {
  return true;
}

void Cam::InternalSwap(Cam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cam, _impl_.updatedat_)
      + sizeof(Cam::_impl_.updatedat_)
      - PROTOBUF_FIELD_OFFSET(Cam, _impl_.msgtype_)>(
          reinterpret_cast<char*>(&_impl_.msgtype_),
          reinterpret_cast<char*>(&other->_impl_.msgtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[0]);
}

// ===================================================================

class CamReply::_Internal {
 public:
};

CamReply::CamReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.CamReply)
}
CamReply::CamReply(const CamReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.replyid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.updatedat_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.replyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_replyid().empty()) {
    _this->_impl_.replyid_.Set(from._internal_replyid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.createdat_, &from._impl_.createdat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.createdat_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.CamReply)
}

inline void CamReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.replyid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.createdat_){int64_t{0}}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.replyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CamReply::~CamReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.CamReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.replyid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.desc_.Destroy();
}

void CamReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.CamReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.replyid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.createdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.createdat_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.CamReply.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string replyId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_replyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.CamReply.replyId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.CamReply.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.CamReply.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.CamReply.desc"));
        } else
          goto handle_unusual;
        continue;
      // int64 createdAt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.CamReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.CamReply.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string replyId = 2;
  if (!this->_internal_replyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_replyid().data(), static_cast<int>(this->_internal_replyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.CamReply.replyId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_replyid(), target);
  }

  // string srcNodeId = 3;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.CamReply.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 4;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.CamReply.toNodeId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tonodeid(), target);
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  // string desc = 6;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.CamReply.desc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_desc(), target);
  }

  // int64 createdAt = 7;
  if (this->_internal_createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 8;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.CamReply)
  return target;
}

size_t CamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.CamReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string replyId = 2;
  if (!this->_internal_replyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_replyid());
  }

  // string srcNodeId = 3;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 4;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // string desc = 6;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int64 createdAt = 7;
  if (this->_internal_createdat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createdat());
  }

  // int64 updatedAt = 8;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamReply::GetClassData() const { return &_class_data_; }


void CamReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamReply*>(&to_msg);
  auto& from = static_cast<const CamReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.CamReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_replyid().empty()) {
    _this->_internal_set_replyid(from._internal_replyid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_createdat() != 0) {
    _this->_internal_set_createdat(from._internal_createdat());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamReply::CopyFrom(const CamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.CamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamReply::IsInitialized() const {
  return true;
}

void CamReply::InternalSwap(CamReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.replyid_, lhs_arena,
      &other->_impl_.replyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamReply, _impl_.status_)
      + sizeof(CamReply::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CamReply, _impl_.createdat_)>(
          reinterpret_cast<char*>(&_impl_.createdat_),
          reinterpret_cast<char*>(&other->_impl_.createdat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[1]);
}

// ===================================================================

class RteDistribution::_Internal {
 public:
};

RteDistribution::RteDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.RteDistribution)
}
RteDistribution::RteDistribution(const RteDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RteDistribution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.updatedat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msgtype_, &from._impl_.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updatedat_) -
    reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.updatedat_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.RteDistribution)
}

inline void RteDistribution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){0}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RteDistribution::~RteDistribution() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.RteDistribution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RteDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.data_.Destroy();
}

void RteDistribution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RteDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.RteDistribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updatedat_) -
      reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.updatedat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RteDistribution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RteDistribution.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RteDistribution.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RteDistribution.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // int32 msgType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RteDistribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.RteDistribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RteDistribution.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RteDistribution.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RteDistribution.toNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tonodeid(), target);
  }

  // int32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_msgtype(), target);
  }

  // uint32 length = 5;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_length(), target);
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  // int64 updatedAt = 7;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.RteDistribution)
  return target;
}

size_t RteDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.RteDistribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
  }

  // uint32 length = 5;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  // int64 updatedAt = 7;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RteDistribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RteDistribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RteDistribution::GetClassData() const { return &_class_data_; }


void RteDistribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RteDistribution*>(&to_msg);
  auto& from = static_cast<const RteDistribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.RteDistribution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RteDistribution::CopyFrom(const RteDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.RteDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RteDistribution::IsInitialized() const {
  return true;
}

void RteDistribution::InternalSwap(RteDistribution* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RteDistribution, _impl_.updatedat_)
      + sizeof(RteDistribution::_impl_.updatedat_)
      - PROTOBUF_FIELD_OFFSET(RteDistribution, _impl_.msgtype_)>(
          reinterpret_cast<char*>(&_impl_.msgtype_),
          reinterpret_cast<char*>(&other->_impl_.msgtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RteDistribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[2]);
}

// ===================================================================

class RteDistributionReply::_Internal {
 public:
};

RteDistributionReply::RteDistributionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.RteDistributionReply)
}
RteDistributionReply::RteDistributionReply(const RteDistributionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RteDistributionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.updatedat_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.updatedat_, &from._impl_.updatedat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.RteDistributionReply)
}

inline void RteDistributionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RteDistributionReply::~RteDistributionReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.RteDistributionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RteDistributionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.desc_.Destroy();
}

void RteDistributionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RteDistributionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.RteDistributionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.updatedat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RteDistributionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RteDistributionReply.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RteDistributionReply.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RteDistributionReply.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RteDistributionReply.desc"));
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RteDistributionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.RteDistributionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RteDistributionReply.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RteDistributionReply.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RteDistributionReply.toNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tonodeid(), target);
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RteDistributionReply.desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.RteDistributionReply)
  return target;
}

size_t RteDistributionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.RteDistributionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RteDistributionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RteDistributionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RteDistributionReply::GetClassData() const { return &_class_data_; }


void RteDistributionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RteDistributionReply*>(&to_msg);
  auto& from = static_cast<const RteDistributionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.RteDistributionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RteDistributionReply::CopyFrom(const RteDistributionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.RteDistributionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RteDistributionReply::IsInitialized() const {
  return true;
}

void RteDistributionReply::InternalSwap(RteDistributionReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RteDistributionReply, _impl_.status_)
      + sizeof(RteDistributionReply::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RteDistributionReply, _impl_.updatedat_)>(
          reinterpret_cast<char*>(&_impl_.updatedat_),
          reinterpret_cast<char*>(&other->_impl_.updatedat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RteDistributionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[3]);
}

// ===================================================================

class RtsDistribution::_Internal {
 public:
};

RtsDistribution::RtsDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.RtsDistribution)
}
RtsDistribution::RtsDistribution(const RtsDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtsDistribution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.updatedat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msgtype_, &from._impl_.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updatedat_) -
    reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.updatedat_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.RtsDistribution)
}

inline void RtsDistribution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){0}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtsDistribution::~RtsDistribution() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.RtsDistribution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtsDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.data_.Destroy();
}

void RtsDistribution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtsDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.RtsDistribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updatedat_) -
      reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.updatedat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtsDistribution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RtsDistribution.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RtsDistribution.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RtsDistribution.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // int32 msgType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtsDistribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.RtsDistribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RtsDistribution.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RtsDistribution.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RtsDistribution.toNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tonodeid(), target);
  }

  // int32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_msgtype(), target);
  }

  // uint32 length = 5;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_length(), target);
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  // int64 updatedAt = 7;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.RtsDistribution)
  return target;
}

size_t RtsDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.RtsDistribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
  }

  // uint32 length = 5;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  // int64 updatedAt = 7;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtsDistribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtsDistribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtsDistribution::GetClassData() const { return &_class_data_; }


void RtsDistribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtsDistribution*>(&to_msg);
  auto& from = static_cast<const RtsDistribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.RtsDistribution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtsDistribution::CopyFrom(const RtsDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.RtsDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtsDistribution::IsInitialized() const {
  return true;
}

void RtsDistribution::InternalSwap(RtsDistribution* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtsDistribution, _impl_.updatedat_)
      + sizeof(RtsDistribution::_impl_.updatedat_)
      - PROTOBUF_FIELD_OFFSET(RtsDistribution, _impl_.msgtype_)>(
          reinterpret_cast<char*>(&_impl_.msgtype_),
          reinterpret_cast<char*>(&other->_impl_.msgtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtsDistribution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[4]);
}

// ===================================================================

class RtsDistributionReply::_Internal {
 public:
};

RtsDistributionReply::RtsDistributionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.RtsDistributionReply)
}
RtsDistributionReply::RtsDistributionReply(const RtsDistributionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtsDistributionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.updatedat_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.updatedat_, &from._impl_.updatedat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.RtsDistributionReply)
}

inline void RtsDistributionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtsDistributionReply::~RtsDistributionReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.RtsDistributionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtsDistributionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.desc_.Destroy();
}

void RtsDistributionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtsDistributionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.RtsDistributionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.updatedat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtsDistributionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RtsDistributionReply.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RtsDistributionReply.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RtsDistributionReply.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.RtsDistributionReply.desc"));
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtsDistributionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.RtsDistributionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RtsDistributionReply.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RtsDistributionReply.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RtsDistributionReply.toNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tonodeid(), target);
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.RtsDistributionReply.desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.RtsDistributionReply)
  return target;
}

size_t RtsDistributionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.RtsDistributionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtsDistributionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtsDistributionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtsDistributionReply::GetClassData() const { return &_class_data_; }


void RtsDistributionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtsDistributionReply*>(&to_msg);
  auto& from = static_cast<const RtsDistributionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.RtsDistributionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtsDistributionReply::CopyFrom(const RtsDistributionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.RtsDistributionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtsDistributionReply::IsInitialized() const {
  return true;
}

void RtsDistributionReply::InternalSwap(RtsDistributionReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtsDistributionReply, _impl_.status_)
      + sizeof(RtsDistributionReply::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RtsDistributionReply, _impl_.updatedat_)>(
          reinterpret_cast<char*>(&_impl_.updatedat_),
          reinterpret_cast<char*>(&other->_impl_.updatedat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtsDistributionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[5]);
}

// ===================================================================

class Objects::_Internal {
 public:
};

Objects::Objects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Objects)
}
Objects::Objects(const Objects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Objects* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.ptcid_){}
    , decltype(_impl_.lat_){}
    , decltype(_impl_.lon_){}
    , decltype(_impl_.ele_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.ptctype_){}
    , decltype(_impl_.vehtype_){}
    , decltype(_impl_.datasource_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceidlist().empty()) {
    _this->_impl_.deviceidlist_.Set(from._internal_deviceidlist(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ptcid_, &from._impl_.ptcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.ptcid_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Objects)
}

inline void Objects::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.ptcid_){0}
    , decltype(_impl_.lat_){0}
    , decltype(_impl_.lon_){0}
    , decltype(_impl_.ele_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.ptctype_){0}
    , decltype(_impl_.vehtype_){0}
    , decltype(_impl_.datasource_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Objects::~Objects() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Objects)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Objects::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceidlist_.Destroy();
}

void Objects::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Objects::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Objects)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceidlist_.ClearToEmpty();
  ::memset(&_impl_.ptcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.ptcid_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Objects::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ptcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ptcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ele = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ele_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceIdList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_deviceidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Objects.deviceIdList"));
        } else
          goto handle_unusual;
        continue;
      // int32 ptcType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.ptctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vehType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.vehtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dataSource = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.datasource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Objects::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Objects)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ptcId = 1;
  if (this->_internal_ptcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ptcid(), target);
  }

  // int32 lat = 2;
  if (this->_internal_lat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lat(), target);
  }

  // int32 lon = 3;
  if (this->_internal_lon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lon(), target);
  }

  // int32 ele = 4;
  if (this->_internal_ele() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ele(), target);
  }

  // int32 speed = 5;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_speed(), target);
  }

  // int32 heading = 6;
  if (this->_internal_heading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_heading(), target);
  }

  // int64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_timestamp(), target);
  }

  // string deviceIdList = 8;
  if (!this->_internal_deviceidlist().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceidlist().data(), static_cast<int>(this->_internal_deviceidlist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Objects.deviceIdList");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_deviceidlist(), target);
  }

  // int32 ptcType = 9;
  if (this->_internal_ptctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_ptctype(), target);
  }

  // int32 vehType = 10;
  if (this->_internal_vehtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_vehtype(), target);
  }

  // int32 dataSource = 11;
  if (this->_internal_datasource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_datasource(), target);
  }

  // int32 width = 12;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_width(), target);
  }

  // int32 length = 13;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_length(), target);
  }

  // int32 height = 14;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Objects)
  return target;
}

size_t Objects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Objects)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceIdList = 8;
  if (!this->_internal_deviceidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceidlist());
  }

  // int32 ptcId = 1;
  if (this->_internal_ptcid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ptcid());
  }

  // int32 lat = 2;
  if (this->_internal_lat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lat());
  }

  // int32 lon = 3;
  if (this->_internal_lon() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lon());
  }

  // int32 ele = 4;
  if (this->_internal_ele() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ele());
  }

  // int32 speed = 5;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  // int32 heading = 6;
  if (this->_internal_heading() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_heading());
  }

  // int64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 ptcType = 9;
  if (this->_internal_ptctype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ptctype());
  }

  // int32 vehType = 10;
  if (this->_internal_vehtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vehtype());
  }

  // int32 dataSource = 11;
  if (this->_internal_datasource() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datasource());
  }

  // int32 width = 12;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 length = 13;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  // int32 height = 14;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Objects::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Objects::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Objects::GetClassData() const { return &_class_data_; }


void Objects::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Objects*>(&to_msg);
  auto& from = static_cast<const Objects&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Objects)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceidlist().empty()) {
    _this->_internal_set_deviceidlist(from._internal_deviceidlist());
  }
  if (from._internal_ptcid() != 0) {
    _this->_internal_set_ptcid(from._internal_ptcid());
  }
  if (from._internal_lat() != 0) {
    _this->_internal_set_lat(from._internal_lat());
  }
  if (from._internal_lon() != 0) {
    _this->_internal_set_lon(from._internal_lon());
  }
  if (from._internal_ele() != 0) {
    _this->_internal_set_ele(from._internal_ele());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_heading() != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_ptctype() != 0) {
    _this->_internal_set_ptctype(from._internal_ptctype());
  }
  if (from._internal_vehtype() != 0) {
    _this->_internal_set_vehtype(from._internal_vehtype());
  }
  if (from._internal_datasource() != 0) {
    _this->_internal_set_datasource(from._internal_datasource());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Objects::CopyFrom(const Objects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Objects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Objects::IsInitialized() const {
  return true;
}

void Objects::InternalSwap(Objects* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceidlist_, lhs_arena,
      &other->_impl_.deviceidlist_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Objects, _impl_.height_)
      + sizeof(Objects::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Objects, _impl_.ptcid_)>(
          reinterpret_cast<char*>(&_impl_.ptcid_),
          reinterpret_cast<char*>(&other->_impl_.ptcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Objects::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[6]);
}

// ===================================================================

class ObjectList::_Internal {
 public:
};

ObjectList::ObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.ObjectList)
}
ObjectList::ObjectList(const ObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.ObjectList)
}

inline void ObjectList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectList::~ObjectList() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.ObjectList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ObjectList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.ObjectList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.seisys.dds.Objects items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.ObjectList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.seisys.dds.Objects items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.ObjectList)
  return target;
}

size_t ObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.ObjectList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.dds.Objects items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectList::GetClassData() const { return &_class_data_; }


void ObjectList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectList*>(&to_msg);
  auto& from = static_cast<const ObjectList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.ObjectList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectList::CopyFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {
  return true;
}

void ObjectList::InternalSwap(ObjectList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[7]);
}

// ===================================================================

class SimplifiedCam::_Internal {
 public:
  static const ::cn::seisys::dds::ObjectList& data(const SimplifiedCam* msg);
};

const ::cn::seisys::dds::ObjectList&
SimplifiedCam::_Internal::data(const SimplifiedCam* msg) {
  return *msg->_impl_.data_;
}
SimplifiedCam::SimplifiedCam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.SimplifiedCam)
}
SimplifiedCam::SimplifiedCam(const SimplifiedCam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimplifiedCam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.updatedat_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::cn::seisys::dds::ObjectList(*from._impl_.data_);
  }
  ::memcpy(&_impl_.updatedat_, &from._impl_.updatedat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.SimplifiedCam)
}

inline void SimplifiedCam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , decltype(_impl_.length_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimplifiedCam::~SimplifiedCam() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.SimplifiedCam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimplifiedCam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void SimplifiedCam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimplifiedCam::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.SimplifiedCam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  ::memset(&_impl_.updatedat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimplifiedCam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.SimplifiedCam.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.SimplifiedCam.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.SimplifiedCam.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.ObjectList data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimplifiedCam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.SimplifiedCam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.SimplifiedCam.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.SimplifiedCam.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.SimplifiedCam.toNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tonodeid(), target);
  }

  // uint32 length = 4;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_length(), target);
  }

  // .cn.seisys.dds.ObjectList data = 5;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.SimplifiedCam)
  return target;
}

size_t SimplifiedCam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.SimplifiedCam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // .cn.seisys.dds.ObjectList data = 5;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  // uint32 length = 4;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimplifiedCam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimplifiedCam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimplifiedCam::GetClassData() const { return &_class_data_; }


void SimplifiedCam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimplifiedCam*>(&to_msg);
  auto& from = static_cast<const SimplifiedCam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.SimplifiedCam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::cn::seisys::dds::ObjectList::MergeFrom(
        from._internal_data());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimplifiedCam::CopyFrom(const SimplifiedCam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.SimplifiedCam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplifiedCam::IsInitialized() const {
  return true;
}

void SimplifiedCam::InternalSwap(SimplifiedCam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimplifiedCam, _impl_.length_)
      + sizeof(SimplifiedCam::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(SimplifiedCam, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimplifiedCam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[8]);
}

// ===================================================================

class SimplifiedCamReply::_Internal {
 public:
};

SimplifiedCamReply::SimplifiedCamReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.SimplifiedCamReply)
}
SimplifiedCamReply::SimplifiedCamReply(const SimplifiedCamReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimplifiedCamReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.updatedat_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgid().empty()) {
    _this->_impl_.msgid_.Set(from._internal_msgid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.updatedat_, &from._impl_.updatedat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.SimplifiedCamReply)
}

inline void SimplifiedCamReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.updatedat_){int64_t{0}}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimplifiedCamReply::~SimplifiedCamReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.SimplifiedCamReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimplifiedCamReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.desc_.Destroy();
}

void SimplifiedCamReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimplifiedCamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.SimplifiedCamReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.updatedat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.updatedat_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimplifiedCamReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.SimplifiedCamReply.msgId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.SimplifiedCamReply.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.SimplifiedCamReply.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.SimplifiedCamReply.desc"));
        } else
          goto handle_unusual;
        continue;
      // int64 updatedAt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimplifiedCamReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.SimplifiedCamReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.SimplifiedCamReply.msgId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msgid(), target);
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.SimplifiedCamReply.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_srcnodeid(), target);
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.SimplifiedCamReply.toNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tonodeid(), target);
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.SimplifiedCamReply.desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.SimplifiedCamReply)
  return target;
}

size_t SimplifiedCamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.SimplifiedCamReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgId = 1;
  if (!this->_internal_msgid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgid());
  }

  // string srcNodeId = 2;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string toNodeId = 3;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int64 updatedAt = 6;
  if (this->_internal_updatedat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatedat());
  }

  // uint32 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimplifiedCamReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimplifiedCamReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimplifiedCamReply::GetClassData() const { return &_class_data_; }


void SimplifiedCamReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimplifiedCamReply*>(&to_msg);
  auto& from = static_cast<const SimplifiedCamReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.SimplifiedCamReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgid().empty()) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_updatedat() != 0) {
    _this->_internal_set_updatedat(from._internal_updatedat());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimplifiedCamReply::CopyFrom(const SimplifiedCamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.SimplifiedCamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplifiedCamReply::IsInitialized() const {
  return true;
}

void SimplifiedCamReply::InternalSwap(SimplifiedCamReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgid_, lhs_arena,
      &other->_impl_.msgid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimplifiedCamReply, _impl_.status_)
      + sizeof(SimplifiedCamReply::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SimplifiedCamReply, _impl_.updatedat_)>(
          reinterpret_cast<char*>(&_impl_.updatedat_),
          reinterpret_cast<char*>(&other->_impl_.updatedat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimplifiedCamReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cam_2eproto_getter, &descriptor_table_cam_2eproto_once,
      file_level_metadata_cam_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Cam*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Cam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Cam >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::CamReply*
Arena::CreateMaybeMessage< ::cn::seisys::dds::CamReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::CamReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::RteDistribution*
Arena::CreateMaybeMessage< ::cn::seisys::dds::RteDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::RteDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::RteDistributionReply*
Arena::CreateMaybeMessage< ::cn::seisys::dds::RteDistributionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::RteDistributionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::RtsDistribution*
Arena::CreateMaybeMessage< ::cn::seisys::dds::RtsDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::RtsDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::RtsDistributionReply*
Arena::CreateMaybeMessage< ::cn::seisys::dds::RtsDistributionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::RtsDistributionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Objects*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Objects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Objects >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::ObjectList*
Arena::CreateMaybeMessage< ::cn::seisys::dds::ObjectList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::ObjectList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::SimplifiedCam*
Arena::CreateMaybeMessage< ::cn::seisys::dds::SimplifiedCam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::SimplifiedCam >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::SimplifiedCamReply*
Arena::CreateMaybeMessage< ::cn::seisys::dds::SimplifiedCamReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::SimplifiedCamReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
