// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cam.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cam_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cam_2eproto;
namespace cn {
namespace seisys {
namespace dds {
class Cam;
struct CamDefaultTypeInternal;
extern CamDefaultTypeInternal _Cam_default_instance_;
class CamReply;
struct CamReplyDefaultTypeInternal;
extern CamReplyDefaultTypeInternal _CamReply_default_instance_;
class ObjectList;
struct ObjectListDefaultTypeInternal;
extern ObjectListDefaultTypeInternal _ObjectList_default_instance_;
class Objects;
struct ObjectsDefaultTypeInternal;
extern ObjectsDefaultTypeInternal _Objects_default_instance_;
class RteDistribution;
struct RteDistributionDefaultTypeInternal;
extern RteDistributionDefaultTypeInternal _RteDistribution_default_instance_;
class RteDistributionReply;
struct RteDistributionReplyDefaultTypeInternal;
extern RteDistributionReplyDefaultTypeInternal _RteDistributionReply_default_instance_;
class RtsDistribution;
struct RtsDistributionDefaultTypeInternal;
extern RtsDistributionDefaultTypeInternal _RtsDistribution_default_instance_;
class RtsDistributionReply;
struct RtsDistributionReplyDefaultTypeInternal;
extern RtsDistributionReplyDefaultTypeInternal _RtsDistributionReply_default_instance_;
class SimplifiedCam;
struct SimplifiedCamDefaultTypeInternal;
extern SimplifiedCamDefaultTypeInternal _SimplifiedCam_default_instance_;
class SimplifiedCamReply;
struct SimplifiedCamReplyDefaultTypeInternal;
extern SimplifiedCamReplyDefaultTypeInternal _SimplifiedCamReply_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> ::cn::seisys::dds::Cam* Arena::CreateMaybeMessage<::cn::seisys::dds::Cam>(Arena*);
template<> ::cn::seisys::dds::CamReply* Arena::CreateMaybeMessage<::cn::seisys::dds::CamReply>(Arena*);
template<> ::cn::seisys::dds::ObjectList* Arena::CreateMaybeMessage<::cn::seisys::dds::ObjectList>(Arena*);
template<> ::cn::seisys::dds::Objects* Arena::CreateMaybeMessage<::cn::seisys::dds::Objects>(Arena*);
template<> ::cn::seisys::dds::RteDistribution* Arena::CreateMaybeMessage<::cn::seisys::dds::RteDistribution>(Arena*);
template<> ::cn::seisys::dds::RteDistributionReply* Arena::CreateMaybeMessage<::cn::seisys::dds::RteDistributionReply>(Arena*);
template<> ::cn::seisys::dds::RtsDistribution* Arena::CreateMaybeMessage<::cn::seisys::dds::RtsDistribution>(Arena*);
template<> ::cn::seisys::dds::RtsDistributionReply* Arena::CreateMaybeMessage<::cn::seisys::dds::RtsDistributionReply>(Arena*);
template<> ::cn::seisys::dds::SimplifiedCam* Arena::CreateMaybeMessage<::cn::seisys::dds::SimplifiedCam>(Arena*);
template<> ::cn::seisys::dds::SimplifiedCamReply* Arena::CreateMaybeMessage<::cn::seisys::dds::SimplifiedCamReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cn {
namespace seisys {
namespace dds {

// ===================================================================

class Cam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.Cam) */ {
 public:
  inline Cam() : Cam(nullptr) {}
  ~Cam() override;
  explicit PROTOBUF_CONSTEXPR Cam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cam(const Cam& from);
  Cam(Cam&& from) noexcept
    : Cam() {
    *this = ::std::move(from);
  }

  inline Cam& operator=(const Cam& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cam& operator=(Cam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cam& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cam* internal_default_instance() {
    return reinterpret_cast<const Cam*>(
               &_Cam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cam& a, Cam& b) {
    a.Swap(&b);
  }
  inline void Swap(Cam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cam& from) {
    Cam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.Cam";
  }
  protected:
  explicit Cam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kDataFieldNumber = 6,
    kMsgTypeFieldNumber = 4,
    kLengthFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string srcNodeId = 2;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 3;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 msgType = 4;
  void clear_msgtype();
  int32_t msgtype() const;
  void set_msgtype(int32_t value);
  private:
  int32_t _internal_msgtype() const;
  void _internal_set_msgtype(int32_t value);
  public:

  // uint32 length = 5;
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // int64 createdAt = 7;
  void clear_createdat();
  int64_t createdat() const;
  void set_createdat(int64_t value);
  private:
  int64_t _internal_createdat() const;
  void _internal_set_createdat(int64_t value);
  public:

  // int64 updatedAt = 8;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.Cam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t msgtype_;
    uint32_t length_;
    int64_t createdat_;
    int64_t updatedat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class CamReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.CamReply) */ {
 public:
  inline CamReply() : CamReply(nullptr) {}
  ~CamReply() override;
  explicit PROTOBUF_CONSTEXPR CamReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamReply(const CamReply& from);
  CamReply(CamReply&& from) noexcept
    : CamReply() {
    *this = ::std::move(from);
  }

  inline CamReply& operator=(const CamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamReply& operator=(CamReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamReply* internal_default_instance() {
    return reinterpret_cast<const CamReply*>(
               &_CamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CamReply& a, CamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CamReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamReply& from) {
    CamReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.CamReply";
  }
  protected:
  explicit CamReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kReplyIdFieldNumber = 2,
    kSrcNodeIdFieldNumber = 3,
    kToNodeIdFieldNumber = 4,
    kDescFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
    kStatusFieldNumber = 5,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string replyId = 2;
  void clear_replyid();
  const std::string& replyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_replyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_replyid();
  PROTOBUF_NODISCARD std::string* release_replyid();
  void set_allocated_replyid(std::string* replyid);
  private:
  const std::string& _internal_replyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_replyid(const std::string& value);
  std::string* _internal_mutable_replyid();
  public:

  // string srcNodeId = 3;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 4;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // string desc = 6;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int64 createdAt = 7;
  void clear_createdat();
  int64_t createdat() const;
  void set_createdat(int64_t value);
  private:
  int64_t _internal_createdat() const;
  void _internal_set_createdat(int64_t value);
  public:

  // int64 updatedAt = 8;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // uint32 status = 5;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.CamReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int64_t createdat_;
    int64_t updatedat_;
    uint32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class RteDistribution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.RteDistribution) */ {
 public:
  inline RteDistribution() : RteDistribution(nullptr) {}
  ~RteDistribution() override;
  explicit PROTOBUF_CONSTEXPR RteDistribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RteDistribution(const RteDistribution& from);
  RteDistribution(RteDistribution&& from) noexcept
    : RteDistribution() {
    *this = ::std::move(from);
  }

  inline RteDistribution& operator=(const RteDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline RteDistribution& operator=(RteDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RteDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const RteDistribution* internal_default_instance() {
    return reinterpret_cast<const RteDistribution*>(
               &_RteDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RteDistribution& a, RteDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(RteDistribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RteDistribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RteDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RteDistribution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RteDistribution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RteDistribution& from) {
    RteDistribution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RteDistribution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.RteDistribution";
  }
  protected:
  explicit RteDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kDataFieldNumber = 6,
    kMsgTypeFieldNumber = 4,
    kLengthFieldNumber = 5,
    kUpdatedAtFieldNumber = 7,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string srcNodeId = 2;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 3;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 msgType = 4;
  void clear_msgtype();
  int32_t msgtype() const;
  void set_msgtype(int32_t value);
  private:
  int32_t _internal_msgtype() const;
  void _internal_set_msgtype(int32_t value);
  public:

  // uint32 length = 5;
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // int64 updatedAt = 7;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.RteDistribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t msgtype_;
    uint32_t length_;
    int64_t updatedat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class RteDistributionReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.RteDistributionReply) */ {
 public:
  inline RteDistributionReply() : RteDistributionReply(nullptr) {}
  ~RteDistributionReply() override;
  explicit PROTOBUF_CONSTEXPR RteDistributionReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RteDistributionReply(const RteDistributionReply& from);
  RteDistributionReply(RteDistributionReply&& from) noexcept
    : RteDistributionReply() {
    *this = ::std::move(from);
  }

  inline RteDistributionReply& operator=(const RteDistributionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RteDistributionReply& operator=(RteDistributionReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RteDistributionReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RteDistributionReply* internal_default_instance() {
    return reinterpret_cast<const RteDistributionReply*>(
               &_RteDistributionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RteDistributionReply& a, RteDistributionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RteDistributionReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RteDistributionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RteDistributionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RteDistributionReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RteDistributionReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RteDistributionReply& from) {
    RteDistributionReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RteDistributionReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.RteDistributionReply";
  }
  protected:
  explicit RteDistributionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kDescFieldNumber = 5,
    kUpdatedAtFieldNumber = 6,
    kStatusFieldNumber = 4,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string srcNodeId = 2;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 3;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // string desc = 5;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int64 updatedAt = 6;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // uint32 status = 4;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.RteDistributionReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int64_t updatedat_;
    uint32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class RtsDistribution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.RtsDistribution) */ {
 public:
  inline RtsDistribution() : RtsDistribution(nullptr) {}
  ~RtsDistribution() override;
  explicit PROTOBUF_CONSTEXPR RtsDistribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtsDistribution(const RtsDistribution& from);
  RtsDistribution(RtsDistribution&& from) noexcept
    : RtsDistribution() {
    *this = ::std::move(from);
  }

  inline RtsDistribution& operator=(const RtsDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtsDistribution& operator=(RtsDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtsDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtsDistribution* internal_default_instance() {
    return reinterpret_cast<const RtsDistribution*>(
               &_RtsDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RtsDistribution& a, RtsDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(RtsDistribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtsDistribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtsDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtsDistribution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtsDistribution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtsDistribution& from) {
    RtsDistribution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtsDistribution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.RtsDistribution";
  }
  protected:
  explicit RtsDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kDataFieldNumber = 6,
    kMsgTypeFieldNumber = 4,
    kLengthFieldNumber = 5,
    kUpdatedAtFieldNumber = 7,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string srcNodeId = 2;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 3;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 msgType = 4;
  void clear_msgtype();
  int32_t msgtype() const;
  void set_msgtype(int32_t value);
  private:
  int32_t _internal_msgtype() const;
  void _internal_set_msgtype(int32_t value);
  public:

  // uint32 length = 5;
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // int64 updatedAt = 7;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.RtsDistribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t msgtype_;
    uint32_t length_;
    int64_t updatedat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class RtsDistributionReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.RtsDistributionReply) */ {
 public:
  inline RtsDistributionReply() : RtsDistributionReply(nullptr) {}
  ~RtsDistributionReply() override;
  explicit PROTOBUF_CONSTEXPR RtsDistributionReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtsDistributionReply(const RtsDistributionReply& from);
  RtsDistributionReply(RtsDistributionReply&& from) noexcept
    : RtsDistributionReply() {
    *this = ::std::move(from);
  }

  inline RtsDistributionReply& operator=(const RtsDistributionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtsDistributionReply& operator=(RtsDistributionReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtsDistributionReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtsDistributionReply* internal_default_instance() {
    return reinterpret_cast<const RtsDistributionReply*>(
               &_RtsDistributionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RtsDistributionReply& a, RtsDistributionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RtsDistributionReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtsDistributionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtsDistributionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtsDistributionReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtsDistributionReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtsDistributionReply& from) {
    RtsDistributionReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtsDistributionReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.RtsDistributionReply";
  }
  protected:
  explicit RtsDistributionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kDescFieldNumber = 5,
    kUpdatedAtFieldNumber = 6,
    kStatusFieldNumber = 4,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string srcNodeId = 2;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 3;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // string desc = 5;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int64 updatedAt = 6;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // uint32 status = 4;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.RtsDistributionReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int64_t updatedat_;
    uint32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class Objects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.Objects) */ {
 public:
  inline Objects() : Objects(nullptr) {}
  ~Objects() override;
  explicit PROTOBUF_CONSTEXPR Objects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Objects(const Objects& from);
  Objects(Objects&& from) noexcept
    : Objects() {
    *this = ::std::move(from);
  }

  inline Objects& operator=(const Objects& from) {
    CopyFrom(from);
    return *this;
  }
  inline Objects& operator=(Objects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Objects& default_instance() {
    return *internal_default_instance();
  }
  static inline const Objects* internal_default_instance() {
    return reinterpret_cast<const Objects*>(
               &_Objects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Objects& a, Objects& b) {
    a.Swap(&b);
  }
  inline void Swap(Objects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Objects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Objects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Objects>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Objects& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Objects& from) {
    Objects::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Objects* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.Objects";
  }
  protected:
  explicit Objects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdListFieldNumber = 8,
    kPtcIdFieldNumber = 1,
    kLatFieldNumber = 2,
    kLonFieldNumber = 3,
    kEleFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kPtcTypeFieldNumber = 9,
    kVehTypeFieldNumber = 10,
    kDataSourceFieldNumber = 11,
    kWidthFieldNumber = 12,
    kLengthFieldNumber = 13,
    kHeightFieldNumber = 14,
  };
  // string deviceIdList = 8;
  void clear_deviceidlist();
  const std::string& deviceidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceidlist();
  PROTOBUF_NODISCARD std::string* release_deviceidlist();
  void set_allocated_deviceidlist(std::string* deviceidlist);
  private:
  const std::string& _internal_deviceidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceidlist(const std::string& value);
  std::string* _internal_mutable_deviceidlist();
  public:

  // int32 ptcId = 1;
  void clear_ptcid();
  int32_t ptcid() const;
  void set_ptcid(int32_t value);
  private:
  int32_t _internal_ptcid() const;
  void _internal_set_ptcid(int32_t value);
  public:

  // int32 lat = 2;
  void clear_lat();
  int32_t lat() const;
  void set_lat(int32_t value);
  private:
  int32_t _internal_lat() const;
  void _internal_set_lat(int32_t value);
  public:

  // int32 lon = 3;
  void clear_lon();
  int32_t lon() const;
  void set_lon(int32_t value);
  private:
  int32_t _internal_lon() const;
  void _internal_set_lon(int32_t value);
  public:

  // int32 ele = 4;
  void clear_ele();
  int32_t ele() const;
  void set_ele(int32_t value);
  private:
  int32_t _internal_ele() const;
  void _internal_set_ele(int32_t value);
  public:

  // int32 speed = 5;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // int32 heading = 6;
  void clear_heading();
  int32_t heading() const;
  void set_heading(int32_t value);
  private:
  int32_t _internal_heading() const;
  void _internal_set_heading(int32_t value);
  public:

  // int64 timestamp = 7;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 ptcType = 9;
  void clear_ptctype();
  int32_t ptctype() const;
  void set_ptctype(int32_t value);
  private:
  int32_t _internal_ptctype() const;
  void _internal_set_ptctype(int32_t value);
  public:

  // int32 vehType = 10;
  void clear_vehtype();
  int32_t vehtype() const;
  void set_vehtype(int32_t value);
  private:
  int32_t _internal_vehtype() const;
  void _internal_set_vehtype(int32_t value);
  public:

  // int32 dataSource = 11;
  void clear_datasource();
  int32_t datasource() const;
  void set_datasource(int32_t value);
  private:
  int32_t _internal_datasource() const;
  void _internal_set_datasource(int32_t value);
  public:

  // int32 width = 12;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 length = 13;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // int32 height = 14;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.Objects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceidlist_;
    int32_t ptcid_;
    int32_t lat_;
    int32_t lon_;
    int32_t ele_;
    int32_t speed_;
    int32_t heading_;
    int64_t timestamp_;
    int32_t ptctype_;
    int32_t vehtype_;
    int32_t datasource_;
    int32_t width_;
    int32_t length_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class ObjectList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.ObjectList) */ {
 public:
  inline ObjectList() : ObjectList(nullptr) {}
  ~ObjectList() override;
  explicit PROTOBUF_CONSTEXPR ObjectList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectList(const ObjectList& from);
  ObjectList(ObjectList&& from) noexcept
    : ObjectList() {
    *this = ::std::move(from);
  }

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectList& operator=(ObjectList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectList* internal_default_instance() {
    return reinterpret_cast<const ObjectList*>(
               &_ObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObjectList& a, ObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectList& from) {
    ObjectList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.ObjectList";
  }
  protected:
  explicit ObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .cn.seisys.dds.Objects items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::cn::seisys::dds::Objects* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::dds::Objects >*
      mutable_items();
  private:
  const ::cn::seisys::dds::Objects& _internal_items(int index) const;
  ::cn::seisys::dds::Objects* _internal_add_items();
  public:
  const ::cn::seisys::dds::Objects& items(int index) const;
  ::cn::seisys::dds::Objects* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::dds::Objects >&
      items() const;

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.ObjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::dds::Objects > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class SimplifiedCam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.SimplifiedCam) */ {
 public:
  inline SimplifiedCam() : SimplifiedCam(nullptr) {}
  ~SimplifiedCam() override;
  explicit PROTOBUF_CONSTEXPR SimplifiedCam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimplifiedCam(const SimplifiedCam& from);
  SimplifiedCam(SimplifiedCam&& from) noexcept
    : SimplifiedCam() {
    *this = ::std::move(from);
  }

  inline SimplifiedCam& operator=(const SimplifiedCam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplifiedCam& operator=(SimplifiedCam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimplifiedCam& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimplifiedCam* internal_default_instance() {
    return reinterpret_cast<const SimplifiedCam*>(
               &_SimplifiedCam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SimplifiedCam& a, SimplifiedCam& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplifiedCam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimplifiedCam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimplifiedCam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimplifiedCam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimplifiedCam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimplifiedCam& from) {
    SimplifiedCam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplifiedCam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.SimplifiedCam";
  }
  protected:
  explicit SimplifiedCam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kDataFieldNumber = 5,
    kUpdatedAtFieldNumber = 6,
    kLengthFieldNumber = 4,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string srcNodeId = 2;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 3;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // .cn.seisys.dds.ObjectList data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::cn::seisys::dds::ObjectList& data() const;
  PROTOBUF_NODISCARD ::cn::seisys::dds::ObjectList* release_data();
  ::cn::seisys::dds::ObjectList* mutable_data();
  void set_allocated_data(::cn::seisys::dds::ObjectList* data);
  private:
  const ::cn::seisys::dds::ObjectList& _internal_data() const;
  ::cn::seisys::dds::ObjectList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::cn::seisys::dds::ObjectList* data);
  ::cn::seisys::dds::ObjectList* unsafe_arena_release_data();

  // int64 updatedAt = 6;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // uint32 length = 4;
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.SimplifiedCam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::cn::seisys::dds::ObjectList* data_;
    int64_t updatedat_;
    uint32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// -------------------------------------------------------------------

class SimplifiedCamReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.SimplifiedCamReply) */ {
 public:
  inline SimplifiedCamReply() : SimplifiedCamReply(nullptr) {}
  ~SimplifiedCamReply() override;
  explicit PROTOBUF_CONSTEXPR SimplifiedCamReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimplifiedCamReply(const SimplifiedCamReply& from);
  SimplifiedCamReply(SimplifiedCamReply&& from) noexcept
    : SimplifiedCamReply() {
    *this = ::std::move(from);
  }

  inline SimplifiedCamReply& operator=(const SimplifiedCamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplifiedCamReply& operator=(SimplifiedCamReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimplifiedCamReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimplifiedCamReply* internal_default_instance() {
    return reinterpret_cast<const SimplifiedCamReply*>(
               &_SimplifiedCamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SimplifiedCamReply& a, SimplifiedCamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplifiedCamReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimplifiedCamReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimplifiedCamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimplifiedCamReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimplifiedCamReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimplifiedCamReply& from) {
    SimplifiedCamReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplifiedCamReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.SimplifiedCamReply";
  }
  protected:
  explicit SimplifiedCamReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kDescFieldNumber = 5,
    kUpdatedAtFieldNumber = 6,
    kStatusFieldNumber = 4,
  };
  // string msgId = 1;
  void clear_msgid();
  const std::string& msgid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgid();
  PROTOBUF_NODISCARD std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // string srcNodeId = 2;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string toNodeId = 3;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // string desc = 5;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int64 updatedAt = 6;
  void clear_updatedat();
  int64_t updatedat() const;
  void set_updatedat(int64_t value);
  private:
  int64_t _internal_updatedat() const;
  void _internal_set_updatedat(int64_t value);
  public:

  // uint32 status = 4;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.SimplifiedCamReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int64_t updatedat_;
    uint32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cam

// string msgId = 1;
inline void Cam::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& Cam::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cam::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.msgId)
}
inline std::string* Cam::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.Cam.msgId)
  return _s;
}
inline const std::string& Cam::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void Cam::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* Cam::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* Cam::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.Cam.msgId)
  return _impl_.msgid_.Release();
}
inline void Cam::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.Cam.msgId)
}

// string srcNodeId = 2;
inline void Cam::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& Cam::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cam::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.srcNodeId)
}
inline std::string* Cam::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.Cam.srcNodeId)
  return _s;
}
inline const std::string& Cam::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void Cam::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* Cam::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* Cam::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.Cam.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void Cam::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.Cam.srcNodeId)
}

// string toNodeId = 3;
inline void Cam::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& Cam::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cam::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.toNodeId)
}
inline std::string* Cam::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.Cam.toNodeId)
  return _s;
}
inline const std::string& Cam::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void Cam::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* Cam::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* Cam::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.Cam.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void Cam::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.Cam.toNodeId)
}

// int32 msgType = 4;
inline void Cam::clear_msgtype() {
  _impl_.msgtype_ = 0;
}
inline int32_t Cam::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline int32_t Cam::msgtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.msgType)
  return _internal_msgtype();
}
inline void Cam::_internal_set_msgtype(int32_t value) {
  
  _impl_.msgtype_ = value;
}
inline void Cam::set_msgtype(int32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.msgType)
}

// uint32 length = 5;
inline void Cam::clear_length() {
  _impl_.length_ = 0u;
}
inline uint32_t Cam::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t Cam::length() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.length)
  return _internal_length();
}
inline void Cam::_internal_set_length(uint32_t value) {
  
  _impl_.length_ = value;
}
inline void Cam::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.length)
}

// bytes data = 6;
inline void Cam::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Cam::data() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cam::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.data)
}
inline std::string* Cam::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.Cam.data)
  return _s;
}
inline const std::string& Cam::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Cam::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Cam::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Cam::release_data() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.Cam.data)
  return _impl_.data_.Release();
}
inline void Cam::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.Cam.data)
}

// int64 createdAt = 7;
inline void Cam::clear_createdat() {
  _impl_.createdat_ = int64_t{0};
}
inline int64_t Cam::_internal_createdat() const {
  return _impl_.createdat_;
}
inline int64_t Cam::createdat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.createdAt)
  return _internal_createdat();
}
inline void Cam::_internal_set_createdat(int64_t value) {
  
  _impl_.createdat_ = value;
}
inline void Cam::set_createdat(int64_t value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.createdAt)
}

// int64 updatedAt = 8;
inline void Cam::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t Cam::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t Cam::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Cam.updatedAt)
  return _internal_updatedat();
}
inline void Cam::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void Cam::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Cam.updatedAt)
}

// -------------------------------------------------------------------

// CamReply

// string msgId = 1;
inline void CamReply::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& CamReply::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamReply::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.msgId)
}
inline std::string* CamReply::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.CamReply.msgId)
  return _s;
}
inline const std::string& CamReply::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void CamReply::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* CamReply::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* CamReply::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.CamReply.msgId)
  return _impl_.msgid_.Release();
}
inline void CamReply::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.CamReply.msgId)
}

// string replyId = 2;
inline void CamReply::clear_replyid() {
  _impl_.replyid_.ClearToEmpty();
}
inline const std::string& CamReply::replyid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.replyId)
  return _internal_replyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamReply::set_replyid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.replyid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.replyId)
}
inline std::string* CamReply::mutable_replyid() {
  std::string* _s = _internal_mutable_replyid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.CamReply.replyId)
  return _s;
}
inline const std::string& CamReply::_internal_replyid() const {
  return _impl_.replyid_.Get();
}
inline void CamReply::_internal_set_replyid(const std::string& value) {
  
  _impl_.replyid_.Set(value, GetArenaForAllocation());
}
inline std::string* CamReply::_internal_mutable_replyid() {
  
  return _impl_.replyid_.Mutable(GetArenaForAllocation());
}
inline std::string* CamReply::release_replyid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.CamReply.replyId)
  return _impl_.replyid_.Release();
}
inline void CamReply::set_allocated_replyid(std::string* replyid) {
  if (replyid != nullptr) {
    
  } else {
    
  }
  _impl_.replyid_.SetAllocated(replyid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.replyid_.IsDefault()) {
    _impl_.replyid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.CamReply.replyId)
}

// string srcNodeId = 3;
inline void CamReply::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& CamReply::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamReply::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.srcNodeId)
}
inline std::string* CamReply::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.CamReply.srcNodeId)
  return _s;
}
inline const std::string& CamReply::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void CamReply::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* CamReply::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* CamReply::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.CamReply.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void CamReply::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.CamReply.srcNodeId)
}

// string toNodeId = 4;
inline void CamReply::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& CamReply::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamReply::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.toNodeId)
}
inline std::string* CamReply::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.CamReply.toNodeId)
  return _s;
}
inline const std::string& CamReply::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void CamReply::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* CamReply::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* CamReply::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.CamReply.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void CamReply::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.CamReply.toNodeId)
}

// uint32 status = 5;
inline void CamReply::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t CamReply::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CamReply::status() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.status)
  return _internal_status();
}
inline void CamReply::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void CamReply::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.status)
}

// string desc = 6;
inline void CamReply::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& CamReply::desc() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamReply::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.desc)
}
inline std::string* CamReply::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.CamReply.desc)
  return _s;
}
inline const std::string& CamReply::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void CamReply::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* CamReply::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* CamReply::release_desc() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.CamReply.desc)
  return _impl_.desc_.Release();
}
inline void CamReply::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.CamReply.desc)
}

// int64 createdAt = 7;
inline void CamReply::clear_createdat() {
  _impl_.createdat_ = int64_t{0};
}
inline int64_t CamReply::_internal_createdat() const {
  return _impl_.createdat_;
}
inline int64_t CamReply::createdat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.createdAt)
  return _internal_createdat();
}
inline void CamReply::_internal_set_createdat(int64_t value) {
  
  _impl_.createdat_ = value;
}
inline void CamReply::set_createdat(int64_t value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.createdAt)
}

// int64 updatedAt = 8;
inline void CamReply::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t CamReply::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t CamReply::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.CamReply.updatedAt)
  return _internal_updatedat();
}
inline void CamReply::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void CamReply::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.CamReply.updatedAt)
}

// -------------------------------------------------------------------

// RteDistribution

// string msgId = 1;
inline void RteDistribution::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& RteDistribution::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistribution.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistribution::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistribution.msgId)
}
inline std::string* RteDistribution::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistribution.msgId)
  return _s;
}
inline const std::string& RteDistribution::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void RteDistribution::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistribution::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistribution::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistribution.msgId)
  return _impl_.msgid_.Release();
}
inline void RteDistribution::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistribution.msgId)
}

// string srcNodeId = 2;
inline void RteDistribution::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& RteDistribution::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistribution.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistribution::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistribution.srcNodeId)
}
inline std::string* RteDistribution::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistribution.srcNodeId)
  return _s;
}
inline const std::string& RteDistribution::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void RteDistribution::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistribution::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistribution::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistribution.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void RteDistribution::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistribution.srcNodeId)
}

// string toNodeId = 3;
inline void RteDistribution::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& RteDistribution::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistribution.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistribution::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistribution.toNodeId)
}
inline std::string* RteDistribution::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistribution.toNodeId)
  return _s;
}
inline const std::string& RteDistribution::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void RteDistribution::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistribution::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistribution::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistribution.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void RteDistribution::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistribution.toNodeId)
}

// int32 msgType = 4;
inline void RteDistribution::clear_msgtype() {
  _impl_.msgtype_ = 0;
}
inline int32_t RteDistribution::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline int32_t RteDistribution::msgtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistribution.msgType)
  return _internal_msgtype();
}
inline void RteDistribution::_internal_set_msgtype(int32_t value) {
  
  _impl_.msgtype_ = value;
}
inline void RteDistribution::set_msgtype(int32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistribution.msgType)
}

// uint32 length = 5;
inline void RteDistribution::clear_length() {
  _impl_.length_ = 0u;
}
inline uint32_t RteDistribution::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t RteDistribution::length() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistribution.length)
  return _internal_length();
}
inline void RteDistribution::_internal_set_length(uint32_t value) {
  
  _impl_.length_ = value;
}
inline void RteDistribution::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistribution.length)
}

// bytes data = 6;
inline void RteDistribution::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RteDistribution::data() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistribution.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistribution::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistribution.data)
}
inline std::string* RteDistribution::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistribution.data)
  return _s;
}
inline const std::string& RteDistribution::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RteDistribution::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistribution::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistribution::release_data() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistribution.data)
  return _impl_.data_.Release();
}
inline void RteDistribution::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistribution.data)
}

// int64 updatedAt = 7;
inline void RteDistribution::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t RteDistribution::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t RteDistribution::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistribution.updatedAt)
  return _internal_updatedat();
}
inline void RteDistribution::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void RteDistribution::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistribution.updatedAt)
}

// -------------------------------------------------------------------

// RteDistributionReply

// string msgId = 1;
inline void RteDistributionReply::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& RteDistributionReply::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistributionReply.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistributionReply::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistributionReply.msgId)
}
inline std::string* RteDistributionReply::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistributionReply.msgId)
  return _s;
}
inline const std::string& RteDistributionReply::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void RteDistributionReply::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistributionReply::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistributionReply::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistributionReply.msgId)
  return _impl_.msgid_.Release();
}
inline void RteDistributionReply::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistributionReply.msgId)
}

// string srcNodeId = 2;
inline void RteDistributionReply::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& RteDistributionReply::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistributionReply.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistributionReply::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistributionReply.srcNodeId)
}
inline std::string* RteDistributionReply::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistributionReply.srcNodeId)
  return _s;
}
inline const std::string& RteDistributionReply::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void RteDistributionReply::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistributionReply::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistributionReply::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistributionReply.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void RteDistributionReply::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistributionReply.srcNodeId)
}

// string toNodeId = 3;
inline void RteDistributionReply::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& RteDistributionReply::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistributionReply.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistributionReply::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistributionReply.toNodeId)
}
inline std::string* RteDistributionReply::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistributionReply.toNodeId)
  return _s;
}
inline const std::string& RteDistributionReply::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void RteDistributionReply::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistributionReply::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistributionReply::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistributionReply.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void RteDistributionReply::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistributionReply.toNodeId)
}

// uint32 status = 4;
inline void RteDistributionReply::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t RteDistributionReply::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t RteDistributionReply::status() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistributionReply.status)
  return _internal_status();
}
inline void RteDistributionReply::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void RteDistributionReply::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistributionReply.status)
}

// string desc = 5;
inline void RteDistributionReply::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& RteDistributionReply::desc() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistributionReply.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RteDistributionReply::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistributionReply.desc)
}
inline std::string* RteDistributionReply::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RteDistributionReply.desc)
  return _s;
}
inline const std::string& RteDistributionReply::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void RteDistributionReply::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* RteDistributionReply::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* RteDistributionReply::release_desc() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RteDistributionReply.desc)
  return _impl_.desc_.Release();
}
inline void RteDistributionReply::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RteDistributionReply.desc)
}

// int64 updatedAt = 6;
inline void RteDistributionReply::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t RteDistributionReply::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t RteDistributionReply::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RteDistributionReply.updatedAt)
  return _internal_updatedat();
}
inline void RteDistributionReply::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void RteDistributionReply::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RteDistributionReply.updatedAt)
}

// -------------------------------------------------------------------

// RtsDistribution

// string msgId = 1;
inline void RtsDistribution::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& RtsDistribution::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistribution.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistribution::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistribution.msgId)
}
inline std::string* RtsDistribution::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistribution.msgId)
  return _s;
}
inline const std::string& RtsDistribution::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void RtsDistribution::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistribution::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistribution::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistribution.msgId)
  return _impl_.msgid_.Release();
}
inline void RtsDistribution::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistribution.msgId)
}

// string srcNodeId = 2;
inline void RtsDistribution::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& RtsDistribution::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistribution.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistribution::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistribution.srcNodeId)
}
inline std::string* RtsDistribution::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistribution.srcNodeId)
  return _s;
}
inline const std::string& RtsDistribution::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void RtsDistribution::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistribution::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistribution::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistribution.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void RtsDistribution::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistribution.srcNodeId)
}

// string toNodeId = 3;
inline void RtsDistribution::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& RtsDistribution::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistribution.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistribution::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistribution.toNodeId)
}
inline std::string* RtsDistribution::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistribution.toNodeId)
  return _s;
}
inline const std::string& RtsDistribution::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void RtsDistribution::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistribution::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistribution::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistribution.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void RtsDistribution::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistribution.toNodeId)
}

// int32 msgType = 4;
inline void RtsDistribution::clear_msgtype() {
  _impl_.msgtype_ = 0;
}
inline int32_t RtsDistribution::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline int32_t RtsDistribution::msgtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistribution.msgType)
  return _internal_msgtype();
}
inline void RtsDistribution::_internal_set_msgtype(int32_t value) {
  
  _impl_.msgtype_ = value;
}
inline void RtsDistribution::set_msgtype(int32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistribution.msgType)
}

// uint32 length = 5;
inline void RtsDistribution::clear_length() {
  _impl_.length_ = 0u;
}
inline uint32_t RtsDistribution::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t RtsDistribution::length() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistribution.length)
  return _internal_length();
}
inline void RtsDistribution::_internal_set_length(uint32_t value) {
  
  _impl_.length_ = value;
}
inline void RtsDistribution::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistribution.length)
}

// bytes data = 6;
inline void RtsDistribution::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RtsDistribution::data() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistribution.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistribution::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistribution.data)
}
inline std::string* RtsDistribution::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistribution.data)
  return _s;
}
inline const std::string& RtsDistribution::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RtsDistribution::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistribution::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistribution::release_data() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistribution.data)
  return _impl_.data_.Release();
}
inline void RtsDistribution::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistribution.data)
}

// int64 updatedAt = 7;
inline void RtsDistribution::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t RtsDistribution::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t RtsDistribution::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistribution.updatedAt)
  return _internal_updatedat();
}
inline void RtsDistribution::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void RtsDistribution::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistribution.updatedAt)
}

// -------------------------------------------------------------------

// RtsDistributionReply

// string msgId = 1;
inline void RtsDistributionReply::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& RtsDistributionReply::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistributionReply.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistributionReply::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistributionReply.msgId)
}
inline std::string* RtsDistributionReply::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistributionReply.msgId)
  return _s;
}
inline const std::string& RtsDistributionReply::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void RtsDistributionReply::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistributionReply.msgId)
  return _impl_.msgid_.Release();
}
inline void RtsDistributionReply::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistributionReply.msgId)
}

// string srcNodeId = 2;
inline void RtsDistributionReply::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& RtsDistributionReply::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistributionReply.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistributionReply::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistributionReply.srcNodeId)
}
inline std::string* RtsDistributionReply::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistributionReply.srcNodeId)
  return _s;
}
inline const std::string& RtsDistributionReply::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void RtsDistributionReply::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistributionReply.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void RtsDistributionReply::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistributionReply.srcNodeId)
}

// string toNodeId = 3;
inline void RtsDistributionReply::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& RtsDistributionReply::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistributionReply.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistributionReply::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistributionReply.toNodeId)
}
inline std::string* RtsDistributionReply::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistributionReply.toNodeId)
  return _s;
}
inline const std::string& RtsDistributionReply::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void RtsDistributionReply::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistributionReply.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void RtsDistributionReply::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistributionReply.toNodeId)
}

// uint32 status = 4;
inline void RtsDistributionReply::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t RtsDistributionReply::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t RtsDistributionReply::status() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistributionReply.status)
  return _internal_status();
}
inline void RtsDistributionReply::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void RtsDistributionReply::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistributionReply.status)
}

// string desc = 5;
inline void RtsDistributionReply::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& RtsDistributionReply::desc() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistributionReply.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtsDistributionReply::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistributionReply.desc)
}
inline std::string* RtsDistributionReply::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.RtsDistributionReply.desc)
  return _s;
}
inline const std::string& RtsDistributionReply::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void RtsDistributionReply::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* RtsDistributionReply::release_desc() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.RtsDistributionReply.desc)
  return _impl_.desc_.Release();
}
inline void RtsDistributionReply::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.RtsDistributionReply.desc)
}

// int64 updatedAt = 6;
inline void RtsDistributionReply::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t RtsDistributionReply::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t RtsDistributionReply::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.RtsDistributionReply.updatedAt)
  return _internal_updatedat();
}
inline void RtsDistributionReply::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void RtsDistributionReply::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.RtsDistributionReply.updatedAt)
}

// -------------------------------------------------------------------

// Objects

// int32 ptcId = 1;
inline void Objects::clear_ptcid() {
  _impl_.ptcid_ = 0;
}
inline int32_t Objects::_internal_ptcid() const {
  return _impl_.ptcid_;
}
inline int32_t Objects::ptcid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.ptcId)
  return _internal_ptcid();
}
inline void Objects::_internal_set_ptcid(int32_t value) {
  
  _impl_.ptcid_ = value;
}
inline void Objects::set_ptcid(int32_t value) {
  _internal_set_ptcid(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.ptcId)
}

// int32 lat = 2;
inline void Objects::clear_lat() {
  _impl_.lat_ = 0;
}
inline int32_t Objects::_internal_lat() const {
  return _impl_.lat_;
}
inline int32_t Objects::lat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.lat)
  return _internal_lat();
}
inline void Objects::_internal_set_lat(int32_t value) {
  
  _impl_.lat_ = value;
}
inline void Objects::set_lat(int32_t value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.lat)
}

// int32 lon = 3;
inline void Objects::clear_lon() {
  _impl_.lon_ = 0;
}
inline int32_t Objects::_internal_lon() const {
  return _impl_.lon_;
}
inline int32_t Objects::lon() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.lon)
  return _internal_lon();
}
inline void Objects::_internal_set_lon(int32_t value) {
  
  _impl_.lon_ = value;
}
inline void Objects::set_lon(int32_t value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.lon)
}

// int32 ele = 4;
inline void Objects::clear_ele() {
  _impl_.ele_ = 0;
}
inline int32_t Objects::_internal_ele() const {
  return _impl_.ele_;
}
inline int32_t Objects::ele() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.ele)
  return _internal_ele();
}
inline void Objects::_internal_set_ele(int32_t value) {
  
  _impl_.ele_ = value;
}
inline void Objects::set_ele(int32_t value) {
  _internal_set_ele(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.ele)
}

// int32 speed = 5;
inline void Objects::clear_speed() {
  _impl_.speed_ = 0;
}
inline int32_t Objects::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t Objects::speed() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.speed)
  return _internal_speed();
}
inline void Objects::_internal_set_speed(int32_t value) {
  
  _impl_.speed_ = value;
}
inline void Objects::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.speed)
}

// int32 heading = 6;
inline void Objects::clear_heading() {
  _impl_.heading_ = 0;
}
inline int32_t Objects::_internal_heading() const {
  return _impl_.heading_;
}
inline int32_t Objects::heading() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.heading)
  return _internal_heading();
}
inline void Objects::_internal_set_heading(int32_t value) {
  
  _impl_.heading_ = value;
}
inline void Objects::set_heading(int32_t value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.heading)
}

// int64 timestamp = 7;
inline void Objects::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t Objects::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t Objects::timestamp() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.timestamp)
  return _internal_timestamp();
}
inline void Objects::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Objects::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.timestamp)
}

// string deviceIdList = 8;
inline void Objects::clear_deviceidlist() {
  _impl_.deviceidlist_.ClearToEmpty();
}
inline const std::string& Objects::deviceidlist() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.deviceIdList)
  return _internal_deviceidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Objects::set_deviceidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceidlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.deviceIdList)
}
inline std::string* Objects::mutable_deviceidlist() {
  std::string* _s = _internal_mutable_deviceidlist();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.Objects.deviceIdList)
  return _s;
}
inline const std::string& Objects::_internal_deviceidlist() const {
  return _impl_.deviceidlist_.Get();
}
inline void Objects::_internal_set_deviceidlist(const std::string& value) {
  
  _impl_.deviceidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* Objects::_internal_mutable_deviceidlist() {
  
  return _impl_.deviceidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* Objects::release_deviceidlist() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.Objects.deviceIdList)
  return _impl_.deviceidlist_.Release();
}
inline void Objects::set_allocated_deviceidlist(std::string* deviceidlist) {
  if (deviceidlist != nullptr) {
    
  } else {
    
  }
  _impl_.deviceidlist_.SetAllocated(deviceidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceidlist_.IsDefault()) {
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.Objects.deviceIdList)
}

// int32 ptcType = 9;
inline void Objects::clear_ptctype() {
  _impl_.ptctype_ = 0;
}
inline int32_t Objects::_internal_ptctype() const {
  return _impl_.ptctype_;
}
inline int32_t Objects::ptctype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.ptcType)
  return _internal_ptctype();
}
inline void Objects::_internal_set_ptctype(int32_t value) {
  
  _impl_.ptctype_ = value;
}
inline void Objects::set_ptctype(int32_t value) {
  _internal_set_ptctype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.ptcType)
}

// int32 vehType = 10;
inline void Objects::clear_vehtype() {
  _impl_.vehtype_ = 0;
}
inline int32_t Objects::_internal_vehtype() const {
  return _impl_.vehtype_;
}
inline int32_t Objects::vehtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.vehType)
  return _internal_vehtype();
}
inline void Objects::_internal_set_vehtype(int32_t value) {
  
  _impl_.vehtype_ = value;
}
inline void Objects::set_vehtype(int32_t value) {
  _internal_set_vehtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.vehType)
}

// int32 dataSource = 11;
inline void Objects::clear_datasource() {
  _impl_.datasource_ = 0;
}
inline int32_t Objects::_internal_datasource() const {
  return _impl_.datasource_;
}
inline int32_t Objects::datasource() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.dataSource)
  return _internal_datasource();
}
inline void Objects::_internal_set_datasource(int32_t value) {
  
  _impl_.datasource_ = value;
}
inline void Objects::set_datasource(int32_t value) {
  _internal_set_datasource(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.dataSource)
}

// int32 width = 12;
inline void Objects::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Objects::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Objects::width() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.width)
  return _internal_width();
}
inline void Objects::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Objects::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.width)
}

// int32 length = 13;
inline void Objects::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t Objects::_internal_length() const {
  return _impl_.length_;
}
inline int32_t Objects::length() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.length)
  return _internal_length();
}
inline void Objects::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void Objects::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.length)
}

// int32 height = 14;
inline void Objects::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Objects::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Objects::height() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.Objects.height)
  return _internal_height();
}
inline void Objects::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Objects::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.Objects.height)
}

// -------------------------------------------------------------------

// ObjectList

// repeated .cn.seisys.dds.Objects items = 1;
inline int ObjectList::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ObjectList::items_size() const {
  return _internal_items_size();
}
inline void ObjectList::clear_items() {
  _impl_.items_.Clear();
}
inline ::cn::seisys::dds::Objects* ObjectList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.ObjectList.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::dds::Objects >*
ObjectList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.dds.ObjectList.items)
  return &_impl_.items_;
}
inline const ::cn::seisys::dds::Objects& ObjectList::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::cn::seisys::dds::Objects& ObjectList::items(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.ObjectList.items)
  return _internal_items(index);
}
inline ::cn::seisys::dds::Objects* ObjectList::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::cn::seisys::dds::Objects* ObjectList::add_items() {
  ::cn::seisys::dds::Objects* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:cn.seisys.dds.ObjectList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::dds::Objects >&
ObjectList::items() const {
  // @@protoc_insertion_point(field_list:cn.seisys.dds.ObjectList.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// SimplifiedCam

// string msgId = 1;
inline void SimplifiedCam::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& SimplifiedCam::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCam.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplifiedCam::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCam.msgId)
}
inline std::string* SimplifiedCam::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCam.msgId)
  return _s;
}
inline const std::string& SimplifiedCam::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void SimplifiedCam::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* SimplifiedCam::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* SimplifiedCam::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCam.msgId)
  return _impl_.msgid_.Release();
}
inline void SimplifiedCam::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCam.msgId)
}

// string srcNodeId = 2;
inline void SimplifiedCam::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& SimplifiedCam::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCam.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplifiedCam::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCam.srcNodeId)
}
inline std::string* SimplifiedCam::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCam.srcNodeId)
  return _s;
}
inline const std::string& SimplifiedCam::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void SimplifiedCam::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* SimplifiedCam::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* SimplifiedCam::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCam.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void SimplifiedCam::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCam.srcNodeId)
}

// string toNodeId = 3;
inline void SimplifiedCam::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& SimplifiedCam::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCam.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplifiedCam::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCam.toNodeId)
}
inline std::string* SimplifiedCam::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCam.toNodeId)
  return _s;
}
inline const std::string& SimplifiedCam::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void SimplifiedCam::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* SimplifiedCam::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* SimplifiedCam::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCam.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void SimplifiedCam::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCam.toNodeId)
}

// uint32 length = 4;
inline void SimplifiedCam::clear_length() {
  _impl_.length_ = 0u;
}
inline uint32_t SimplifiedCam::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t SimplifiedCam::length() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCam.length)
  return _internal_length();
}
inline void SimplifiedCam::_internal_set_length(uint32_t value) {
  
  _impl_.length_ = value;
}
inline void SimplifiedCam::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCam.length)
}

// .cn.seisys.dds.ObjectList data = 5;
inline bool SimplifiedCam::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool SimplifiedCam::has_data() const {
  return _internal_has_data();
}
inline void SimplifiedCam::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::cn::seisys::dds::ObjectList& SimplifiedCam::_internal_data() const {
  const ::cn::seisys::dds::ObjectList* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cn::seisys::dds::ObjectList&>(
      ::cn::seisys::dds::_ObjectList_default_instance_);
}
inline const ::cn::seisys::dds::ObjectList& SimplifiedCam::data() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCam.data)
  return _internal_data();
}
inline void SimplifiedCam::unsafe_arena_set_allocated_data(
    ::cn::seisys::dds::ObjectList* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cn.seisys.dds.SimplifiedCam.data)
}
inline ::cn::seisys::dds::ObjectList* SimplifiedCam::release_data() {
  
  ::cn::seisys::dds::ObjectList* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cn::seisys::dds::ObjectList* SimplifiedCam::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCam.data)
  
  ::cn::seisys::dds::ObjectList* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::cn::seisys::dds::ObjectList* SimplifiedCam::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cn::seisys::dds::ObjectList>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::cn::seisys::dds::ObjectList* SimplifiedCam::mutable_data() {
  ::cn::seisys::dds::ObjectList* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCam.data)
  return _msg;
}
inline void SimplifiedCam::set_allocated_data(::cn::seisys::dds::ObjectList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCam.data)
}

// int64 updatedAt = 6;
inline void SimplifiedCam::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t SimplifiedCam::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t SimplifiedCam::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCam.updatedAt)
  return _internal_updatedat();
}
inline void SimplifiedCam::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void SimplifiedCam::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCam.updatedAt)
}

// -------------------------------------------------------------------

// SimplifiedCamReply

// string msgId = 1;
inline void SimplifiedCamReply::clear_msgid() {
  _impl_.msgid_.ClearToEmpty();
}
inline const std::string& SimplifiedCamReply::msgid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCamReply.msgId)
  return _internal_msgid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplifiedCamReply::set_msgid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCamReply.msgId)
}
inline std::string* SimplifiedCamReply::mutable_msgid() {
  std::string* _s = _internal_mutable_msgid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCamReply.msgId)
  return _s;
}
inline const std::string& SimplifiedCamReply::_internal_msgid() const {
  return _impl_.msgid_.Get();
}
inline void SimplifiedCamReply::_internal_set_msgid(const std::string& value) {
  
  _impl_.msgid_.Set(value, GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::_internal_mutable_msgid() {
  
  return _impl_.msgid_.Mutable(GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::release_msgid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCamReply.msgId)
  return _impl_.msgid_.Release();
}
inline void SimplifiedCamReply::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  _impl_.msgid_.SetAllocated(msgid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgid_.IsDefault()) {
    _impl_.msgid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCamReply.msgId)
}

// string srcNodeId = 2;
inline void SimplifiedCamReply::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& SimplifiedCamReply::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCamReply.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplifiedCamReply::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCamReply.srcNodeId)
}
inline std::string* SimplifiedCamReply::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCamReply.srcNodeId)
  return _s;
}
inline const std::string& SimplifiedCamReply::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void SimplifiedCamReply::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCamReply.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void SimplifiedCamReply::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCamReply.srcNodeId)
}

// string toNodeId = 3;
inline void SimplifiedCamReply::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& SimplifiedCamReply::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCamReply.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplifiedCamReply::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCamReply.toNodeId)
}
inline std::string* SimplifiedCamReply::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCamReply.toNodeId)
  return _s;
}
inline const std::string& SimplifiedCamReply::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void SimplifiedCamReply::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCamReply.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void SimplifiedCamReply::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCamReply.toNodeId)
}

// uint32 status = 4;
inline void SimplifiedCamReply::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t SimplifiedCamReply::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t SimplifiedCamReply::status() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCamReply.status)
  return _internal_status();
}
inline void SimplifiedCamReply::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void SimplifiedCamReply::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCamReply.status)
}

// string desc = 5;
inline void SimplifiedCamReply::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& SimplifiedCamReply::desc() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCamReply.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimplifiedCamReply::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCamReply.desc)
}
inline std::string* SimplifiedCamReply::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.SimplifiedCamReply.desc)
  return _s;
}
inline const std::string& SimplifiedCamReply::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void SimplifiedCamReply::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* SimplifiedCamReply::release_desc() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.SimplifiedCamReply.desc)
  return _impl_.desc_.Release();
}
inline void SimplifiedCamReply::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.SimplifiedCamReply.desc)
}

// int64 updatedAt = 6;
inline void SimplifiedCamReply::clear_updatedat() {
  _impl_.updatedat_ = int64_t{0};
}
inline int64_t SimplifiedCamReply::_internal_updatedat() const {
  return _impl_.updatedat_;
}
inline int64_t SimplifiedCamReply::updatedat() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.SimplifiedCamReply.updatedAt)
  return _internal_updatedat();
}
inline void SimplifiedCamReply::_internal_set_updatedat(int64_t value) {
  
  _impl_.updatedat_ = value;
}
inline void SimplifiedCamReply::set_updatedat(int64_t value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.SimplifiedCamReply.updatedAt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dds
}  // namespace seisys
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cam_2eproto
