// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiPathDatas.proto

#include "MultiPathDatas.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {
PROTOBUF_CONSTEXPR RadarPath::RadarPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.objid_)*/0
  , /*decltype(_impl_.elevation_)*/0
  , /*decltype(_impl_.lattitude_)*/0
  , /*decltype(_impl_.objx_)*/0
  , /*decltype(_impl_.objy_)*/0
  , /*decltype(_impl_.objz_)*/0
  , /*decltype(_impl_.obj_enu_x_)*/0
  , /*decltype(_impl_.obj_enu_y_)*/0
  , /*decltype(_impl_.obj_enu_z_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.speedx_)*/0
  , /*decltype(_impl_.speedy_)*/0
  , /*decltype(_impl_.speedz_)*/0
  , /*decltype(_impl_.speed_enu_x_)*/0
  , /*decltype(_impl_.speed_enu_y_)*/0
  , /*decltype(_impl_.speed_enu_z_)*/0
  , /*decltype(_impl_.objori_)*/0
  , /*decltype(_impl_.speedheading_)*/0
  , /*decltype(_impl_.objwidth_)*/0
  , /*decltype(_impl_.objlength_)*/0
  , /*decltype(_impl_.objheight_)*/0
  , /*decltype(_impl_.aclr_)*/0
  , /*decltype(_impl_.aclrangle_)*/0
  , /*decltype(_impl_.aclr_x_)*/0
  , /*decltype(_impl_.aclr_y_)*/0
  , /*decltype(_impl_.aclr_z_)*/0
  , /*decltype(_impl_.aclr_enu_x_)*/0
  , /*decltype(_impl_.aclr_enu_y_)*/0
  , /*decltype(_impl_.aclr_enu_z_)*/0
  , /*decltype(_impl_.objstate_)*/0
  , /*decltype(_impl_.objcf_)*/0
  , /*decltype(_impl_.objtype_)*/0
  , /*decltype(_impl_.objkind_)*/0
  , /*decltype(_impl_.objdist_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RadarPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarPathDefaultTypeInternal() {}
  union {
    RadarPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarPathDefaultTypeInternal _RadarPath_default_instance_;
PROTOBUF_CONSTEXPR CameraPath::CameraPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plateno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vehcolor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.globalspaceinfo_)*/nullptr
  , /*decltype(_impl_.objid_)*/0
  , /*decltype(_impl_.laneno_)*/0
  , /*decltype(_impl_.platecolor_)*/0
  , /*decltype(_impl_.vehtype_)*/0
  , /*decltype(_impl_.objx_)*/0
  , /*decltype(_impl_.objy_)*/0
  , /*decltype(_impl_.objdistx_)*/0
  , /*decltype(_impl_.objdisty_)*/0
  , /*decltype(_impl_.objbottommidx_)*/0
  , /*decltype(_impl_.objbottommidy_)*/0
  , /*decltype(_impl_.objcf_)*/0
  , /*decltype(_impl_.objkind_)*/0
  , /*decltype(_impl_.objimgtop_)*/0u
  , /*decltype(_impl_.objimgleft_)*/0u
  , /*decltype(_impl_.objimgright_)*/0u
  , /*decltype(_impl_.objimgbottom_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraPathDefaultTypeInternal() {}
  union {
    CameraPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraPathDefaultTypeInternal _CameraPath_default_instance_;
PROTOBUF_CONSTEXPR GlobalSpaceInfo::GlobalSpaceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_gnss_)*/nullptr
  , /*decltype(_impl_.position_utm_)*/nullptr
  , /*decltype(_impl_.objori_)*/0
  , /*decltype(_impl_.objwidth_)*/0
  , /*decltype(_impl_.objlength_)*/0
  , /*decltype(_impl_.objheight_)*/0
  , /*decltype(_impl_.speedx_)*/0
  , /*decltype(_impl_.speedy_)*/0
  , /*decltype(_impl_.speedz_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GlobalSpaceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalSpaceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalSpaceInfoDefaultTypeInternal() {}
  union {
    GlobalSpaceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalSpaceInfoDefaultTypeInternal _GlobalSpaceInfo_default_instance_;
PROTOBUF_CONSTEXPR GNSSPosition::GNSSPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GNSSPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GNSSPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GNSSPositionDefaultTypeInternal() {}
  union {
    GNSSPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GNSSPositionDefaultTypeInternal _GNSSPosition_default_instance_;
PROTOBUF_CONSTEXPR UTMPosition::UTMPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UTMPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTMPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTMPositionDefaultTypeInternal() {}
  union {
    UTMPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTMPositionDefaultTypeInternal _UTMPosition_default_instance_;
PROTOBUF_CONSTEXPR RadarDevPathList::RadarDevPathList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.radarpathlist_)*/{}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datatime_)*/int64_t{0}
  , /*decltype(_impl_.processtime_)*/int64_t{0}
  , /*decltype(_impl_.commrcvtime_)*/int64_t{0}
  , /*decltype(_impl_.areano_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RadarDevPathListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarDevPathListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarDevPathListDefaultTypeInternal() {}
  union {
    RadarDevPathList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarDevPathListDefaultTypeInternal _RadarDevPathList_default_instance_;
PROTOBUF_CONSTEXPR CameraPathList::CameraPathList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camerapathlist_)*/{}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datatime_)*/int64_t{0}
  , /*decltype(_impl_.captype_)*/0
  , /*decltype(_impl_.objcount_)*/0
  , /*decltype(_impl_.processtime_)*/int64_t{0}
  , /*decltype(_impl_.commrcvtime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraPathListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraPathListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraPathListDefaultTypeInternal() {}
  union {
    CameraPathList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraPathListDefaultTypeInternal _CameraPathList_default_instance_;
PROTOBUF_CONSTEXPR MultiPathDatas::MultiPathDatas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lidarpathlist_)*/{}
  , /*decltype(_impl_.mwrpathlist_)*/{}
  , /*decltype(_impl_.camerapathlist_)*/{}
  , /*decltype(_impl_.sendtime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiPathDatasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiPathDatasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiPathDatasDefaultTypeInternal() {}
  union {
    MultiPathDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiPathDatasDefaultTypeInternal _MultiPathDatas_default_instance_;
}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn
static ::_pb::Metadata file_level_metadata_MultiPathDatas_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MultiPathDatas_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MultiPathDatas_2eproto = nullptr;

const uint32_t TableStruct_MultiPathDatas_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.lattitude_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.elevation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objz_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.obj_enu_x_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.obj_enu_y_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.obj_enu_z_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speedx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speedy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speedz_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speed_enu_x_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speed_enu_y_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speed_enu_z_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objori_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.speedheading_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objwidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objlength_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objheight_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclr_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclrangle_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclr_x_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclr_y_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclr_z_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclr_enu_x_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclr_enu_y_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.aclr_enu_z_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objstate_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objcf_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objkind_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarPath, _impl_.objdist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.laneno_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.plateno_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.platecolor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.vehtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.vehcolor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objdistx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objdisty_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objbottommidx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objbottommidy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.globalspaceinfo_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objcf_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objkind_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objimgtop_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objimgleft_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objimgright_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPath, _impl_.objimgbottom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.position_gnss_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.position_utm_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.objori_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.objwidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.objlength_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.objheight_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.speedx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.speedy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.speedz_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GNSSPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GNSSPosition, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::GNSSPosition, _impl_.latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::UTMPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::UTMPosition, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::UTMPosition, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList, _impl_.datatime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList, _impl_.areano_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList, _impl_.radarpathlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList, _impl_.processtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList, _impl_.commrcvtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _impl_.datatime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _impl_.captype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _impl_.objcount_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _impl_.camerapathlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _impl_.processtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::CameraPathList, _impl_.commrcvtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::MultiPathDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::MultiPathDatas, _impl_.sendtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::MultiPathDatas, _impl_.lidarpathlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::MultiPathDatas, _impl_.mwrpathlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::MultiPathDatas, _impl_.camerapathlist_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::RadarPath)},
  { 41, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::CameraPath)},
  { 66, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo)},
  { 82, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::GNSSPosition)},
  { 90, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::UTMPosition)},
  { 98, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::RadarDevPathList)},
  { 110, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::CameraPathList)},
  { 123, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::MultiPathDatas)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::seisys::rbx::comm::bean::multi::_RadarPath_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_CameraPath_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_GlobalSpaceInfo_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_GNSSPosition_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_UTMPosition_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_RadarDevPathList_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_CameraPathList_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_MultiPathDatas_default_instance_._instance,
};

const char descriptor_table_protodef_MultiPathDatas_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MultiPathDatas.proto\022\035cn.seisys.rbx.co"
  "mm.bean.multi\"\363\004\n\tRadarPath\022\r\n\005objID\030\001 \001"
  "(\005\022\021\n\tlongitude\030\002 \001(\001\022\021\n\tlattitude\030\003 \001(\001"
  "\022\021\n\televation\030\004 \001(\021\022\014\n\004objX\030\005 \001(\002\022\014\n\004obj"
  "Y\030\006 \001(\002\022\014\n\004objZ\030\007 \001(\002\022\021\n\tobj_ENU_X\030\010 \001(\002"
  "\022\021\n\tobj_ENU_Y\030\t \001(\002\022\021\n\tobj_ENU_Z\030\n \001(\002\022\r"
  "\n\005speed\030\013 \001(\021\022\016\n\006speedX\030\014 \001(\021\022\016\n\006speedY\030"
  "\r \001(\021\022\016\n\006speedZ\030\016 \001(\021\022\023\n\013speed_ENU_X\030\017 \001"
  "(\021\022\023\n\013speed_ENU_Y\030\020 \001(\021\022\023\n\013speed_ENU_Z\030\021"
  " \001(\021\022\016\n\006objOri\030\022 \001(\005\022\024\n\014speedHeading\030\023 \001"
  "(\005\022\020\n\010objWidth\030\024 \001(\005\022\021\n\tobjLength\030\025 \001(\005\022"
  "\021\n\tobjHeight\030\026 \001(\005\022\014\n\004aclr\030\027 \001(\021\022\021\n\taclr"
  "Angle\030\030 \001(\005\022\016\n\006aclr_x\030\031 \001(\021\022\016\n\006aclr_y\030\032 "
  "\001(\021\022\016\n\006aclr_z\030\033 \001(\021\022\022\n\naclr_enu_x\030\034 \001(\021\022"
  "\022\n\naclr_enu_y\030\035 \001(\021\022\022\n\naclr_enu_z\030\036 \001(\021\022"
  "\020\n\010objState\030\037 \001(\005\022\r\n\005objCf\030  \001(\005\022\017\n\007objT"
  "ype\030! \001(\005\022\017\n\007objKind\030\" \001(\005\022\017\n\007objDist\030# "
  "\001(\002\"\234\003\n\nCameraPath\022\r\n\005objID\030\001 \001(\005\022\016\n\006lan"
  "eNo\030\002 \001(\005\022\017\n\007plateNo\030\003 \001(\t\022\022\n\nplateColor"
  "\030\004 \001(\005\022\017\n\007vehType\030\005 \001(\005\022\020\n\010vehColor\030\006 \001("
  "\t\022\014\n\004objX\030\007 \001(\005\022\014\n\004objY\030\010 \001(\005\022\020\n\010objDist"
  "X\030\t \001(\005\022\020\n\010objDistY\030\n \001(\005\022\025\n\robjBottomMi"
  "dX\030\013 \001(\005\022\025\n\robjBottomMidY\030\014 \001(\005\022G\n\017globa"
  "lSpaceInfo\030\r \001(\0132..cn.seisys.rbx.comm.be"
  "an.multi.GlobalSpaceInfo\022\r\n\005objCf\030\016 \001(\005\022"
  "\017\n\007objKind\030\017 \001(\005\022\021\n\tobjImgTop\030\020 \001(\r\022\022\n\no"
  "bjImgLeft\030\021 \001(\r\022\023\n\013objImgRight\030\022 \001(\r\022\024\n\014"
  "objImgBottom\030\023 \001(\r\"\236\002\n\017GlobalSpaceInfo\022B"
  "\n\rposition_gnss\030\001 \001(\0132+.cn.seisys.rbx.co"
  "mm.bean.multi.GNSSPosition\022@\n\014position_u"
  "tm\030\002 \001(\0132*.cn.seisys.rbx.comm.bean.multi"
  ".UTMPosition\022\016\n\006objOri\030\003 \001(\005\022\020\n\010objWidth"
  "\030\004 \001(\005\022\021\n\tobjLength\030\005 \001(\005\022\021\n\tobjHeight\030\006"
  " \001(\005\022\016\n\006speedX\030\007 \001(\005\022\016\n\006speedY\030\010 \001(\005\022\016\n\006"
  "speedZ\030\t \001(\005\022\r\n\005speed\030\n \001(\005\"3\n\014GNSSPosit"
  "ion\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001"
  "\"#\n\013UTMPosition\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"\261\001"
  "\n\020RadarDevPathList\022\020\n\010dataTime\030\001 \001(\003\022\020\n\010"
  "deviceID\030\002 \001(\t\022\016\n\006areaNo\030\003 \001(\005\022\?\n\rradarP"
  "athList\030\004 \003(\0132(.cn.seisys.rbx.comm.bean."
  "multi.RadarPath\022\023\n\013processTime\030\005 \001(\003\022\023\n\013"
  "commRcvTime\030\006 \001(\003\"\304\001\n\016CameraPathList\022\020\n\010"
  "dataTime\030\001 \001(\003\022\020\n\010deviceID\030\002 \001(\t\022\017\n\007capT"
  "ype\030\003 \001(\005\022\020\n\010objCount\030\004 \001(\005\022A\n\016cameraPat"
  "hList\030\005 \003(\0132).cn.seisys.rbx.comm.bean.mu"
  "lti.CameraPath\022\023\n\013processTime\030\006 \001(\003\022\023\n\013c"
  "ommRcvTime\030\007 \001(\003\"\367\001\n\016MultiPathDatas\022\020\n\010s"
  "endTime\030\001 \001(\003\022F\n\rlidarPathList\030\002 \003(\0132/.c"
  "n.seisys.rbx.comm.bean.multi.RadarDevPat"
  "hList\022D\n\013mwrPathList\030\003 \003(\0132/.cn.seisys.r"
  "bx.comm.bean.multi.RadarDevPathList\022E\n\016c"
  "ameraPathList\030\004 \003(\0132-.cn.seisys.rbx.comm"
  ".bean.multi.CameraPathListB4\n\035cn.seisys."
  "rbx.comm.bean.multiB\023MultiPathDataProtos"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_MultiPathDatas_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MultiPathDatas_2eproto = {
    false, false, 2168, descriptor_table_protodef_MultiPathDatas_2eproto,
    "MultiPathDatas.proto",
    &descriptor_table_MultiPathDatas_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_MultiPathDatas_2eproto::offsets,
    file_level_metadata_MultiPathDatas_2eproto, file_level_enum_descriptors_MultiPathDatas_2eproto,
    file_level_service_descriptors_MultiPathDatas_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MultiPathDatas_2eproto_getter() {
  return &descriptor_table_MultiPathDatas_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MultiPathDatas_2eproto(&descriptor_table_MultiPathDatas_2eproto);
namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {

// ===================================================================

class RadarPath::_Internal {
 public:
};

RadarPath::RadarPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.RadarPath)
}
RadarPath::RadarPath(const RadarPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){}
    , decltype(_impl_.objid_){}
    , decltype(_impl_.elevation_){}
    , decltype(_impl_.lattitude_){}
    , decltype(_impl_.objx_){}
    , decltype(_impl_.objy_){}
    , decltype(_impl_.objz_){}
    , decltype(_impl_.obj_enu_x_){}
    , decltype(_impl_.obj_enu_y_){}
    , decltype(_impl_.obj_enu_z_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.speedx_){}
    , decltype(_impl_.speedy_){}
    , decltype(_impl_.speedz_){}
    , decltype(_impl_.speed_enu_x_){}
    , decltype(_impl_.speed_enu_y_){}
    , decltype(_impl_.speed_enu_z_){}
    , decltype(_impl_.objori_){}
    , decltype(_impl_.speedheading_){}
    , decltype(_impl_.objwidth_){}
    , decltype(_impl_.objlength_){}
    , decltype(_impl_.objheight_){}
    , decltype(_impl_.aclr_){}
    , decltype(_impl_.aclrangle_){}
    , decltype(_impl_.aclr_x_){}
    , decltype(_impl_.aclr_y_){}
    , decltype(_impl_.aclr_z_){}
    , decltype(_impl_.aclr_enu_x_){}
    , decltype(_impl_.aclr_enu_y_){}
    , decltype(_impl_.aclr_enu_z_){}
    , decltype(_impl_.objstate_){}
    , decltype(_impl_.objcf_){}
    , decltype(_impl_.objtype_){}
    , decltype(_impl_.objkind_){}
    , decltype(_impl_.objdist_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objdist_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.objdist_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.RadarPath)
}

inline void RadarPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){0}
    , decltype(_impl_.objid_){0}
    , decltype(_impl_.elevation_){0}
    , decltype(_impl_.lattitude_){0}
    , decltype(_impl_.objx_){0}
    , decltype(_impl_.objy_){0}
    , decltype(_impl_.objz_){0}
    , decltype(_impl_.obj_enu_x_){0}
    , decltype(_impl_.obj_enu_y_){0}
    , decltype(_impl_.obj_enu_z_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.speedx_){0}
    , decltype(_impl_.speedy_){0}
    , decltype(_impl_.speedz_){0}
    , decltype(_impl_.speed_enu_x_){0}
    , decltype(_impl_.speed_enu_y_){0}
    , decltype(_impl_.speed_enu_z_){0}
    , decltype(_impl_.objori_){0}
    , decltype(_impl_.speedheading_){0}
    , decltype(_impl_.objwidth_){0}
    , decltype(_impl_.objlength_){0}
    , decltype(_impl_.objheight_){0}
    , decltype(_impl_.aclr_){0}
    , decltype(_impl_.aclrangle_){0}
    , decltype(_impl_.aclr_x_){0}
    , decltype(_impl_.aclr_y_){0}
    , decltype(_impl_.aclr_z_){0}
    , decltype(_impl_.aclr_enu_x_){0}
    , decltype(_impl_.aclr_enu_y_){0}
    , decltype(_impl_.aclr_enu_z_){0}
    , decltype(_impl_.objstate_){0}
    , decltype(_impl_.objcf_){0}
    , decltype(_impl_.objtype_){0}
    , decltype(_impl_.objkind_){0}
    , decltype(_impl_.objdist_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RadarPath::~RadarPath() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.RadarPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarPath::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.RadarPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.objdist_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.objdist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lattitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.lattitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // sint32 elevation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float objX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.objx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.objy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.objz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float obj_ENU_X = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.obj_enu_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float obj_ENU_Y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.obj_enu_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float obj_ENU_Z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.obj_enu_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // sint32 speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speedX = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.speedx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speedY = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.speedy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speedZ = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.speedz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speed_ENU_X = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.speed_enu_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speed_ENU_Y = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.speed_enu_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speed_ENU_Z = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.speed_enu_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objOri = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.objori_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speedHeading = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.speedheading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objWidth = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.objwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objLength = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.objlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objHeight = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.objheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.aclr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 aclrAngle = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.aclrangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_x = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.aclr_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_y = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.aclr_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_z = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.aclr_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_enu_x = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.aclr_enu_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_enu_y = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.aclr_enu_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_enu_z = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.aclr_enu_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objState = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.objstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objCf = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.objcf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objType = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objKind = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.objkind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float objDist = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.objdist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.RadarPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objID = 1;
  if (this->_internal_objid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objid(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double lattitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lattitude = this->_internal_lattitude();
  uint64_t raw_lattitude;
  memcpy(&raw_lattitude, &tmp_lattitude, sizeof(tmp_lattitude));
  if (raw_lattitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_lattitude(), target);
  }

  // sint32 elevation = 4;
  if (this->_internal_elevation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_elevation(), target);
  }

  // float objX = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx = this->_internal_objx();
  uint32_t raw_objx;
  memcpy(&raw_objx, &tmp_objx, sizeof(tmp_objx));
  if (raw_objx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_objx(), target);
  }

  // float objY = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objy = this->_internal_objy();
  uint32_t raw_objy;
  memcpy(&raw_objy, &tmp_objy, sizeof(tmp_objy));
  if (raw_objy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_objy(), target);
  }

  // float objZ = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objz = this->_internal_objz();
  uint32_t raw_objz;
  memcpy(&raw_objz, &tmp_objz, sizeof(tmp_objz));
  if (raw_objz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_objz(), target);
  }

  // float obj_ENU_X = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_x = this->_internal_obj_enu_x();
  uint32_t raw_obj_enu_x;
  memcpy(&raw_obj_enu_x, &tmp_obj_enu_x, sizeof(tmp_obj_enu_x));
  if (raw_obj_enu_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_obj_enu_x(), target);
  }

  // float obj_ENU_Y = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_y = this->_internal_obj_enu_y();
  uint32_t raw_obj_enu_y;
  memcpy(&raw_obj_enu_y, &tmp_obj_enu_y, sizeof(tmp_obj_enu_y));
  if (raw_obj_enu_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_obj_enu_y(), target);
  }

  // float obj_ENU_Z = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_z = this->_internal_obj_enu_z();
  uint32_t raw_obj_enu_z;
  memcpy(&raw_obj_enu_z, &tmp_obj_enu_z, sizeof(tmp_obj_enu_z));
  if (raw_obj_enu_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_obj_enu_z(), target);
  }

  // sint32 speed = 11;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(11, this->_internal_speed(), target);
  }

  // sint32 speedX = 12;
  if (this->_internal_speedx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(12, this->_internal_speedx(), target);
  }

  // sint32 speedY = 13;
  if (this->_internal_speedy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(13, this->_internal_speedy(), target);
  }

  // sint32 speedZ = 14;
  if (this->_internal_speedz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(14, this->_internal_speedz(), target);
  }

  // sint32 speed_ENU_X = 15;
  if (this->_internal_speed_enu_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(15, this->_internal_speed_enu_x(), target);
  }

  // sint32 speed_ENU_Y = 16;
  if (this->_internal_speed_enu_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(16, this->_internal_speed_enu_y(), target);
  }

  // sint32 speed_ENU_Z = 17;
  if (this->_internal_speed_enu_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(17, this->_internal_speed_enu_z(), target);
  }

  // int32 objOri = 18;
  if (this->_internal_objori() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_objori(), target);
  }

  // int32 speedHeading = 19;
  if (this->_internal_speedheading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_speedheading(), target);
  }

  // int32 objWidth = 20;
  if (this->_internal_objwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_objwidth(), target);
  }

  // int32 objLength = 21;
  if (this->_internal_objlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_objlength(), target);
  }

  // int32 objHeight = 22;
  if (this->_internal_objheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_objheight(), target);
  }

  // sint32 aclr = 23;
  if (this->_internal_aclr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(23, this->_internal_aclr(), target);
  }

  // int32 aclrAngle = 24;
  if (this->_internal_aclrangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_aclrangle(), target);
  }

  // sint32 aclr_x = 25;
  if (this->_internal_aclr_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(25, this->_internal_aclr_x(), target);
  }

  // sint32 aclr_y = 26;
  if (this->_internal_aclr_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(26, this->_internal_aclr_y(), target);
  }

  // sint32 aclr_z = 27;
  if (this->_internal_aclr_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(27, this->_internal_aclr_z(), target);
  }

  // sint32 aclr_enu_x = 28;
  if (this->_internal_aclr_enu_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(28, this->_internal_aclr_enu_x(), target);
  }

  // sint32 aclr_enu_y = 29;
  if (this->_internal_aclr_enu_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(29, this->_internal_aclr_enu_y(), target);
  }

  // sint32 aclr_enu_z = 30;
  if (this->_internal_aclr_enu_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(30, this->_internal_aclr_enu_z(), target);
  }

  // int32 objState = 31;
  if (this->_internal_objstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_objstate(), target);
  }

  // int32 objCf = 32;
  if (this->_internal_objcf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_objcf(), target);
  }

  // int32 objType = 33;
  if (this->_internal_objtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_objtype(), target);
  }

  // int32 objKind = 34;
  if (this->_internal_objkind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_objkind(), target);
  }

  // float objDist = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objdist = this->_internal_objdist();
  uint32_t raw_objdist;
  memcpy(&raw_objdist, &tmp_objdist, sizeof(tmp_objdist));
  if (raw_objdist != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_objdist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.RadarPath)
  return target;
}

size_t RadarPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.RadarPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // int32 objID = 1;
  if (this->_internal_objid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objid());
  }

  // sint32 elevation = 4;
  if (this->_internal_elevation() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_elevation());
  }

  // double lattitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lattitude = this->_internal_lattitude();
  uint64_t raw_lattitude;
  memcpy(&raw_lattitude, &tmp_lattitude, sizeof(tmp_lattitude));
  if (raw_lattitude != 0) {
    total_size += 1 + 8;
  }

  // float objX = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx = this->_internal_objx();
  uint32_t raw_objx;
  memcpy(&raw_objx, &tmp_objx, sizeof(tmp_objx));
  if (raw_objx != 0) {
    total_size += 1 + 4;
  }

  // float objY = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objy = this->_internal_objy();
  uint32_t raw_objy;
  memcpy(&raw_objy, &tmp_objy, sizeof(tmp_objy));
  if (raw_objy != 0) {
    total_size += 1 + 4;
  }

  // float objZ = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objz = this->_internal_objz();
  uint32_t raw_objz;
  memcpy(&raw_objz, &tmp_objz, sizeof(tmp_objz));
  if (raw_objz != 0) {
    total_size += 1 + 4;
  }

  // float obj_ENU_X = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_x = this->_internal_obj_enu_x();
  uint32_t raw_obj_enu_x;
  memcpy(&raw_obj_enu_x, &tmp_obj_enu_x, sizeof(tmp_obj_enu_x));
  if (raw_obj_enu_x != 0) {
    total_size += 1 + 4;
  }

  // float obj_ENU_Y = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_y = this->_internal_obj_enu_y();
  uint32_t raw_obj_enu_y;
  memcpy(&raw_obj_enu_y, &tmp_obj_enu_y, sizeof(tmp_obj_enu_y));
  if (raw_obj_enu_y != 0) {
    total_size += 1 + 4;
  }

  // float obj_ENU_Z = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_z = this->_internal_obj_enu_z();
  uint32_t raw_obj_enu_z;
  memcpy(&raw_obj_enu_z, &tmp_obj_enu_z, sizeof(tmp_obj_enu_z));
  if (raw_obj_enu_z != 0) {
    total_size += 1 + 4;
  }

  // sint32 speed = 11;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speed());
  }

  // sint32 speedX = 12;
  if (this->_internal_speedx() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speedx());
  }

  // sint32 speedY = 13;
  if (this->_internal_speedy() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speedy());
  }

  // sint32 speedZ = 14;
  if (this->_internal_speedz() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speedz());
  }

  // sint32 speed_ENU_X = 15;
  if (this->_internal_speed_enu_x() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speed_enu_x());
  }

  // sint32 speed_ENU_Y = 16;
  if (this->_internal_speed_enu_y() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_speed_enu_y());
  }

  // sint32 speed_ENU_Z = 17;
  if (this->_internal_speed_enu_z() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_speed_enu_z());
  }

  // int32 objOri = 18;
  if (this->_internal_objori() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objori());
  }

  // int32 speedHeading = 19;
  if (this->_internal_speedheading() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_speedheading());
  }

  // int32 objWidth = 20;
  if (this->_internal_objwidth() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objwidth());
  }

  // int32 objLength = 21;
  if (this->_internal_objlength() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objlength());
  }

  // int32 objHeight = 22;
  if (this->_internal_objheight() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objheight());
  }

  // sint32 aclr = 23;
  if (this->_internal_aclr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr());
  }

  // int32 aclrAngle = 24;
  if (this->_internal_aclrangle() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_aclrangle());
  }

  // sint32 aclr_x = 25;
  if (this->_internal_aclr_x() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_x());
  }

  // sint32 aclr_y = 26;
  if (this->_internal_aclr_y() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_y());
  }

  // sint32 aclr_z = 27;
  if (this->_internal_aclr_z() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_z());
  }

  // sint32 aclr_enu_x = 28;
  if (this->_internal_aclr_enu_x() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_enu_x());
  }

  // sint32 aclr_enu_y = 29;
  if (this->_internal_aclr_enu_y() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_enu_y());
  }

  // sint32 aclr_enu_z = 30;
  if (this->_internal_aclr_enu_z() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_enu_z());
  }

  // int32 objState = 31;
  if (this->_internal_objstate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objstate());
  }

  // int32 objCf = 32;
  if (this->_internal_objcf() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objcf());
  }

  // int32 objType = 33;
  if (this->_internal_objtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objtype());
  }

  // int32 objKind = 34;
  if (this->_internal_objkind() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objkind());
  }

  // float objDist = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objdist = this->_internal_objdist();
  uint32_t raw_objdist;
  memcpy(&raw_objdist, &tmp_objdist, sizeof(tmp_objdist));
  if (raw_objdist != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarPath::GetClassData() const { return &_class_data_; }


void RadarPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarPath*>(&to_msg);
  auto& from = static_cast<const RadarPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.RadarPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_objid() != 0) {
    _this->_internal_set_objid(from._internal_objid());
  }
  if (from._internal_elevation() != 0) {
    _this->_internal_set_elevation(from._internal_elevation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lattitude = from._internal_lattitude();
  uint64_t raw_lattitude;
  memcpy(&raw_lattitude, &tmp_lattitude, sizeof(tmp_lattitude));
  if (raw_lattitude != 0) {
    _this->_internal_set_lattitude(from._internal_lattitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx = from._internal_objx();
  uint32_t raw_objx;
  memcpy(&raw_objx, &tmp_objx, sizeof(tmp_objx));
  if (raw_objx != 0) {
    _this->_internal_set_objx(from._internal_objx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objy = from._internal_objy();
  uint32_t raw_objy;
  memcpy(&raw_objy, &tmp_objy, sizeof(tmp_objy));
  if (raw_objy != 0) {
    _this->_internal_set_objy(from._internal_objy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objz = from._internal_objz();
  uint32_t raw_objz;
  memcpy(&raw_objz, &tmp_objz, sizeof(tmp_objz));
  if (raw_objz != 0) {
    _this->_internal_set_objz(from._internal_objz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_x = from._internal_obj_enu_x();
  uint32_t raw_obj_enu_x;
  memcpy(&raw_obj_enu_x, &tmp_obj_enu_x, sizeof(tmp_obj_enu_x));
  if (raw_obj_enu_x != 0) {
    _this->_internal_set_obj_enu_x(from._internal_obj_enu_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_y = from._internal_obj_enu_y();
  uint32_t raw_obj_enu_y;
  memcpy(&raw_obj_enu_y, &tmp_obj_enu_y, sizeof(tmp_obj_enu_y));
  if (raw_obj_enu_y != 0) {
    _this->_internal_set_obj_enu_y(from._internal_obj_enu_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_obj_enu_z = from._internal_obj_enu_z();
  uint32_t raw_obj_enu_z;
  memcpy(&raw_obj_enu_z, &tmp_obj_enu_z, sizeof(tmp_obj_enu_z));
  if (raw_obj_enu_z != 0) {
    _this->_internal_set_obj_enu_z(from._internal_obj_enu_z());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_speedx() != 0) {
    _this->_internal_set_speedx(from._internal_speedx());
  }
  if (from._internal_speedy() != 0) {
    _this->_internal_set_speedy(from._internal_speedy());
  }
  if (from._internal_speedz() != 0) {
    _this->_internal_set_speedz(from._internal_speedz());
  }
  if (from._internal_speed_enu_x() != 0) {
    _this->_internal_set_speed_enu_x(from._internal_speed_enu_x());
  }
  if (from._internal_speed_enu_y() != 0) {
    _this->_internal_set_speed_enu_y(from._internal_speed_enu_y());
  }
  if (from._internal_speed_enu_z() != 0) {
    _this->_internal_set_speed_enu_z(from._internal_speed_enu_z());
  }
  if (from._internal_objori() != 0) {
    _this->_internal_set_objori(from._internal_objori());
  }
  if (from._internal_speedheading() != 0) {
    _this->_internal_set_speedheading(from._internal_speedheading());
  }
  if (from._internal_objwidth() != 0) {
    _this->_internal_set_objwidth(from._internal_objwidth());
  }
  if (from._internal_objlength() != 0) {
    _this->_internal_set_objlength(from._internal_objlength());
  }
  if (from._internal_objheight() != 0) {
    _this->_internal_set_objheight(from._internal_objheight());
  }
  if (from._internal_aclr() != 0) {
    _this->_internal_set_aclr(from._internal_aclr());
  }
  if (from._internal_aclrangle() != 0) {
    _this->_internal_set_aclrangle(from._internal_aclrangle());
  }
  if (from._internal_aclr_x() != 0) {
    _this->_internal_set_aclr_x(from._internal_aclr_x());
  }
  if (from._internal_aclr_y() != 0) {
    _this->_internal_set_aclr_y(from._internal_aclr_y());
  }
  if (from._internal_aclr_z() != 0) {
    _this->_internal_set_aclr_z(from._internal_aclr_z());
  }
  if (from._internal_aclr_enu_x() != 0) {
    _this->_internal_set_aclr_enu_x(from._internal_aclr_enu_x());
  }
  if (from._internal_aclr_enu_y() != 0) {
    _this->_internal_set_aclr_enu_y(from._internal_aclr_enu_y());
  }
  if (from._internal_aclr_enu_z() != 0) {
    _this->_internal_set_aclr_enu_z(from._internal_aclr_enu_z());
  }
  if (from._internal_objstate() != 0) {
    _this->_internal_set_objstate(from._internal_objstate());
  }
  if (from._internal_objcf() != 0) {
    _this->_internal_set_objcf(from._internal_objcf());
  }
  if (from._internal_objtype() != 0) {
    _this->_internal_set_objtype(from._internal_objtype());
  }
  if (from._internal_objkind() != 0) {
    _this->_internal_set_objkind(from._internal_objkind());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objdist = from._internal_objdist();
  uint32_t raw_objdist;
  memcpy(&raw_objdist, &tmp_objdist, sizeof(tmp_objdist));
  if (raw_objdist != 0) {
    _this->_internal_set_objdist(from._internal_objdist());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarPath::CopyFrom(const RadarPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.RadarPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarPath::IsInitialized() const {
  return true;
}

void RadarPath::InternalSwap(RadarPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarPath, _impl_.objdist_)
      + sizeof(RadarPath::_impl_.objdist_)
      - PROTOBUF_FIELD_OFFSET(RadarPath, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[0]);
}

// ===================================================================

class CameraPath::_Internal {
 public:
  static const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo& globalspaceinfo(const CameraPath* msg);
};

const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo&
CameraPath::_Internal::globalspaceinfo(const CameraPath* msg) {
  return *msg->_impl_.globalspaceinfo_;
}
CameraPath::CameraPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.CameraPath)
}
CameraPath::CameraPath(const CameraPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plateno_){}
    , decltype(_impl_.vehcolor_){}
    , decltype(_impl_.globalspaceinfo_){nullptr}
    , decltype(_impl_.objid_){}
    , decltype(_impl_.laneno_){}
    , decltype(_impl_.platecolor_){}
    , decltype(_impl_.vehtype_){}
    , decltype(_impl_.objx_){}
    , decltype(_impl_.objy_){}
    , decltype(_impl_.objdistx_){}
    , decltype(_impl_.objdisty_){}
    , decltype(_impl_.objbottommidx_){}
    , decltype(_impl_.objbottommidy_){}
    , decltype(_impl_.objcf_){}
    , decltype(_impl_.objkind_){}
    , decltype(_impl_.objimgtop_){}
    , decltype(_impl_.objimgleft_){}
    , decltype(_impl_.objimgright_){}
    , decltype(_impl_.objimgbottom_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plateno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plateno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plateno().empty()) {
    _this->_impl_.plateno_.Set(from._internal_plateno(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vehcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vehcolor().empty()) {
    _this->_impl_.vehcolor_.Set(from._internal_vehcolor(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_globalspaceinfo()) {
    _this->_impl_.globalspaceinfo_ = new ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo(*from._impl_.globalspaceinfo_);
  }
  ::memcpy(&_impl_.objid_, &from._impl_.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objimgbottom_) -
    reinterpret_cast<char*>(&_impl_.objid_)) + sizeof(_impl_.objimgbottom_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.CameraPath)
}

inline void CameraPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plateno_){}
    , decltype(_impl_.vehcolor_){}
    , decltype(_impl_.globalspaceinfo_){nullptr}
    , decltype(_impl_.objid_){0}
    , decltype(_impl_.laneno_){0}
    , decltype(_impl_.platecolor_){0}
    , decltype(_impl_.vehtype_){0}
    , decltype(_impl_.objx_){0}
    , decltype(_impl_.objy_){0}
    , decltype(_impl_.objdistx_){0}
    , decltype(_impl_.objdisty_){0}
    , decltype(_impl_.objbottommidx_){0}
    , decltype(_impl_.objbottommidy_){0}
    , decltype(_impl_.objcf_){0}
    , decltype(_impl_.objkind_){0}
    , decltype(_impl_.objimgtop_){0u}
    , decltype(_impl_.objimgleft_){0u}
    , decltype(_impl_.objimgright_){0u}
    , decltype(_impl_.objimgbottom_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plateno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plateno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vehcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraPath::~CameraPath() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.CameraPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plateno_.Destroy();
  _impl_.vehcolor_.Destroy();
  if (this != internal_default_instance()) delete _impl_.globalspaceinfo_;
}

void CameraPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraPath::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.CameraPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plateno_.ClearToEmpty();
  _impl_.vehcolor_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.globalspaceinfo_ != nullptr) {
    delete _impl_.globalspaceinfo_;
  }
  _impl_.globalspaceinfo_ = nullptr;
  ::memset(&_impl_.objid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.objimgbottom_) -
      reinterpret_cast<char*>(&_impl_.objid_)) + sizeof(_impl_.objimgbottom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 laneNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.laneno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string plateNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_plateno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.rbx.comm.bean.multi.CameraPath.plateNo"));
        } else
          goto handle_unusual;
        continue;
      // int32 plateColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.platecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vehType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.vehtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vehColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_vehcolor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.rbx.comm.bean.multi.CameraPath.vehColor"));
        } else
          goto handle_unusual;
        continue;
      // int32 objX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.objx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.objy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objDistX = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.objdistx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objDistY = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.objdisty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objBottomMidX = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.objbottommidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objBottomMidY = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.objbottommidy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo globalSpaceInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalspaceinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objCf = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.objcf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objKind = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.objkind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objImgTop = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.objimgtop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objImgLeft = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.objimgleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objImgRight = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.objimgright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objImgBottom = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.objimgbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.CameraPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objID = 1;
  if (this->_internal_objid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objid(), target);
  }

  // int32 laneNo = 2;
  if (this->_internal_laneno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_laneno(), target);
  }

  // string plateNo = 3;
  if (!this->_internal_plateno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plateno().data(), static_cast<int>(this->_internal_plateno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.rbx.comm.bean.multi.CameraPath.plateNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_plateno(), target);
  }

  // int32 plateColor = 4;
  if (this->_internal_platecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_platecolor(), target);
  }

  // int32 vehType = 5;
  if (this->_internal_vehtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_vehtype(), target);
  }

  // string vehColor = 6;
  if (!this->_internal_vehcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehcolor().data(), static_cast<int>(this->_internal_vehcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.rbx.comm.bean.multi.CameraPath.vehColor");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_vehcolor(), target);
  }

  // int32 objX = 7;
  if (this->_internal_objx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_objx(), target);
  }

  // int32 objY = 8;
  if (this->_internal_objy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_objy(), target);
  }

  // int32 objDistX = 9;
  if (this->_internal_objdistx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_objdistx(), target);
  }

  // int32 objDistY = 10;
  if (this->_internal_objdisty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_objdisty(), target);
  }

  // int32 objBottomMidX = 11;
  if (this->_internal_objbottommidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_objbottommidx(), target);
  }

  // int32 objBottomMidY = 12;
  if (this->_internal_objbottommidy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_objbottommidy(), target);
  }

  // .cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo globalSpaceInfo = 13;
  if (this->_internal_has_globalspaceinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::globalspaceinfo(this),
        _Internal::globalspaceinfo(this).GetCachedSize(), target, stream);
  }

  // int32 objCf = 14;
  if (this->_internal_objcf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_objcf(), target);
  }

  // int32 objKind = 15;
  if (this->_internal_objkind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_objkind(), target);
  }

  // uint32 objImgTop = 16;
  if (this->_internal_objimgtop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_objimgtop(), target);
  }

  // uint32 objImgLeft = 17;
  if (this->_internal_objimgleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_objimgleft(), target);
  }

  // uint32 objImgRight = 18;
  if (this->_internal_objimgright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_objimgright(), target);
  }

  // uint32 objImgBottom = 19;
  if (this->_internal_objimgbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_objimgbottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.CameraPath)
  return target;
}

size_t CameraPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.CameraPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plateNo = 3;
  if (!this->_internal_plateno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plateno());
  }

  // string vehColor = 6;
  if (!this->_internal_vehcolor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehcolor());
  }

  // .cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo globalSpaceInfo = 13;
  if (this->_internal_has_globalspaceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.globalspaceinfo_);
  }

  // int32 objID = 1;
  if (this->_internal_objid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objid());
  }

  // int32 laneNo = 2;
  if (this->_internal_laneno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_laneno());
  }

  // int32 plateColor = 4;
  if (this->_internal_platecolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_platecolor());
  }

  // int32 vehType = 5;
  if (this->_internal_vehtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vehtype());
  }

  // int32 objX = 7;
  if (this->_internal_objx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objx());
  }

  // int32 objY = 8;
  if (this->_internal_objy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objy());
  }

  // int32 objDistX = 9;
  if (this->_internal_objdistx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objdistx());
  }

  // int32 objDistY = 10;
  if (this->_internal_objdisty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objdisty());
  }

  // int32 objBottomMidX = 11;
  if (this->_internal_objbottommidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objbottommidx());
  }

  // int32 objBottomMidY = 12;
  if (this->_internal_objbottommidy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objbottommidy());
  }

  // int32 objCf = 14;
  if (this->_internal_objcf() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objcf());
  }

  // int32 objKind = 15;
  if (this->_internal_objkind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objkind());
  }

  // uint32 objImgTop = 16;
  if (this->_internal_objimgtop() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_objimgtop());
  }

  // uint32 objImgLeft = 17;
  if (this->_internal_objimgleft() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_objimgleft());
  }

  // uint32 objImgRight = 18;
  if (this->_internal_objimgright() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_objimgright());
  }

  // uint32 objImgBottom = 19;
  if (this->_internal_objimgbottom() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_objimgbottom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraPath::GetClassData() const { return &_class_data_; }


void CameraPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraPath*>(&to_msg);
  auto& from = static_cast<const CameraPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.CameraPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plateno().empty()) {
    _this->_internal_set_plateno(from._internal_plateno());
  }
  if (!from._internal_vehcolor().empty()) {
    _this->_internal_set_vehcolor(from._internal_vehcolor());
  }
  if (from._internal_has_globalspaceinfo()) {
    _this->_internal_mutable_globalspaceinfo()->::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo::MergeFrom(
        from._internal_globalspaceinfo());
  }
  if (from._internal_objid() != 0) {
    _this->_internal_set_objid(from._internal_objid());
  }
  if (from._internal_laneno() != 0) {
    _this->_internal_set_laneno(from._internal_laneno());
  }
  if (from._internal_platecolor() != 0) {
    _this->_internal_set_platecolor(from._internal_platecolor());
  }
  if (from._internal_vehtype() != 0) {
    _this->_internal_set_vehtype(from._internal_vehtype());
  }
  if (from._internal_objx() != 0) {
    _this->_internal_set_objx(from._internal_objx());
  }
  if (from._internal_objy() != 0) {
    _this->_internal_set_objy(from._internal_objy());
  }
  if (from._internal_objdistx() != 0) {
    _this->_internal_set_objdistx(from._internal_objdistx());
  }
  if (from._internal_objdisty() != 0) {
    _this->_internal_set_objdisty(from._internal_objdisty());
  }
  if (from._internal_objbottommidx() != 0) {
    _this->_internal_set_objbottommidx(from._internal_objbottommidx());
  }
  if (from._internal_objbottommidy() != 0) {
    _this->_internal_set_objbottommidy(from._internal_objbottommidy());
  }
  if (from._internal_objcf() != 0) {
    _this->_internal_set_objcf(from._internal_objcf());
  }
  if (from._internal_objkind() != 0) {
    _this->_internal_set_objkind(from._internal_objkind());
  }
  if (from._internal_objimgtop() != 0) {
    _this->_internal_set_objimgtop(from._internal_objimgtop());
  }
  if (from._internal_objimgleft() != 0) {
    _this->_internal_set_objimgleft(from._internal_objimgleft());
  }
  if (from._internal_objimgright() != 0) {
    _this->_internal_set_objimgright(from._internal_objimgright());
  }
  if (from._internal_objimgbottom() != 0) {
    _this->_internal_set_objimgbottom(from._internal_objimgbottom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraPath::CopyFrom(const CameraPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.CameraPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPath::IsInitialized() const {
  return true;
}

void CameraPath::InternalSwap(CameraPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plateno_, lhs_arena,
      &other->_impl_.plateno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vehcolor_, lhs_arena,
      &other->_impl_.vehcolor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraPath, _impl_.objimgbottom_)
      + sizeof(CameraPath::_impl_.objimgbottom_)
      - PROTOBUF_FIELD_OFFSET(CameraPath, _impl_.globalspaceinfo_)>(
          reinterpret_cast<char*>(&_impl_.globalspaceinfo_),
          reinterpret_cast<char*>(&other->_impl_.globalspaceinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[1]);
}

// ===================================================================

class GlobalSpaceInfo::_Internal {
 public:
  static const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition& position_gnss(const GlobalSpaceInfo* msg);
  static const ::cn::seisys::rbx::comm::bean::multi::UTMPosition& position_utm(const GlobalSpaceInfo* msg);
};

const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition&
GlobalSpaceInfo::_Internal::position_gnss(const GlobalSpaceInfo* msg) {
  return *msg->_impl_.position_gnss_;
}
const ::cn::seisys::rbx::comm::bean::multi::UTMPosition&
GlobalSpaceInfo::_Internal::position_utm(const GlobalSpaceInfo* msg) {
  return *msg->_impl_.position_utm_;
}
GlobalSpaceInfo::GlobalSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
}
GlobalSpaceInfo::GlobalSpaceInfo(const GlobalSpaceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalSpaceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_gnss_){nullptr}
    , decltype(_impl_.position_utm_){nullptr}
    , decltype(_impl_.objori_){}
    , decltype(_impl_.objwidth_){}
    , decltype(_impl_.objlength_){}
    , decltype(_impl_.objheight_){}
    , decltype(_impl_.speedx_){}
    , decltype(_impl_.speedy_){}
    , decltype(_impl_.speedz_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_gnss()) {
    _this->_impl_.position_gnss_ = new ::cn::seisys::rbx::comm::bean::multi::GNSSPosition(*from._impl_.position_gnss_);
  }
  if (from._internal_has_position_utm()) {
    _this->_impl_.position_utm_ = new ::cn::seisys::rbx::comm::bean::multi::UTMPosition(*from._impl_.position_utm_);
  }
  ::memcpy(&_impl_.objori_, &from._impl_.objori_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.objori_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
}

inline void GlobalSpaceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_gnss_){nullptr}
    , decltype(_impl_.position_utm_){nullptr}
    , decltype(_impl_.objori_){0}
    , decltype(_impl_.objwidth_){0}
    , decltype(_impl_.objlength_){0}
    , decltype(_impl_.objheight_){0}
    , decltype(_impl_.speedx_){0}
    , decltype(_impl_.speedy_){0}
    , decltype(_impl_.speedz_){0}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GlobalSpaceInfo::~GlobalSpaceInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalSpaceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_gnss_;
  if (this != internal_default_instance()) delete _impl_.position_utm_;
}

void GlobalSpaceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalSpaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_gnss_ != nullptr) {
    delete _impl_.position_gnss_;
  }
  _impl_.position_gnss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_utm_ != nullptr) {
    delete _impl_.position_utm_;
  }
  _impl_.position_utm_ = nullptr;
  ::memset(&_impl_.objori_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.objori_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalSpaceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.rbx.comm.bean.multi.GNSSPosition position_gnss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_gnss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.rbx.comm.bean.multi.UTMPosition position_utm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_utm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objOri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.objori_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objWidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.objwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.objlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objHeight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.objheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speedX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.speedx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speedY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.speedy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speedZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.speedz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalSpaceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.rbx.comm.bean.multi.GNSSPosition position_gnss = 1;
  if (this->_internal_has_position_gnss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position_gnss(this),
        _Internal::position_gnss(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.rbx.comm.bean.multi.UTMPosition position_utm = 2;
  if (this->_internal_has_position_utm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position_utm(this),
        _Internal::position_utm(this).GetCachedSize(), target, stream);
  }

  // int32 objOri = 3;
  if (this->_internal_objori() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_objori(), target);
  }

  // int32 objWidth = 4;
  if (this->_internal_objwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_objwidth(), target);
  }

  // int32 objLength = 5;
  if (this->_internal_objlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_objlength(), target);
  }

  // int32 objHeight = 6;
  if (this->_internal_objheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_objheight(), target);
  }

  // int32 speedX = 7;
  if (this->_internal_speedx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_speedx(), target);
  }

  // int32 speedY = 8;
  if (this->_internal_speedy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_speedy(), target);
  }

  // int32 speedZ = 9;
  if (this->_internal_speedz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_speedz(), target);
  }

  // int32 speed = 10;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
  return target;
}

size_t GlobalSpaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.rbx.comm.bean.multi.GNSSPosition position_gnss = 1;
  if (this->_internal_has_position_gnss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_gnss_);
  }

  // .cn.seisys.rbx.comm.bean.multi.UTMPosition position_utm = 2;
  if (this->_internal_has_position_utm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_utm_);
  }

  // int32 objOri = 3;
  if (this->_internal_objori() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objori());
  }

  // int32 objWidth = 4;
  if (this->_internal_objwidth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objwidth());
  }

  // int32 objLength = 5;
  if (this->_internal_objlength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objlength());
  }

  // int32 objHeight = 6;
  if (this->_internal_objheight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objheight());
  }

  // int32 speedX = 7;
  if (this->_internal_speedx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speedx());
  }

  // int32 speedY = 8;
  if (this->_internal_speedy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speedy());
  }

  // int32 speedZ = 9;
  if (this->_internal_speedz() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speedz());
  }

  // int32 speed = 10;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalSpaceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalSpaceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalSpaceInfo::GetClassData() const { return &_class_data_; }


void GlobalSpaceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalSpaceInfo*>(&to_msg);
  auto& from = static_cast<const GlobalSpaceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position_gnss()) {
    _this->_internal_mutable_position_gnss()->::cn::seisys::rbx::comm::bean::multi::GNSSPosition::MergeFrom(
        from._internal_position_gnss());
  }
  if (from._internal_has_position_utm()) {
    _this->_internal_mutable_position_utm()->::cn::seisys::rbx::comm::bean::multi::UTMPosition::MergeFrom(
        from._internal_position_utm());
  }
  if (from._internal_objori() != 0) {
    _this->_internal_set_objori(from._internal_objori());
  }
  if (from._internal_objwidth() != 0) {
    _this->_internal_set_objwidth(from._internal_objwidth());
  }
  if (from._internal_objlength() != 0) {
    _this->_internal_set_objlength(from._internal_objlength());
  }
  if (from._internal_objheight() != 0) {
    _this->_internal_set_objheight(from._internal_objheight());
  }
  if (from._internal_speedx() != 0) {
    _this->_internal_set_speedx(from._internal_speedx());
  }
  if (from._internal_speedy() != 0) {
    _this->_internal_set_speedy(from._internal_speedy());
  }
  if (from._internal_speedz() != 0) {
    _this->_internal_set_speedz(from._internal_speedz());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalSpaceInfo::CopyFrom(const GlobalSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSpaceInfo::IsInitialized() const {
  return true;
}

void GlobalSpaceInfo::InternalSwap(GlobalSpaceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalSpaceInfo, _impl_.speed_)
      + sizeof(GlobalSpaceInfo::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(GlobalSpaceInfo, _impl_.position_gnss_)>(
          reinterpret_cast<char*>(&_impl_.position_gnss_),
          reinterpret_cast<char*>(&other->_impl_.position_gnss_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalSpaceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[2]);
}

// ===================================================================

class GNSSPosition::_Internal {
 public:
};

GNSSPosition::GNSSPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
}
GNSSPosition::GNSSPosition(const GNSSPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GNSSPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){}
    , decltype(_impl_.latitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latitude_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
}

inline void GNSSPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){0}
    , decltype(_impl_.latitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GNSSPosition::~GNSSPosition() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GNSSPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GNSSPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GNSSPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.latitude_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GNSSPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GNSSPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
  return target;
}

size_t GNSSPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GNSSPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GNSSPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GNSSPosition::GetClassData() const { return &_class_data_; }


void GNSSPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GNSSPosition*>(&to_msg);
  auto& from = static_cast<const GNSSPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GNSSPosition::CopyFrom(const GNSSPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GNSSPosition::IsInitialized() const {
  return true;
}

void GNSSPosition::InternalSwap(GNSSPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GNSSPosition, _impl_.latitude_)
      + sizeof(GNSSPosition::_impl_.latitude_)
      - PROTOBUF_FIELD_OFFSET(GNSSPosition, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GNSSPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[3]);
}

// ===================================================================

class UTMPosition::_Internal {
 public:
};

UTMPosition::UTMPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.UTMPosition)
}
UTMPosition::UTMPosition(const UTMPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UTMPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.UTMPosition)
}

inline void UTMPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UTMPosition::~UTMPosition() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.UTMPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTMPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UTMPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UTMPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.UTMPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTMPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTMPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.UTMPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.UTMPosition)
  return target;
}

size_t UTMPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.UTMPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTMPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UTMPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTMPosition::GetClassData() const { return &_class_data_; }


void UTMPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UTMPosition*>(&to_msg);
  auto& from = static_cast<const UTMPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.UTMPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTMPosition::CopyFrom(const UTMPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.UTMPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTMPosition::IsInitialized() const {
  return true;
}

void UTMPosition::InternalSwap(UTMPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UTMPosition, _impl_.y_)
      + sizeof(UTMPosition::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(UTMPosition, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UTMPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[4]);
}

// ===================================================================

class RadarDevPathList::_Internal {
 public:
};

RadarDevPathList::RadarDevPathList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
}
RadarDevPathList::RadarDevPathList(const RadarDevPathList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarDevPathList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.radarpathlist_){from._impl_.radarpathlist_}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.datatime_){}
    , decltype(_impl_.processtime_){}
    , decltype(_impl_.commrcvtime_){}
    , decltype(_impl_.areano_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.datatime_, &from._impl_.datatime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.areano_) -
    reinterpret_cast<char*>(&_impl_.datatime_)) + sizeof(_impl_.areano_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
}

inline void RadarDevPathList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.radarpathlist_){arena}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.datatime_){int64_t{0}}
    , decltype(_impl_.processtime_){int64_t{0}}
    , decltype(_impl_.commrcvtime_){int64_t{0}}
    , decltype(_impl_.areano_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadarDevPathList::~RadarDevPathList() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarDevPathList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.radarpathlist_.~RepeatedPtrField();
  _impl_.deviceid_.Destroy();
}

void RadarDevPathList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarDevPathList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.radarpathlist_.Clear();
  _impl_.deviceid_.ClearToEmpty();
  ::memset(&_impl_.datatime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.areano_) -
      reinterpret_cast<char*>(&_impl_.datatime_)) + sizeof(_impl_.areano_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarDevPathList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dataTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.datatime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.rbx.comm.bean.multi.RadarDevPathList.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // int32 areaNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.areano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.RadarPath radarPathList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radarpathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 processTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.processtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 commRcvTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.commrcvtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarDevPathList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dataTime = 1;
  if (this->_internal_datatime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_datatime(), target);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.rbx.comm.bean.multi.RadarDevPathList.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // int32 areaNo = 3;
  if (this->_internal_areano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_areano(), target);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.RadarPath radarPathList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_radarpathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_radarpathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 processTime = 5;
  if (this->_internal_processtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_processtime(), target);
  }

  // int64 commRcvTime = 6;
  if (this->_internal_commrcvtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_commrcvtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
  return target;
}

size_t RadarDevPathList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.rbx.comm.bean.multi.RadarPath radarPathList = 4;
  total_size += 1UL * this->_internal_radarpathlist_size();
  for (const auto& msg : this->_impl_.radarpathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // int64 dataTime = 1;
  if (this->_internal_datatime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatime());
  }

  // int64 processTime = 5;
  if (this->_internal_processtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_processtime());
  }

  // int64 commRcvTime = 6;
  if (this->_internal_commrcvtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_commrcvtime());
  }

  // int32 areaNo = 3;
  if (this->_internal_areano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areano());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarDevPathList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarDevPathList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarDevPathList::GetClassData() const { return &_class_data_; }


void RadarDevPathList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarDevPathList*>(&to_msg);
  auto& from = static_cast<const RadarDevPathList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.radarpathlist_.MergeFrom(from._impl_.radarpathlist_);
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (from._internal_datatime() != 0) {
    _this->_internal_set_datatime(from._internal_datatime());
  }
  if (from._internal_processtime() != 0) {
    _this->_internal_set_processtime(from._internal_processtime());
  }
  if (from._internal_commrcvtime() != 0) {
    _this->_internal_set_commrcvtime(from._internal_commrcvtime());
  }
  if (from._internal_areano() != 0) {
    _this->_internal_set_areano(from._internal_areano());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarDevPathList::CopyFrom(const RadarDevPathList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarDevPathList::IsInitialized() const {
  return true;
}

void RadarDevPathList::InternalSwap(RadarDevPathList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.radarpathlist_.InternalSwap(&other->_impl_.radarpathlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarDevPathList, _impl_.areano_)
      + sizeof(RadarDevPathList::_impl_.areano_)
      - PROTOBUF_FIELD_OFFSET(RadarDevPathList, _impl_.datatime_)>(
          reinterpret_cast<char*>(&_impl_.datatime_),
          reinterpret_cast<char*>(&other->_impl_.datatime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarDevPathList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[5]);
}

// ===================================================================

class CameraPathList::_Internal {
 public:
};

CameraPathList::CameraPathList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.CameraPathList)
}
CameraPathList::CameraPathList(const CameraPathList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraPathList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camerapathlist_){from._impl_.camerapathlist_}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.datatime_){}
    , decltype(_impl_.captype_){}
    , decltype(_impl_.objcount_){}
    , decltype(_impl_.processtime_){}
    , decltype(_impl_.commrcvtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.datatime_, &from._impl_.datatime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.commrcvtime_) -
    reinterpret_cast<char*>(&_impl_.datatime_)) + sizeof(_impl_.commrcvtime_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.CameraPathList)
}

inline void CameraPathList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camerapathlist_){arena}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.datatime_){int64_t{0}}
    , decltype(_impl_.captype_){0}
    , decltype(_impl_.objcount_){0}
    , decltype(_impl_.processtime_){int64_t{0}}
    , decltype(_impl_.commrcvtime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraPathList::~CameraPathList() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.CameraPathList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraPathList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camerapathlist_.~RepeatedPtrField();
  _impl_.deviceid_.Destroy();
}

void CameraPathList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraPathList::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.CameraPathList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camerapathlist_.Clear();
  _impl_.deviceid_.ClearToEmpty();
  ::memset(&_impl_.datatime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.commrcvtime_) -
      reinterpret_cast<char*>(&_impl_.datatime_)) + sizeof(_impl_.commrcvtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraPathList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dataTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.datatime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.rbx.comm.bean.multi.CameraPathList.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // int32 capType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.captype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.objcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.CameraPath cameraPathList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camerapathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 processTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.processtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 commRcvTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.commrcvtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraPathList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.CameraPathList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dataTime = 1;
  if (this->_internal_datatime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_datatime(), target);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.rbx.comm.bean.multi.CameraPathList.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // int32 capType = 3;
  if (this->_internal_captype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_captype(), target);
  }

  // int32 objCount = 4;
  if (this->_internal_objcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_objcount(), target);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.CameraPath cameraPathList = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camerapathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_camerapathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 processTime = 6;
  if (this->_internal_processtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_processtime(), target);
  }

  // int64 commRcvTime = 7;
  if (this->_internal_commrcvtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_commrcvtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.CameraPathList)
  return target;
}

size_t CameraPathList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.CameraPathList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.rbx.comm.bean.multi.CameraPath cameraPathList = 5;
  total_size += 1UL * this->_internal_camerapathlist_size();
  for (const auto& msg : this->_impl_.camerapathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // int64 dataTime = 1;
  if (this->_internal_datatime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatime());
  }

  // int32 capType = 3;
  if (this->_internal_captype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_captype());
  }

  // int32 objCount = 4;
  if (this->_internal_objcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objcount());
  }

  // int64 processTime = 6;
  if (this->_internal_processtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_processtime());
  }

  // int64 commRcvTime = 7;
  if (this->_internal_commrcvtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_commrcvtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraPathList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraPathList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraPathList::GetClassData() const { return &_class_data_; }


void CameraPathList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraPathList*>(&to_msg);
  auto& from = static_cast<const CameraPathList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.CameraPathList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.camerapathlist_.MergeFrom(from._impl_.camerapathlist_);
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (from._internal_datatime() != 0) {
    _this->_internal_set_datatime(from._internal_datatime());
  }
  if (from._internal_captype() != 0) {
    _this->_internal_set_captype(from._internal_captype());
  }
  if (from._internal_objcount() != 0) {
    _this->_internal_set_objcount(from._internal_objcount());
  }
  if (from._internal_processtime() != 0) {
    _this->_internal_set_processtime(from._internal_processtime());
  }
  if (from._internal_commrcvtime() != 0) {
    _this->_internal_set_commrcvtime(from._internal_commrcvtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraPathList::CopyFrom(const CameraPathList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.CameraPathList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPathList::IsInitialized() const {
  return true;
}

void CameraPathList::InternalSwap(CameraPathList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.camerapathlist_.InternalSwap(&other->_impl_.camerapathlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraPathList, _impl_.commrcvtime_)
      + sizeof(CameraPathList::_impl_.commrcvtime_)
      - PROTOBUF_FIELD_OFFSET(CameraPathList, _impl_.datatime_)>(
          reinterpret_cast<char*>(&_impl_.datatime_),
          reinterpret_cast<char*>(&other->_impl_.datatime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPathList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[6]);
}

// ===================================================================

class MultiPathDatas::_Internal {
 public:
};

MultiPathDatas::MultiPathDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
}
MultiPathDatas::MultiPathDatas(const MultiPathDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiPathDatas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lidarpathlist_){from._impl_.lidarpathlist_}
    , decltype(_impl_.mwrpathlist_){from._impl_.mwrpathlist_}
    , decltype(_impl_.camerapathlist_){from._impl_.camerapathlist_}
    , decltype(_impl_.sendtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sendtime_ = from._impl_.sendtime_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
}

inline void MultiPathDatas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lidarpathlist_){arena}
    , decltype(_impl_.mwrpathlist_){arena}
    , decltype(_impl_.camerapathlist_){arena}
    , decltype(_impl_.sendtime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiPathDatas::~MultiPathDatas() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiPathDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lidarpathlist_.~RepeatedPtrField();
  _impl_.mwrpathlist_.~RepeatedPtrField();
  _impl_.camerapathlist_.~RepeatedPtrField();
}

void MultiPathDatas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiPathDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lidarpathlist_.Clear();
  _impl_.mwrpathlist_.Clear();
  _impl_.camerapathlist_.Clear();
  _impl_.sendtime_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiPathDatas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList lidarPathList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lidarpathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList mwrPathList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mwrpathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.CameraPathList cameraPathList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camerapathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiPathDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sendTime = 1;
  if (this->_internal_sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList lidarPathList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lidarpathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_lidarpathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList mwrPathList = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mwrpathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_mwrpathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.CameraPathList cameraPathList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camerapathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_camerapathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
  return target;
}

size_t MultiPathDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList lidarPathList = 2;
  total_size += 1UL * this->_internal_lidarpathlist_size();
  for (const auto& msg : this->_impl_.lidarpathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList mwrPathList = 3;
  total_size += 1UL * this->_internal_mwrpathlist_size();
  for (const auto& msg : this->_impl_.mwrpathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.CameraPathList cameraPathList = 4;
  total_size += 1UL * this->_internal_camerapathlist_size();
  for (const auto& msg : this->_impl_.camerapathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 sendTime = 1;
  if (this->_internal_sendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiPathDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiPathDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiPathDatas::GetClassData() const { return &_class_data_; }


void MultiPathDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiPathDatas*>(&to_msg);
  auto& from = static_cast<const MultiPathDatas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lidarpathlist_.MergeFrom(from._impl_.lidarpathlist_);
  _this->_impl_.mwrpathlist_.MergeFrom(from._impl_.mwrpathlist_);
  _this->_impl_.camerapathlist_.MergeFrom(from._impl_.camerapathlist_);
  if (from._internal_sendtime() != 0) {
    _this->_internal_set_sendtime(from._internal_sendtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiPathDatas::CopyFrom(const MultiPathDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPathDatas::IsInitialized() const {
  return true;
}

void MultiPathDatas::InternalSwap(MultiPathDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lidarpathlist_.InternalSwap(&other->_impl_.lidarpathlist_);
  _impl_.mwrpathlist_.InternalSwap(&other->_impl_.mwrpathlist_);
  _impl_.camerapathlist_.InternalSwap(&other->_impl_.camerapathlist_);
  swap(_impl_.sendtime_, other->_impl_.sendtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiPathDatas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiPathDatas_2eproto_getter, &descriptor_table_MultiPathDatas_2eproto_once,
      file_level_metadata_MultiPathDatas_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::RadarPath*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::RadarPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::RadarPath >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::CameraPath*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::CameraPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::CameraPath >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::GNSSPosition*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::GNSSPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::GNSSPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::UTMPosition*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::UTMPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::UTMPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::CameraPathList*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::CameraPathList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::CameraPathList >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::MultiPathDatas*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::MultiPathDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::MultiPathDatas >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
