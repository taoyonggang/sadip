// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FusionPathDatas.proto

#include "FusionPathDatas.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {
PROTOBUF_CONSTEXPR FusionPosData::FusionPosData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.lattitude_)*/0
  , /*decltype(_impl_.elevation_)*/0
  , /*decltype(_impl_.coordtype_)*/0
  , /*decltype(_impl_.objx_)*/0
  , /*decltype(_impl_.objy_)*/0
  , /*decltype(_impl_.objz_)*/0
  , /*decltype(_impl_.laneno_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.speedx_)*/0
  , /*decltype(_impl_.speedy_)*/0
  , /*decltype(_impl_.speedz_)*/0
  , /*decltype(_impl_.objori_)*/0
  , /*decltype(_impl_.speedheading_)*/0
  , /*decltype(_impl_.aclr_)*/0
  , /*decltype(_impl_.aclrangle_)*/0
  , /*decltype(_impl_.aclr_x_)*/0
  , /*decltype(_impl_.aclr_y_)*/0
  , /*decltype(_impl_.aclr_z_)*/0
  , /*decltype(_impl_.objwidth_)*/0
  , /*decltype(_impl_.objlength_)*/0
  , /*decltype(_impl_.objheight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FusionPosDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FusionPosDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FusionPosDataDefaultTypeInternal() {}
  union {
    FusionPosData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FusionPosDataDefaultTypeInternal _FusionPosData_default_instance_;
PROTOBUF_CONSTEXPR FusionPath::FusionPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oriposdatalist_)*/{}
  , /*decltype(_impl_.objposdatas_)*/nullptr
  , /*decltype(_impl_.objvisiondata_)*/nullptr
  , /*decltype(_impl_.objid_)*/0
  , /*decltype(_impl_.objtype_)*/0
  , /*decltype(_impl_.objkind_)*/0
  , /*decltype(_impl_.objstate_)*/0
  , /*decltype(_impl_.objcf_)*/0
  , /*decltype(_impl_.hasvisiondata_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FusionPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FusionPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FusionPathDefaultTypeInternal() {}
  union {
    FusionPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FusionPathDefaultTypeInternal _FusionPath_default_instance_;
PROTOBUF_CONSTEXPR FusionPathDatas::FusionPathDatas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathlist_)*/{}
  , /*decltype(_impl_.sendtime_)*/int64_t{0}
  , /*decltype(_impl_.datatime_)*/int64_t{0}
  , /*decltype(_impl_.areano_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FusionPathDatasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FusionPathDatasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FusionPathDatasDefaultTypeInternal() {}
  union {
    FusionPathDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FusionPathDatasDefaultTypeInternal _FusionPathDatas_default_instance_;
PROTOBUF_CONSTEXPR RelOriPosData::RelOriPosData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objidlist_)*/{}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datatime_)*/int64_t{0}
  , /*decltype(_impl_.processtime_)*/int64_t{0}
  , /*decltype(_impl_.commrcvtime_)*/int64_t{0}
  , /*decltype(_impl_.commsendtime_)*/int64_t{0}
  , /*decltype(_impl_.fusionrcvtime_)*/int64_t{0}
  , /*decltype(_impl_.devtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelOriPosDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelOriPosDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelOriPosDataDefaultTypeInternal() {}
  union {
    RelOriPosData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelOriPosDataDefaultTypeInternal _RelOriPosData_default_instance_;
PROTOBUF_CONSTEXPR RelOriPosDataObjID::RelOriPosDataObjID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelOriPosDataObjIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelOriPosDataObjIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelOriPosDataObjIDDefaultTypeInternal() {}
  union {
    RelOriPosDataObjID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelOriPosDataObjIDDefaultTypeInternal _RelOriPosDataObjID_default_instance_;
}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn
static ::_pb::Metadata file_level_metadata_FusionPathDatas_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_FusionPathDatas_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FusionPathDatas_2eproto = nullptr;

const uint32_t TableStruct_FusionPathDatas_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.lattitude_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.elevation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.coordtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.objx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.objy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.objz_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.laneno_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.speedx_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.speedy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.speedz_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.objori_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.speedheading_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.aclr_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.aclrangle_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.aclr_x_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.aclr_y_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.aclr_z_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.objwidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.objlength_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPosData, _impl_.objheight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.objid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.objtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.objkind_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.objstate_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.objcf_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.objposdatas_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.hasvisiondata_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.objvisiondata_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPath, _impl_.oriposdatalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPathDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPathDatas, _impl_.sendtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPathDatas, _impl_.datatime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPathDatas, _impl_.areano_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::FusionPathDatas, _impl_.pathlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.devtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.datatime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.objidlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.processtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.commrcvtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.commsendtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosData, _impl_.fusionrcvtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID, _impl_.objid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::FusionPosData)},
  { 28, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::FusionPath)},
  { 43, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::FusionPathDatas)},
  { 53, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::RelOriPosData)},
  { 67, -1, -1, sizeof(::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::seisys::rbx::comm::bean::multi::_FusionPosData_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_FusionPath_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_FusionPathDatas_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_RelOriPosData_default_instance_._instance,
  &::cn::seisys::rbx::comm::bean::multi::_RelOriPosDataObjID_default_instance_._instance,
};

const char descriptor_table_protodef_FusionPathDatas_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025FusionPathDatas.proto\022\035cn.seisys.rbx.c"
  "omm.bean.multi\032\024MultiPathDatas.proto\"\203\003\n"
  "\rFusionPosData\022\021\n\tlongitude\030\001 \001(\001\022\021\n\tlat"
  "titude\030\002 \001(\001\022\021\n\televation\030\003 \001(\021\022\021\n\tcoord"
  "Type\030\004 \001(\005\022\014\n\004objX\030\005 \001(\002\022\014\n\004objY\030\006 \001(\002\022\014"
  "\n\004objZ\030\007 \001(\002\022\016\n\006laneNo\030\010 \001(\005\022\r\n\005speed\030\t "
  "\001(\021\022\016\n\006speedX\030\n \001(\021\022\016\n\006speedY\030\013 \001(\021\022\016\n\006s"
  "peedZ\030\014 \001(\021\022\016\n\006objOri\030\r \001(\005\022\024\n\014speedHead"
  "ing\030\016 \001(\005\022\014\n\004aclr\030\017 \001(\021\022\021\n\taclrAngle\030\020 \001"
  "(\005\022\016\n\006aclr_x\030\021 \001(\021\022\016\n\006aclr_y\030\022 \001(\021\022\016\n\006ac"
  "lr_z\030\023 \001(\021\022\020\n\010objWidth\030\024 \001(\005\022\021\n\tobjLengt"
  "h\030\025 \001(\005\022\021\n\tobjHeight\030\026 \001(\005\"\300\002\n\nFusionPat"
  "h\022\r\n\005objID\030\001 \001(\005\022\017\n\007objType\030\002 \001(\005\022\017\n\007obj"
  "Kind\030\003 \001(\005\022\020\n\010objState\030\004 \001(\005\022\r\n\005objCf\030\005 "
  "\001(\005\022A\n\013objPosDatas\030\006 \001(\0132,.cn.seisys.rbx"
  ".comm.bean.multi.FusionPosData\022\025\n\rhasVis"
  "ionData\030\007 \001(\010\022@\n\robjVisionData\030\010 \001(\0132).c"
  "n.seisys.rbx.comm.bean.multi.CameraPath\022"
  "D\n\016oriPosDataList\030\t \003(\0132,.cn.seisys.rbx."
  "comm.bean.multi.RelOriPosData\"\202\001\n\017Fusion"
  "PathDatas\022\020\n\010sendTime\030\001 \001(\003\022\020\n\010dataTime\030"
  "\002 \001(\003\022\016\n\006areaNo\030\003 \001(\005\022;\n\010pathList\030\004 \003(\0132"
  ").cn.seisys.rbx.comm.bean.multi.FusionPa"
  "th\"\341\001\n\rRelOriPosData\022\020\n\010deviceID\030\001 \001(\t\022\017"
  "\n\007devType\030\002 \001(\005\022\020\n\010dataTime\030\003 \001(\003\022D\n\tobj"
  "IDList\030\004 \003(\01321.cn.seisys.rbx.comm.bean.m"
  "ulti.RelOriPosDataObjID\022\023\n\013processTime\030\005"
  " \001(\003\022\023\n\013commRcvTime\030\006 \001(\003\022\024\n\014commSendTim"
  "e\030\007 \001(\003\022\025\n\rfusionRcvTime\030\010 \001(\003\"#\n\022RelOri"
  "PosDataObjID\022\r\n\005objID\030\001 \001(\003B5\n\035cn.seisys"
  ".rbx.comm.bean.multiB\024FusionPathDataProt"
  "osb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FusionPathDatas_2eproto_deps[1] = {
  &::descriptor_table_MultiPathDatas_2eproto,
};
static ::_pbi::once_flag descriptor_table_FusionPathDatas_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FusionPathDatas_2eproto = {
    false, false, 1250, descriptor_table_protodef_FusionPathDatas_2eproto,
    "FusionPathDatas.proto",
    &descriptor_table_FusionPathDatas_2eproto_once, descriptor_table_FusionPathDatas_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_FusionPathDatas_2eproto::offsets,
    file_level_metadata_FusionPathDatas_2eproto, file_level_enum_descriptors_FusionPathDatas_2eproto,
    file_level_service_descriptors_FusionPathDatas_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FusionPathDatas_2eproto_getter() {
  return &descriptor_table_FusionPathDatas_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FusionPathDatas_2eproto(&descriptor_table_FusionPathDatas_2eproto);
namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {

// ===================================================================

class FusionPosData::_Internal {
 public:
};

FusionPosData::FusionPosData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.FusionPosData)
}
FusionPosData::FusionPosData(const FusionPosData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FusionPosData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){}
    , decltype(_impl_.lattitude_){}
    , decltype(_impl_.elevation_){}
    , decltype(_impl_.coordtype_){}
    , decltype(_impl_.objx_){}
    , decltype(_impl_.objy_){}
    , decltype(_impl_.objz_){}
    , decltype(_impl_.laneno_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.speedx_){}
    , decltype(_impl_.speedy_){}
    , decltype(_impl_.speedz_){}
    , decltype(_impl_.objori_){}
    , decltype(_impl_.speedheading_){}
    , decltype(_impl_.aclr_){}
    , decltype(_impl_.aclrangle_){}
    , decltype(_impl_.aclr_x_){}
    , decltype(_impl_.aclr_y_){}
    , decltype(_impl_.aclr_z_){}
    , decltype(_impl_.objwidth_){}
    , decltype(_impl_.objlength_){}
    , decltype(_impl_.objheight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objheight_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.objheight_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.FusionPosData)
}

inline void FusionPosData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){0}
    , decltype(_impl_.lattitude_){0}
    , decltype(_impl_.elevation_){0}
    , decltype(_impl_.coordtype_){0}
    , decltype(_impl_.objx_){0}
    , decltype(_impl_.objy_){0}
    , decltype(_impl_.objz_){0}
    , decltype(_impl_.laneno_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.speedx_){0}
    , decltype(_impl_.speedy_){0}
    , decltype(_impl_.speedz_){0}
    , decltype(_impl_.objori_){0}
    , decltype(_impl_.speedheading_){0}
    , decltype(_impl_.aclr_){0}
    , decltype(_impl_.aclrangle_){0}
    , decltype(_impl_.aclr_x_){0}
    , decltype(_impl_.aclr_y_){0}
    , decltype(_impl_.aclr_z_){0}
    , decltype(_impl_.objwidth_){0}
    , decltype(_impl_.objlength_){0}
    , decltype(_impl_.objheight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FusionPosData::~FusionPosData() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.FusionPosData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FusionPosData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FusionPosData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FusionPosData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.FusionPosData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.objheight_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.objheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionPosData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lattitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.lattitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // sint32 elevation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 coordType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.coordtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float objX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.objx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.objy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.objz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 laneNo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.laneno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speedX = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.speedx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speedY = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.speedy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 speedZ = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.speedz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objOri = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.objori_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speedHeading = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.speedheading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.aclr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 aclrAngle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.aclrangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_x = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.aclr_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_y = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.aclr_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 aclr_z = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.aclr_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objWidth = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.objwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objLength = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.objlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objHeight = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.objheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FusionPosData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.FusionPosData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double lattitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lattitude = this->_internal_lattitude();
  uint64_t raw_lattitude;
  memcpy(&raw_lattitude, &tmp_lattitude, sizeof(tmp_lattitude));
  if (raw_lattitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_lattitude(), target);
  }

  // sint32 elevation = 3;
  if (this->_internal_elevation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_elevation(), target);
  }

  // int32 coordType = 4;
  if (this->_internal_coordtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_coordtype(), target);
  }

  // float objX = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx = this->_internal_objx();
  uint32_t raw_objx;
  memcpy(&raw_objx, &tmp_objx, sizeof(tmp_objx));
  if (raw_objx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_objx(), target);
  }

  // float objY = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objy = this->_internal_objy();
  uint32_t raw_objy;
  memcpy(&raw_objy, &tmp_objy, sizeof(tmp_objy));
  if (raw_objy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_objy(), target);
  }

  // float objZ = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objz = this->_internal_objz();
  uint32_t raw_objz;
  memcpy(&raw_objz, &tmp_objz, sizeof(tmp_objz));
  if (raw_objz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_objz(), target);
  }

  // int32 laneNo = 8;
  if (this->_internal_laneno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_laneno(), target);
  }

  // sint32 speed = 9;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(9, this->_internal_speed(), target);
  }

  // sint32 speedX = 10;
  if (this->_internal_speedx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(10, this->_internal_speedx(), target);
  }

  // sint32 speedY = 11;
  if (this->_internal_speedy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(11, this->_internal_speedy(), target);
  }

  // sint32 speedZ = 12;
  if (this->_internal_speedz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(12, this->_internal_speedz(), target);
  }

  // int32 objOri = 13;
  if (this->_internal_objori() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_objori(), target);
  }

  // int32 speedHeading = 14;
  if (this->_internal_speedheading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_speedheading(), target);
  }

  // sint32 aclr = 15;
  if (this->_internal_aclr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(15, this->_internal_aclr(), target);
  }

  // int32 aclrAngle = 16;
  if (this->_internal_aclrangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_aclrangle(), target);
  }

  // sint32 aclr_x = 17;
  if (this->_internal_aclr_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(17, this->_internal_aclr_x(), target);
  }

  // sint32 aclr_y = 18;
  if (this->_internal_aclr_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(18, this->_internal_aclr_y(), target);
  }

  // sint32 aclr_z = 19;
  if (this->_internal_aclr_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(19, this->_internal_aclr_z(), target);
  }

  // int32 objWidth = 20;
  if (this->_internal_objwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_objwidth(), target);
  }

  // int32 objLength = 21;
  if (this->_internal_objlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_objlength(), target);
  }

  // int32 objHeight = 22;
  if (this->_internal_objheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_objheight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.FusionPosData)
  return target;
}

size_t FusionPosData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.FusionPosData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double lattitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lattitude = this->_internal_lattitude();
  uint64_t raw_lattitude;
  memcpy(&raw_lattitude, &tmp_lattitude, sizeof(tmp_lattitude));
  if (raw_lattitude != 0) {
    total_size += 1 + 8;
  }

  // sint32 elevation = 3;
  if (this->_internal_elevation() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_elevation());
  }

  // int32 coordType = 4;
  if (this->_internal_coordtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordtype());
  }

  // float objX = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx = this->_internal_objx();
  uint32_t raw_objx;
  memcpy(&raw_objx, &tmp_objx, sizeof(tmp_objx));
  if (raw_objx != 0) {
    total_size += 1 + 4;
  }

  // float objY = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objy = this->_internal_objy();
  uint32_t raw_objy;
  memcpy(&raw_objy, &tmp_objy, sizeof(tmp_objy));
  if (raw_objy != 0) {
    total_size += 1 + 4;
  }

  // float objZ = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objz = this->_internal_objz();
  uint32_t raw_objz;
  memcpy(&raw_objz, &tmp_objz, sizeof(tmp_objz));
  if (raw_objz != 0) {
    total_size += 1 + 4;
  }

  // int32 laneNo = 8;
  if (this->_internal_laneno() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_laneno());
  }

  // sint32 speed = 9;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speed());
  }

  // sint32 speedX = 10;
  if (this->_internal_speedx() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speedx());
  }

  // sint32 speedY = 11;
  if (this->_internal_speedy() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speedy());
  }

  // sint32 speedZ = 12;
  if (this->_internal_speedz() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_speedz());
  }

  // int32 objOri = 13;
  if (this->_internal_objori() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objori());
  }

  // int32 speedHeading = 14;
  if (this->_internal_speedheading() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speedheading());
  }

  // sint32 aclr = 15;
  if (this->_internal_aclr() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_aclr());
  }

  // int32 aclrAngle = 16;
  if (this->_internal_aclrangle() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_aclrangle());
  }

  // sint32 aclr_x = 17;
  if (this->_internal_aclr_x() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_x());
  }

  // sint32 aclr_y = 18;
  if (this->_internal_aclr_y() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_y());
  }

  // sint32 aclr_z = 19;
  if (this->_internal_aclr_z() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_aclr_z());
  }

  // int32 objWidth = 20;
  if (this->_internal_objwidth() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objwidth());
  }

  // int32 objLength = 21;
  if (this->_internal_objlength() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objlength());
  }

  // int32 objHeight = 22;
  if (this->_internal_objheight() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_objheight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionPosData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FusionPosData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionPosData::GetClassData() const { return &_class_data_; }


void FusionPosData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FusionPosData*>(&to_msg);
  auto& from = static_cast<const FusionPosData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.FusionPosData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lattitude = from._internal_lattitude();
  uint64_t raw_lattitude;
  memcpy(&raw_lattitude, &tmp_lattitude, sizeof(tmp_lattitude));
  if (raw_lattitude != 0) {
    _this->_internal_set_lattitude(from._internal_lattitude());
  }
  if (from._internal_elevation() != 0) {
    _this->_internal_set_elevation(from._internal_elevation());
  }
  if (from._internal_coordtype() != 0) {
    _this->_internal_set_coordtype(from._internal_coordtype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx = from._internal_objx();
  uint32_t raw_objx;
  memcpy(&raw_objx, &tmp_objx, sizeof(tmp_objx));
  if (raw_objx != 0) {
    _this->_internal_set_objx(from._internal_objx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objy = from._internal_objy();
  uint32_t raw_objy;
  memcpy(&raw_objy, &tmp_objy, sizeof(tmp_objy));
  if (raw_objy != 0) {
    _this->_internal_set_objy(from._internal_objy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objz = from._internal_objz();
  uint32_t raw_objz;
  memcpy(&raw_objz, &tmp_objz, sizeof(tmp_objz));
  if (raw_objz != 0) {
    _this->_internal_set_objz(from._internal_objz());
  }
  if (from._internal_laneno() != 0) {
    _this->_internal_set_laneno(from._internal_laneno());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_speedx() != 0) {
    _this->_internal_set_speedx(from._internal_speedx());
  }
  if (from._internal_speedy() != 0) {
    _this->_internal_set_speedy(from._internal_speedy());
  }
  if (from._internal_speedz() != 0) {
    _this->_internal_set_speedz(from._internal_speedz());
  }
  if (from._internal_objori() != 0) {
    _this->_internal_set_objori(from._internal_objori());
  }
  if (from._internal_speedheading() != 0) {
    _this->_internal_set_speedheading(from._internal_speedheading());
  }
  if (from._internal_aclr() != 0) {
    _this->_internal_set_aclr(from._internal_aclr());
  }
  if (from._internal_aclrangle() != 0) {
    _this->_internal_set_aclrangle(from._internal_aclrangle());
  }
  if (from._internal_aclr_x() != 0) {
    _this->_internal_set_aclr_x(from._internal_aclr_x());
  }
  if (from._internal_aclr_y() != 0) {
    _this->_internal_set_aclr_y(from._internal_aclr_y());
  }
  if (from._internal_aclr_z() != 0) {
    _this->_internal_set_aclr_z(from._internal_aclr_z());
  }
  if (from._internal_objwidth() != 0) {
    _this->_internal_set_objwidth(from._internal_objwidth());
  }
  if (from._internal_objlength() != 0) {
    _this->_internal_set_objlength(from._internal_objlength());
  }
  if (from._internal_objheight() != 0) {
    _this->_internal_set_objheight(from._internal_objheight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionPosData::CopyFrom(const FusionPosData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.FusionPosData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionPosData::IsInitialized() const {
  return true;
}

void FusionPosData::InternalSwap(FusionPosData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionPosData, _impl_.objheight_)
      + sizeof(FusionPosData::_impl_.objheight_)
      - PROTOBUF_FIELD_OFFSET(FusionPosData, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionPosData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FusionPathDatas_2eproto_getter, &descriptor_table_FusionPathDatas_2eproto_once,
      file_level_metadata_FusionPathDatas_2eproto[0]);
}

// ===================================================================

class FusionPath::_Internal {
 public:
  static const ::cn::seisys::rbx::comm::bean::multi::FusionPosData& objposdatas(const FusionPath* msg);
  static const ::cn::seisys::rbx::comm::bean::multi::CameraPath& objvisiondata(const FusionPath* msg);
};

const ::cn::seisys::rbx::comm::bean::multi::FusionPosData&
FusionPath::_Internal::objposdatas(const FusionPath* msg) {
  return *msg->_impl_.objposdatas_;
}
const ::cn::seisys::rbx::comm::bean::multi::CameraPath&
FusionPath::_Internal::objvisiondata(const FusionPath* msg) {
  return *msg->_impl_.objvisiondata_;
}
void FusionPath::clear_objvisiondata() {
  if (GetArenaForAllocation() == nullptr && _impl_.objvisiondata_ != nullptr) {
    delete _impl_.objvisiondata_;
  }
  _impl_.objvisiondata_ = nullptr;
}
FusionPath::FusionPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.FusionPath)
}
FusionPath::FusionPath(const FusionPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FusionPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.oriposdatalist_){from._impl_.oriposdatalist_}
    , decltype(_impl_.objposdatas_){nullptr}
    , decltype(_impl_.objvisiondata_){nullptr}
    , decltype(_impl_.objid_){}
    , decltype(_impl_.objtype_){}
    , decltype(_impl_.objkind_){}
    , decltype(_impl_.objstate_){}
    , decltype(_impl_.objcf_){}
    , decltype(_impl_.hasvisiondata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objposdatas()) {
    _this->_impl_.objposdatas_ = new ::cn::seisys::rbx::comm::bean::multi::FusionPosData(*from._impl_.objposdatas_);
  }
  if (from._internal_has_objvisiondata()) {
    _this->_impl_.objvisiondata_ = new ::cn::seisys::rbx::comm::bean::multi::CameraPath(*from._impl_.objvisiondata_);
  }
  ::memcpy(&_impl_.objid_, &from._impl_.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hasvisiondata_) -
    reinterpret_cast<char*>(&_impl_.objid_)) + sizeof(_impl_.hasvisiondata_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.FusionPath)
}

inline void FusionPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.oriposdatalist_){arena}
    , decltype(_impl_.objposdatas_){nullptr}
    , decltype(_impl_.objvisiondata_){nullptr}
    , decltype(_impl_.objid_){0}
    , decltype(_impl_.objtype_){0}
    , decltype(_impl_.objkind_){0}
    , decltype(_impl_.objstate_){0}
    , decltype(_impl_.objcf_){0}
    , decltype(_impl_.hasvisiondata_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FusionPath::~FusionPath() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.FusionPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FusionPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oriposdatalist_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.objposdatas_;
  if (this != internal_default_instance()) delete _impl_.objvisiondata_;
}

void FusionPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FusionPath::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.FusionPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.oriposdatalist_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.objposdatas_ != nullptr) {
    delete _impl_.objposdatas_;
  }
  _impl_.objposdatas_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.objvisiondata_ != nullptr) {
    delete _impl_.objvisiondata_;
  }
  _impl_.objvisiondata_ = nullptr;
  ::memset(&_impl_.objid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hasvisiondata_) -
      reinterpret_cast<char*>(&_impl_.objid_)) + sizeof(_impl_.hasvisiondata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.objtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objKind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.objkind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.objstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objCf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.objcf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.rbx.comm.bean.multi.FusionPosData objPosDatas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_objposdatas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasVisionData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hasvisiondata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.rbx.comm.bean.multi.CameraPath objVisionData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_objvisiondata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosData oriPosDataList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oriposdatalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FusionPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.FusionPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objID = 1;
  if (this->_internal_objid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objid(), target);
  }

  // int32 objType = 2;
  if (this->_internal_objtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_objtype(), target);
  }

  // int32 objKind = 3;
  if (this->_internal_objkind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_objkind(), target);
  }

  // int32 objState = 4;
  if (this->_internal_objstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_objstate(), target);
  }

  // int32 objCf = 5;
  if (this->_internal_objcf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_objcf(), target);
  }

  // .cn.seisys.rbx.comm.bean.multi.FusionPosData objPosDatas = 6;
  if (this->_internal_has_objposdatas()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::objposdatas(this),
        _Internal::objposdatas(this).GetCachedSize(), target, stream);
  }

  // bool hasVisionData = 7;
  if (this->_internal_hasvisiondata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_hasvisiondata(), target);
  }

  // .cn.seisys.rbx.comm.bean.multi.CameraPath objVisionData = 8;
  if (this->_internal_has_objvisiondata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::objvisiondata(this),
        _Internal::objvisiondata(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosData oriPosDataList = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_oriposdatalist_size()); i < n; i++) {
    const auto& repfield = this->_internal_oriposdatalist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.FusionPath)
  return target;
}

size_t FusionPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.FusionPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosData oriPosDataList = 9;
  total_size += 1UL * this->_internal_oriposdatalist_size();
  for (const auto& msg : this->_impl_.oriposdatalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.rbx.comm.bean.multi.FusionPosData objPosDatas = 6;
  if (this->_internal_has_objposdatas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objposdatas_);
  }

  // .cn.seisys.rbx.comm.bean.multi.CameraPath objVisionData = 8;
  if (this->_internal_has_objvisiondata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objvisiondata_);
  }

  // int32 objID = 1;
  if (this->_internal_objid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objid());
  }

  // int32 objType = 2;
  if (this->_internal_objtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objtype());
  }

  // int32 objKind = 3;
  if (this->_internal_objkind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objkind());
  }

  // int32 objState = 4;
  if (this->_internal_objstate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objstate());
  }

  // int32 objCf = 5;
  if (this->_internal_objcf() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objcf());
  }

  // bool hasVisionData = 7;
  if (this->_internal_hasvisiondata() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FusionPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionPath::GetClassData() const { return &_class_data_; }


void FusionPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FusionPath*>(&to_msg);
  auto& from = static_cast<const FusionPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.FusionPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.oriposdatalist_.MergeFrom(from._impl_.oriposdatalist_);
  if (from._internal_has_objposdatas()) {
    _this->_internal_mutable_objposdatas()->::cn::seisys::rbx::comm::bean::multi::FusionPosData::MergeFrom(
        from._internal_objposdatas());
  }
  if (from._internal_has_objvisiondata()) {
    _this->_internal_mutable_objvisiondata()->::cn::seisys::rbx::comm::bean::multi::CameraPath::MergeFrom(
        from._internal_objvisiondata());
  }
  if (from._internal_objid() != 0) {
    _this->_internal_set_objid(from._internal_objid());
  }
  if (from._internal_objtype() != 0) {
    _this->_internal_set_objtype(from._internal_objtype());
  }
  if (from._internal_objkind() != 0) {
    _this->_internal_set_objkind(from._internal_objkind());
  }
  if (from._internal_objstate() != 0) {
    _this->_internal_set_objstate(from._internal_objstate());
  }
  if (from._internal_objcf() != 0) {
    _this->_internal_set_objcf(from._internal_objcf());
  }
  if (from._internal_hasvisiondata() != 0) {
    _this->_internal_set_hasvisiondata(from._internal_hasvisiondata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionPath::CopyFrom(const FusionPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.FusionPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionPath::IsInitialized() const {
  return true;
}

void FusionPath::InternalSwap(FusionPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.oriposdatalist_.InternalSwap(&other->_impl_.oriposdatalist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionPath, _impl_.hasvisiondata_)
      + sizeof(FusionPath::_impl_.hasvisiondata_)
      - PROTOBUF_FIELD_OFFSET(FusionPath, _impl_.objposdatas_)>(
          reinterpret_cast<char*>(&_impl_.objposdatas_),
          reinterpret_cast<char*>(&other->_impl_.objposdatas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FusionPathDatas_2eproto_getter, &descriptor_table_FusionPathDatas_2eproto_once,
      file_level_metadata_FusionPathDatas_2eproto[1]);
}

// ===================================================================

class FusionPathDatas::_Internal {
 public:
};

FusionPathDatas::FusionPathDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
}
FusionPathDatas::FusionPathDatas(const FusionPathDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FusionPathDatas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathlist_){from._impl_.pathlist_}
    , decltype(_impl_.sendtime_){}
    , decltype(_impl_.datatime_){}
    , decltype(_impl_.areano_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sendtime_, &from._impl_.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.areano_) -
    reinterpret_cast<char*>(&_impl_.sendtime_)) + sizeof(_impl_.areano_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
}

inline void FusionPathDatas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathlist_){arena}
    , decltype(_impl_.sendtime_){int64_t{0}}
    , decltype(_impl_.datatime_){int64_t{0}}
    , decltype(_impl_.areano_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FusionPathDatas::~FusionPathDatas() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FusionPathDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathlist_.~RepeatedPtrField();
}

void FusionPathDatas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FusionPathDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathlist_.Clear();
  ::memset(&_impl_.sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.areano_) -
      reinterpret_cast<char*>(&_impl_.sendtime_)) + sizeof(_impl_.areano_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionPathDatas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dataTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.datatime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 areaNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.areano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.FusionPath pathList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FusionPathDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sendTime = 1;
  if (this->_internal_sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // int64 dataTime = 2;
  if (this->_internal_datatime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_datatime(), target);
  }

  // int32 areaNo = 3;
  if (this->_internal_areano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_areano(), target);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.FusionPath pathList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_pathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
  return target;
}

size_t FusionPathDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.rbx.comm.bean.multi.FusionPath pathList = 4;
  total_size += 1UL * this->_internal_pathlist_size();
  for (const auto& msg : this->_impl_.pathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 sendTime = 1;
  if (this->_internal_sendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendtime());
  }

  // int64 dataTime = 2;
  if (this->_internal_datatime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatime());
  }

  // int32 areaNo = 3;
  if (this->_internal_areano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areano());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionPathDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FusionPathDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionPathDatas::GetClassData() const { return &_class_data_; }


void FusionPathDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FusionPathDatas*>(&to_msg);
  auto& from = static_cast<const FusionPathDatas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pathlist_.MergeFrom(from._impl_.pathlist_);
  if (from._internal_sendtime() != 0) {
    _this->_internal_set_sendtime(from._internal_sendtime());
  }
  if (from._internal_datatime() != 0) {
    _this->_internal_set_datatime(from._internal_datatime());
  }
  if (from._internal_areano() != 0) {
    _this->_internal_set_areano(from._internal_areano());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionPathDatas::CopyFrom(const FusionPathDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionPathDatas::IsInitialized() const {
  return true;
}

void FusionPathDatas::InternalSwap(FusionPathDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pathlist_.InternalSwap(&other->_impl_.pathlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionPathDatas, _impl_.areano_)
      + sizeof(FusionPathDatas::_impl_.areano_)
      - PROTOBUF_FIELD_OFFSET(FusionPathDatas, _impl_.sendtime_)>(
          reinterpret_cast<char*>(&_impl_.sendtime_),
          reinterpret_cast<char*>(&other->_impl_.sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionPathDatas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FusionPathDatas_2eproto_getter, &descriptor_table_FusionPathDatas_2eproto_once,
      file_level_metadata_FusionPathDatas_2eproto[2]);
}

// ===================================================================

class RelOriPosData::_Internal {
 public:
};

RelOriPosData::RelOriPosData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
}
RelOriPosData::RelOriPosData(const RelOriPosData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelOriPosData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objidlist_){from._impl_.objidlist_}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.datatime_){}
    , decltype(_impl_.processtime_){}
    , decltype(_impl_.commrcvtime_){}
    , decltype(_impl_.commsendtime_){}
    , decltype(_impl_.fusionrcvtime_){}
    , decltype(_impl_.devtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.datatime_, &from._impl_.datatime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.devtype_) -
    reinterpret_cast<char*>(&_impl_.datatime_)) + sizeof(_impl_.devtype_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
}

inline void RelOriPosData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objidlist_){arena}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.datatime_){int64_t{0}}
    , decltype(_impl_.processtime_){int64_t{0}}
    , decltype(_impl_.commrcvtime_){int64_t{0}}
    , decltype(_impl_.commsendtime_){int64_t{0}}
    , decltype(_impl_.fusionrcvtime_){int64_t{0}}
    , decltype(_impl_.devtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RelOriPosData::~RelOriPosData() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelOriPosData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objidlist_.~RepeatedPtrField();
  _impl_.deviceid_.Destroy();
}

void RelOriPosData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelOriPosData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objidlist_.Clear();
  _impl_.deviceid_.ClearToEmpty();
  ::memset(&_impl_.datatime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.devtype_) -
      reinterpret_cast<char*>(&_impl_.datatime_)) + sizeof(_impl_.devtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelOriPosData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.rbx.comm.bean.multi.RelOriPosData.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // int32 devType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.devtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dataTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.datatime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID objIDList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objidlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 processTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.processtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 commRcvTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.commrcvtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 commSendTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.commsendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fusionRcvTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.fusionrcvtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelOriPosData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.rbx.comm.bean.multi.RelOriPosData.deviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // int32 devType = 2;
  if (this->_internal_devtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_devtype(), target);
  }

  // int64 dataTime = 3;
  if (this->_internal_datatime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_datatime(), target);
  }

  // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID objIDList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objidlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_objidlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 processTime = 5;
  if (this->_internal_processtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_processtime(), target);
  }

  // int64 commRcvTime = 6;
  if (this->_internal_commrcvtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_commrcvtime(), target);
  }

  // int64 commSendTime = 7;
  if (this->_internal_commsendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_commsendtime(), target);
  }

  // int64 fusionRcvTime = 8;
  if (this->_internal_fusionrcvtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_fusionrcvtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
  return target;
}

size_t RelOriPosData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID objIDList = 4;
  total_size += 1UL * this->_internal_objidlist_size();
  for (const auto& msg : this->_impl_.objidlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string deviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // int64 dataTime = 3;
  if (this->_internal_datatime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatime());
  }

  // int64 processTime = 5;
  if (this->_internal_processtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_processtime());
  }

  // int64 commRcvTime = 6;
  if (this->_internal_commrcvtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_commrcvtime());
  }

  // int64 commSendTime = 7;
  if (this->_internal_commsendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_commsendtime());
  }

  // int64 fusionRcvTime = 8;
  if (this->_internal_fusionrcvtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fusionrcvtime());
  }

  // int32 devType = 2;
  if (this->_internal_devtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_devtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelOriPosData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelOriPosData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelOriPosData::GetClassData() const { return &_class_data_; }


void RelOriPosData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelOriPosData*>(&to_msg);
  auto& from = static_cast<const RelOriPosData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objidlist_.MergeFrom(from._impl_.objidlist_);
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (from._internal_datatime() != 0) {
    _this->_internal_set_datatime(from._internal_datatime());
  }
  if (from._internal_processtime() != 0) {
    _this->_internal_set_processtime(from._internal_processtime());
  }
  if (from._internal_commrcvtime() != 0) {
    _this->_internal_set_commrcvtime(from._internal_commrcvtime());
  }
  if (from._internal_commsendtime() != 0) {
    _this->_internal_set_commsendtime(from._internal_commsendtime());
  }
  if (from._internal_fusionrcvtime() != 0) {
    _this->_internal_set_fusionrcvtime(from._internal_fusionrcvtime());
  }
  if (from._internal_devtype() != 0) {
    _this->_internal_set_devtype(from._internal_devtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelOriPosData::CopyFrom(const RelOriPosData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelOriPosData::IsInitialized() const {
  return true;
}

void RelOriPosData::InternalSwap(RelOriPosData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objidlist_.InternalSwap(&other->_impl_.objidlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelOriPosData, _impl_.devtype_)
      + sizeof(RelOriPosData::_impl_.devtype_)
      - PROTOBUF_FIELD_OFFSET(RelOriPosData, _impl_.datatime_)>(
          reinterpret_cast<char*>(&_impl_.datatime_),
          reinterpret_cast<char*>(&other->_impl_.datatime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelOriPosData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FusionPathDatas_2eproto_getter, &descriptor_table_FusionPathDatas_2eproto_once,
      file_level_metadata_FusionPathDatas_2eproto[3]);
}

// ===================================================================

class RelOriPosDataObjID::_Internal {
 public:
};

RelOriPosDataObjID::RelOriPosDataObjID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
}
RelOriPosDataObjID::RelOriPosDataObjID(const RelOriPosDataObjID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelOriPosDataObjID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objid_ = from._impl_.objid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
}

inline void RelOriPosDataObjID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelOriPosDataObjID::~RelOriPosDataObjID() {
  // @@protoc_insertion_point(destructor:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelOriPosDataObjID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RelOriPosDataObjID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelOriPosDataObjID::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelOriPosDataObjID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 objID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelOriPosDataObjID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 objID = 1;
  if (this->_internal_objid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_objid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
  return target;
}

size_t RelOriPosDataObjID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 objID = 1;
  if (this->_internal_objid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_objid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelOriPosDataObjID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelOriPosDataObjID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelOriPosDataObjID::GetClassData() const { return &_class_data_; }


void RelOriPosDataObjID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelOriPosDataObjID*>(&to_msg);
  auto& from = static_cast<const RelOriPosDataObjID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objid() != 0) {
    _this->_internal_set_objid(from._internal_objid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelOriPosDataObjID::CopyFrom(const RelOriPosDataObjID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelOriPosDataObjID::IsInitialized() const {
  return true;
}

void RelOriPosDataObjID::InternalSwap(RelOriPosDataObjID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.objid_, other->_impl_.objid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelOriPosDataObjID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FusionPathDatas_2eproto_getter, &descriptor_table_FusionPathDatas_2eproto_once,
      file_level_metadata_FusionPathDatas_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::FusionPosData*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::FusionPosData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::FusionPosData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::FusionPath*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::FusionPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::FusionPath >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::FusionPathDatas*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::FusionPathDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::FusionPathDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::RelOriPosData*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::RelOriPosData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::RelOriPosData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID*
Arena::CreateMaybeMessage< ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
