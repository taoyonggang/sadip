// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FusionPathDatas.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FusionPathDatas_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FusionPathDatas_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MultiPathDatas.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FusionPathDatas_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FusionPathDatas_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FusionPathDatas_2eproto;
namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {
class FusionPath;
struct FusionPathDefaultTypeInternal;
extern FusionPathDefaultTypeInternal _FusionPath_default_instance_;
class FusionPathDatas;
struct FusionPathDatasDefaultTypeInternal;
extern FusionPathDatasDefaultTypeInternal _FusionPathDatas_default_instance_;
class FusionPosData;
struct FusionPosDataDefaultTypeInternal;
extern FusionPosDataDefaultTypeInternal _FusionPosData_default_instance_;
class RelOriPosData;
struct RelOriPosDataDefaultTypeInternal;
extern RelOriPosDataDefaultTypeInternal _RelOriPosData_default_instance_;
class RelOriPosDataObjID;
struct RelOriPosDataObjIDDefaultTypeInternal;
extern RelOriPosDataObjIDDefaultTypeInternal _RelOriPosDataObjID_default_instance_;
}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> ::cn::seisys::rbx::comm::bean::multi::FusionPath* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::FusionPath>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::FusionPathDatas* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::FusionPathDatas>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::FusionPosData* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::FusionPosData>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::RelOriPosData>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {

// ===================================================================

class FusionPosData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.FusionPosData) */ {
 public:
  inline FusionPosData() : FusionPosData(nullptr) {}
  ~FusionPosData() override;
  explicit PROTOBUF_CONSTEXPR FusionPosData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionPosData(const FusionPosData& from);
  FusionPosData(FusionPosData&& from) noexcept
    : FusionPosData() {
    *this = ::std::move(from);
  }

  inline FusionPosData& operator=(const FusionPosData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionPosData& operator=(FusionPosData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionPosData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionPosData* internal_default_instance() {
    return reinterpret_cast<const FusionPosData*>(
               &_FusionPosData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FusionPosData& a, FusionPosData& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionPosData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionPosData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionPosData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionPosData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionPosData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FusionPosData& from) {
    FusionPosData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionPosData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.FusionPosData";
  }
  protected:
  explicit FusionPosData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLattitudeFieldNumber = 2,
    kElevationFieldNumber = 3,
    kCoordTypeFieldNumber = 4,
    kObjXFieldNumber = 5,
    kObjYFieldNumber = 6,
    kObjZFieldNumber = 7,
    kLaneNoFieldNumber = 8,
    kSpeedFieldNumber = 9,
    kSpeedXFieldNumber = 10,
    kSpeedYFieldNumber = 11,
    kSpeedZFieldNumber = 12,
    kObjOriFieldNumber = 13,
    kSpeedHeadingFieldNumber = 14,
    kAclrFieldNumber = 15,
    kAclrAngleFieldNumber = 16,
    kAclrXFieldNumber = 17,
    kAclrYFieldNumber = 18,
    kAclrZFieldNumber = 19,
    kObjWidthFieldNumber = 20,
    kObjLengthFieldNumber = 21,
    kObjHeightFieldNumber = 22,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double lattitude = 2;
  void clear_lattitude();
  double lattitude() const;
  void set_lattitude(double value);
  private:
  double _internal_lattitude() const;
  void _internal_set_lattitude(double value);
  public:

  // sint32 elevation = 3;
  void clear_elevation();
  int32_t elevation() const;
  void set_elevation(int32_t value);
  private:
  int32_t _internal_elevation() const;
  void _internal_set_elevation(int32_t value);
  public:

  // int32 coordType = 4;
  void clear_coordtype();
  int32_t coordtype() const;
  void set_coordtype(int32_t value);
  private:
  int32_t _internal_coordtype() const;
  void _internal_set_coordtype(int32_t value);
  public:

  // float objX = 5;
  void clear_objx();
  float objx() const;
  void set_objx(float value);
  private:
  float _internal_objx() const;
  void _internal_set_objx(float value);
  public:

  // float objY = 6;
  void clear_objy();
  float objy() const;
  void set_objy(float value);
  private:
  float _internal_objy() const;
  void _internal_set_objy(float value);
  public:

  // float objZ = 7;
  void clear_objz();
  float objz() const;
  void set_objz(float value);
  private:
  float _internal_objz() const;
  void _internal_set_objz(float value);
  public:

  // int32 laneNo = 8;
  void clear_laneno();
  int32_t laneno() const;
  void set_laneno(int32_t value);
  private:
  int32_t _internal_laneno() const;
  void _internal_set_laneno(int32_t value);
  public:

  // sint32 speed = 9;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // sint32 speedX = 10;
  void clear_speedx();
  int32_t speedx() const;
  void set_speedx(int32_t value);
  private:
  int32_t _internal_speedx() const;
  void _internal_set_speedx(int32_t value);
  public:

  // sint32 speedY = 11;
  void clear_speedy();
  int32_t speedy() const;
  void set_speedy(int32_t value);
  private:
  int32_t _internal_speedy() const;
  void _internal_set_speedy(int32_t value);
  public:

  // sint32 speedZ = 12;
  void clear_speedz();
  int32_t speedz() const;
  void set_speedz(int32_t value);
  private:
  int32_t _internal_speedz() const;
  void _internal_set_speedz(int32_t value);
  public:

  // int32 objOri = 13;
  void clear_objori();
  int32_t objori() const;
  void set_objori(int32_t value);
  private:
  int32_t _internal_objori() const;
  void _internal_set_objori(int32_t value);
  public:

  // int32 speedHeading = 14;
  void clear_speedheading();
  int32_t speedheading() const;
  void set_speedheading(int32_t value);
  private:
  int32_t _internal_speedheading() const;
  void _internal_set_speedheading(int32_t value);
  public:

  // sint32 aclr = 15;
  void clear_aclr();
  int32_t aclr() const;
  void set_aclr(int32_t value);
  private:
  int32_t _internal_aclr() const;
  void _internal_set_aclr(int32_t value);
  public:

  // int32 aclrAngle = 16;
  void clear_aclrangle();
  int32_t aclrangle() const;
  void set_aclrangle(int32_t value);
  private:
  int32_t _internal_aclrangle() const;
  void _internal_set_aclrangle(int32_t value);
  public:

  // sint32 aclr_x = 17;
  void clear_aclr_x();
  int32_t aclr_x() const;
  void set_aclr_x(int32_t value);
  private:
  int32_t _internal_aclr_x() const;
  void _internal_set_aclr_x(int32_t value);
  public:

  // sint32 aclr_y = 18;
  void clear_aclr_y();
  int32_t aclr_y() const;
  void set_aclr_y(int32_t value);
  private:
  int32_t _internal_aclr_y() const;
  void _internal_set_aclr_y(int32_t value);
  public:

  // sint32 aclr_z = 19;
  void clear_aclr_z();
  int32_t aclr_z() const;
  void set_aclr_z(int32_t value);
  private:
  int32_t _internal_aclr_z() const;
  void _internal_set_aclr_z(int32_t value);
  public:

  // int32 objWidth = 20;
  void clear_objwidth();
  int32_t objwidth() const;
  void set_objwidth(int32_t value);
  private:
  int32_t _internal_objwidth() const;
  void _internal_set_objwidth(int32_t value);
  public:

  // int32 objLength = 21;
  void clear_objlength();
  int32_t objlength() const;
  void set_objlength(int32_t value);
  private:
  int32_t _internal_objlength() const;
  void _internal_set_objlength(int32_t value);
  public:

  // int32 objHeight = 22;
  void clear_objheight();
  int32_t objheight() const;
  void set_objheight(int32_t value);
  private:
  int32_t _internal_objheight() const;
  void _internal_set_objheight(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.FusionPosData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double longitude_;
    double lattitude_;
    int32_t elevation_;
    int32_t coordtype_;
    float objx_;
    float objy_;
    float objz_;
    int32_t laneno_;
    int32_t speed_;
    int32_t speedx_;
    int32_t speedy_;
    int32_t speedz_;
    int32_t objori_;
    int32_t speedheading_;
    int32_t aclr_;
    int32_t aclrangle_;
    int32_t aclr_x_;
    int32_t aclr_y_;
    int32_t aclr_z_;
    int32_t objwidth_;
    int32_t objlength_;
    int32_t objheight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FusionPathDatas_2eproto;
};
// -------------------------------------------------------------------

class FusionPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.FusionPath) */ {
 public:
  inline FusionPath() : FusionPath(nullptr) {}
  ~FusionPath() override;
  explicit PROTOBUF_CONSTEXPR FusionPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionPath(const FusionPath& from);
  FusionPath(FusionPath&& from) noexcept
    : FusionPath() {
    *this = ::std::move(from);
  }

  inline FusionPath& operator=(const FusionPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionPath& operator=(FusionPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionPath* internal_default_instance() {
    return reinterpret_cast<const FusionPath*>(
               &_FusionPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FusionPath& a, FusionPath& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FusionPath& from) {
    FusionPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.FusionPath";
  }
  protected:
  explicit FusionPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriPosDataListFieldNumber = 9,
    kObjPosDatasFieldNumber = 6,
    kObjVisionDataFieldNumber = 8,
    kObjIDFieldNumber = 1,
    kObjTypeFieldNumber = 2,
    kObjKindFieldNumber = 3,
    kObjStateFieldNumber = 4,
    kObjCfFieldNumber = 5,
    kHasVisionDataFieldNumber = 7,
  };
  // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosData oriPosDataList = 9;
  int oriposdatalist_size() const;
  private:
  int _internal_oriposdatalist_size() const;
  public:
  void clear_oriposdatalist();
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* mutable_oriposdatalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosData >*
      mutable_oriposdatalist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::RelOriPosData& _internal_oriposdatalist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* _internal_add_oriposdatalist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::RelOriPosData& oriposdatalist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* add_oriposdatalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosData >&
      oriposdatalist() const;

  // .cn.seisys.rbx.comm.bean.multi.FusionPosData objPosDatas = 6;
  bool has_objposdatas() const;
  private:
  bool _internal_has_objposdatas() const;
  public:
  void clear_objposdatas();
  const ::cn::seisys::rbx::comm::bean::multi::FusionPosData& objposdatas() const;
  PROTOBUF_NODISCARD ::cn::seisys::rbx::comm::bean::multi::FusionPosData* release_objposdatas();
  ::cn::seisys::rbx::comm::bean::multi::FusionPosData* mutable_objposdatas();
  void set_allocated_objposdatas(::cn::seisys::rbx::comm::bean::multi::FusionPosData* objposdatas);
  private:
  const ::cn::seisys::rbx::comm::bean::multi::FusionPosData& _internal_objposdatas() const;
  ::cn::seisys::rbx::comm::bean::multi::FusionPosData* _internal_mutable_objposdatas();
  public:
  void unsafe_arena_set_allocated_objposdatas(
      ::cn::seisys::rbx::comm::bean::multi::FusionPosData* objposdatas);
  ::cn::seisys::rbx::comm::bean::multi::FusionPosData* unsafe_arena_release_objposdatas();

  // .cn.seisys.rbx.comm.bean.multi.CameraPath objVisionData = 8;
  bool has_objvisiondata() const;
  private:
  bool _internal_has_objvisiondata() const;
  public:
  void clear_objvisiondata();
  const ::cn::seisys::rbx::comm::bean::multi::CameraPath& objvisiondata() const;
  PROTOBUF_NODISCARD ::cn::seisys::rbx::comm::bean::multi::CameraPath* release_objvisiondata();
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* mutable_objvisiondata();
  void set_allocated_objvisiondata(::cn::seisys::rbx::comm::bean::multi::CameraPath* objvisiondata);
  private:
  const ::cn::seisys::rbx::comm::bean::multi::CameraPath& _internal_objvisiondata() const;
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* _internal_mutable_objvisiondata();
  public:
  void unsafe_arena_set_allocated_objvisiondata(
      ::cn::seisys::rbx::comm::bean::multi::CameraPath* objvisiondata);
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* unsafe_arena_release_objvisiondata();

  // int32 objID = 1;
  void clear_objid();
  int32_t objid() const;
  void set_objid(int32_t value);
  private:
  int32_t _internal_objid() const;
  void _internal_set_objid(int32_t value);
  public:

  // int32 objType = 2;
  void clear_objtype();
  int32_t objtype() const;
  void set_objtype(int32_t value);
  private:
  int32_t _internal_objtype() const;
  void _internal_set_objtype(int32_t value);
  public:

  // int32 objKind = 3;
  void clear_objkind();
  int32_t objkind() const;
  void set_objkind(int32_t value);
  private:
  int32_t _internal_objkind() const;
  void _internal_set_objkind(int32_t value);
  public:

  // int32 objState = 4;
  void clear_objstate();
  int32_t objstate() const;
  void set_objstate(int32_t value);
  private:
  int32_t _internal_objstate() const;
  void _internal_set_objstate(int32_t value);
  public:

  // int32 objCf = 5;
  void clear_objcf();
  int32_t objcf() const;
  void set_objcf(int32_t value);
  private:
  int32_t _internal_objcf() const;
  void _internal_set_objcf(int32_t value);
  public:

  // bool hasVisionData = 7;
  void clear_hasvisiondata();
  bool hasvisiondata() const;
  void set_hasvisiondata(bool value);
  private:
  bool _internal_hasvisiondata() const;
  void _internal_set_hasvisiondata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.FusionPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosData > oriposdatalist_;
    ::cn::seisys::rbx::comm::bean::multi::FusionPosData* objposdatas_;
    ::cn::seisys::rbx::comm::bean::multi::CameraPath* objvisiondata_;
    int32_t objid_;
    int32_t objtype_;
    int32_t objkind_;
    int32_t objstate_;
    int32_t objcf_;
    bool hasvisiondata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FusionPathDatas_2eproto;
};
// -------------------------------------------------------------------

class FusionPathDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.FusionPathDatas) */ {
 public:
  inline FusionPathDatas() : FusionPathDatas(nullptr) {}
  ~FusionPathDatas() override;
  explicit PROTOBUF_CONSTEXPR FusionPathDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionPathDatas(const FusionPathDatas& from);
  FusionPathDatas(FusionPathDatas&& from) noexcept
    : FusionPathDatas() {
    *this = ::std::move(from);
  }

  inline FusionPathDatas& operator=(const FusionPathDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionPathDatas& operator=(FusionPathDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionPathDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionPathDatas* internal_default_instance() {
    return reinterpret_cast<const FusionPathDatas*>(
               &_FusionPathDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FusionPathDatas& a, FusionPathDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionPathDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionPathDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionPathDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionPathDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionPathDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FusionPathDatas& from) {
    FusionPathDatas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionPathDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.FusionPathDatas";
  }
  protected:
  explicit FusionPathDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathListFieldNumber = 4,
    kSendTimeFieldNumber = 1,
    kDataTimeFieldNumber = 2,
    kAreaNoFieldNumber = 3,
  };
  // repeated .cn.seisys.rbx.comm.bean.multi.FusionPath pathList = 4;
  int pathlist_size() const;
  private:
  int _internal_pathlist_size() const;
  public:
  void clear_pathlist();
  ::cn::seisys::rbx::comm::bean::multi::FusionPath* mutable_pathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::FusionPath >*
      mutable_pathlist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::FusionPath& _internal_pathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::FusionPath* _internal_add_pathlist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::FusionPath& pathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::FusionPath* add_pathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::FusionPath >&
      pathlist() const;

  // int64 sendTime = 1;
  void clear_sendtime();
  int64_t sendtime() const;
  void set_sendtime(int64_t value);
  private:
  int64_t _internal_sendtime() const;
  void _internal_set_sendtime(int64_t value);
  public:

  // int64 dataTime = 2;
  void clear_datatime();
  int64_t datatime() const;
  void set_datatime(int64_t value);
  private:
  int64_t _internal_datatime() const;
  void _internal_set_datatime(int64_t value);
  public:

  // int32 areaNo = 3;
  void clear_areano();
  int32_t areano() const;
  void set_areano(int32_t value);
  private:
  int32_t _internal_areano() const;
  void _internal_set_areano(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.FusionPathDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::FusionPath > pathlist_;
    int64_t sendtime_;
    int64_t datatime_;
    int32_t areano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FusionPathDatas_2eproto;
};
// -------------------------------------------------------------------

class RelOriPosData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.RelOriPosData) */ {
 public:
  inline RelOriPosData() : RelOriPosData(nullptr) {}
  ~RelOriPosData() override;
  explicit PROTOBUF_CONSTEXPR RelOriPosData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelOriPosData(const RelOriPosData& from);
  RelOriPosData(RelOriPosData&& from) noexcept
    : RelOriPosData() {
    *this = ::std::move(from);
  }

  inline RelOriPosData& operator=(const RelOriPosData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelOriPosData& operator=(RelOriPosData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelOriPosData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelOriPosData* internal_default_instance() {
    return reinterpret_cast<const RelOriPosData*>(
               &_RelOriPosData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelOriPosData& a, RelOriPosData& b) {
    a.Swap(&b);
  }
  inline void Swap(RelOriPosData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelOriPosData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelOriPosData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelOriPosData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelOriPosData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelOriPosData& from) {
    RelOriPosData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelOriPosData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.RelOriPosData";
  }
  protected:
  explicit RelOriPosData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIDListFieldNumber = 4,
    kDeviceIDFieldNumber = 1,
    kDataTimeFieldNumber = 3,
    kProcessTimeFieldNumber = 5,
    kCommRcvTimeFieldNumber = 6,
    kCommSendTimeFieldNumber = 7,
    kFusionRcvTimeFieldNumber = 8,
    kDevTypeFieldNumber = 2,
  };
  // repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID objIDList = 4;
  int objidlist_size() const;
  private:
  int _internal_objidlist_size() const;
  public:
  void clear_objidlist();
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* mutable_objidlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID >*
      mutable_objidlist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID& _internal_objidlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* _internal_add_objidlist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID& objidlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* add_objidlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID >&
      objidlist() const;

  // string deviceID = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // int64 dataTime = 3;
  void clear_datatime();
  int64_t datatime() const;
  void set_datatime(int64_t value);
  private:
  int64_t _internal_datatime() const;
  void _internal_set_datatime(int64_t value);
  public:

  // int64 processTime = 5;
  void clear_processtime();
  int64_t processtime() const;
  void set_processtime(int64_t value);
  private:
  int64_t _internal_processtime() const;
  void _internal_set_processtime(int64_t value);
  public:

  // int64 commRcvTime = 6;
  void clear_commrcvtime();
  int64_t commrcvtime() const;
  void set_commrcvtime(int64_t value);
  private:
  int64_t _internal_commrcvtime() const;
  void _internal_set_commrcvtime(int64_t value);
  public:

  // int64 commSendTime = 7;
  void clear_commsendtime();
  int64_t commsendtime() const;
  void set_commsendtime(int64_t value);
  private:
  int64_t _internal_commsendtime() const;
  void _internal_set_commsendtime(int64_t value);
  public:

  // int64 fusionRcvTime = 8;
  void clear_fusionrcvtime();
  int64_t fusionrcvtime() const;
  void set_fusionrcvtime(int64_t value);
  private:
  int64_t _internal_fusionrcvtime() const;
  void _internal_set_fusionrcvtime(int64_t value);
  public:

  // int32 devType = 2;
  void clear_devtype();
  int32_t devtype() const;
  void set_devtype(int32_t value);
  private:
  int32_t _internal_devtype() const;
  void _internal_set_devtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.RelOriPosData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID > objidlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    int64_t datatime_;
    int64_t processtime_;
    int64_t commrcvtime_;
    int64_t commsendtime_;
    int64_t fusionrcvtime_;
    int32_t devtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FusionPathDatas_2eproto;
};
// -------------------------------------------------------------------

class RelOriPosDataObjID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID) */ {
 public:
  inline RelOriPosDataObjID() : RelOriPosDataObjID(nullptr) {}
  ~RelOriPosDataObjID() override;
  explicit PROTOBUF_CONSTEXPR RelOriPosDataObjID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelOriPosDataObjID(const RelOriPosDataObjID& from);
  RelOriPosDataObjID(RelOriPosDataObjID&& from) noexcept
    : RelOriPosDataObjID() {
    *this = ::std::move(from);
  }

  inline RelOriPosDataObjID& operator=(const RelOriPosDataObjID& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelOriPosDataObjID& operator=(RelOriPosDataObjID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelOriPosDataObjID& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelOriPosDataObjID* internal_default_instance() {
    return reinterpret_cast<const RelOriPosDataObjID*>(
               &_RelOriPosDataObjID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RelOriPosDataObjID& a, RelOriPosDataObjID& b) {
    a.Swap(&b);
  }
  inline void Swap(RelOriPosDataObjID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelOriPosDataObjID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelOriPosDataObjID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelOriPosDataObjID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelOriPosDataObjID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelOriPosDataObjID& from) {
    RelOriPosDataObjID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelOriPosDataObjID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID";
  }
  protected:
  explicit RelOriPosDataObjID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIDFieldNumber = 1,
  };
  // int64 objID = 1;
  void clear_objid();
  int64_t objid() const;
  void set_objid(int64_t value);
  private:
  int64_t _internal_objid() const;
  void _internal_set_objid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t objid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FusionPathDatas_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FusionPosData

// double longitude = 1;
inline void FusionPosData::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double FusionPosData::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double FusionPosData::longitude() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.longitude)
  return _internal_longitude();
}
inline void FusionPosData::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void FusionPosData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.longitude)
}

// double lattitude = 2;
inline void FusionPosData::clear_lattitude() {
  _impl_.lattitude_ = 0;
}
inline double FusionPosData::_internal_lattitude() const {
  return _impl_.lattitude_;
}
inline double FusionPosData::lattitude() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.lattitude)
  return _internal_lattitude();
}
inline void FusionPosData::_internal_set_lattitude(double value) {
  
  _impl_.lattitude_ = value;
}
inline void FusionPosData::set_lattitude(double value) {
  _internal_set_lattitude(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.lattitude)
}

// sint32 elevation = 3;
inline void FusionPosData::clear_elevation() {
  _impl_.elevation_ = 0;
}
inline int32_t FusionPosData::_internal_elevation() const {
  return _impl_.elevation_;
}
inline int32_t FusionPosData::elevation() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.elevation)
  return _internal_elevation();
}
inline void FusionPosData::_internal_set_elevation(int32_t value) {
  
  _impl_.elevation_ = value;
}
inline void FusionPosData::set_elevation(int32_t value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.elevation)
}

// int32 coordType = 4;
inline void FusionPosData::clear_coordtype() {
  _impl_.coordtype_ = 0;
}
inline int32_t FusionPosData::_internal_coordtype() const {
  return _impl_.coordtype_;
}
inline int32_t FusionPosData::coordtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.coordType)
  return _internal_coordtype();
}
inline void FusionPosData::_internal_set_coordtype(int32_t value) {
  
  _impl_.coordtype_ = value;
}
inline void FusionPosData::set_coordtype(int32_t value) {
  _internal_set_coordtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.coordType)
}

// float objX = 5;
inline void FusionPosData::clear_objx() {
  _impl_.objx_ = 0;
}
inline float FusionPosData::_internal_objx() const {
  return _impl_.objx_;
}
inline float FusionPosData::objx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.objX)
  return _internal_objx();
}
inline void FusionPosData::_internal_set_objx(float value) {
  
  _impl_.objx_ = value;
}
inline void FusionPosData::set_objx(float value) {
  _internal_set_objx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.objX)
}

// float objY = 6;
inline void FusionPosData::clear_objy() {
  _impl_.objy_ = 0;
}
inline float FusionPosData::_internal_objy() const {
  return _impl_.objy_;
}
inline float FusionPosData::objy() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.objY)
  return _internal_objy();
}
inline void FusionPosData::_internal_set_objy(float value) {
  
  _impl_.objy_ = value;
}
inline void FusionPosData::set_objy(float value) {
  _internal_set_objy(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.objY)
}

// float objZ = 7;
inline void FusionPosData::clear_objz() {
  _impl_.objz_ = 0;
}
inline float FusionPosData::_internal_objz() const {
  return _impl_.objz_;
}
inline float FusionPosData::objz() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.objZ)
  return _internal_objz();
}
inline void FusionPosData::_internal_set_objz(float value) {
  
  _impl_.objz_ = value;
}
inline void FusionPosData::set_objz(float value) {
  _internal_set_objz(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.objZ)
}

// int32 laneNo = 8;
inline void FusionPosData::clear_laneno() {
  _impl_.laneno_ = 0;
}
inline int32_t FusionPosData::_internal_laneno() const {
  return _impl_.laneno_;
}
inline int32_t FusionPosData::laneno() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.laneNo)
  return _internal_laneno();
}
inline void FusionPosData::_internal_set_laneno(int32_t value) {
  
  _impl_.laneno_ = value;
}
inline void FusionPosData::set_laneno(int32_t value) {
  _internal_set_laneno(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.laneNo)
}

// sint32 speed = 9;
inline void FusionPosData::clear_speed() {
  _impl_.speed_ = 0;
}
inline int32_t FusionPosData::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t FusionPosData::speed() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.speed)
  return _internal_speed();
}
inline void FusionPosData::_internal_set_speed(int32_t value) {
  
  _impl_.speed_ = value;
}
inline void FusionPosData::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.speed)
}

// sint32 speedX = 10;
inline void FusionPosData::clear_speedx() {
  _impl_.speedx_ = 0;
}
inline int32_t FusionPosData::_internal_speedx() const {
  return _impl_.speedx_;
}
inline int32_t FusionPosData::speedx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedX)
  return _internal_speedx();
}
inline void FusionPosData::_internal_set_speedx(int32_t value) {
  
  _impl_.speedx_ = value;
}
inline void FusionPosData::set_speedx(int32_t value) {
  _internal_set_speedx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedX)
}

// sint32 speedY = 11;
inline void FusionPosData::clear_speedy() {
  _impl_.speedy_ = 0;
}
inline int32_t FusionPosData::_internal_speedy() const {
  return _impl_.speedy_;
}
inline int32_t FusionPosData::speedy() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedY)
  return _internal_speedy();
}
inline void FusionPosData::_internal_set_speedy(int32_t value) {
  
  _impl_.speedy_ = value;
}
inline void FusionPosData::set_speedy(int32_t value) {
  _internal_set_speedy(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedY)
}

// sint32 speedZ = 12;
inline void FusionPosData::clear_speedz() {
  _impl_.speedz_ = 0;
}
inline int32_t FusionPosData::_internal_speedz() const {
  return _impl_.speedz_;
}
inline int32_t FusionPosData::speedz() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedZ)
  return _internal_speedz();
}
inline void FusionPosData::_internal_set_speedz(int32_t value) {
  
  _impl_.speedz_ = value;
}
inline void FusionPosData::set_speedz(int32_t value) {
  _internal_set_speedz(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedZ)
}

// int32 objOri = 13;
inline void FusionPosData::clear_objori() {
  _impl_.objori_ = 0;
}
inline int32_t FusionPosData::_internal_objori() const {
  return _impl_.objori_;
}
inline int32_t FusionPosData::objori() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.objOri)
  return _internal_objori();
}
inline void FusionPosData::_internal_set_objori(int32_t value) {
  
  _impl_.objori_ = value;
}
inline void FusionPosData::set_objori(int32_t value) {
  _internal_set_objori(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.objOri)
}

// int32 speedHeading = 14;
inline void FusionPosData::clear_speedheading() {
  _impl_.speedheading_ = 0;
}
inline int32_t FusionPosData::_internal_speedheading() const {
  return _impl_.speedheading_;
}
inline int32_t FusionPosData::speedheading() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedHeading)
  return _internal_speedheading();
}
inline void FusionPosData::_internal_set_speedheading(int32_t value) {
  
  _impl_.speedheading_ = value;
}
inline void FusionPosData::set_speedheading(int32_t value) {
  _internal_set_speedheading(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.speedHeading)
}

// sint32 aclr = 15;
inline void FusionPosData::clear_aclr() {
  _impl_.aclr_ = 0;
}
inline int32_t FusionPosData::_internal_aclr() const {
  return _impl_.aclr_;
}
inline int32_t FusionPosData::aclr() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr)
  return _internal_aclr();
}
inline void FusionPosData::_internal_set_aclr(int32_t value) {
  
  _impl_.aclr_ = value;
}
inline void FusionPosData::set_aclr(int32_t value) {
  _internal_set_aclr(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr)
}

// int32 aclrAngle = 16;
inline void FusionPosData::clear_aclrangle() {
  _impl_.aclrangle_ = 0;
}
inline int32_t FusionPosData::_internal_aclrangle() const {
  return _impl_.aclrangle_;
}
inline int32_t FusionPosData::aclrangle() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclrAngle)
  return _internal_aclrangle();
}
inline void FusionPosData::_internal_set_aclrangle(int32_t value) {
  
  _impl_.aclrangle_ = value;
}
inline void FusionPosData::set_aclrangle(int32_t value) {
  _internal_set_aclrangle(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclrAngle)
}

// sint32 aclr_x = 17;
inline void FusionPosData::clear_aclr_x() {
  _impl_.aclr_x_ = 0;
}
inline int32_t FusionPosData::_internal_aclr_x() const {
  return _impl_.aclr_x_;
}
inline int32_t FusionPosData::aclr_x() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr_x)
  return _internal_aclr_x();
}
inline void FusionPosData::_internal_set_aclr_x(int32_t value) {
  
  _impl_.aclr_x_ = value;
}
inline void FusionPosData::set_aclr_x(int32_t value) {
  _internal_set_aclr_x(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr_x)
}

// sint32 aclr_y = 18;
inline void FusionPosData::clear_aclr_y() {
  _impl_.aclr_y_ = 0;
}
inline int32_t FusionPosData::_internal_aclr_y() const {
  return _impl_.aclr_y_;
}
inline int32_t FusionPosData::aclr_y() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr_y)
  return _internal_aclr_y();
}
inline void FusionPosData::_internal_set_aclr_y(int32_t value) {
  
  _impl_.aclr_y_ = value;
}
inline void FusionPosData::set_aclr_y(int32_t value) {
  _internal_set_aclr_y(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr_y)
}

// sint32 aclr_z = 19;
inline void FusionPosData::clear_aclr_z() {
  _impl_.aclr_z_ = 0;
}
inline int32_t FusionPosData::_internal_aclr_z() const {
  return _impl_.aclr_z_;
}
inline int32_t FusionPosData::aclr_z() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr_z)
  return _internal_aclr_z();
}
inline void FusionPosData::_internal_set_aclr_z(int32_t value) {
  
  _impl_.aclr_z_ = value;
}
inline void FusionPosData::set_aclr_z(int32_t value) {
  _internal_set_aclr_z(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.aclr_z)
}

// int32 objWidth = 20;
inline void FusionPosData::clear_objwidth() {
  _impl_.objwidth_ = 0;
}
inline int32_t FusionPosData::_internal_objwidth() const {
  return _impl_.objwidth_;
}
inline int32_t FusionPosData::objwidth() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.objWidth)
  return _internal_objwidth();
}
inline void FusionPosData::_internal_set_objwidth(int32_t value) {
  
  _impl_.objwidth_ = value;
}
inline void FusionPosData::set_objwidth(int32_t value) {
  _internal_set_objwidth(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.objWidth)
}

// int32 objLength = 21;
inline void FusionPosData::clear_objlength() {
  _impl_.objlength_ = 0;
}
inline int32_t FusionPosData::_internal_objlength() const {
  return _impl_.objlength_;
}
inline int32_t FusionPosData::objlength() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.objLength)
  return _internal_objlength();
}
inline void FusionPosData::_internal_set_objlength(int32_t value) {
  
  _impl_.objlength_ = value;
}
inline void FusionPosData::set_objlength(int32_t value) {
  _internal_set_objlength(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.objLength)
}

// int32 objHeight = 22;
inline void FusionPosData::clear_objheight() {
  _impl_.objheight_ = 0;
}
inline int32_t FusionPosData::_internal_objheight() const {
  return _impl_.objheight_;
}
inline int32_t FusionPosData::objheight() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPosData.objHeight)
  return _internal_objheight();
}
inline void FusionPosData::_internal_set_objheight(int32_t value) {
  
  _impl_.objheight_ = value;
}
inline void FusionPosData::set_objheight(int32_t value) {
  _internal_set_objheight(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPosData.objHeight)
}

// -------------------------------------------------------------------

// FusionPath

// int32 objID = 1;
inline void FusionPath::clear_objid() {
  _impl_.objid_ = 0;
}
inline int32_t FusionPath::_internal_objid() const {
  return _impl_.objid_;
}
inline int32_t FusionPath::objid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.objID)
  return _internal_objid();
}
inline void FusionPath::_internal_set_objid(int32_t value) {
  
  _impl_.objid_ = value;
}
inline void FusionPath::set_objid(int32_t value) {
  _internal_set_objid(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPath.objID)
}

// int32 objType = 2;
inline void FusionPath::clear_objtype() {
  _impl_.objtype_ = 0;
}
inline int32_t FusionPath::_internal_objtype() const {
  return _impl_.objtype_;
}
inline int32_t FusionPath::objtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.objType)
  return _internal_objtype();
}
inline void FusionPath::_internal_set_objtype(int32_t value) {
  
  _impl_.objtype_ = value;
}
inline void FusionPath::set_objtype(int32_t value) {
  _internal_set_objtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPath.objType)
}

// int32 objKind = 3;
inline void FusionPath::clear_objkind() {
  _impl_.objkind_ = 0;
}
inline int32_t FusionPath::_internal_objkind() const {
  return _impl_.objkind_;
}
inline int32_t FusionPath::objkind() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.objKind)
  return _internal_objkind();
}
inline void FusionPath::_internal_set_objkind(int32_t value) {
  
  _impl_.objkind_ = value;
}
inline void FusionPath::set_objkind(int32_t value) {
  _internal_set_objkind(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPath.objKind)
}

// int32 objState = 4;
inline void FusionPath::clear_objstate() {
  _impl_.objstate_ = 0;
}
inline int32_t FusionPath::_internal_objstate() const {
  return _impl_.objstate_;
}
inline int32_t FusionPath::objstate() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.objState)
  return _internal_objstate();
}
inline void FusionPath::_internal_set_objstate(int32_t value) {
  
  _impl_.objstate_ = value;
}
inline void FusionPath::set_objstate(int32_t value) {
  _internal_set_objstate(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPath.objState)
}

// int32 objCf = 5;
inline void FusionPath::clear_objcf() {
  _impl_.objcf_ = 0;
}
inline int32_t FusionPath::_internal_objcf() const {
  return _impl_.objcf_;
}
inline int32_t FusionPath::objcf() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.objCf)
  return _internal_objcf();
}
inline void FusionPath::_internal_set_objcf(int32_t value) {
  
  _impl_.objcf_ = value;
}
inline void FusionPath::set_objcf(int32_t value) {
  _internal_set_objcf(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPath.objCf)
}

// .cn.seisys.rbx.comm.bean.multi.FusionPosData objPosDatas = 6;
inline bool FusionPath::_internal_has_objposdatas() const {
  return this != internal_default_instance() && _impl_.objposdatas_ != nullptr;
}
inline bool FusionPath::has_objposdatas() const {
  return _internal_has_objposdatas();
}
inline void FusionPath::clear_objposdatas() {
  if (GetArenaForAllocation() == nullptr && _impl_.objposdatas_ != nullptr) {
    delete _impl_.objposdatas_;
  }
  _impl_.objposdatas_ = nullptr;
}
inline const ::cn::seisys::rbx::comm::bean::multi::FusionPosData& FusionPath::_internal_objposdatas() const {
  const ::cn::seisys::rbx::comm::bean::multi::FusionPosData* p = _impl_.objposdatas_;
  return p != nullptr ? *p : reinterpret_cast<const ::cn::seisys::rbx::comm::bean::multi::FusionPosData&>(
      ::cn::seisys::rbx::comm::bean::multi::_FusionPosData_default_instance_);
}
inline const ::cn::seisys::rbx::comm::bean::multi::FusionPosData& FusionPath::objposdatas() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.objPosDatas)
  return _internal_objposdatas();
}
inline void FusionPath::unsafe_arena_set_allocated_objposdatas(
    ::cn::seisys::rbx::comm::bean::multi::FusionPosData* objposdatas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objposdatas_);
  }
  _impl_.objposdatas_ = objposdatas;
  if (objposdatas) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cn.seisys.rbx.comm.bean.multi.FusionPath.objPosDatas)
}
inline ::cn::seisys::rbx::comm::bean::multi::FusionPosData* FusionPath::release_objposdatas() {
  
  ::cn::seisys::rbx::comm::bean::multi::FusionPosData* temp = _impl_.objposdatas_;
  _impl_.objposdatas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::FusionPosData* FusionPath::unsafe_arena_release_objposdatas() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.FusionPath.objPosDatas)
  
  ::cn::seisys::rbx::comm::bean::multi::FusionPosData* temp = _impl_.objposdatas_;
  _impl_.objposdatas_ = nullptr;
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::FusionPosData* FusionPath::_internal_mutable_objposdatas() {
  
  if (_impl_.objposdatas_ == nullptr) {
    auto* p = CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::FusionPosData>(GetArenaForAllocation());
    _impl_.objposdatas_ = p;
  }
  return _impl_.objposdatas_;
}
inline ::cn::seisys::rbx::comm::bean::multi::FusionPosData* FusionPath::mutable_objposdatas() {
  ::cn::seisys::rbx::comm::bean::multi::FusionPosData* _msg = _internal_mutable_objposdatas();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.FusionPath.objPosDatas)
  return _msg;
}
inline void FusionPath::set_allocated_objposdatas(::cn::seisys::rbx::comm::bean::multi::FusionPosData* objposdatas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.objposdatas_;
  }
  if (objposdatas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(objposdatas);
    if (message_arena != submessage_arena) {
      objposdatas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objposdatas, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objposdatas_ = objposdatas;
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.FusionPath.objPosDatas)
}

// bool hasVisionData = 7;
inline void FusionPath::clear_hasvisiondata() {
  _impl_.hasvisiondata_ = false;
}
inline bool FusionPath::_internal_hasvisiondata() const {
  return _impl_.hasvisiondata_;
}
inline bool FusionPath::hasvisiondata() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.hasVisionData)
  return _internal_hasvisiondata();
}
inline void FusionPath::_internal_set_hasvisiondata(bool value) {
  
  _impl_.hasvisiondata_ = value;
}
inline void FusionPath::set_hasvisiondata(bool value) {
  _internal_set_hasvisiondata(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPath.hasVisionData)
}

// .cn.seisys.rbx.comm.bean.multi.CameraPath objVisionData = 8;
inline bool FusionPath::_internal_has_objvisiondata() const {
  return this != internal_default_instance() && _impl_.objvisiondata_ != nullptr;
}
inline bool FusionPath::has_objvisiondata() const {
  return _internal_has_objvisiondata();
}
inline const ::cn::seisys::rbx::comm::bean::multi::CameraPath& FusionPath::_internal_objvisiondata() const {
  const ::cn::seisys::rbx::comm::bean::multi::CameraPath* p = _impl_.objvisiondata_;
  return p != nullptr ? *p : reinterpret_cast<const ::cn::seisys::rbx::comm::bean::multi::CameraPath&>(
      ::cn::seisys::rbx::comm::bean::multi::_CameraPath_default_instance_);
}
inline const ::cn::seisys::rbx::comm::bean::multi::CameraPath& FusionPath::objvisiondata() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.objVisionData)
  return _internal_objvisiondata();
}
inline void FusionPath::unsafe_arena_set_allocated_objvisiondata(
    ::cn::seisys::rbx::comm::bean::multi::CameraPath* objvisiondata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objvisiondata_);
  }
  _impl_.objvisiondata_ = objvisiondata;
  if (objvisiondata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cn.seisys.rbx.comm.bean.multi.FusionPath.objVisionData)
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPath* FusionPath::release_objvisiondata() {
  
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* temp = _impl_.objvisiondata_;
  _impl_.objvisiondata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPath* FusionPath::unsafe_arena_release_objvisiondata() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.FusionPath.objVisionData)
  
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* temp = _impl_.objvisiondata_;
  _impl_.objvisiondata_ = nullptr;
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPath* FusionPath::_internal_mutable_objvisiondata() {
  
  if (_impl_.objvisiondata_ == nullptr) {
    auto* p = CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::CameraPath>(GetArenaForAllocation());
    _impl_.objvisiondata_ = p;
  }
  return _impl_.objvisiondata_;
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPath* FusionPath::mutable_objvisiondata() {
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* _msg = _internal_mutable_objvisiondata();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.FusionPath.objVisionData)
  return _msg;
}
inline void FusionPath::set_allocated_objvisiondata(::cn::seisys::rbx::comm::bean::multi::CameraPath* objvisiondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objvisiondata_);
  }
  if (objvisiondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objvisiondata));
    if (message_arena != submessage_arena) {
      objvisiondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objvisiondata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objvisiondata_ = objvisiondata;
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.FusionPath.objVisionData)
}

// repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosData oriPosDataList = 9;
inline int FusionPath::_internal_oriposdatalist_size() const {
  return _impl_.oriposdatalist_.size();
}
inline int FusionPath::oriposdatalist_size() const {
  return _internal_oriposdatalist_size();
}
inline void FusionPath::clear_oriposdatalist() {
  _impl_.oriposdatalist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* FusionPath::mutable_oriposdatalist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.FusionPath.oriPosDataList)
  return _impl_.oriposdatalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosData >*
FusionPath::mutable_oriposdatalist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.FusionPath.oriPosDataList)
  return &_impl_.oriposdatalist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::RelOriPosData& FusionPath::_internal_oriposdatalist(int index) const {
  return _impl_.oriposdatalist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::RelOriPosData& FusionPath::oriposdatalist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPath.oriPosDataList)
  return _internal_oriposdatalist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* FusionPath::_internal_add_oriposdatalist() {
  return _impl_.oriposdatalist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* FusionPath::add_oriposdatalist() {
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosData* _add = _internal_add_oriposdatalist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.FusionPath.oriPosDataList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosData >&
FusionPath::oriposdatalist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.FusionPath.oriPosDataList)
  return _impl_.oriposdatalist_;
}

// -------------------------------------------------------------------

// FusionPathDatas

// int64 sendTime = 1;
inline void FusionPathDatas::clear_sendtime() {
  _impl_.sendtime_ = int64_t{0};
}
inline int64_t FusionPathDatas::_internal_sendtime() const {
  return _impl_.sendtime_;
}
inline int64_t FusionPathDatas::sendtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.sendTime)
  return _internal_sendtime();
}
inline void FusionPathDatas::_internal_set_sendtime(int64_t value) {
  
  _impl_.sendtime_ = value;
}
inline void FusionPathDatas::set_sendtime(int64_t value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.sendTime)
}

// int64 dataTime = 2;
inline void FusionPathDatas::clear_datatime() {
  _impl_.datatime_ = int64_t{0};
}
inline int64_t FusionPathDatas::_internal_datatime() const {
  return _impl_.datatime_;
}
inline int64_t FusionPathDatas::datatime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.dataTime)
  return _internal_datatime();
}
inline void FusionPathDatas::_internal_set_datatime(int64_t value) {
  
  _impl_.datatime_ = value;
}
inline void FusionPathDatas::set_datatime(int64_t value) {
  _internal_set_datatime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.dataTime)
}

// int32 areaNo = 3;
inline void FusionPathDatas::clear_areano() {
  _impl_.areano_ = 0;
}
inline int32_t FusionPathDatas::_internal_areano() const {
  return _impl_.areano_;
}
inline int32_t FusionPathDatas::areano() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.areaNo)
  return _internal_areano();
}
inline void FusionPathDatas::_internal_set_areano(int32_t value) {
  
  _impl_.areano_ = value;
}
inline void FusionPathDatas::set_areano(int32_t value) {
  _internal_set_areano(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.areaNo)
}

// repeated .cn.seisys.rbx.comm.bean.multi.FusionPath pathList = 4;
inline int FusionPathDatas::_internal_pathlist_size() const {
  return _impl_.pathlist_.size();
}
inline int FusionPathDatas::pathlist_size() const {
  return _internal_pathlist_size();
}
inline void FusionPathDatas::clear_pathlist() {
  _impl_.pathlist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::FusionPath* FusionPathDatas::mutable_pathlist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.pathList)
  return _impl_.pathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::FusionPath >*
FusionPathDatas::mutable_pathlist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.pathList)
  return &_impl_.pathlist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::FusionPath& FusionPathDatas::_internal_pathlist(int index) const {
  return _impl_.pathlist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::FusionPath& FusionPathDatas::pathlist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.pathList)
  return _internal_pathlist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::FusionPath* FusionPathDatas::_internal_add_pathlist() {
  return _impl_.pathlist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::FusionPath* FusionPathDatas::add_pathlist() {
  ::cn::seisys::rbx::comm::bean::multi::FusionPath* _add = _internal_add_pathlist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.pathList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::FusionPath >&
FusionPathDatas::pathlist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.FusionPathDatas.pathList)
  return _impl_.pathlist_;
}

// -------------------------------------------------------------------

// RelOriPosData

// string deviceID = 1;
inline void RelOriPosData::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
}
inline const std::string& RelOriPosData::deviceid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.deviceID)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RelOriPosData::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosData.deviceID)
}
inline std::string* RelOriPosData::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.RelOriPosData.deviceID)
  return _s;
}
inline const std::string& RelOriPosData::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void RelOriPosData::_internal_set_deviceid(const std::string& value) {
  
  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* RelOriPosData::_internal_mutable_deviceid() {
  
  return _impl_.deviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* RelOriPosData::release_deviceid() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.RelOriPosData.deviceID)
  return _impl_.deviceid_.Release();
}
inline void RelOriPosData::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  _impl_.deviceid_.SetAllocated(deviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceid_.IsDefault()) {
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.RelOriPosData.deviceID)
}

// int32 devType = 2;
inline void RelOriPosData::clear_devtype() {
  _impl_.devtype_ = 0;
}
inline int32_t RelOriPosData::_internal_devtype() const {
  return _impl_.devtype_;
}
inline int32_t RelOriPosData::devtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.devType)
  return _internal_devtype();
}
inline void RelOriPosData::_internal_set_devtype(int32_t value) {
  
  _impl_.devtype_ = value;
}
inline void RelOriPosData::set_devtype(int32_t value) {
  _internal_set_devtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosData.devType)
}

// int64 dataTime = 3;
inline void RelOriPosData::clear_datatime() {
  _impl_.datatime_ = int64_t{0};
}
inline int64_t RelOriPosData::_internal_datatime() const {
  return _impl_.datatime_;
}
inline int64_t RelOriPosData::datatime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.dataTime)
  return _internal_datatime();
}
inline void RelOriPosData::_internal_set_datatime(int64_t value) {
  
  _impl_.datatime_ = value;
}
inline void RelOriPosData::set_datatime(int64_t value) {
  _internal_set_datatime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosData.dataTime)
}

// repeated .cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID objIDList = 4;
inline int RelOriPosData::_internal_objidlist_size() const {
  return _impl_.objidlist_.size();
}
inline int RelOriPosData::objidlist_size() const {
  return _internal_objidlist_size();
}
inline void RelOriPosData::clear_objidlist() {
  _impl_.objidlist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* RelOriPosData::mutable_objidlist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.RelOriPosData.objIDList)
  return _impl_.objidlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID >*
RelOriPosData::mutable_objidlist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.RelOriPosData.objIDList)
  return &_impl_.objidlist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID& RelOriPosData::_internal_objidlist(int index) const {
  return _impl_.objidlist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID& RelOriPosData::objidlist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.objIDList)
  return _internal_objidlist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* RelOriPosData::_internal_add_objidlist() {
  return _impl_.objidlist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* RelOriPosData::add_objidlist() {
  ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID* _add = _internal_add_objidlist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.RelOriPosData.objIDList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RelOriPosDataObjID >&
RelOriPosData::objidlist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.RelOriPosData.objIDList)
  return _impl_.objidlist_;
}

// int64 processTime = 5;
inline void RelOriPosData::clear_processtime() {
  _impl_.processtime_ = int64_t{0};
}
inline int64_t RelOriPosData::_internal_processtime() const {
  return _impl_.processtime_;
}
inline int64_t RelOriPosData::processtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.processTime)
  return _internal_processtime();
}
inline void RelOriPosData::_internal_set_processtime(int64_t value) {
  
  _impl_.processtime_ = value;
}
inline void RelOriPosData::set_processtime(int64_t value) {
  _internal_set_processtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosData.processTime)
}

// int64 commRcvTime = 6;
inline void RelOriPosData::clear_commrcvtime() {
  _impl_.commrcvtime_ = int64_t{0};
}
inline int64_t RelOriPosData::_internal_commrcvtime() const {
  return _impl_.commrcvtime_;
}
inline int64_t RelOriPosData::commrcvtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.commRcvTime)
  return _internal_commrcvtime();
}
inline void RelOriPosData::_internal_set_commrcvtime(int64_t value) {
  
  _impl_.commrcvtime_ = value;
}
inline void RelOriPosData::set_commrcvtime(int64_t value) {
  _internal_set_commrcvtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosData.commRcvTime)
}

// int64 commSendTime = 7;
inline void RelOriPosData::clear_commsendtime() {
  _impl_.commsendtime_ = int64_t{0};
}
inline int64_t RelOriPosData::_internal_commsendtime() const {
  return _impl_.commsendtime_;
}
inline int64_t RelOriPosData::commsendtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.commSendTime)
  return _internal_commsendtime();
}
inline void RelOriPosData::_internal_set_commsendtime(int64_t value) {
  
  _impl_.commsendtime_ = value;
}
inline void RelOriPosData::set_commsendtime(int64_t value) {
  _internal_set_commsendtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosData.commSendTime)
}

// int64 fusionRcvTime = 8;
inline void RelOriPosData::clear_fusionrcvtime() {
  _impl_.fusionrcvtime_ = int64_t{0};
}
inline int64_t RelOriPosData::_internal_fusionrcvtime() const {
  return _impl_.fusionrcvtime_;
}
inline int64_t RelOriPosData::fusionrcvtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosData.fusionRcvTime)
  return _internal_fusionrcvtime();
}
inline void RelOriPosData::_internal_set_fusionrcvtime(int64_t value) {
  
  _impl_.fusionrcvtime_ = value;
}
inline void RelOriPosData::set_fusionrcvtime(int64_t value) {
  _internal_set_fusionrcvtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosData.fusionRcvTime)
}

// -------------------------------------------------------------------

// RelOriPosDataObjID

// int64 objID = 1;
inline void RelOriPosDataObjID::clear_objid() {
  _impl_.objid_ = int64_t{0};
}
inline int64_t RelOriPosDataObjID::_internal_objid() const {
  return _impl_.objid_;
}
inline int64_t RelOriPosDataObjID::objid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID.objID)
  return _internal_objid();
}
inline void RelOriPosDataObjID::_internal_set_objid(int64_t value) {
  
  _impl_.objid_ = value;
}
inline void RelOriPosDataObjID::set_objid(int64_t value) {
  _internal_set_objid(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RelOriPosDataObjID.objID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FusionPathDatas_2eproto
