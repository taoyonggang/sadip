// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiPathDatas.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MultiPathDatas_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MultiPathDatas_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MultiPathDatas_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MultiPathDatas_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MultiPathDatas_2eproto;
namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {
class CameraPath;
struct CameraPathDefaultTypeInternal;
extern CameraPathDefaultTypeInternal _CameraPath_default_instance_;
class CameraPathList;
struct CameraPathListDefaultTypeInternal;
extern CameraPathListDefaultTypeInternal _CameraPathList_default_instance_;
class GNSSPosition;
struct GNSSPositionDefaultTypeInternal;
extern GNSSPositionDefaultTypeInternal _GNSSPosition_default_instance_;
class GlobalSpaceInfo;
struct GlobalSpaceInfoDefaultTypeInternal;
extern GlobalSpaceInfoDefaultTypeInternal _GlobalSpaceInfo_default_instance_;
class MultiPathDatas;
struct MultiPathDatasDefaultTypeInternal;
extern MultiPathDatasDefaultTypeInternal _MultiPathDatas_default_instance_;
class RadarDevPathList;
struct RadarDevPathListDefaultTypeInternal;
extern RadarDevPathListDefaultTypeInternal _RadarDevPathList_default_instance_;
class RadarPath;
struct RadarPathDefaultTypeInternal;
extern RadarPathDefaultTypeInternal _RadarPath_default_instance_;
class UTMPosition;
struct UTMPositionDefaultTypeInternal;
extern UTMPositionDefaultTypeInternal _UTMPosition_default_instance_;
}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> ::cn::seisys::rbx::comm::bean::multi::CameraPath* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::CameraPath>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::CameraPathList* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::CameraPathList>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::GNSSPosition>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::MultiPathDatas* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::MultiPathDatas>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::RadarDevPathList>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::RadarPath* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::RadarPath>(Arena*);
template<> ::cn::seisys::rbx::comm::bean::multi::UTMPosition* Arena::CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::UTMPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cn {
namespace seisys {
namespace rbx {
namespace comm {
namespace bean {
namespace multi {

// ===================================================================

class RadarPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.RadarPath) */ {
 public:
  inline RadarPath() : RadarPath(nullptr) {}
  ~RadarPath() override;
  explicit PROTOBUF_CONSTEXPR RadarPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarPath(const RadarPath& from);
  RadarPath(RadarPath&& from) noexcept
    : RadarPath() {
    *this = ::std::move(from);
  }

  inline RadarPath& operator=(const RadarPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarPath& operator=(RadarPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarPath* internal_default_instance() {
    return reinterpret_cast<const RadarPath*>(
               &_RadarPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarPath& a, RadarPath& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RadarPath& from) {
    RadarPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.RadarPath";
  }
  protected:
  explicit RadarPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 2,
    kObjIDFieldNumber = 1,
    kElevationFieldNumber = 4,
    kLattitudeFieldNumber = 3,
    kObjXFieldNumber = 5,
    kObjYFieldNumber = 6,
    kObjZFieldNumber = 7,
    kObjENUXFieldNumber = 8,
    kObjENUYFieldNumber = 9,
    kObjENUZFieldNumber = 10,
    kSpeedFieldNumber = 11,
    kSpeedXFieldNumber = 12,
    kSpeedYFieldNumber = 13,
    kSpeedZFieldNumber = 14,
    kSpeedENUXFieldNumber = 15,
    kSpeedENUYFieldNumber = 16,
    kSpeedENUZFieldNumber = 17,
    kObjOriFieldNumber = 18,
    kSpeedHeadingFieldNumber = 19,
    kObjWidthFieldNumber = 20,
    kObjLengthFieldNumber = 21,
    kObjHeightFieldNumber = 22,
    kAclrFieldNumber = 23,
    kAclrAngleFieldNumber = 24,
    kAclrXFieldNumber = 25,
    kAclrYFieldNumber = 26,
    kAclrZFieldNumber = 27,
    kAclrEnuXFieldNumber = 28,
    kAclrEnuYFieldNumber = 29,
    kAclrEnuZFieldNumber = 30,
    kObjStateFieldNumber = 31,
    kObjCfFieldNumber = 32,
    kObjTypeFieldNumber = 33,
    kObjKindFieldNumber = 34,
    kObjDistFieldNumber = 35,
  };
  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // int32 objID = 1;
  void clear_objid();
  int32_t objid() const;
  void set_objid(int32_t value);
  private:
  int32_t _internal_objid() const;
  void _internal_set_objid(int32_t value);
  public:

  // sint32 elevation = 4;
  void clear_elevation();
  int32_t elevation() const;
  void set_elevation(int32_t value);
  private:
  int32_t _internal_elevation() const;
  void _internal_set_elevation(int32_t value);
  public:

  // double lattitude = 3;
  void clear_lattitude();
  double lattitude() const;
  void set_lattitude(double value);
  private:
  double _internal_lattitude() const;
  void _internal_set_lattitude(double value);
  public:

  // float objX = 5;
  void clear_objx();
  float objx() const;
  void set_objx(float value);
  private:
  float _internal_objx() const;
  void _internal_set_objx(float value);
  public:

  // float objY = 6;
  void clear_objy();
  float objy() const;
  void set_objy(float value);
  private:
  float _internal_objy() const;
  void _internal_set_objy(float value);
  public:

  // float objZ = 7;
  void clear_objz();
  float objz() const;
  void set_objz(float value);
  private:
  float _internal_objz() const;
  void _internal_set_objz(float value);
  public:

  // float obj_ENU_X = 8;
  void clear_obj_enu_x();
  float obj_enu_x() const;
  void set_obj_enu_x(float value);
  private:
  float _internal_obj_enu_x() const;
  void _internal_set_obj_enu_x(float value);
  public:

  // float obj_ENU_Y = 9;
  void clear_obj_enu_y();
  float obj_enu_y() const;
  void set_obj_enu_y(float value);
  private:
  float _internal_obj_enu_y() const;
  void _internal_set_obj_enu_y(float value);
  public:

  // float obj_ENU_Z = 10;
  void clear_obj_enu_z();
  float obj_enu_z() const;
  void set_obj_enu_z(float value);
  private:
  float _internal_obj_enu_z() const;
  void _internal_set_obj_enu_z(float value);
  public:

  // sint32 speed = 11;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // sint32 speedX = 12;
  void clear_speedx();
  int32_t speedx() const;
  void set_speedx(int32_t value);
  private:
  int32_t _internal_speedx() const;
  void _internal_set_speedx(int32_t value);
  public:

  // sint32 speedY = 13;
  void clear_speedy();
  int32_t speedy() const;
  void set_speedy(int32_t value);
  private:
  int32_t _internal_speedy() const;
  void _internal_set_speedy(int32_t value);
  public:

  // sint32 speedZ = 14;
  void clear_speedz();
  int32_t speedz() const;
  void set_speedz(int32_t value);
  private:
  int32_t _internal_speedz() const;
  void _internal_set_speedz(int32_t value);
  public:

  // sint32 speed_ENU_X = 15;
  void clear_speed_enu_x();
  int32_t speed_enu_x() const;
  void set_speed_enu_x(int32_t value);
  private:
  int32_t _internal_speed_enu_x() const;
  void _internal_set_speed_enu_x(int32_t value);
  public:

  // sint32 speed_ENU_Y = 16;
  void clear_speed_enu_y();
  int32_t speed_enu_y() const;
  void set_speed_enu_y(int32_t value);
  private:
  int32_t _internal_speed_enu_y() const;
  void _internal_set_speed_enu_y(int32_t value);
  public:

  // sint32 speed_ENU_Z = 17;
  void clear_speed_enu_z();
  int32_t speed_enu_z() const;
  void set_speed_enu_z(int32_t value);
  private:
  int32_t _internal_speed_enu_z() const;
  void _internal_set_speed_enu_z(int32_t value);
  public:

  // int32 objOri = 18;
  void clear_objori();
  int32_t objori() const;
  void set_objori(int32_t value);
  private:
  int32_t _internal_objori() const;
  void _internal_set_objori(int32_t value);
  public:

  // int32 speedHeading = 19;
  void clear_speedheading();
  int32_t speedheading() const;
  void set_speedheading(int32_t value);
  private:
  int32_t _internal_speedheading() const;
  void _internal_set_speedheading(int32_t value);
  public:

  // int32 objWidth = 20;
  void clear_objwidth();
  int32_t objwidth() const;
  void set_objwidth(int32_t value);
  private:
  int32_t _internal_objwidth() const;
  void _internal_set_objwidth(int32_t value);
  public:

  // int32 objLength = 21;
  void clear_objlength();
  int32_t objlength() const;
  void set_objlength(int32_t value);
  private:
  int32_t _internal_objlength() const;
  void _internal_set_objlength(int32_t value);
  public:

  // int32 objHeight = 22;
  void clear_objheight();
  int32_t objheight() const;
  void set_objheight(int32_t value);
  private:
  int32_t _internal_objheight() const;
  void _internal_set_objheight(int32_t value);
  public:

  // sint32 aclr = 23;
  void clear_aclr();
  int32_t aclr() const;
  void set_aclr(int32_t value);
  private:
  int32_t _internal_aclr() const;
  void _internal_set_aclr(int32_t value);
  public:

  // int32 aclrAngle = 24;
  void clear_aclrangle();
  int32_t aclrangle() const;
  void set_aclrangle(int32_t value);
  private:
  int32_t _internal_aclrangle() const;
  void _internal_set_aclrangle(int32_t value);
  public:

  // sint32 aclr_x = 25;
  void clear_aclr_x();
  int32_t aclr_x() const;
  void set_aclr_x(int32_t value);
  private:
  int32_t _internal_aclr_x() const;
  void _internal_set_aclr_x(int32_t value);
  public:

  // sint32 aclr_y = 26;
  void clear_aclr_y();
  int32_t aclr_y() const;
  void set_aclr_y(int32_t value);
  private:
  int32_t _internal_aclr_y() const;
  void _internal_set_aclr_y(int32_t value);
  public:

  // sint32 aclr_z = 27;
  void clear_aclr_z();
  int32_t aclr_z() const;
  void set_aclr_z(int32_t value);
  private:
  int32_t _internal_aclr_z() const;
  void _internal_set_aclr_z(int32_t value);
  public:

  // sint32 aclr_enu_x = 28;
  void clear_aclr_enu_x();
  int32_t aclr_enu_x() const;
  void set_aclr_enu_x(int32_t value);
  private:
  int32_t _internal_aclr_enu_x() const;
  void _internal_set_aclr_enu_x(int32_t value);
  public:

  // sint32 aclr_enu_y = 29;
  void clear_aclr_enu_y();
  int32_t aclr_enu_y() const;
  void set_aclr_enu_y(int32_t value);
  private:
  int32_t _internal_aclr_enu_y() const;
  void _internal_set_aclr_enu_y(int32_t value);
  public:

  // sint32 aclr_enu_z = 30;
  void clear_aclr_enu_z();
  int32_t aclr_enu_z() const;
  void set_aclr_enu_z(int32_t value);
  private:
  int32_t _internal_aclr_enu_z() const;
  void _internal_set_aclr_enu_z(int32_t value);
  public:

  // int32 objState = 31;
  void clear_objstate();
  int32_t objstate() const;
  void set_objstate(int32_t value);
  private:
  int32_t _internal_objstate() const;
  void _internal_set_objstate(int32_t value);
  public:

  // int32 objCf = 32;
  void clear_objcf();
  int32_t objcf() const;
  void set_objcf(int32_t value);
  private:
  int32_t _internal_objcf() const;
  void _internal_set_objcf(int32_t value);
  public:

  // int32 objType = 33;
  void clear_objtype();
  int32_t objtype() const;
  void set_objtype(int32_t value);
  private:
  int32_t _internal_objtype() const;
  void _internal_set_objtype(int32_t value);
  public:

  // int32 objKind = 34;
  void clear_objkind();
  int32_t objkind() const;
  void set_objkind(int32_t value);
  private:
  int32_t _internal_objkind() const;
  void _internal_set_objkind(int32_t value);
  public:

  // float objDist = 35;
  void clear_objdist();
  float objdist() const;
  void set_objdist(float value);
  private:
  float _internal_objdist() const;
  void _internal_set_objdist(float value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.RadarPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double longitude_;
    int32_t objid_;
    int32_t elevation_;
    double lattitude_;
    float objx_;
    float objy_;
    float objz_;
    float obj_enu_x_;
    float obj_enu_y_;
    float obj_enu_z_;
    int32_t speed_;
    int32_t speedx_;
    int32_t speedy_;
    int32_t speedz_;
    int32_t speed_enu_x_;
    int32_t speed_enu_y_;
    int32_t speed_enu_z_;
    int32_t objori_;
    int32_t speedheading_;
    int32_t objwidth_;
    int32_t objlength_;
    int32_t objheight_;
    int32_t aclr_;
    int32_t aclrangle_;
    int32_t aclr_x_;
    int32_t aclr_y_;
    int32_t aclr_z_;
    int32_t aclr_enu_x_;
    int32_t aclr_enu_y_;
    int32_t aclr_enu_z_;
    int32_t objstate_;
    int32_t objcf_;
    int32_t objtype_;
    int32_t objkind_;
    float objdist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// -------------------------------------------------------------------

class CameraPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.CameraPath) */ {
 public:
  inline CameraPath() : CameraPath(nullptr) {}
  ~CameraPath() override;
  explicit PROTOBUF_CONSTEXPR CameraPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraPath(const CameraPath& from);
  CameraPath(CameraPath&& from) noexcept
    : CameraPath() {
    *this = ::std::move(from);
  }

  inline CameraPath& operator=(const CameraPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraPath& operator=(CameraPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraPath* internal_default_instance() {
    return reinterpret_cast<const CameraPath*>(
               &_CameraPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraPath& a, CameraPath& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraPath& from) {
    CameraPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.CameraPath";
  }
  protected:
  explicit CameraPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlateNoFieldNumber = 3,
    kVehColorFieldNumber = 6,
    kGlobalSpaceInfoFieldNumber = 13,
    kObjIDFieldNumber = 1,
    kLaneNoFieldNumber = 2,
    kPlateColorFieldNumber = 4,
    kVehTypeFieldNumber = 5,
    kObjXFieldNumber = 7,
    kObjYFieldNumber = 8,
    kObjDistXFieldNumber = 9,
    kObjDistYFieldNumber = 10,
    kObjBottomMidXFieldNumber = 11,
    kObjBottomMidYFieldNumber = 12,
    kObjCfFieldNumber = 14,
    kObjKindFieldNumber = 15,
    kObjImgTopFieldNumber = 16,
    kObjImgLeftFieldNumber = 17,
    kObjImgRightFieldNumber = 18,
    kObjImgBottomFieldNumber = 19,
  };
  // string plateNo = 3;
  void clear_plateno();
  const std::string& plateno() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plateno(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plateno();
  PROTOBUF_NODISCARD std::string* release_plateno();
  void set_allocated_plateno(std::string* plateno);
  private:
  const std::string& _internal_plateno() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plateno(const std::string& value);
  std::string* _internal_mutable_plateno();
  public:

  // string vehColor = 6;
  void clear_vehcolor();
  const std::string& vehcolor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vehcolor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vehcolor();
  PROTOBUF_NODISCARD std::string* release_vehcolor();
  void set_allocated_vehcolor(std::string* vehcolor);
  private:
  const std::string& _internal_vehcolor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehcolor(const std::string& value);
  std::string* _internal_mutable_vehcolor();
  public:

  // .cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo globalSpaceInfo = 13;
  bool has_globalspaceinfo() const;
  private:
  bool _internal_has_globalspaceinfo() const;
  public:
  void clear_globalspaceinfo();
  const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo& globalspaceinfo() const;
  PROTOBUF_NODISCARD ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* release_globalspaceinfo();
  ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* mutable_globalspaceinfo();
  void set_allocated_globalspaceinfo(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* globalspaceinfo);
  private:
  const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo& _internal_globalspaceinfo() const;
  ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* _internal_mutable_globalspaceinfo();
  public:
  void unsafe_arena_set_allocated_globalspaceinfo(
      ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* globalspaceinfo);
  ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* unsafe_arena_release_globalspaceinfo();

  // int32 objID = 1;
  void clear_objid();
  int32_t objid() const;
  void set_objid(int32_t value);
  private:
  int32_t _internal_objid() const;
  void _internal_set_objid(int32_t value);
  public:

  // int32 laneNo = 2;
  void clear_laneno();
  int32_t laneno() const;
  void set_laneno(int32_t value);
  private:
  int32_t _internal_laneno() const;
  void _internal_set_laneno(int32_t value);
  public:

  // int32 plateColor = 4;
  void clear_platecolor();
  int32_t platecolor() const;
  void set_platecolor(int32_t value);
  private:
  int32_t _internal_platecolor() const;
  void _internal_set_platecolor(int32_t value);
  public:

  // int32 vehType = 5;
  void clear_vehtype();
  int32_t vehtype() const;
  void set_vehtype(int32_t value);
  private:
  int32_t _internal_vehtype() const;
  void _internal_set_vehtype(int32_t value);
  public:

  // int32 objX = 7;
  void clear_objx();
  int32_t objx() const;
  void set_objx(int32_t value);
  private:
  int32_t _internal_objx() const;
  void _internal_set_objx(int32_t value);
  public:

  // int32 objY = 8;
  void clear_objy();
  int32_t objy() const;
  void set_objy(int32_t value);
  private:
  int32_t _internal_objy() const;
  void _internal_set_objy(int32_t value);
  public:

  // int32 objDistX = 9;
  void clear_objdistx();
  int32_t objdistx() const;
  void set_objdistx(int32_t value);
  private:
  int32_t _internal_objdistx() const;
  void _internal_set_objdistx(int32_t value);
  public:

  // int32 objDistY = 10;
  void clear_objdisty();
  int32_t objdisty() const;
  void set_objdisty(int32_t value);
  private:
  int32_t _internal_objdisty() const;
  void _internal_set_objdisty(int32_t value);
  public:

  // int32 objBottomMidX = 11;
  void clear_objbottommidx();
  int32_t objbottommidx() const;
  void set_objbottommidx(int32_t value);
  private:
  int32_t _internal_objbottommidx() const;
  void _internal_set_objbottommidx(int32_t value);
  public:

  // int32 objBottomMidY = 12;
  void clear_objbottommidy();
  int32_t objbottommidy() const;
  void set_objbottommidy(int32_t value);
  private:
  int32_t _internal_objbottommidy() const;
  void _internal_set_objbottommidy(int32_t value);
  public:

  // int32 objCf = 14;
  void clear_objcf();
  int32_t objcf() const;
  void set_objcf(int32_t value);
  private:
  int32_t _internal_objcf() const;
  void _internal_set_objcf(int32_t value);
  public:

  // int32 objKind = 15;
  void clear_objkind();
  int32_t objkind() const;
  void set_objkind(int32_t value);
  private:
  int32_t _internal_objkind() const;
  void _internal_set_objkind(int32_t value);
  public:

  // uint32 objImgTop = 16;
  void clear_objimgtop();
  uint32_t objimgtop() const;
  void set_objimgtop(uint32_t value);
  private:
  uint32_t _internal_objimgtop() const;
  void _internal_set_objimgtop(uint32_t value);
  public:

  // uint32 objImgLeft = 17;
  void clear_objimgleft();
  uint32_t objimgleft() const;
  void set_objimgleft(uint32_t value);
  private:
  uint32_t _internal_objimgleft() const;
  void _internal_set_objimgleft(uint32_t value);
  public:

  // uint32 objImgRight = 18;
  void clear_objimgright();
  uint32_t objimgright() const;
  void set_objimgright(uint32_t value);
  private:
  uint32_t _internal_objimgright() const;
  void _internal_set_objimgright(uint32_t value);
  public:

  // uint32 objImgBottom = 19;
  void clear_objimgbottom();
  uint32_t objimgbottom() const;
  void set_objimgbottom(uint32_t value);
  private:
  uint32_t _internal_objimgbottom() const;
  void _internal_set_objimgbottom(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.CameraPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plateno_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehcolor_;
    ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* globalspaceinfo_;
    int32_t objid_;
    int32_t laneno_;
    int32_t platecolor_;
    int32_t vehtype_;
    int32_t objx_;
    int32_t objy_;
    int32_t objdistx_;
    int32_t objdisty_;
    int32_t objbottommidx_;
    int32_t objbottommidy_;
    int32_t objcf_;
    int32_t objkind_;
    uint32_t objimgtop_;
    uint32_t objimgleft_;
    uint32_t objimgright_;
    uint32_t objimgbottom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// -------------------------------------------------------------------

class GlobalSpaceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo) */ {
 public:
  inline GlobalSpaceInfo() : GlobalSpaceInfo(nullptr) {}
  ~GlobalSpaceInfo() override;
  explicit PROTOBUF_CONSTEXPR GlobalSpaceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalSpaceInfo(const GlobalSpaceInfo& from);
  GlobalSpaceInfo(GlobalSpaceInfo&& from) noexcept
    : GlobalSpaceInfo() {
    *this = ::std::move(from);
  }

  inline GlobalSpaceInfo& operator=(const GlobalSpaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSpaceInfo& operator=(GlobalSpaceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalSpaceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalSpaceInfo* internal_default_instance() {
    return reinterpret_cast<const GlobalSpaceInfo*>(
               &_GlobalSpaceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalSpaceInfo& a, GlobalSpaceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSpaceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalSpaceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalSpaceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalSpaceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalSpaceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GlobalSpaceInfo& from) {
    GlobalSpaceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSpaceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo";
  }
  protected:
  explicit GlobalSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionGnssFieldNumber = 1,
    kPositionUtmFieldNumber = 2,
    kObjOriFieldNumber = 3,
    kObjWidthFieldNumber = 4,
    kObjLengthFieldNumber = 5,
    kObjHeightFieldNumber = 6,
    kSpeedXFieldNumber = 7,
    kSpeedYFieldNumber = 8,
    kSpeedZFieldNumber = 9,
    kSpeedFieldNumber = 10,
  };
  // .cn.seisys.rbx.comm.bean.multi.GNSSPosition position_gnss = 1;
  bool has_position_gnss() const;
  private:
  bool _internal_has_position_gnss() const;
  public:
  void clear_position_gnss();
  const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition& position_gnss() const;
  PROTOBUF_NODISCARD ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* release_position_gnss();
  ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* mutable_position_gnss();
  void set_allocated_position_gnss(::cn::seisys::rbx::comm::bean::multi::GNSSPosition* position_gnss);
  private:
  const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition& _internal_position_gnss() const;
  ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* _internal_mutable_position_gnss();
  public:
  void unsafe_arena_set_allocated_position_gnss(
      ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* position_gnss);
  ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* unsafe_arena_release_position_gnss();

  // .cn.seisys.rbx.comm.bean.multi.UTMPosition position_utm = 2;
  bool has_position_utm() const;
  private:
  bool _internal_has_position_utm() const;
  public:
  void clear_position_utm();
  const ::cn::seisys::rbx::comm::bean::multi::UTMPosition& position_utm() const;
  PROTOBUF_NODISCARD ::cn::seisys::rbx::comm::bean::multi::UTMPosition* release_position_utm();
  ::cn::seisys::rbx::comm::bean::multi::UTMPosition* mutable_position_utm();
  void set_allocated_position_utm(::cn::seisys::rbx::comm::bean::multi::UTMPosition* position_utm);
  private:
  const ::cn::seisys::rbx::comm::bean::multi::UTMPosition& _internal_position_utm() const;
  ::cn::seisys::rbx::comm::bean::multi::UTMPosition* _internal_mutable_position_utm();
  public:
  void unsafe_arena_set_allocated_position_utm(
      ::cn::seisys::rbx::comm::bean::multi::UTMPosition* position_utm);
  ::cn::seisys::rbx::comm::bean::multi::UTMPosition* unsafe_arena_release_position_utm();

  // int32 objOri = 3;
  void clear_objori();
  int32_t objori() const;
  void set_objori(int32_t value);
  private:
  int32_t _internal_objori() const;
  void _internal_set_objori(int32_t value);
  public:

  // int32 objWidth = 4;
  void clear_objwidth();
  int32_t objwidth() const;
  void set_objwidth(int32_t value);
  private:
  int32_t _internal_objwidth() const;
  void _internal_set_objwidth(int32_t value);
  public:

  // int32 objLength = 5;
  void clear_objlength();
  int32_t objlength() const;
  void set_objlength(int32_t value);
  private:
  int32_t _internal_objlength() const;
  void _internal_set_objlength(int32_t value);
  public:

  // int32 objHeight = 6;
  void clear_objheight();
  int32_t objheight() const;
  void set_objheight(int32_t value);
  private:
  int32_t _internal_objheight() const;
  void _internal_set_objheight(int32_t value);
  public:

  // int32 speedX = 7;
  void clear_speedx();
  int32_t speedx() const;
  void set_speedx(int32_t value);
  private:
  int32_t _internal_speedx() const;
  void _internal_set_speedx(int32_t value);
  public:

  // int32 speedY = 8;
  void clear_speedy();
  int32_t speedy() const;
  void set_speedy(int32_t value);
  private:
  int32_t _internal_speedy() const;
  void _internal_set_speedy(int32_t value);
  public:

  // int32 speedZ = 9;
  void clear_speedz();
  int32_t speedz() const;
  void set_speedz(int32_t value);
  private:
  int32_t _internal_speedz() const;
  void _internal_set_speedz(int32_t value);
  public:

  // int32 speed = 10;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* position_gnss_;
    ::cn::seisys::rbx::comm::bean::multi::UTMPosition* position_utm_;
    int32_t objori_;
    int32_t objwidth_;
    int32_t objlength_;
    int32_t objheight_;
    int32_t speedx_;
    int32_t speedy_;
    int32_t speedz_;
    int32_t speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// -------------------------------------------------------------------

class GNSSPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.GNSSPosition) */ {
 public:
  inline GNSSPosition() : GNSSPosition(nullptr) {}
  ~GNSSPosition() override;
  explicit PROTOBUF_CONSTEXPR GNSSPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GNSSPosition(const GNSSPosition& from);
  GNSSPosition(GNSSPosition&& from) noexcept
    : GNSSPosition() {
    *this = ::std::move(from);
  }

  inline GNSSPosition& operator=(const GNSSPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GNSSPosition& operator=(GNSSPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GNSSPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const GNSSPosition* internal_default_instance() {
    return reinterpret_cast<const GNSSPosition*>(
               &_GNSSPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GNSSPosition& a, GNSSPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(GNSSPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GNSSPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GNSSPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GNSSPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GNSSPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GNSSPosition& from) {
    GNSSPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GNSSPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.GNSSPosition";
  }
  protected:
  explicit GNSSPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.GNSSPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double longitude_;
    double latitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// -------------------------------------------------------------------

class UTMPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.UTMPosition) */ {
 public:
  inline UTMPosition() : UTMPosition(nullptr) {}
  ~UTMPosition() override;
  explicit PROTOBUF_CONSTEXPR UTMPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTMPosition(const UTMPosition& from);
  UTMPosition(UTMPosition&& from) noexcept
    : UTMPosition() {
    *this = ::std::move(from);
  }

  inline UTMPosition& operator=(const UTMPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTMPosition& operator=(UTMPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTMPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTMPosition* internal_default_instance() {
    return reinterpret_cast<const UTMPosition*>(
               &_UTMPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UTMPosition& a, UTMPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(UTMPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTMPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTMPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTMPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTMPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UTMPosition& from) {
    UTMPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTMPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.UTMPosition";
  }
  protected:
  explicit UTMPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.UTMPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// -------------------------------------------------------------------

class RadarDevPathList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.RadarDevPathList) */ {
 public:
  inline RadarDevPathList() : RadarDevPathList(nullptr) {}
  ~RadarDevPathList() override;
  explicit PROTOBUF_CONSTEXPR RadarDevPathList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarDevPathList(const RadarDevPathList& from);
  RadarDevPathList(RadarDevPathList&& from) noexcept
    : RadarDevPathList() {
    *this = ::std::move(from);
  }

  inline RadarDevPathList& operator=(const RadarDevPathList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarDevPathList& operator=(RadarDevPathList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarDevPathList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarDevPathList* internal_default_instance() {
    return reinterpret_cast<const RadarDevPathList*>(
               &_RadarDevPathList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RadarDevPathList& a, RadarDevPathList& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarDevPathList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarDevPathList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarDevPathList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarDevPathList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarDevPathList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RadarDevPathList& from) {
    RadarDevPathList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarDevPathList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.RadarDevPathList";
  }
  protected:
  explicit RadarDevPathList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadarPathListFieldNumber = 4,
    kDeviceIDFieldNumber = 2,
    kDataTimeFieldNumber = 1,
    kProcessTimeFieldNumber = 5,
    kCommRcvTimeFieldNumber = 6,
    kAreaNoFieldNumber = 3,
  };
  // repeated .cn.seisys.rbx.comm.bean.multi.RadarPath radarPathList = 4;
  int radarpathlist_size() const;
  private:
  int _internal_radarpathlist_size() const;
  public:
  void clear_radarpathlist();
  ::cn::seisys::rbx::comm::bean::multi::RadarPath* mutable_radarpathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarPath >*
      mutable_radarpathlist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::RadarPath& _internal_radarpathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RadarPath* _internal_add_radarpathlist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::RadarPath& radarpathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RadarPath* add_radarpathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarPath >&
      radarpathlist() const;

  // string deviceID = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // int64 dataTime = 1;
  void clear_datatime();
  int64_t datatime() const;
  void set_datatime(int64_t value);
  private:
  int64_t _internal_datatime() const;
  void _internal_set_datatime(int64_t value);
  public:

  // int64 processTime = 5;
  void clear_processtime();
  int64_t processtime() const;
  void set_processtime(int64_t value);
  private:
  int64_t _internal_processtime() const;
  void _internal_set_processtime(int64_t value);
  public:

  // int64 commRcvTime = 6;
  void clear_commrcvtime();
  int64_t commrcvtime() const;
  void set_commrcvtime(int64_t value);
  private:
  int64_t _internal_commrcvtime() const;
  void _internal_set_commrcvtime(int64_t value);
  public:

  // int32 areaNo = 3;
  void clear_areano();
  int32_t areano() const;
  void set_areano(int32_t value);
  private:
  int32_t _internal_areano() const;
  void _internal_set_areano(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.RadarDevPathList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarPath > radarpathlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    int64_t datatime_;
    int64_t processtime_;
    int64_t commrcvtime_;
    int32_t areano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// -------------------------------------------------------------------

class CameraPathList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.CameraPathList) */ {
 public:
  inline CameraPathList() : CameraPathList(nullptr) {}
  ~CameraPathList() override;
  explicit PROTOBUF_CONSTEXPR CameraPathList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraPathList(const CameraPathList& from);
  CameraPathList(CameraPathList&& from) noexcept
    : CameraPathList() {
    *this = ::std::move(from);
  }

  inline CameraPathList& operator=(const CameraPathList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraPathList& operator=(CameraPathList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraPathList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraPathList* internal_default_instance() {
    return reinterpret_cast<const CameraPathList*>(
               &_CameraPathList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CameraPathList& a, CameraPathList& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraPathList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraPathList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraPathList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraPathList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraPathList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraPathList& from) {
    CameraPathList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraPathList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.CameraPathList";
  }
  protected:
  explicit CameraPathList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraPathListFieldNumber = 5,
    kDeviceIDFieldNumber = 2,
    kDataTimeFieldNumber = 1,
    kCapTypeFieldNumber = 3,
    kObjCountFieldNumber = 4,
    kProcessTimeFieldNumber = 6,
    kCommRcvTimeFieldNumber = 7,
  };
  // repeated .cn.seisys.rbx.comm.bean.multi.CameraPath cameraPathList = 5;
  int camerapathlist_size() const;
  private:
  int _internal_camerapathlist_size() const;
  public:
  void clear_camerapathlist();
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* mutable_camerapathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPath >*
      mutable_camerapathlist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::CameraPath& _internal_camerapathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* _internal_add_camerapathlist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::CameraPath& camerapathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* add_camerapathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPath >&
      camerapathlist() const;

  // string deviceID = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // int64 dataTime = 1;
  void clear_datatime();
  int64_t datatime() const;
  void set_datatime(int64_t value);
  private:
  int64_t _internal_datatime() const;
  void _internal_set_datatime(int64_t value);
  public:

  // int32 capType = 3;
  void clear_captype();
  int32_t captype() const;
  void set_captype(int32_t value);
  private:
  int32_t _internal_captype() const;
  void _internal_set_captype(int32_t value);
  public:

  // int32 objCount = 4;
  void clear_objcount();
  int32_t objcount() const;
  void set_objcount(int32_t value);
  private:
  int32_t _internal_objcount() const;
  void _internal_set_objcount(int32_t value);
  public:

  // int64 processTime = 6;
  void clear_processtime();
  int64_t processtime() const;
  void set_processtime(int64_t value);
  private:
  int64_t _internal_processtime() const;
  void _internal_set_processtime(int64_t value);
  public:

  // int64 commRcvTime = 7;
  void clear_commrcvtime();
  int64_t commrcvtime() const;
  void set_commrcvtime(int64_t value);
  private:
  int64_t _internal_commrcvtime() const;
  void _internal_set_commrcvtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.CameraPathList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPath > camerapathlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    int64_t datatime_;
    int32_t captype_;
    int32_t objcount_;
    int64_t processtime_;
    int64_t commrcvtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// -------------------------------------------------------------------

class MultiPathDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.rbx.comm.bean.multi.MultiPathDatas) */ {
 public:
  inline MultiPathDatas() : MultiPathDatas(nullptr) {}
  ~MultiPathDatas() override;
  explicit PROTOBUF_CONSTEXPR MultiPathDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPathDatas(const MultiPathDatas& from);
  MultiPathDatas(MultiPathDatas&& from) noexcept
    : MultiPathDatas() {
    *this = ::std::move(from);
  }

  inline MultiPathDatas& operator=(const MultiPathDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPathDatas& operator=(MultiPathDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiPathDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPathDatas* internal_default_instance() {
    return reinterpret_cast<const MultiPathDatas*>(
               &_MultiPathDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MultiPathDatas& a, MultiPathDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPathDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPathDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiPathDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiPathDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiPathDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MultiPathDatas& from) {
    MultiPathDatas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiPathDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.rbx.comm.bean.multi.MultiPathDatas";
  }
  protected:
  explicit MultiPathDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLidarPathListFieldNumber = 2,
    kMwrPathListFieldNumber = 3,
    kCameraPathListFieldNumber = 4,
    kSendTimeFieldNumber = 1,
  };
  // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList lidarPathList = 2;
  int lidarpathlist_size() const;
  private:
  int _internal_lidarpathlist_size() const;
  public:
  void clear_lidarpathlist();
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* mutable_lidarpathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >*
      mutable_lidarpathlist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& _internal_lidarpathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* _internal_add_lidarpathlist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& lidarpathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* add_lidarpathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >&
      lidarpathlist() const;

  // repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList mwrPathList = 3;
  int mwrpathlist_size() const;
  private:
  int _internal_mwrpathlist_size() const;
  public:
  void clear_mwrpathlist();
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* mutable_mwrpathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >*
      mutable_mwrpathlist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& _internal_mwrpathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* _internal_add_mwrpathlist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& mwrpathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* add_mwrpathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >&
      mwrpathlist() const;

  // repeated .cn.seisys.rbx.comm.bean.multi.CameraPathList cameraPathList = 4;
  int camerapathlist_size() const;
  private:
  int _internal_camerapathlist_size() const;
  public:
  void clear_camerapathlist();
  ::cn::seisys::rbx::comm::bean::multi::CameraPathList* mutable_camerapathlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPathList >*
      mutable_camerapathlist();
  private:
  const ::cn::seisys::rbx::comm::bean::multi::CameraPathList& _internal_camerapathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::CameraPathList* _internal_add_camerapathlist();
  public:
  const ::cn::seisys::rbx::comm::bean::multi::CameraPathList& camerapathlist(int index) const;
  ::cn::seisys::rbx::comm::bean::multi::CameraPathList* add_camerapathlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPathList >&
      camerapathlist() const;

  // int64 sendTime = 1;
  void clear_sendtime();
  int64_t sendtime() const;
  void set_sendtime(int64_t value);
  private:
  int64_t _internal_sendtime() const;
  void _internal_set_sendtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.rbx.comm.bean.multi.MultiPathDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList > lidarpathlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList > mwrpathlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPathList > camerapathlist_;
    int64_t sendtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MultiPathDatas_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarPath

// int32 objID = 1;
inline void RadarPath::clear_objid() {
  _impl_.objid_ = 0;
}
inline int32_t RadarPath::_internal_objid() const {
  return _impl_.objid_;
}
inline int32_t RadarPath::objid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objID)
  return _internal_objid();
}
inline void RadarPath::_internal_set_objid(int32_t value) {
  
  _impl_.objid_ = value;
}
inline void RadarPath::set_objid(int32_t value) {
  _internal_set_objid(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objID)
}

// double longitude = 2;
inline void RadarPath::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double RadarPath::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double RadarPath::longitude() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.longitude)
  return _internal_longitude();
}
inline void RadarPath::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void RadarPath::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.longitude)
}

// double lattitude = 3;
inline void RadarPath::clear_lattitude() {
  _impl_.lattitude_ = 0;
}
inline double RadarPath::_internal_lattitude() const {
  return _impl_.lattitude_;
}
inline double RadarPath::lattitude() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.lattitude)
  return _internal_lattitude();
}
inline void RadarPath::_internal_set_lattitude(double value) {
  
  _impl_.lattitude_ = value;
}
inline void RadarPath::set_lattitude(double value) {
  _internal_set_lattitude(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.lattitude)
}

// sint32 elevation = 4;
inline void RadarPath::clear_elevation() {
  _impl_.elevation_ = 0;
}
inline int32_t RadarPath::_internal_elevation() const {
  return _impl_.elevation_;
}
inline int32_t RadarPath::elevation() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.elevation)
  return _internal_elevation();
}
inline void RadarPath::_internal_set_elevation(int32_t value) {
  
  _impl_.elevation_ = value;
}
inline void RadarPath::set_elevation(int32_t value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.elevation)
}

// float objX = 5;
inline void RadarPath::clear_objx() {
  _impl_.objx_ = 0;
}
inline float RadarPath::_internal_objx() const {
  return _impl_.objx_;
}
inline float RadarPath::objx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objX)
  return _internal_objx();
}
inline void RadarPath::_internal_set_objx(float value) {
  
  _impl_.objx_ = value;
}
inline void RadarPath::set_objx(float value) {
  _internal_set_objx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objX)
}

// float objY = 6;
inline void RadarPath::clear_objy() {
  _impl_.objy_ = 0;
}
inline float RadarPath::_internal_objy() const {
  return _impl_.objy_;
}
inline float RadarPath::objy() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objY)
  return _internal_objy();
}
inline void RadarPath::_internal_set_objy(float value) {
  
  _impl_.objy_ = value;
}
inline void RadarPath::set_objy(float value) {
  _internal_set_objy(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objY)
}

// float objZ = 7;
inline void RadarPath::clear_objz() {
  _impl_.objz_ = 0;
}
inline float RadarPath::_internal_objz() const {
  return _impl_.objz_;
}
inline float RadarPath::objz() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objZ)
  return _internal_objz();
}
inline void RadarPath::_internal_set_objz(float value) {
  
  _impl_.objz_ = value;
}
inline void RadarPath::set_objz(float value) {
  _internal_set_objz(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objZ)
}

// float obj_ENU_X = 8;
inline void RadarPath::clear_obj_enu_x() {
  _impl_.obj_enu_x_ = 0;
}
inline float RadarPath::_internal_obj_enu_x() const {
  return _impl_.obj_enu_x_;
}
inline float RadarPath::obj_enu_x() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.obj_ENU_X)
  return _internal_obj_enu_x();
}
inline void RadarPath::_internal_set_obj_enu_x(float value) {
  
  _impl_.obj_enu_x_ = value;
}
inline void RadarPath::set_obj_enu_x(float value) {
  _internal_set_obj_enu_x(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.obj_ENU_X)
}

// float obj_ENU_Y = 9;
inline void RadarPath::clear_obj_enu_y() {
  _impl_.obj_enu_y_ = 0;
}
inline float RadarPath::_internal_obj_enu_y() const {
  return _impl_.obj_enu_y_;
}
inline float RadarPath::obj_enu_y() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.obj_ENU_Y)
  return _internal_obj_enu_y();
}
inline void RadarPath::_internal_set_obj_enu_y(float value) {
  
  _impl_.obj_enu_y_ = value;
}
inline void RadarPath::set_obj_enu_y(float value) {
  _internal_set_obj_enu_y(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.obj_ENU_Y)
}

// float obj_ENU_Z = 10;
inline void RadarPath::clear_obj_enu_z() {
  _impl_.obj_enu_z_ = 0;
}
inline float RadarPath::_internal_obj_enu_z() const {
  return _impl_.obj_enu_z_;
}
inline float RadarPath::obj_enu_z() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.obj_ENU_Z)
  return _internal_obj_enu_z();
}
inline void RadarPath::_internal_set_obj_enu_z(float value) {
  
  _impl_.obj_enu_z_ = value;
}
inline void RadarPath::set_obj_enu_z(float value) {
  _internal_set_obj_enu_z(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.obj_ENU_Z)
}

// sint32 speed = 11;
inline void RadarPath::clear_speed() {
  _impl_.speed_ = 0;
}
inline int32_t RadarPath::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t RadarPath::speed() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speed)
  return _internal_speed();
}
inline void RadarPath::_internal_set_speed(int32_t value) {
  
  _impl_.speed_ = value;
}
inline void RadarPath::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speed)
}

// sint32 speedX = 12;
inline void RadarPath::clear_speedx() {
  _impl_.speedx_ = 0;
}
inline int32_t RadarPath::_internal_speedx() const {
  return _impl_.speedx_;
}
inline int32_t RadarPath::speedx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speedX)
  return _internal_speedx();
}
inline void RadarPath::_internal_set_speedx(int32_t value) {
  
  _impl_.speedx_ = value;
}
inline void RadarPath::set_speedx(int32_t value) {
  _internal_set_speedx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speedX)
}

// sint32 speedY = 13;
inline void RadarPath::clear_speedy() {
  _impl_.speedy_ = 0;
}
inline int32_t RadarPath::_internal_speedy() const {
  return _impl_.speedy_;
}
inline int32_t RadarPath::speedy() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speedY)
  return _internal_speedy();
}
inline void RadarPath::_internal_set_speedy(int32_t value) {
  
  _impl_.speedy_ = value;
}
inline void RadarPath::set_speedy(int32_t value) {
  _internal_set_speedy(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speedY)
}

// sint32 speedZ = 14;
inline void RadarPath::clear_speedz() {
  _impl_.speedz_ = 0;
}
inline int32_t RadarPath::_internal_speedz() const {
  return _impl_.speedz_;
}
inline int32_t RadarPath::speedz() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speedZ)
  return _internal_speedz();
}
inline void RadarPath::_internal_set_speedz(int32_t value) {
  
  _impl_.speedz_ = value;
}
inline void RadarPath::set_speedz(int32_t value) {
  _internal_set_speedz(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speedZ)
}

// sint32 speed_ENU_X = 15;
inline void RadarPath::clear_speed_enu_x() {
  _impl_.speed_enu_x_ = 0;
}
inline int32_t RadarPath::_internal_speed_enu_x() const {
  return _impl_.speed_enu_x_;
}
inline int32_t RadarPath::speed_enu_x() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speed_ENU_X)
  return _internal_speed_enu_x();
}
inline void RadarPath::_internal_set_speed_enu_x(int32_t value) {
  
  _impl_.speed_enu_x_ = value;
}
inline void RadarPath::set_speed_enu_x(int32_t value) {
  _internal_set_speed_enu_x(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speed_ENU_X)
}

// sint32 speed_ENU_Y = 16;
inline void RadarPath::clear_speed_enu_y() {
  _impl_.speed_enu_y_ = 0;
}
inline int32_t RadarPath::_internal_speed_enu_y() const {
  return _impl_.speed_enu_y_;
}
inline int32_t RadarPath::speed_enu_y() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speed_ENU_Y)
  return _internal_speed_enu_y();
}
inline void RadarPath::_internal_set_speed_enu_y(int32_t value) {
  
  _impl_.speed_enu_y_ = value;
}
inline void RadarPath::set_speed_enu_y(int32_t value) {
  _internal_set_speed_enu_y(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speed_ENU_Y)
}

// sint32 speed_ENU_Z = 17;
inline void RadarPath::clear_speed_enu_z() {
  _impl_.speed_enu_z_ = 0;
}
inline int32_t RadarPath::_internal_speed_enu_z() const {
  return _impl_.speed_enu_z_;
}
inline int32_t RadarPath::speed_enu_z() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speed_ENU_Z)
  return _internal_speed_enu_z();
}
inline void RadarPath::_internal_set_speed_enu_z(int32_t value) {
  
  _impl_.speed_enu_z_ = value;
}
inline void RadarPath::set_speed_enu_z(int32_t value) {
  _internal_set_speed_enu_z(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speed_ENU_Z)
}

// int32 objOri = 18;
inline void RadarPath::clear_objori() {
  _impl_.objori_ = 0;
}
inline int32_t RadarPath::_internal_objori() const {
  return _impl_.objori_;
}
inline int32_t RadarPath::objori() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objOri)
  return _internal_objori();
}
inline void RadarPath::_internal_set_objori(int32_t value) {
  
  _impl_.objori_ = value;
}
inline void RadarPath::set_objori(int32_t value) {
  _internal_set_objori(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objOri)
}

// int32 speedHeading = 19;
inline void RadarPath::clear_speedheading() {
  _impl_.speedheading_ = 0;
}
inline int32_t RadarPath::_internal_speedheading() const {
  return _impl_.speedheading_;
}
inline int32_t RadarPath::speedheading() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.speedHeading)
  return _internal_speedheading();
}
inline void RadarPath::_internal_set_speedheading(int32_t value) {
  
  _impl_.speedheading_ = value;
}
inline void RadarPath::set_speedheading(int32_t value) {
  _internal_set_speedheading(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.speedHeading)
}

// int32 objWidth = 20;
inline void RadarPath::clear_objwidth() {
  _impl_.objwidth_ = 0;
}
inline int32_t RadarPath::_internal_objwidth() const {
  return _impl_.objwidth_;
}
inline int32_t RadarPath::objwidth() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objWidth)
  return _internal_objwidth();
}
inline void RadarPath::_internal_set_objwidth(int32_t value) {
  
  _impl_.objwidth_ = value;
}
inline void RadarPath::set_objwidth(int32_t value) {
  _internal_set_objwidth(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objWidth)
}

// int32 objLength = 21;
inline void RadarPath::clear_objlength() {
  _impl_.objlength_ = 0;
}
inline int32_t RadarPath::_internal_objlength() const {
  return _impl_.objlength_;
}
inline int32_t RadarPath::objlength() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objLength)
  return _internal_objlength();
}
inline void RadarPath::_internal_set_objlength(int32_t value) {
  
  _impl_.objlength_ = value;
}
inline void RadarPath::set_objlength(int32_t value) {
  _internal_set_objlength(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objLength)
}

// int32 objHeight = 22;
inline void RadarPath::clear_objheight() {
  _impl_.objheight_ = 0;
}
inline int32_t RadarPath::_internal_objheight() const {
  return _impl_.objheight_;
}
inline int32_t RadarPath::objheight() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objHeight)
  return _internal_objheight();
}
inline void RadarPath::_internal_set_objheight(int32_t value) {
  
  _impl_.objheight_ = value;
}
inline void RadarPath::set_objheight(int32_t value) {
  _internal_set_objheight(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objHeight)
}

// sint32 aclr = 23;
inline void RadarPath::clear_aclr() {
  _impl_.aclr_ = 0;
}
inline int32_t RadarPath::_internal_aclr() const {
  return _impl_.aclr_;
}
inline int32_t RadarPath::aclr() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr)
  return _internal_aclr();
}
inline void RadarPath::_internal_set_aclr(int32_t value) {
  
  _impl_.aclr_ = value;
}
inline void RadarPath::set_aclr(int32_t value) {
  _internal_set_aclr(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr)
}

// int32 aclrAngle = 24;
inline void RadarPath::clear_aclrangle() {
  _impl_.aclrangle_ = 0;
}
inline int32_t RadarPath::_internal_aclrangle() const {
  return _impl_.aclrangle_;
}
inline int32_t RadarPath::aclrangle() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclrAngle)
  return _internal_aclrangle();
}
inline void RadarPath::_internal_set_aclrangle(int32_t value) {
  
  _impl_.aclrangle_ = value;
}
inline void RadarPath::set_aclrangle(int32_t value) {
  _internal_set_aclrangle(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclrAngle)
}

// sint32 aclr_x = 25;
inline void RadarPath::clear_aclr_x() {
  _impl_.aclr_x_ = 0;
}
inline int32_t RadarPath::_internal_aclr_x() const {
  return _impl_.aclr_x_;
}
inline int32_t RadarPath::aclr_x() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_x)
  return _internal_aclr_x();
}
inline void RadarPath::_internal_set_aclr_x(int32_t value) {
  
  _impl_.aclr_x_ = value;
}
inline void RadarPath::set_aclr_x(int32_t value) {
  _internal_set_aclr_x(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_x)
}

// sint32 aclr_y = 26;
inline void RadarPath::clear_aclr_y() {
  _impl_.aclr_y_ = 0;
}
inline int32_t RadarPath::_internal_aclr_y() const {
  return _impl_.aclr_y_;
}
inline int32_t RadarPath::aclr_y() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_y)
  return _internal_aclr_y();
}
inline void RadarPath::_internal_set_aclr_y(int32_t value) {
  
  _impl_.aclr_y_ = value;
}
inline void RadarPath::set_aclr_y(int32_t value) {
  _internal_set_aclr_y(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_y)
}

// sint32 aclr_z = 27;
inline void RadarPath::clear_aclr_z() {
  _impl_.aclr_z_ = 0;
}
inline int32_t RadarPath::_internal_aclr_z() const {
  return _impl_.aclr_z_;
}
inline int32_t RadarPath::aclr_z() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_z)
  return _internal_aclr_z();
}
inline void RadarPath::_internal_set_aclr_z(int32_t value) {
  
  _impl_.aclr_z_ = value;
}
inline void RadarPath::set_aclr_z(int32_t value) {
  _internal_set_aclr_z(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_z)
}

// sint32 aclr_enu_x = 28;
inline void RadarPath::clear_aclr_enu_x() {
  _impl_.aclr_enu_x_ = 0;
}
inline int32_t RadarPath::_internal_aclr_enu_x() const {
  return _impl_.aclr_enu_x_;
}
inline int32_t RadarPath::aclr_enu_x() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_enu_x)
  return _internal_aclr_enu_x();
}
inline void RadarPath::_internal_set_aclr_enu_x(int32_t value) {
  
  _impl_.aclr_enu_x_ = value;
}
inline void RadarPath::set_aclr_enu_x(int32_t value) {
  _internal_set_aclr_enu_x(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_enu_x)
}

// sint32 aclr_enu_y = 29;
inline void RadarPath::clear_aclr_enu_y() {
  _impl_.aclr_enu_y_ = 0;
}
inline int32_t RadarPath::_internal_aclr_enu_y() const {
  return _impl_.aclr_enu_y_;
}
inline int32_t RadarPath::aclr_enu_y() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_enu_y)
  return _internal_aclr_enu_y();
}
inline void RadarPath::_internal_set_aclr_enu_y(int32_t value) {
  
  _impl_.aclr_enu_y_ = value;
}
inline void RadarPath::set_aclr_enu_y(int32_t value) {
  _internal_set_aclr_enu_y(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_enu_y)
}

// sint32 aclr_enu_z = 30;
inline void RadarPath::clear_aclr_enu_z() {
  _impl_.aclr_enu_z_ = 0;
}
inline int32_t RadarPath::_internal_aclr_enu_z() const {
  return _impl_.aclr_enu_z_;
}
inline int32_t RadarPath::aclr_enu_z() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_enu_z)
  return _internal_aclr_enu_z();
}
inline void RadarPath::_internal_set_aclr_enu_z(int32_t value) {
  
  _impl_.aclr_enu_z_ = value;
}
inline void RadarPath::set_aclr_enu_z(int32_t value) {
  _internal_set_aclr_enu_z(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.aclr_enu_z)
}

// int32 objState = 31;
inline void RadarPath::clear_objstate() {
  _impl_.objstate_ = 0;
}
inline int32_t RadarPath::_internal_objstate() const {
  return _impl_.objstate_;
}
inline int32_t RadarPath::objstate() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objState)
  return _internal_objstate();
}
inline void RadarPath::_internal_set_objstate(int32_t value) {
  
  _impl_.objstate_ = value;
}
inline void RadarPath::set_objstate(int32_t value) {
  _internal_set_objstate(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objState)
}

// int32 objCf = 32;
inline void RadarPath::clear_objcf() {
  _impl_.objcf_ = 0;
}
inline int32_t RadarPath::_internal_objcf() const {
  return _impl_.objcf_;
}
inline int32_t RadarPath::objcf() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objCf)
  return _internal_objcf();
}
inline void RadarPath::_internal_set_objcf(int32_t value) {
  
  _impl_.objcf_ = value;
}
inline void RadarPath::set_objcf(int32_t value) {
  _internal_set_objcf(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objCf)
}

// int32 objType = 33;
inline void RadarPath::clear_objtype() {
  _impl_.objtype_ = 0;
}
inline int32_t RadarPath::_internal_objtype() const {
  return _impl_.objtype_;
}
inline int32_t RadarPath::objtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objType)
  return _internal_objtype();
}
inline void RadarPath::_internal_set_objtype(int32_t value) {
  
  _impl_.objtype_ = value;
}
inline void RadarPath::set_objtype(int32_t value) {
  _internal_set_objtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objType)
}

// int32 objKind = 34;
inline void RadarPath::clear_objkind() {
  _impl_.objkind_ = 0;
}
inline int32_t RadarPath::_internal_objkind() const {
  return _impl_.objkind_;
}
inline int32_t RadarPath::objkind() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objKind)
  return _internal_objkind();
}
inline void RadarPath::_internal_set_objkind(int32_t value) {
  
  _impl_.objkind_ = value;
}
inline void RadarPath::set_objkind(int32_t value) {
  _internal_set_objkind(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objKind)
}

// float objDist = 35;
inline void RadarPath::clear_objdist() {
  _impl_.objdist_ = 0;
}
inline float RadarPath::_internal_objdist() const {
  return _impl_.objdist_;
}
inline float RadarPath::objdist() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarPath.objDist)
  return _internal_objdist();
}
inline void RadarPath::_internal_set_objdist(float value) {
  
  _impl_.objdist_ = value;
}
inline void RadarPath::set_objdist(float value) {
  _internal_set_objdist(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarPath.objDist)
}

// -------------------------------------------------------------------

// CameraPath

// int32 objID = 1;
inline void CameraPath::clear_objid() {
  _impl_.objid_ = 0;
}
inline int32_t CameraPath::_internal_objid() const {
  return _impl_.objid_;
}
inline int32_t CameraPath::objid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objID)
  return _internal_objid();
}
inline void CameraPath::_internal_set_objid(int32_t value) {
  
  _impl_.objid_ = value;
}
inline void CameraPath::set_objid(int32_t value) {
  _internal_set_objid(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objID)
}

// int32 laneNo = 2;
inline void CameraPath::clear_laneno() {
  _impl_.laneno_ = 0;
}
inline int32_t CameraPath::_internal_laneno() const {
  return _impl_.laneno_;
}
inline int32_t CameraPath::laneno() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.laneNo)
  return _internal_laneno();
}
inline void CameraPath::_internal_set_laneno(int32_t value) {
  
  _impl_.laneno_ = value;
}
inline void CameraPath::set_laneno(int32_t value) {
  _internal_set_laneno(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.laneNo)
}

// string plateNo = 3;
inline void CameraPath::clear_plateno() {
  _impl_.plateno_.ClearToEmpty();
}
inline const std::string& CameraPath::plateno() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.plateNo)
  return _internal_plateno();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraPath::set_plateno(ArgT0&& arg0, ArgT... args) {
 
 _impl_.plateno_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.plateNo)
}
inline std::string* CameraPath::mutable_plateno() {
  std::string* _s = _internal_mutable_plateno();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.CameraPath.plateNo)
  return _s;
}
inline const std::string& CameraPath::_internal_plateno() const {
  return _impl_.plateno_.Get();
}
inline void CameraPath::_internal_set_plateno(const std::string& value) {
  
  _impl_.plateno_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraPath::_internal_mutable_plateno() {
  
  return _impl_.plateno_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraPath::release_plateno() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.CameraPath.plateNo)
  return _impl_.plateno_.Release();
}
inline void CameraPath::set_allocated_plateno(std::string* plateno) {
  if (plateno != nullptr) {
    
  } else {
    
  }
  _impl_.plateno_.SetAllocated(plateno, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plateno_.IsDefault()) {
    _impl_.plateno_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.CameraPath.plateNo)
}

// int32 plateColor = 4;
inline void CameraPath::clear_platecolor() {
  _impl_.platecolor_ = 0;
}
inline int32_t CameraPath::_internal_platecolor() const {
  return _impl_.platecolor_;
}
inline int32_t CameraPath::platecolor() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.plateColor)
  return _internal_platecolor();
}
inline void CameraPath::_internal_set_platecolor(int32_t value) {
  
  _impl_.platecolor_ = value;
}
inline void CameraPath::set_platecolor(int32_t value) {
  _internal_set_platecolor(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.plateColor)
}

// int32 vehType = 5;
inline void CameraPath::clear_vehtype() {
  _impl_.vehtype_ = 0;
}
inline int32_t CameraPath::_internal_vehtype() const {
  return _impl_.vehtype_;
}
inline int32_t CameraPath::vehtype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.vehType)
  return _internal_vehtype();
}
inline void CameraPath::_internal_set_vehtype(int32_t value) {
  
  _impl_.vehtype_ = value;
}
inline void CameraPath::set_vehtype(int32_t value) {
  _internal_set_vehtype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.vehType)
}

// string vehColor = 6;
inline void CameraPath::clear_vehcolor() {
  _impl_.vehcolor_.ClearToEmpty();
}
inline const std::string& CameraPath::vehcolor() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.vehColor)
  return _internal_vehcolor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraPath::set_vehcolor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vehcolor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.vehColor)
}
inline std::string* CameraPath::mutable_vehcolor() {
  std::string* _s = _internal_mutable_vehcolor();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.CameraPath.vehColor)
  return _s;
}
inline const std::string& CameraPath::_internal_vehcolor() const {
  return _impl_.vehcolor_.Get();
}
inline void CameraPath::_internal_set_vehcolor(const std::string& value) {
  
  _impl_.vehcolor_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraPath::_internal_mutable_vehcolor() {
  
  return _impl_.vehcolor_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraPath::release_vehcolor() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.CameraPath.vehColor)
  return _impl_.vehcolor_.Release();
}
inline void CameraPath::set_allocated_vehcolor(std::string* vehcolor) {
  if (vehcolor != nullptr) {
    
  } else {
    
  }
  _impl_.vehcolor_.SetAllocated(vehcolor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vehcolor_.IsDefault()) {
    _impl_.vehcolor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.CameraPath.vehColor)
}

// int32 objX = 7;
inline void CameraPath::clear_objx() {
  _impl_.objx_ = 0;
}
inline int32_t CameraPath::_internal_objx() const {
  return _impl_.objx_;
}
inline int32_t CameraPath::objx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objX)
  return _internal_objx();
}
inline void CameraPath::_internal_set_objx(int32_t value) {
  
  _impl_.objx_ = value;
}
inline void CameraPath::set_objx(int32_t value) {
  _internal_set_objx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objX)
}

// int32 objY = 8;
inline void CameraPath::clear_objy() {
  _impl_.objy_ = 0;
}
inline int32_t CameraPath::_internal_objy() const {
  return _impl_.objy_;
}
inline int32_t CameraPath::objy() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objY)
  return _internal_objy();
}
inline void CameraPath::_internal_set_objy(int32_t value) {
  
  _impl_.objy_ = value;
}
inline void CameraPath::set_objy(int32_t value) {
  _internal_set_objy(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objY)
}

// int32 objDistX = 9;
inline void CameraPath::clear_objdistx() {
  _impl_.objdistx_ = 0;
}
inline int32_t CameraPath::_internal_objdistx() const {
  return _impl_.objdistx_;
}
inline int32_t CameraPath::objdistx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objDistX)
  return _internal_objdistx();
}
inline void CameraPath::_internal_set_objdistx(int32_t value) {
  
  _impl_.objdistx_ = value;
}
inline void CameraPath::set_objdistx(int32_t value) {
  _internal_set_objdistx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objDistX)
}

// int32 objDistY = 10;
inline void CameraPath::clear_objdisty() {
  _impl_.objdisty_ = 0;
}
inline int32_t CameraPath::_internal_objdisty() const {
  return _impl_.objdisty_;
}
inline int32_t CameraPath::objdisty() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objDistY)
  return _internal_objdisty();
}
inline void CameraPath::_internal_set_objdisty(int32_t value) {
  
  _impl_.objdisty_ = value;
}
inline void CameraPath::set_objdisty(int32_t value) {
  _internal_set_objdisty(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objDistY)
}

// int32 objBottomMidX = 11;
inline void CameraPath::clear_objbottommidx() {
  _impl_.objbottommidx_ = 0;
}
inline int32_t CameraPath::_internal_objbottommidx() const {
  return _impl_.objbottommidx_;
}
inline int32_t CameraPath::objbottommidx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objBottomMidX)
  return _internal_objbottommidx();
}
inline void CameraPath::_internal_set_objbottommidx(int32_t value) {
  
  _impl_.objbottommidx_ = value;
}
inline void CameraPath::set_objbottommidx(int32_t value) {
  _internal_set_objbottommidx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objBottomMidX)
}

// int32 objBottomMidY = 12;
inline void CameraPath::clear_objbottommidy() {
  _impl_.objbottommidy_ = 0;
}
inline int32_t CameraPath::_internal_objbottommidy() const {
  return _impl_.objbottommidy_;
}
inline int32_t CameraPath::objbottommidy() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objBottomMidY)
  return _internal_objbottommidy();
}
inline void CameraPath::_internal_set_objbottommidy(int32_t value) {
  
  _impl_.objbottommidy_ = value;
}
inline void CameraPath::set_objbottommidy(int32_t value) {
  _internal_set_objbottommidy(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objBottomMidY)
}

// .cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo globalSpaceInfo = 13;
inline bool CameraPath::_internal_has_globalspaceinfo() const {
  return this != internal_default_instance() && _impl_.globalspaceinfo_ != nullptr;
}
inline bool CameraPath::has_globalspaceinfo() const {
  return _internal_has_globalspaceinfo();
}
inline void CameraPath::clear_globalspaceinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.globalspaceinfo_ != nullptr) {
    delete _impl_.globalspaceinfo_;
  }
  _impl_.globalspaceinfo_ = nullptr;
}
inline const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo& CameraPath::_internal_globalspaceinfo() const {
  const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* p = _impl_.globalspaceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo&>(
      ::cn::seisys::rbx::comm::bean::multi::_GlobalSpaceInfo_default_instance_);
}
inline const ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo& CameraPath::globalspaceinfo() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.globalSpaceInfo)
  return _internal_globalspaceinfo();
}
inline void CameraPath::unsafe_arena_set_allocated_globalspaceinfo(
    ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* globalspaceinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.globalspaceinfo_);
  }
  _impl_.globalspaceinfo_ = globalspaceinfo;
  if (globalspaceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cn.seisys.rbx.comm.bean.multi.CameraPath.globalSpaceInfo)
}
inline ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* CameraPath::release_globalspaceinfo() {
  
  ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* temp = _impl_.globalspaceinfo_;
  _impl_.globalspaceinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* CameraPath::unsafe_arena_release_globalspaceinfo() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.CameraPath.globalSpaceInfo)
  
  ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* temp = _impl_.globalspaceinfo_;
  _impl_.globalspaceinfo_ = nullptr;
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* CameraPath::_internal_mutable_globalspaceinfo() {
  
  if (_impl_.globalspaceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo>(GetArenaForAllocation());
    _impl_.globalspaceinfo_ = p;
  }
  return _impl_.globalspaceinfo_;
}
inline ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* CameraPath::mutable_globalspaceinfo() {
  ::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* _msg = _internal_mutable_globalspaceinfo();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.CameraPath.globalSpaceInfo)
  return _msg;
}
inline void CameraPath::set_allocated_globalspaceinfo(::cn::seisys::rbx::comm::bean::multi::GlobalSpaceInfo* globalspaceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.globalspaceinfo_;
  }
  if (globalspaceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(globalspaceinfo);
    if (message_arena != submessage_arena) {
      globalspaceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalspaceinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.globalspaceinfo_ = globalspaceinfo;
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.CameraPath.globalSpaceInfo)
}

// int32 objCf = 14;
inline void CameraPath::clear_objcf() {
  _impl_.objcf_ = 0;
}
inline int32_t CameraPath::_internal_objcf() const {
  return _impl_.objcf_;
}
inline int32_t CameraPath::objcf() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objCf)
  return _internal_objcf();
}
inline void CameraPath::_internal_set_objcf(int32_t value) {
  
  _impl_.objcf_ = value;
}
inline void CameraPath::set_objcf(int32_t value) {
  _internal_set_objcf(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objCf)
}

// int32 objKind = 15;
inline void CameraPath::clear_objkind() {
  _impl_.objkind_ = 0;
}
inline int32_t CameraPath::_internal_objkind() const {
  return _impl_.objkind_;
}
inline int32_t CameraPath::objkind() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objKind)
  return _internal_objkind();
}
inline void CameraPath::_internal_set_objkind(int32_t value) {
  
  _impl_.objkind_ = value;
}
inline void CameraPath::set_objkind(int32_t value) {
  _internal_set_objkind(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objKind)
}

// uint32 objImgTop = 16;
inline void CameraPath::clear_objimgtop() {
  _impl_.objimgtop_ = 0u;
}
inline uint32_t CameraPath::_internal_objimgtop() const {
  return _impl_.objimgtop_;
}
inline uint32_t CameraPath::objimgtop() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgTop)
  return _internal_objimgtop();
}
inline void CameraPath::_internal_set_objimgtop(uint32_t value) {
  
  _impl_.objimgtop_ = value;
}
inline void CameraPath::set_objimgtop(uint32_t value) {
  _internal_set_objimgtop(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgTop)
}

// uint32 objImgLeft = 17;
inline void CameraPath::clear_objimgleft() {
  _impl_.objimgleft_ = 0u;
}
inline uint32_t CameraPath::_internal_objimgleft() const {
  return _impl_.objimgleft_;
}
inline uint32_t CameraPath::objimgleft() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgLeft)
  return _internal_objimgleft();
}
inline void CameraPath::_internal_set_objimgleft(uint32_t value) {
  
  _impl_.objimgleft_ = value;
}
inline void CameraPath::set_objimgleft(uint32_t value) {
  _internal_set_objimgleft(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgLeft)
}

// uint32 objImgRight = 18;
inline void CameraPath::clear_objimgright() {
  _impl_.objimgright_ = 0u;
}
inline uint32_t CameraPath::_internal_objimgright() const {
  return _impl_.objimgright_;
}
inline uint32_t CameraPath::objimgright() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgRight)
  return _internal_objimgright();
}
inline void CameraPath::_internal_set_objimgright(uint32_t value) {
  
  _impl_.objimgright_ = value;
}
inline void CameraPath::set_objimgright(uint32_t value) {
  _internal_set_objimgright(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgRight)
}

// uint32 objImgBottom = 19;
inline void CameraPath::clear_objimgbottom() {
  _impl_.objimgbottom_ = 0u;
}
inline uint32_t CameraPath::_internal_objimgbottom() const {
  return _impl_.objimgbottom_;
}
inline uint32_t CameraPath::objimgbottom() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgBottom)
  return _internal_objimgbottom();
}
inline void CameraPath::_internal_set_objimgbottom(uint32_t value) {
  
  _impl_.objimgbottom_ = value;
}
inline void CameraPath::set_objimgbottom(uint32_t value) {
  _internal_set_objimgbottom(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPath.objImgBottom)
}

// -------------------------------------------------------------------

// GlobalSpaceInfo

// .cn.seisys.rbx.comm.bean.multi.GNSSPosition position_gnss = 1;
inline bool GlobalSpaceInfo::_internal_has_position_gnss() const {
  return this != internal_default_instance() && _impl_.position_gnss_ != nullptr;
}
inline bool GlobalSpaceInfo::has_position_gnss() const {
  return _internal_has_position_gnss();
}
inline void GlobalSpaceInfo::clear_position_gnss() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_gnss_ != nullptr) {
    delete _impl_.position_gnss_;
  }
  _impl_.position_gnss_ = nullptr;
}
inline const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition& GlobalSpaceInfo::_internal_position_gnss() const {
  const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* p = _impl_.position_gnss_;
  return p != nullptr ? *p : reinterpret_cast<const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition&>(
      ::cn::seisys::rbx::comm::bean::multi::_GNSSPosition_default_instance_);
}
inline const ::cn::seisys::rbx::comm::bean::multi::GNSSPosition& GlobalSpaceInfo::position_gnss() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_gnss)
  return _internal_position_gnss();
}
inline void GlobalSpaceInfo::unsafe_arena_set_allocated_position_gnss(
    ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* position_gnss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_gnss_);
  }
  _impl_.position_gnss_ = position_gnss;
  if (position_gnss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_gnss)
}
inline ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* GlobalSpaceInfo::release_position_gnss() {
  
  ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* temp = _impl_.position_gnss_;
  _impl_.position_gnss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* GlobalSpaceInfo::unsafe_arena_release_position_gnss() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_gnss)
  
  ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* temp = _impl_.position_gnss_;
  _impl_.position_gnss_ = nullptr;
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* GlobalSpaceInfo::_internal_mutable_position_gnss() {
  
  if (_impl_.position_gnss_ == nullptr) {
    auto* p = CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::GNSSPosition>(GetArenaForAllocation());
    _impl_.position_gnss_ = p;
  }
  return _impl_.position_gnss_;
}
inline ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* GlobalSpaceInfo::mutable_position_gnss() {
  ::cn::seisys::rbx::comm::bean::multi::GNSSPosition* _msg = _internal_mutable_position_gnss();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_gnss)
  return _msg;
}
inline void GlobalSpaceInfo::set_allocated_position_gnss(::cn::seisys::rbx::comm::bean::multi::GNSSPosition* position_gnss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_gnss_;
  }
  if (position_gnss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_gnss);
    if (message_arena != submessage_arena) {
      position_gnss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_gnss, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_gnss_ = position_gnss;
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_gnss)
}

// .cn.seisys.rbx.comm.bean.multi.UTMPosition position_utm = 2;
inline bool GlobalSpaceInfo::_internal_has_position_utm() const {
  return this != internal_default_instance() && _impl_.position_utm_ != nullptr;
}
inline bool GlobalSpaceInfo::has_position_utm() const {
  return _internal_has_position_utm();
}
inline void GlobalSpaceInfo::clear_position_utm() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_utm_ != nullptr) {
    delete _impl_.position_utm_;
  }
  _impl_.position_utm_ = nullptr;
}
inline const ::cn::seisys::rbx::comm::bean::multi::UTMPosition& GlobalSpaceInfo::_internal_position_utm() const {
  const ::cn::seisys::rbx::comm::bean::multi::UTMPosition* p = _impl_.position_utm_;
  return p != nullptr ? *p : reinterpret_cast<const ::cn::seisys::rbx::comm::bean::multi::UTMPosition&>(
      ::cn::seisys::rbx::comm::bean::multi::_UTMPosition_default_instance_);
}
inline const ::cn::seisys::rbx::comm::bean::multi::UTMPosition& GlobalSpaceInfo::position_utm() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_utm)
  return _internal_position_utm();
}
inline void GlobalSpaceInfo::unsafe_arena_set_allocated_position_utm(
    ::cn::seisys::rbx::comm::bean::multi::UTMPosition* position_utm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_utm_);
  }
  _impl_.position_utm_ = position_utm;
  if (position_utm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_utm)
}
inline ::cn::seisys::rbx::comm::bean::multi::UTMPosition* GlobalSpaceInfo::release_position_utm() {
  
  ::cn::seisys::rbx::comm::bean::multi::UTMPosition* temp = _impl_.position_utm_;
  _impl_.position_utm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::UTMPosition* GlobalSpaceInfo::unsafe_arena_release_position_utm() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_utm)
  
  ::cn::seisys::rbx::comm::bean::multi::UTMPosition* temp = _impl_.position_utm_;
  _impl_.position_utm_ = nullptr;
  return temp;
}
inline ::cn::seisys::rbx::comm::bean::multi::UTMPosition* GlobalSpaceInfo::_internal_mutable_position_utm() {
  
  if (_impl_.position_utm_ == nullptr) {
    auto* p = CreateMaybeMessage<::cn::seisys::rbx::comm::bean::multi::UTMPosition>(GetArenaForAllocation());
    _impl_.position_utm_ = p;
  }
  return _impl_.position_utm_;
}
inline ::cn::seisys::rbx::comm::bean::multi::UTMPosition* GlobalSpaceInfo::mutable_position_utm() {
  ::cn::seisys::rbx::comm::bean::multi::UTMPosition* _msg = _internal_mutable_position_utm();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_utm)
  return _msg;
}
inline void GlobalSpaceInfo::set_allocated_position_utm(::cn::seisys::rbx::comm::bean::multi::UTMPosition* position_utm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_utm_;
  }
  if (position_utm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_utm);
    if (message_arena != submessage_arena) {
      position_utm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_utm, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_utm_ = position_utm;
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.position_utm)
}

// int32 objOri = 3;
inline void GlobalSpaceInfo::clear_objori() {
  _impl_.objori_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_objori() const {
  return _impl_.objori_;
}
inline int32_t GlobalSpaceInfo::objori() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objOri)
  return _internal_objori();
}
inline void GlobalSpaceInfo::_internal_set_objori(int32_t value) {
  
  _impl_.objori_ = value;
}
inline void GlobalSpaceInfo::set_objori(int32_t value) {
  _internal_set_objori(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objOri)
}

// int32 objWidth = 4;
inline void GlobalSpaceInfo::clear_objwidth() {
  _impl_.objwidth_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_objwidth() const {
  return _impl_.objwidth_;
}
inline int32_t GlobalSpaceInfo::objwidth() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objWidth)
  return _internal_objwidth();
}
inline void GlobalSpaceInfo::_internal_set_objwidth(int32_t value) {
  
  _impl_.objwidth_ = value;
}
inline void GlobalSpaceInfo::set_objwidth(int32_t value) {
  _internal_set_objwidth(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objWidth)
}

// int32 objLength = 5;
inline void GlobalSpaceInfo::clear_objlength() {
  _impl_.objlength_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_objlength() const {
  return _impl_.objlength_;
}
inline int32_t GlobalSpaceInfo::objlength() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objLength)
  return _internal_objlength();
}
inline void GlobalSpaceInfo::_internal_set_objlength(int32_t value) {
  
  _impl_.objlength_ = value;
}
inline void GlobalSpaceInfo::set_objlength(int32_t value) {
  _internal_set_objlength(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objLength)
}

// int32 objHeight = 6;
inline void GlobalSpaceInfo::clear_objheight() {
  _impl_.objheight_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_objheight() const {
  return _impl_.objheight_;
}
inline int32_t GlobalSpaceInfo::objheight() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objHeight)
  return _internal_objheight();
}
inline void GlobalSpaceInfo::_internal_set_objheight(int32_t value) {
  
  _impl_.objheight_ = value;
}
inline void GlobalSpaceInfo::set_objheight(int32_t value) {
  _internal_set_objheight(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.objHeight)
}

// int32 speedX = 7;
inline void GlobalSpaceInfo::clear_speedx() {
  _impl_.speedx_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_speedx() const {
  return _impl_.speedx_;
}
inline int32_t GlobalSpaceInfo::speedx() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speedX)
  return _internal_speedx();
}
inline void GlobalSpaceInfo::_internal_set_speedx(int32_t value) {
  
  _impl_.speedx_ = value;
}
inline void GlobalSpaceInfo::set_speedx(int32_t value) {
  _internal_set_speedx(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speedX)
}

// int32 speedY = 8;
inline void GlobalSpaceInfo::clear_speedy() {
  _impl_.speedy_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_speedy() const {
  return _impl_.speedy_;
}
inline int32_t GlobalSpaceInfo::speedy() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speedY)
  return _internal_speedy();
}
inline void GlobalSpaceInfo::_internal_set_speedy(int32_t value) {
  
  _impl_.speedy_ = value;
}
inline void GlobalSpaceInfo::set_speedy(int32_t value) {
  _internal_set_speedy(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speedY)
}

// int32 speedZ = 9;
inline void GlobalSpaceInfo::clear_speedz() {
  _impl_.speedz_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_speedz() const {
  return _impl_.speedz_;
}
inline int32_t GlobalSpaceInfo::speedz() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speedZ)
  return _internal_speedz();
}
inline void GlobalSpaceInfo::_internal_set_speedz(int32_t value) {
  
  _impl_.speedz_ = value;
}
inline void GlobalSpaceInfo::set_speedz(int32_t value) {
  _internal_set_speedz(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speedZ)
}

// int32 speed = 10;
inline void GlobalSpaceInfo::clear_speed() {
  _impl_.speed_ = 0;
}
inline int32_t GlobalSpaceInfo::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t GlobalSpaceInfo::speed() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speed)
  return _internal_speed();
}
inline void GlobalSpaceInfo::_internal_set_speed(int32_t value) {
  
  _impl_.speed_ = value;
}
inline void GlobalSpaceInfo::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GlobalSpaceInfo.speed)
}

// -------------------------------------------------------------------

// GNSSPosition

// double longitude = 1;
inline void GNSSPosition::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double GNSSPosition::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double GNSSPosition::longitude() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GNSSPosition.longitude)
  return _internal_longitude();
}
inline void GNSSPosition::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void GNSSPosition::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GNSSPosition.longitude)
}

// double latitude = 2;
inline void GNSSPosition::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double GNSSPosition::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double GNSSPosition::latitude() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.GNSSPosition.latitude)
  return _internal_latitude();
}
inline void GNSSPosition::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void GNSSPosition::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.GNSSPosition.latitude)
}

// -------------------------------------------------------------------

// UTMPosition

// double x = 1;
inline void UTMPosition::clear_x() {
  _impl_.x_ = 0;
}
inline double UTMPosition::_internal_x() const {
  return _impl_.x_;
}
inline double UTMPosition::x() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.UTMPosition.x)
  return _internal_x();
}
inline void UTMPosition::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void UTMPosition::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.UTMPosition.x)
}

// double y = 2;
inline void UTMPosition::clear_y() {
  _impl_.y_ = 0;
}
inline double UTMPosition::_internal_y() const {
  return _impl_.y_;
}
inline double UTMPosition::y() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.UTMPosition.y)
  return _internal_y();
}
inline void UTMPosition::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void UTMPosition::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.UTMPosition.y)
}

// -------------------------------------------------------------------

// RadarDevPathList

// int64 dataTime = 1;
inline void RadarDevPathList::clear_datatime() {
  _impl_.datatime_ = int64_t{0};
}
inline int64_t RadarDevPathList::_internal_datatime() const {
  return _impl_.datatime_;
}
inline int64_t RadarDevPathList::datatime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.dataTime)
  return _internal_datatime();
}
inline void RadarDevPathList::_internal_set_datatime(int64_t value) {
  
  _impl_.datatime_ = value;
}
inline void RadarDevPathList::set_datatime(int64_t value) {
  _internal_set_datatime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.dataTime)
}

// string deviceID = 2;
inline void RadarDevPathList::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
}
inline const std::string& RadarDevPathList::deviceid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.deviceID)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RadarDevPathList::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.deviceID)
}
inline std::string* RadarDevPathList::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.deviceID)
  return _s;
}
inline const std::string& RadarDevPathList::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void RadarDevPathList::_internal_set_deviceid(const std::string& value) {
  
  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* RadarDevPathList::_internal_mutable_deviceid() {
  
  return _impl_.deviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* RadarDevPathList::release_deviceid() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.deviceID)
  return _impl_.deviceid_.Release();
}
inline void RadarDevPathList::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  _impl_.deviceid_.SetAllocated(deviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceid_.IsDefault()) {
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.deviceID)
}

// int32 areaNo = 3;
inline void RadarDevPathList::clear_areano() {
  _impl_.areano_ = 0;
}
inline int32_t RadarDevPathList::_internal_areano() const {
  return _impl_.areano_;
}
inline int32_t RadarDevPathList::areano() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.areaNo)
  return _internal_areano();
}
inline void RadarDevPathList::_internal_set_areano(int32_t value) {
  
  _impl_.areano_ = value;
}
inline void RadarDevPathList::set_areano(int32_t value) {
  _internal_set_areano(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.areaNo)
}

// repeated .cn.seisys.rbx.comm.bean.multi.RadarPath radarPathList = 4;
inline int RadarDevPathList::_internal_radarpathlist_size() const {
  return _impl_.radarpathlist_.size();
}
inline int RadarDevPathList::radarpathlist_size() const {
  return _internal_radarpathlist_size();
}
inline void RadarDevPathList::clear_radarpathlist() {
  _impl_.radarpathlist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarPath* RadarDevPathList::mutable_radarpathlist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.radarPathList)
  return _impl_.radarpathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarPath >*
RadarDevPathList::mutable_radarpathlist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.radarPathList)
  return &_impl_.radarpathlist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::RadarPath& RadarDevPathList::_internal_radarpathlist(int index) const {
  return _impl_.radarpathlist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::RadarPath& RadarDevPathList::radarpathlist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.radarPathList)
  return _internal_radarpathlist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarPath* RadarDevPathList::_internal_add_radarpathlist() {
  return _impl_.radarpathlist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarPath* RadarDevPathList::add_radarpathlist() {
  ::cn::seisys::rbx::comm::bean::multi::RadarPath* _add = _internal_add_radarpathlist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.radarPathList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarPath >&
RadarDevPathList::radarpathlist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.radarPathList)
  return _impl_.radarpathlist_;
}

// int64 processTime = 5;
inline void RadarDevPathList::clear_processtime() {
  _impl_.processtime_ = int64_t{0};
}
inline int64_t RadarDevPathList::_internal_processtime() const {
  return _impl_.processtime_;
}
inline int64_t RadarDevPathList::processtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.processTime)
  return _internal_processtime();
}
inline void RadarDevPathList::_internal_set_processtime(int64_t value) {
  
  _impl_.processtime_ = value;
}
inline void RadarDevPathList::set_processtime(int64_t value) {
  _internal_set_processtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.processTime)
}

// int64 commRcvTime = 6;
inline void RadarDevPathList::clear_commrcvtime() {
  _impl_.commrcvtime_ = int64_t{0};
}
inline int64_t RadarDevPathList::_internal_commrcvtime() const {
  return _impl_.commrcvtime_;
}
inline int64_t RadarDevPathList::commrcvtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.commRcvTime)
  return _internal_commrcvtime();
}
inline void RadarDevPathList::_internal_set_commrcvtime(int64_t value) {
  
  _impl_.commrcvtime_ = value;
}
inline void RadarDevPathList::set_commrcvtime(int64_t value) {
  _internal_set_commrcvtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.RadarDevPathList.commRcvTime)
}

// -------------------------------------------------------------------

// CameraPathList

// int64 dataTime = 1;
inline void CameraPathList::clear_datatime() {
  _impl_.datatime_ = int64_t{0};
}
inline int64_t CameraPathList::_internal_datatime() const {
  return _impl_.datatime_;
}
inline int64_t CameraPathList::datatime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPathList.dataTime)
  return _internal_datatime();
}
inline void CameraPathList::_internal_set_datatime(int64_t value) {
  
  _impl_.datatime_ = value;
}
inline void CameraPathList::set_datatime(int64_t value) {
  _internal_set_datatime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPathList.dataTime)
}

// string deviceID = 2;
inline void CameraPathList::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
}
inline const std::string& CameraPathList::deviceid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPathList.deviceID)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraPathList::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPathList.deviceID)
}
inline std::string* CameraPathList::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.CameraPathList.deviceID)
  return _s;
}
inline const std::string& CameraPathList::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void CameraPathList::_internal_set_deviceid(const std::string& value) {
  
  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraPathList::_internal_mutable_deviceid() {
  
  return _impl_.deviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraPathList::release_deviceid() {
  // @@protoc_insertion_point(field_release:cn.seisys.rbx.comm.bean.multi.CameraPathList.deviceID)
  return _impl_.deviceid_.Release();
}
inline void CameraPathList::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  _impl_.deviceid_.SetAllocated(deviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceid_.IsDefault()) {
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.rbx.comm.bean.multi.CameraPathList.deviceID)
}

// int32 capType = 3;
inline void CameraPathList::clear_captype() {
  _impl_.captype_ = 0;
}
inline int32_t CameraPathList::_internal_captype() const {
  return _impl_.captype_;
}
inline int32_t CameraPathList::captype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPathList.capType)
  return _internal_captype();
}
inline void CameraPathList::_internal_set_captype(int32_t value) {
  
  _impl_.captype_ = value;
}
inline void CameraPathList::set_captype(int32_t value) {
  _internal_set_captype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPathList.capType)
}

// int32 objCount = 4;
inline void CameraPathList::clear_objcount() {
  _impl_.objcount_ = 0;
}
inline int32_t CameraPathList::_internal_objcount() const {
  return _impl_.objcount_;
}
inline int32_t CameraPathList::objcount() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPathList.objCount)
  return _internal_objcount();
}
inline void CameraPathList::_internal_set_objcount(int32_t value) {
  
  _impl_.objcount_ = value;
}
inline void CameraPathList::set_objcount(int32_t value) {
  _internal_set_objcount(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPathList.objCount)
}

// repeated .cn.seisys.rbx.comm.bean.multi.CameraPath cameraPathList = 5;
inline int CameraPathList::_internal_camerapathlist_size() const {
  return _impl_.camerapathlist_.size();
}
inline int CameraPathList::camerapathlist_size() const {
  return _internal_camerapathlist_size();
}
inline void CameraPathList::clear_camerapathlist() {
  _impl_.camerapathlist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPath* CameraPathList::mutable_camerapathlist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.CameraPathList.cameraPathList)
  return _impl_.camerapathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPath >*
CameraPathList::mutable_camerapathlist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.CameraPathList.cameraPathList)
  return &_impl_.camerapathlist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::CameraPath& CameraPathList::_internal_camerapathlist(int index) const {
  return _impl_.camerapathlist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::CameraPath& CameraPathList::camerapathlist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPathList.cameraPathList)
  return _internal_camerapathlist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPath* CameraPathList::_internal_add_camerapathlist() {
  return _impl_.camerapathlist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPath* CameraPathList::add_camerapathlist() {
  ::cn::seisys::rbx::comm::bean::multi::CameraPath* _add = _internal_add_camerapathlist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.CameraPathList.cameraPathList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPath >&
CameraPathList::camerapathlist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.CameraPathList.cameraPathList)
  return _impl_.camerapathlist_;
}

// int64 processTime = 6;
inline void CameraPathList::clear_processtime() {
  _impl_.processtime_ = int64_t{0};
}
inline int64_t CameraPathList::_internal_processtime() const {
  return _impl_.processtime_;
}
inline int64_t CameraPathList::processtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPathList.processTime)
  return _internal_processtime();
}
inline void CameraPathList::_internal_set_processtime(int64_t value) {
  
  _impl_.processtime_ = value;
}
inline void CameraPathList::set_processtime(int64_t value) {
  _internal_set_processtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPathList.processTime)
}

// int64 commRcvTime = 7;
inline void CameraPathList::clear_commrcvtime() {
  _impl_.commrcvtime_ = int64_t{0};
}
inline int64_t CameraPathList::_internal_commrcvtime() const {
  return _impl_.commrcvtime_;
}
inline int64_t CameraPathList::commrcvtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.CameraPathList.commRcvTime)
  return _internal_commrcvtime();
}
inline void CameraPathList::_internal_set_commrcvtime(int64_t value) {
  
  _impl_.commrcvtime_ = value;
}
inline void CameraPathList::set_commrcvtime(int64_t value) {
  _internal_set_commrcvtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.CameraPathList.commRcvTime)
}

// -------------------------------------------------------------------

// MultiPathDatas

// int64 sendTime = 1;
inline void MultiPathDatas::clear_sendtime() {
  _impl_.sendtime_ = int64_t{0};
}
inline int64_t MultiPathDatas::_internal_sendtime() const {
  return _impl_.sendtime_;
}
inline int64_t MultiPathDatas::sendtime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.sendTime)
  return _internal_sendtime();
}
inline void MultiPathDatas::_internal_set_sendtime(int64_t value) {
  
  _impl_.sendtime_ = value;
}
inline void MultiPathDatas::set_sendtime(int64_t value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.sendTime)
}

// repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList lidarPathList = 2;
inline int MultiPathDatas::_internal_lidarpathlist_size() const {
  return _impl_.lidarpathlist_.size();
}
inline int MultiPathDatas::lidarpathlist_size() const {
  return _internal_lidarpathlist_size();
}
inline void MultiPathDatas::clear_lidarpathlist() {
  _impl_.lidarpathlist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* MultiPathDatas::mutable_lidarpathlist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.lidarPathList)
  return _impl_.lidarpathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >*
MultiPathDatas::mutable_lidarpathlist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.lidarPathList)
  return &_impl_.lidarpathlist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& MultiPathDatas::_internal_lidarpathlist(int index) const {
  return _impl_.lidarpathlist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& MultiPathDatas::lidarpathlist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.lidarPathList)
  return _internal_lidarpathlist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* MultiPathDatas::_internal_add_lidarpathlist() {
  return _impl_.lidarpathlist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* MultiPathDatas::add_lidarpathlist() {
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* _add = _internal_add_lidarpathlist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.lidarPathList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >&
MultiPathDatas::lidarpathlist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.lidarPathList)
  return _impl_.lidarpathlist_;
}

// repeated .cn.seisys.rbx.comm.bean.multi.RadarDevPathList mwrPathList = 3;
inline int MultiPathDatas::_internal_mwrpathlist_size() const {
  return _impl_.mwrpathlist_.size();
}
inline int MultiPathDatas::mwrpathlist_size() const {
  return _internal_mwrpathlist_size();
}
inline void MultiPathDatas::clear_mwrpathlist() {
  _impl_.mwrpathlist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* MultiPathDatas::mutable_mwrpathlist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.mwrPathList)
  return _impl_.mwrpathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >*
MultiPathDatas::mutable_mwrpathlist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.mwrPathList)
  return &_impl_.mwrpathlist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& MultiPathDatas::_internal_mwrpathlist(int index) const {
  return _impl_.mwrpathlist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList& MultiPathDatas::mwrpathlist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.mwrPathList)
  return _internal_mwrpathlist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* MultiPathDatas::_internal_add_mwrpathlist() {
  return _impl_.mwrpathlist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* MultiPathDatas::add_mwrpathlist() {
  ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList* _add = _internal_add_mwrpathlist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.mwrPathList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::RadarDevPathList >&
MultiPathDatas::mwrpathlist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.mwrPathList)
  return _impl_.mwrpathlist_;
}

// repeated .cn.seisys.rbx.comm.bean.multi.CameraPathList cameraPathList = 4;
inline int MultiPathDatas::_internal_camerapathlist_size() const {
  return _impl_.camerapathlist_.size();
}
inline int MultiPathDatas::camerapathlist_size() const {
  return _internal_camerapathlist_size();
}
inline void MultiPathDatas::clear_camerapathlist() {
  _impl_.camerapathlist_.Clear();
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPathList* MultiPathDatas::mutable_camerapathlist(int index) {
  // @@protoc_insertion_point(field_mutable:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.cameraPathList)
  return _impl_.camerapathlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPathList >*
MultiPathDatas::mutable_camerapathlist() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.cameraPathList)
  return &_impl_.camerapathlist_;
}
inline const ::cn::seisys::rbx::comm::bean::multi::CameraPathList& MultiPathDatas::_internal_camerapathlist(int index) const {
  return _impl_.camerapathlist_.Get(index);
}
inline const ::cn::seisys::rbx::comm::bean::multi::CameraPathList& MultiPathDatas::camerapathlist(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.cameraPathList)
  return _internal_camerapathlist(index);
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPathList* MultiPathDatas::_internal_add_camerapathlist() {
  return _impl_.camerapathlist_.Add();
}
inline ::cn::seisys::rbx::comm::bean::multi::CameraPathList* MultiPathDatas::add_camerapathlist() {
  ::cn::seisys::rbx::comm::bean::multi::CameraPathList* _add = _internal_add_camerapathlist();
  // @@protoc_insertion_point(field_add:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.cameraPathList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cn::seisys::rbx::comm::bean::multi::CameraPathList >&
MultiPathDatas::camerapathlist() const {
  // @@protoc_insertion_point(field_list:cn.seisys.rbx.comm.bean.multi.MultiPathDatas.cameraPathList)
  return _impl_.camerapathlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multi
}  // namespace bean
}  // namespace comm
}  // namespace rbx
}  // namespace seisys
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MultiPathDatas_2eproto
