// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v2x.proto

#include "v2x.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace seisys {
namespace v2x {
namespace pb {
PROTOBUF_CONSTEXPR RsiTimeDetails::RsiTimeDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.starttime_)*/uint64_t{0u}
  , /*decltype(_impl_.endtime_)*/uint64_t{0u}
  , /*decltype(_impl_.endtimeconfidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RsiTimeDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RsiTimeDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RsiTimeDetailsDefaultTypeInternal() {}
  union {
    RsiTimeDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RsiTimeDetailsDefaultTypeInternal _RsiTimeDetails_default_instance_;
PROTOBUF_CONSTEXPR Position3D::Position3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lat_)*/0
  , /*decltype(_impl_.lon_)*/0
  , /*decltype(_impl_.ele_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Position3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Position3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Position3DDefaultTypeInternal() {}
  union {
    Position3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Position3DDefaultTypeInternal _Position3D_default_instance_;
PROTOBUF_CONSTEXPR PositionConfidenceSet::PositionConfidenceSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posconfid_)*/0
  , /*decltype(_impl_.eleconfid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionConfidenceSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionConfidenceSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionConfidenceSetDefaultTypeInternal() {}
  union {
    PositionConfidenceSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionConfidenceSetDefaultTypeInternal _PositionConfidenceSet_default_instance_;
PROTOBUF_CONSTEXPR ParticipantSize::ParticipantSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantSizeDefaultTypeInternal() {}
  union {
    ParticipantSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantSizeDefaultTypeInternal _ParticipantSize_default_instance_;
PROTOBUF_CONSTEXPR ParticipantSizeConfidence::ParticipantSizeConfidence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.widthconfid_)*/0
  , /*decltype(_impl_.lengthconfid_)*/0
  , /*decltype(_impl_.heightconfid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantSizeConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantSizeConfidenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantSizeConfidenceDefaultTypeInternal() {}
  union {
    ParticipantSizeConfidence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantSizeConfidenceDefaultTypeInternal _ParticipantSizeConfidence_default_instance_;
PROTOBUF_CONSTEXPR Polygon::Polygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolygonDefaultTypeInternal _Polygon_default_instance_;
PROTOBUF_CONSTEXPR DetectorArea::DetectorArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.polygon_)*/nullptr
  , /*decltype(_impl_.nodeid_)*/nullptr
  , /*decltype(_impl_.settime_)*/int64_t{0}
  , /*decltype(_impl_.areaid_)*/0
  , /*decltype(_impl_.laneid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectorAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectorAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectorAreaDefaultTypeInternal() {}
  union {
    DetectorArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectorAreaDefaultTypeInternal _DetectorArea_default_instance_;
PROTOBUF_CONSTEXPR RegulatorySpeedLimit::RegulatorySpeedLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speedlimittype_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegulatorySpeedLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegulatorySpeedLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegulatorySpeedLimitDefaultTypeInternal() {}
  union {
    RegulatorySpeedLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegulatorySpeedLimitDefaultTypeInternal _RegulatorySpeedLimit_default_instance_;
PROTOBUF_CONSTEXPR AccelerationSet4Way::AccelerationSet4Way(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lat_)*/0
  , /*decltype(_impl_.lon_)*/0
  , /*decltype(_impl_.vert_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccelerationSet4WayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelerationSet4WayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelerationSet4WayDefaultTypeInternal() {}
  union {
    AccelerationSet4Way _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelerationSet4WayDefaultTypeInternal _AccelerationSet4Way_default_instance_;
PROTOBUF_CONSTEXPR AccelerationConfidence::AccelerationConfidence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lonaccelconfid_)*/0
  , /*decltype(_impl_.lataccelconfid_)*/0
  , /*decltype(_impl_.verticalaccelconfid_)*/0
  , /*decltype(_impl_.yawrateconfid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccelerationConfidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelerationConfidenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelerationConfidenceDefaultTypeInternal() {}
  union {
    AccelerationConfidence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelerationConfidenceDefaultTypeInternal _AccelerationConfidence_default_instance_;
PROTOBUF_CONSTEXPR MotionConfidenceSet::MotionConfidenceSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speedcfd_)*/0
  , /*decltype(_impl_.headingcfd_)*/0
  , /*decltype(_impl_.steercfd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MotionConfidenceSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionConfidenceSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionConfidenceSetDefaultTypeInternal() {}
  union {
    MotionConfidenceSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionConfidenceSetDefaultTypeInternal _MotionConfidenceSet_default_instance_;
PROTOBUF_CONSTEXPR VehicleSize::VehicleSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleSizeDefaultTypeInternal() {}
  union {
    VehicleSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleSizeDefaultTypeInternal _VehicleSize_default_instance_;
PROTOBUF_CONSTEXPR NodeReferenceId::NodeReferenceId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/0u
  , /*decltype(_impl_.nodeid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeReferenceIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeReferenceIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeReferenceIdDefaultTypeInternal() {}
  union {
    NodeReferenceId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeReferenceIdDefaultTypeInternal _NodeReferenceId_default_instance_;
PROTOBUF_CONSTEXPR MapLocation::MapLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linkname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeid_)*/nullptr
  , /*decltype(_impl_.upstreamnodeid_)*/nullptr
  , /*decltype(_impl_.sectionid_)*/0u
  , /*decltype(_impl_.laneid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapLocationDefaultTypeInternal() {}
  union {
    MapLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapLocationDefaultTypeInternal _MapLocation_default_instance_;
PROTOBUF_CONSTEXPR PhaseId::PhaseId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phaseid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhaseIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhaseIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhaseIdDefaultTypeInternal() {}
  union {
    PhaseId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhaseIdDefaultTypeInternal _PhaseId_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLanes::ReferenceLanes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.referencelanes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReferenceLanesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLanesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLanesDefaultTypeInternal() {}
  union {
    ReferenceLanes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLanesDefaultTypeInternal _ReferenceLanes_default_instance_;
PROTOBUF_CONSTEXPR ReferencePath::ReferencePath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.activepath_)*/{}
  , /*decltype(_impl_.pathradius_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReferencePathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferencePathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferencePathDefaultTypeInternal() {}
  union {
    ReferencePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferencePathDefaultTypeInternal _ReferencePath_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLink::ReferenceLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upstreamnodeid_)*/nullptr
  , /*decltype(_impl_.downstreamnodeid_)*/nullptr
  , /*decltype(_impl_.referencelanes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReferenceLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLinkDefaultTypeInternal() {}
  union {
    ReferenceLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLinkDefaultTypeInternal _ReferenceLink_default_instance_;
PROTOBUF_CONSTEXPR AllowedManeuvers::AllowedManeuvers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maneuvers_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllowedManeuversDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowedManeuversDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowedManeuversDefaultTypeInternal() {}
  union {
    AllowedManeuvers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowedManeuversDefaultTypeInternal _AllowedManeuvers_default_instance_;
PROTOBUF_CONSTEXPR LaneStatInfo::LaneStatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkstatinfo_)*/nullptr
  , /*decltype(_impl_.sectionstatinfo_)*/nullptr
  , /*decltype(_impl_.laneid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneStatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneStatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneStatInfoDefaultTypeInternal() {}
  union {
    LaneStatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneStatInfoDefaultTypeInternal _LaneStatInfo_default_instance_;
PROTOBUF_CONSTEXPR SectionStatInfo::SectionStatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkstatinfo_)*/nullptr
  , /*decltype(_impl_.sectionid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SectionStatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionStatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionStatInfoDefaultTypeInternal() {}
  union {
    SectionStatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionStatInfoDefaultTypeInternal _SectionStatInfo_default_instance_;
PROTOBUF_CONSTEXPR LinkStatInfo::LinkStatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upstreamnodeid_)*/nullptr
  , /*decltype(_impl_.nodestatinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkStatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkStatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkStatInfoDefaultTypeInternal() {}
  union {
    LinkStatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkStatInfoDefaultTypeInternal _LinkStatInfo_default_instance_;
PROTOBUF_CONSTEXPR NodeStatInfo::NodeStatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodeid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeStatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeStatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeStatInfoDefaultTypeInternal() {}
  union {
    NodeStatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeStatInfoDefaultTypeInternal _NodeStatInfo_default_instance_;
PROTOBUF_CONSTEXPR MovementStatInfo::MovementStatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remoteintersection_)*/nullptr
  , /*decltype(_impl_.nodestatinfo_)*/nullptr
  , /*decltype(_impl_.turndirection_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MovementStatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovementStatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovementStatInfoDefaultTypeInternal() {}
  union {
    MovementStatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovementStatInfoDefaultTypeInternal _MovementStatInfo_default_instance_;
PROTOBUF_CONSTEXPR TrafficFlowStatByInterval::TrafficFlowStatByInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interval_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficFlowStatByIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficFlowStatByIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficFlowStatByIntervalDefaultTypeInternal() {}
  union {
    TrafficFlowStatByInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficFlowStatByIntervalDefaultTypeInternal _TrafficFlowStatByInterval_default_instance_;
PROTOBUF_CONSTEXPR TrafficFlowStatBySignalCycle::TrafficFlowStatBySignalCycle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cyclestarttime_)*/uint64_t{0u}
  , /*decltype(_impl_.cycleendtime_)*/uint64_t{0u}
  , /*decltype(_impl_.cycletime_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficFlowStatBySignalCycleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficFlowStatBySignalCycleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficFlowStatBySignalCycleDefaultTypeInternal() {}
  union {
    TrafficFlowStatBySignalCycle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficFlowStatBySignalCycleDefaultTypeInternal _TrafficFlowStatBySignalCycle_default_instance_;
PROTOBUF_CONSTEXPR TrafficFlowStatType::TrafficFlowStatType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.sequence_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficFlowStatTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficFlowStatTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficFlowStatTypeDefaultTypeInternal() {}
  union {
    TrafficFlowStatType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficFlowStatTypeDefaultTypeInternal _TrafficFlowStatType_default_instance_;
PROTOBUF_CONSTEXPR TrafficFlowStatMapElement::TrafficFlowStatMapElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.TrafficFlowStatMapElementOneOf_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TrafficFlowStatMapElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficFlowStatMapElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficFlowStatMapElementDefaultTypeInternal() {}
  union {
    TrafficFlowStatMapElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficFlowStatMapElementDefaultTypeInternal _TrafficFlowStatMapElement_default_instance_;
PROTOBUF_CONSTEXPR LaneIndexAdded::LaneIndexAdded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.lanecapacity_)*/0u
  , /*decltype(_impl_.lanesaturation_)*/0u
  , /*decltype(_impl_.lanespaceoccupy_)*/0u
  , /*decltype(_impl_.lanetimeoccupy_)*/0u
  , /*decltype(_impl_.laneavggrnqueue_)*/0u
  , /*decltype(_impl_.lanegrnutilization_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneIndexAddedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneIndexAddedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneIndexAddedDefaultTypeInternal() {}
  union {
    LaneIndexAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneIndexAddedDefaultTypeInternal _LaneIndexAdded_default_instance_;
PROTOBUF_CONSTEXPR LinkIndexAdded::LinkIndexAdded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.linkcapacity_)*/0u
  , /*decltype(_impl_.linksaturation_)*/0u
  , /*decltype(_impl_.linkspaceoccupy_)*/0u
  , /*decltype(_impl_.linktimeoccupy_)*/0u
  , /*decltype(_impl_.linkavggrnqueue_)*/0u
  , /*decltype(_impl_.linkgrnutilization_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkIndexAddedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkIndexAddedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkIndexAddedDefaultTypeInternal() {}
  union {
    LinkIndexAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkIndexAddedDefaultTypeInternal _LinkIndexAdded_default_instance_;
PROTOBUF_CONSTEXPR MovementIndexAdded::MovementIndexAdded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.movementcapacity_)*/0u
  , /*decltype(_impl_.movementsaturation_)*/0u
  , /*decltype(_impl_.movementspaceoccupy_)*/0u
  , /*decltype(_impl_.movementtimeoccupy_)*/0u
  , /*decltype(_impl_.movementavggrnqueue_)*/0u
  , /*decltype(_impl_.movementgrnutilization_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MovementIndexAddedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovementIndexAddedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovementIndexAddedDefaultTypeInternal() {}
  union {
    MovementIndexAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovementIndexAddedDefaultTypeInternal _MovementIndexAdded_default_instance_;
PROTOBUF_CONSTEXPR NodeIndexAdded::NodeIndexAdded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.nodespaceoccupy_)*/0u
  , /*decltype(_impl_.nodetimeoccupy_)*/0u
  , /*decltype(_impl_.nodecapacity_)*/uint64_t{0u}
  , /*decltype(_impl_.nodesaturation_)*/0u
  , /*decltype(_impl_.nodegrnutilization_)*/0u
  , /*decltype(_impl_.nodeavggrnqueue_)*/0u
  , /*decltype(_impl_.demandindex_)*/0u
  , /*decltype(_impl_.supplyindex_)*/0u
  , /*decltype(_impl_.theoryindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeIndexAddedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeIndexAddedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeIndexAddedDefaultTypeInternal() {}
  union {
    NodeIndexAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeIndexAddedDefaultTypeInternal _NodeIndexAdded_default_instance_;
PROTOBUF_CONSTEXPR SignalControlIndexAdded::SignalControlIndexAdded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phaseid_)*/0u
  , /*decltype(_impl_.greenstartqueue_)*/0u
  , /*decltype(_impl_.redstartqueue_)*/0u
  , /*decltype(_impl_.greenutilization_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalControlIndexAddedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalControlIndexAddedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalControlIndexAddedDefaultTypeInternal() {}
  union {
    SignalControlIndexAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalControlIndexAddedDefaultTypeInternal _SignalControlIndexAdded_default_instance_;
PROTOBUF_CONSTEXPR TrafficFlowExtension::TrafficFlowExtension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.laneindex_)*/{}
  , /*decltype(_impl_.linkindex_)*/{}
  , /*decltype(_impl_.movementindex_)*/{}
  , /*decltype(_impl_.nodeindex_)*/{}
  , /*decltype(_impl_.signalindex_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficFlowExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficFlowExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficFlowExtensionDefaultTypeInternal() {}
  union {
    TrafficFlowExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficFlowExtensionDefaultTypeInternal _TrafficFlowExtension_default_instance_;
PROTOBUF_CONSTEXPR TrafficFlowStat::TrafficFlowStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapelement_)*/nullptr
  , /*decltype(_impl_.trafficflowextension_)*/nullptr
  , /*decltype(_impl_.mapelementtype_)*/0
  , /*decltype(_impl_.ptctype_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.vehicletype_)*/0
  , /*decltype(_impl_.volume_)*/0u
  , /*decltype(_impl_.speedpoint_)*/0u
  , /*decltype(_impl_.speedarea_)*/0u
  , /*decltype(_impl_.density_)*/0u
  , /*decltype(_impl_.traveltime_)*/0u
  , /*decltype(_impl_.delay_)*/0u
  , /*decltype(_impl_.queuelength_)*/0u
  , /*decltype(_impl_.queueint_)*/0u
  , /*decltype(_impl_.congestion_)*/0u
  , /*decltype(_impl_.timeheadway_)*/0u
  , /*decltype(_impl_.spaceheadway_)*/0u
  , /*decltype(_impl_.stopnums_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficFlowStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficFlowStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficFlowStatDefaultTypeInternal() {}
  union {
    TrafficFlowStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficFlowStatDefaultTypeInternal _TrafficFlowStat_default_instance_;
PROTOBUF_CONSTEXPR TrafficFlow::TrafficFlow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.nodeid_)*/nullptr
  , /*decltype(_impl_.stattype_)*/nullptr
  , /*decltype(_impl_.gentime_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficFlowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficFlowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficFlowDefaultTypeInternal() {}
  union {
    TrafficFlow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficFlowDefaultTypeInternal _TrafficFlow_default_instance_;
PROTOBUF_CONSTEXPR TimeCountingDown::TimeCountingDown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.starttime_)*/0u
  , /*decltype(_impl_.minendtime_)*/0u
  , /*decltype(_impl_.maxendtime_)*/0u
  , /*decltype(_impl_.likelyendtime_)*/0u
  , /*decltype(_impl_.timeconfidence_)*/0
  , /*decltype(_impl_.nextstarttime_)*/0u
  , /*decltype(_impl_.nextduration_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeCountingDownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeCountingDownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeCountingDownDefaultTypeInternal() {}
  union {
    TimeCountingDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeCountingDownDefaultTypeInternal _TimeCountingDown_default_instance_;
PROTOBUF_CONSTEXPR PhaseState::PhaseState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timing_)*/nullptr
  , /*decltype(_impl_.light_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhaseStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhaseStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhaseStateDefaultTypeInternal() {}
  union {
    PhaseState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhaseStateDefaultTypeInternal _PhaseState_default_instance_;
PROTOBUF_CONSTEXPR Phase::Phase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phasestates_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhaseDefaultTypeInternal() {}
  union {
    Phase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhaseDefaultTypeInternal _Phase_default_instance_;
PROTOBUF_CONSTEXPR IntersectionState::IntersectionState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phases_)*/{}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.intersectionid_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.timeconfidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntersectionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntersectionStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntersectionStateDefaultTypeInternal() {}
  union {
    IntersectionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntersectionStateDefaultTypeInternal _IntersectionState_default_instance_;
PROTOBUF_CONSTEXPR SpatData::SpatData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.intersections_)*/{}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.msgcnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpatDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpatDataDefaultTypeInternal() {}
  union {
    SpatData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpatDataDefaultTypeInternal _SpatData_default_instance_;
PROTOBUF_CONSTEXPR LocalTimePoint::LocalTimePoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hh_)*/0
  , /*decltype(_impl_.mm_)*/0
  , /*decltype(_impl_.ss_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalTimePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTimePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTimePointDefaultTypeInternal() {}
  union {
    LocalTimePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTimePointDefaultTypeInternal _LocalTimePoint_default_instance_;
PROTOBUF_CONSTEXPR PeriodictimeSpan::PeriodictimeSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fromtimepoint_)*/nullptr
  , /*decltype(_impl_.totimepoint_)*/nullptr
  , /*decltype(_impl_.monthfilter_)*/0
  , /*decltype(_impl_.dayfilter_)*/0
  , /*decltype(_impl_.weekdayfilter_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeriodictimeSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodictimeSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodictimeSpanDefaultTypeInternal() {}
  union {
    PeriodictimeSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodictimeSpanDefaultTypeInternal _PeriodictimeSpan_default_instance_;
PROTOBUF_CONSTEXPR SingleTimeSpan::SingleTimeSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.starttime_)*/uint64_t{0u}
  , /*decltype(_impl_.endtime_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleTimeSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleTimeSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleTimeSpanDefaultTypeInternal() {}
  union {
    SingleTimeSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleTimeSpanDefaultTypeInternal _SingleTimeSpan_default_instance_;
PROTOBUF_CONSTEXPR OptimTimeType::OptimTimeType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.OptimTimeTypeOneOf_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OptimTimeTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptimTimeTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptimTimeTypeDefaultTypeInternal() {}
  union {
    OptimTimeType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptimTimeTypeDefaultTypeInternal _OptimTimeType_default_instance_;
PROTOBUF_CONSTEXPR MovementEx::MovementEx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remoteintersection_)*/nullptr
  , /*decltype(_impl_.phaseid_)*/0u
  , /*decltype(_impl_.turndirection_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MovementExDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovementExDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovementExDefaultTypeInternal() {}
  union {
    MovementEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovementExDefaultTypeInternal _MovementEx_default_instance_;
PROTOBUF_CONSTEXPR OptimPhase::OptimPhase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.movementid_)*/{}
  , /*decltype(_impl_.phaseid_)*/0u
  , /*decltype(_impl_.order_)*/0u
  , /*decltype(_impl_.phasetime_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.phaseyellowtime_)*/0u
  , /*decltype(_impl_.phaseallredtime_)*/0u
  , /*decltype(_impl_.mingreen_)*/0u
  , /*decltype(_impl_.maxgreen_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptimPhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptimPhaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptimPhaseDefaultTypeInternal() {}
  union {
    OptimPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptimPhaseDefaultTypeInternal _OptimPhase_default_instance_;
PROTOBUF_CONSTEXPR OptimData::OptimData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optimphaselist_)*/{}
  , /*decltype(_impl_.coorphase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optimtimetype_)*/nullptr
  , /*decltype(_impl_.optimcycletime_)*/0u
  , /*decltype(_impl_.mincycletime_)*/0u
  , /*decltype(_impl_.maxcycletime_)*/0u
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptimDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptimDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptimDataDefaultTypeInternal() {}
  union {
    OptimData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptimDataDefaultTypeInternal _OptimData_default_instance_;
PROTOBUF_CONSTEXPR SignalScheme::SignalScheme(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optimdatalist_)*/{}
  , /*decltype(_impl_.nodeid_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.optimtype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalSchemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalSchemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalSchemeDefaultTypeInternal() {}
  union {
    SignalScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalSchemeDefaultTypeInternal _SignalScheme_default_instance_;
PROTOBUF_CONSTEXPR BrakeSystemStatus::BrakeSystemStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brakepadel_)*/0
  , /*decltype(_impl_.wheelbrakes_)*/0u
  , /*decltype(_impl_.traction_)*/0
  , /*decltype(_impl_.abs_)*/0
  , /*decltype(_impl_.scs_)*/0
  , /*decltype(_impl_.brakeboost_)*/0
  , /*decltype(_impl_.auxbrakes_)*/0
  , /*decltype(_impl_.brakecontrol_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BrakeSystemStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrakeSystemStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrakeSystemStatusDefaultTypeInternal() {}
  union {
    BrakeSystemStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrakeSystemStatusDefaultTypeInternal _BrakeSystemStatus_default_instance_;
PROTOBUF_CONSTEXPR PositionAccuracy::PositionAccuracy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.semimajor_)*/0
  , /*decltype(_impl_.semiminor_)*/0
  , /*decltype(_impl_.orientation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionAccuracyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionAccuracyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionAccuracyDefaultTypeInternal() {}
  union {
    PositionAccuracy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionAccuracyDefaultTypeInternal _PositionAccuracy_default_instance_;
PROTOBUF_CONSTEXPR ThrottleSystemStatus::ThrottleSystemStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.thorttlecontrol_)*/0u
  , /*decltype(_impl_.throttlepadel_)*/0
  , /*decltype(_impl_.wheelthrottles_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThrottleSystemStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThrottleSystemStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThrottleSystemStatusDefaultTypeInternal() {}
  union {
    ThrottleSystemStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThrottleSystemStatusDefaultTypeInternal _ThrottleSystemStatus_default_instance_;
PROTOBUF_CONSTEXPR BsmData::BsmData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plateno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.posconfid_)*/nullptr
  , /*decltype(_impl_.posaccuracy_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.motionconfid_)*/nullptr
  , /*decltype(_impl_.brakes_)*/nullptr
  , /*decltype(_impl_.throttle_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.transmission_)*/0
  , /*decltype(_impl_.speed_)*/0u
  , /*decltype(_impl_.heading_)*/0u
  , /*decltype(_impl_.steeringwheelangle_)*/0
  , /*decltype(_impl_.vehicletype_)*/0
  , /*decltype(_impl_.fueltype_)*/0
  , /*decltype(_impl_.drivemodedrivestatus_)*/0
  , /*decltype(_impl_.emergencystatus_)*/0
  , /*decltype(_impl_.light_)*/0u
  , /*decltype(_impl_.wiper_)*/0
  , /*decltype(_impl_.outofcontrol_)*/0
  , /*decltype(_impl_.endurance_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BsmDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BsmDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BsmDataDefaultTypeInternal() {}
  union {
    BsmData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BsmDataDefaultTypeInternal _BsmData_default_instance_;
PROTOBUF_CONSTEXPR PathHistoryPoint::PathHistoryPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.posconfid_)*/nullptr
  , /*decltype(_impl_.timeoffset_)*/0u
  , /*decltype(_impl_.speed_)*/0u
  , /*decltype(_impl_.heading_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathHistoryPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathHistoryPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathHistoryPointDefaultTypeInternal() {}
  union {
    PathHistoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathHistoryPointDefaultTypeInternal _PathHistoryPoint_default_instance_;
PROTOBUF_CONSTEXPR ParticipantData::ParticipantData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathhistory_)*/{}
  , /*decltype(_impl_.deviceidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vehicleband_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plateno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ptcpos_)*/nullptr
  , /*decltype(_impl_.maplocation_)*/nullptr
  , /*decltype(_impl_.posconfid_)*/nullptr
  , /*decltype(_impl_.motionconfid_)*/nullptr
  , /*decltype(_impl_.accelset_)*/nullptr
  , /*decltype(_impl_.accelerationconfid_)*/nullptr
  , /*decltype(_impl_.ptcsize_)*/nullptr
  , /*decltype(_impl_.ptcsizeconfid_)*/nullptr
  , /*decltype(_impl_.polygon_)*/nullptr
  , /*decltype(_impl_.ptcid_)*/uint64_t{0u}
  , /*decltype(_impl_.ptctype_)*/0
  , /*decltype(_impl_.datasource_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.timeconfidence_)*/0
  , /*decltype(_impl_.speed_)*/0u
  , /*decltype(_impl_.heading_)*/0u
  , /*decltype(_impl_.vehicletype_)*/0
  , /*decltype(_impl_.platetype_)*/0
  , /*decltype(_impl_.platecolor_)*/0
  , /*decltype(_impl_.vehiclecolor_)*/0
  , /*decltype(_impl_.ptctypeext_)*/0
  , /*decltype(_impl_.ptctypeextconfid_)*/0u
  , /*decltype(_impl_.statusduration_)*/0u
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.tracking_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParticipantDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantDataDefaultTypeInternal() {}
  union {
    ParticipantData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantDataDefaultTypeInternal _ParticipantData_default_instance_;
PROTOBUF_CONSTEXPR ObstacleData::ObstacleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obspos_)*/nullptr
  , /*decltype(_impl_.posconfid_)*/nullptr
  , /*decltype(_impl_.maplocation_)*/nullptr
  , /*decltype(_impl_.motionconfid_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.obssizeconfid_)*/nullptr
  , /*decltype(_impl_.polygon_)*/nullptr
  , /*decltype(_impl_.obsid_)*/uint64_t{0u}
  , /*decltype(_impl_.obstype_)*/0
  , /*decltype(_impl_.obstypecfd_)*/0u
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.obssource_)*/0
  , /*decltype(_impl_.speed_)*/0u
  , /*decltype(_impl_.heading_)*/0u
  , /*decltype(_impl_.verspeed_)*/0u
  , /*decltype(_impl_.verspeedconfid_)*/0
  , /*decltype(_impl_.tracking_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObstacleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleDataDefaultTypeInternal() {}
  union {
    ObstacleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleDataDefaultTypeInternal _ObstacleData_default_instance_;
PROTOBUF_CONSTEXPR ObjIdValue::ObjIdValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ptcid_)*/uint64_t{0u}
  , /*decltype(_impl_.obsid_)*/uint64_t{0u}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjIdValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjIdValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjIdValueDefaultTypeInternal() {}
  union {
    ObjIdValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjIdValueDefaultTypeInternal _ObjIdValue_default_instance_;
PROTOBUF_CONSTEXPR RteData::RteData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.referencepath_)*/{}
  , /*decltype(_impl_.referencelinks_)*/{}
  , /*decltype(_impl_.eventobjid_)*/{}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.priority_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventimages_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventvideos_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rtepos_)*/nullptr
  , /*decltype(_impl_.maplocation_)*/nullptr
  , /*decltype(_impl_.timedetails_)*/nullptr
  , /*decltype(_impl_.rteid_)*/0u
  , /*decltype(_impl_.rtetype_)*/0u
  , /*decltype(_impl_.eventsource_)*/0
  , /*decltype(_impl_.datasource_)*/0
  , /*decltype(_impl_.eventradius_)*/0u
  , /*decltype(_impl_.eventconfid_)*/0
  , /*decltype(_impl_.sessionid_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RteDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RteDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RteDataDefaultTypeInternal() {}
  union {
    RteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RteDataDefaultTypeInternal _RteData_default_instance_;
PROTOBUF_CONSTEXPR RtsData::RtsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refpathlist_)*/{}
  , /*decltype(_impl_.reflinklist_)*/{}
  , /*decltype(_impl_.priority_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rtspos_)*/nullptr
  , /*decltype(_impl_.timedetails_)*/nullptr
  , /*decltype(_impl_.rtsid_)*/0
  , /*decltype(_impl_.rtstype_)*/0
  , /*decltype(_impl_.datasource_)*/0
  , /*decltype(_impl_.pathradius_)*/0u
  , /*decltype(_impl_.sessionid_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtsDataDefaultTypeInternal() {}
  union {
    RtsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtsDataDefaultTypeInternal _RtsData_default_instance_;
PROTOBUF_CONSTEXPR ConnectingLane::ConnectingLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maneuvers_)*/nullptr
  , /*decltype(_impl_.lane_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectingLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectingLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectingLaneDefaultTypeInternal() {}
  union {
    ConnectingLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectingLaneDefaultTypeInternal _ConnectingLane_default_instance_;
PROTOBUF_CONSTEXPR Connection::Connection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remoteintersection_)*/nullptr
  , /*decltype(_impl_.connectinglane_)*/nullptr
  , /*decltype(_impl_.phaseid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionDefaultTypeInternal _Connection_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesParking::LaneAttributesParking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parkingandstoppinglanes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesParkingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesParkingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesParkingDefaultTypeInternal() {}
  union {
    LaneAttributesParking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesParkingDefaultTypeInternal _LaneAttributesParking_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesCrosswalk::LaneAttributesCrosswalk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pedestriancrosswalks_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesCrosswalkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesCrosswalkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesCrosswalkDefaultTypeInternal() {}
  union {
    LaneAttributesCrosswalk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesCrosswalkDefaultTypeInternal _LaneAttributesCrosswalk_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesBike::LaneAttributesBike(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bikelanes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesBikeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesBikeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesBikeDefaultTypeInternal() {}
  union {
    LaneAttributesBike _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesBikeDefaultTypeInternal _LaneAttributesBike_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesSidewalk::LaneAttributesSidewalk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pedestriansidewalkpaths_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesSidewalkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesSidewalkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesSidewalkDefaultTypeInternal() {}
  union {
    LaneAttributesSidewalk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesSidewalkDefaultTypeInternal _LaneAttributesSidewalk_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesBarrier::LaneAttributesBarrier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.medianschannelization_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesBarrierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesBarrierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesBarrierDefaultTypeInternal() {}
  union {
    LaneAttributesBarrier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesBarrierDefaultTypeInternal _LaneAttributesBarrier_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesStriping::LaneAttributesStriping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roadwaymarkings_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesStripingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesStripingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesStripingDefaultTypeInternal() {}
  union {
    LaneAttributesStriping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesStripingDefaultTypeInternal _LaneAttributesStriping_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesTrackedVehicle::LaneAttributesTrackedVehicle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trainsandtrolleys_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesTrackedVehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesTrackedVehicleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesTrackedVehicleDefaultTypeInternal() {}
  union {
    LaneAttributesTrackedVehicle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesTrackedVehicleDefaultTypeInternal _LaneAttributesTrackedVehicle_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributesVehicle::LaneAttributesVehicle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.motorvehiclelanes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesVehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesVehicleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesVehicleDefaultTypeInternal() {}
  union {
    LaneAttributesVehicle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesVehicleDefaultTypeInternal _LaneAttributesVehicle_default_instance_;
PROTOBUF_CONSTEXPR LaneTypeAttributes::LaneTypeAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.LaneTypeAttributesOneOf_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LaneTypeAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneTypeAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneTypeAttributesDefaultTypeInternal() {}
  union {
    LaneTypeAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneTypeAttributesDefaultTypeInternal _LaneTypeAttributes_default_instance_;
PROTOBUF_CONSTEXPR LaneSharing::LaneSharing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sharewith_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneSharingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneSharingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneSharingDefaultTypeInternal() {}
  union {
    LaneSharing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneSharingDefaultTypeInternal _LaneSharing_default_instance_;
PROTOBUF_CONSTEXPR LaneType::LaneType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.choiceid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneTypeDefaultTypeInternal() {}
  union {
    LaneType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneTypeDefaultTypeInternal _LaneType_default_instance_;
PROTOBUF_CONSTEXPR LaneAttributes::LaneAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sharewith_)*/nullptr
  , /*decltype(_impl_.lanetype_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAttributesDefaultTypeInternal() {}
  union {
    LaneAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAttributesDefaultTypeInternal _LaneAttributes_default_instance_;
PROTOBUF_CONSTEXPR LaneBoundary::LaneBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.laneboundarypoints_)*/{}
  , /*decltype(_impl_.laneboundarytype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryDefaultTypeInternal() {}
  union {
    LaneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryDefaultTypeInternal _LaneBoundary_default_instance_;
PROTOBUF_CONSTEXPR Lane::Lane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connectsto_)*/{}
  , /*decltype(_impl_.speedlimits_)*/{}
  , /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.leftboundary_)*/{}
  , /*decltype(_impl_.rightboundary_)*/{}
  , /*decltype(_impl_.laneattributes_)*/nullptr
  , /*decltype(_impl_.maneuvers_)*/nullptr
  , /*decltype(_impl_.laneid_)*/0u
  , /*decltype(_impl_.lanewidth_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;
PROTOBUF_CONSTEXPR SignalWaitingLane::SignalWaitingLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allowedphaseids_)*/{}
  , /*decltype(_impl_.points_)*/nullptr
  , /*decltype(_impl_.lanewidth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalWaitingLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalWaitingLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalWaitingLaneDefaultTypeInternal() {}
  union {
    SignalWaitingLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalWaitingLaneDefaultTypeInternal _SignalWaitingLane_default_instance_;
PROTOBUF_CONSTEXPR ConnectingLaneEx::ConnectingLaneEx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connectinglanepoints_)*/nullptr
  , /*decltype(_impl_.targetsection_)*/0
  , /*decltype(_impl_.targetlane_)*/0
  , /*decltype(_impl_.connectinglanewidth_)*/0
  , /*decltype(_impl_.isolatedconnectinglane_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectingLaneExDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectingLaneExDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectingLaneExDefaultTypeInternal() {}
  union {
    ConnectingLaneEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectingLaneExDefaultTypeInternal _ConnectingLaneEx_default_instance_;
PROTOBUF_CONSTEXPR ConnectionEx::ConnectionEx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connectionlane_)*/{}
  , /*decltype(_impl_.remoteintersection_)*/nullptr
  , /*decltype(_impl_.swl_)*/nullptr
  , /*decltype(_impl_.phaseid_)*/0u
  , /*decltype(_impl_.turndirection_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionExDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionExDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionExDefaultTypeInternal() {}
  union {
    ConnectionEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionExDefaultTypeInternal _ConnectionEx_default_instance_;
PROTOBUF_CONSTEXPR STPoint::STPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.saxis_)*/0
  , /*decltype(_impl_.taxis_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct STPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STPointDefaultTypeInternal() {}
  union {
    STPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STPointDefaultTypeInternal _STPoint_default_instance_;
PROTOBUF_CONSTEXPR LaneEx::LaneEx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connectstoex_)*/{}
  , /*decltype(_impl_.speedlimits_)*/{}
  , /*decltype(_impl_.stpoints_)*/{}
  , /*decltype(_impl_.leftboundary_)*/{}
  , /*decltype(_impl_.rightboundary_)*/{}
  , /*decltype(_impl_.laneattributes_)*/nullptr
  , /*decltype(_impl_.maneuvers_)*/nullptr
  , /*decltype(_impl_.lanerefid_)*/0
  , /*decltype(_impl_.lanewidth_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneExDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneExDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneExDefaultTypeInternal() {}
  union {
    LaneEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneExDefaultTypeInternal _LaneEx_default_instance_;
PROTOBUF_CONSTEXPR Movement::Movement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remoteintersection_)*/nullptr
  , /*decltype(_impl_.phaseid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MovementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovementDefaultTypeInternal() {}
  union {
    Movement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovementDefaultTypeInternal _Movement_default_instance_;
PROTOBUF_CONSTEXPR Section::Section(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lanes_)*/{}
  , /*decltype(_impl_.secid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionDefaultTypeInternal() {}
  union {
    Section _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionDefaultTypeInternal _Section_default_instance_;
PROTOBUF_CONSTEXPR LinkEx::LinkEx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speedlimits_)*/{}
  , /*decltype(_impl_.refline_)*/{}
  , /*decltype(_impl_.movementsex_)*/{}
  , /*decltype(_impl_.sections_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upstreamnodeid_)*/nullptr
  , /*decltype(_impl_.linkwidth_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkExDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkExDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkExDefaultTypeInternal() {}
  union {
    LinkEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkExDefaultTypeInternal _LinkEx_default_instance_;
PROTOBUF_CONSTEXPR Link::Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speedlimits_)*/{}
  , /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.movements_)*/{}
  , /*decltype(_impl_.lanes_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upstreamnodeid_)*/nullptr
  , /*decltype(_impl_.linkwidth_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkDefaultTypeInternal _Link_default_instance_;
PROTOBUF_CONSTEXPR ProhibitedZone::ProhibitedZone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nonmotorvehicleprohibitedzones_)*/{}
  , /*decltype(_impl_.gridlinemarkingprohibitedzones_)*/{}
  , /*decltype(_impl_.centralcircleprohibitedzone_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProhibitedZoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProhibitedZoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProhibitedZoneDefaultTypeInternal() {}
  union {
    ProhibitedZone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProhibitedZoneDefaultTypeInternal _ProhibitedZone_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inlinks_)*/{}
  , /*decltype(_impl_.inlinksex_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.refpos_)*/nullptr
  , /*decltype(_impl_.prohibitedzone_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR MAP::MAP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.msgcnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MAPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAPDefaultTypeInternal() {}
  union {
    MAP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAPDefaultTypeInternal _MAP_default_instance_;
PROTOBUF_CONSTEXPR MapData::MapData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapslice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.etag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seqnum_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_)*/nullptr
  , /*decltype(_impl_.ack_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDataDefaultTypeInternal() {}
  union {
    MapData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDataDefaultTypeInternal _MapData_default_instance_;
PROTOBUF_CONSTEXPR ReqLaneChange::ReqLaneChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upstreamnode_)*/nullptr
  , /*decltype(_impl_.downstreamnode_)*/nullptr
  , /*decltype(_impl_.targetlane_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReqLaneChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqLaneChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqLaneChangeDefaultTypeInternal() {}
  union {
    ReqLaneChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqLaneChangeDefaultTypeInternal _ReqLaneChange_default_instance_;
PROTOBUF_CONSTEXPR ReqClearTheWay::ReqClearTheWay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upstreamnode_)*/nullptr
  , /*decltype(_impl_.downstreamnode_)*/nullptr
  , /*decltype(_impl_.targetlane_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReqClearTheWayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqClearTheWayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqClearTheWayDefaultTypeInternal() {}
  union {
    ReqClearTheWay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqClearTheWayDefaultTypeInternal _ReqClearTheWay_default_instance_;
PROTOBUF_CONSTEXPR ReqSignalPriority::ReqSignalPriority(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.intersectionid_)*/nullptr
  , /*decltype(_impl_.requiredmove_)*/nullptr
  , /*decltype(_impl_.estimatedarrivaltime_)*/0u
  , /*decltype(_impl_.distance2intersection_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReqSignalPriorityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSignalPriorityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSignalPriorityDefaultTypeInternal() {}
  union {
    ReqSignalPriority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSignalPriorityDefaultTypeInternal _ReqSignalPriority_default_instance_;
PROTOBUF_CONSTEXPR ReqSensorSharing::ReqSensorSharing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detectorarea_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReqSensorSharingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSensorSharingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSensorSharingDefaultTypeInternal() {}
  union {
    ReqSensorSharing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSensorSharingDefaultTypeInternal _ReqSensorSharing_default_instance_;
PROTOBUF_CONSTEXPR ParkingRequest::ParkingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.req_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParkingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParkingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParkingRequestDefaultTypeInternal() {}
  union {
    ParkingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParkingRequestDefaultTypeInternal _ParkingRequest_default_instance_;
PROTOBUF_CONSTEXPR ParkingType::ParkingType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parkingtype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParkingTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParkingTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParkingTypeDefaultTypeInternal() {}
  union {
    ParkingType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParkingTypeDefaultTypeInternal _ParkingType_default_instance_;
PROTOBUF_CONSTEXPR ReqParkingArea::ReqParkingArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.req_)*/nullptr
  , /*decltype(_impl_.parkingtype_)*/nullptr
  , /*decltype(_impl_.vehicletype_)*/0
  , /*decltype(_impl_.expectedparkingslotid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReqParkingAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqParkingAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqParkingAreaDefaultTypeInternal() {}
  union {
    ReqParkingArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqParkingAreaDefaultTypeInternal _ReqParkingArea_default_instance_;
PROTOBUF_CONSTEXPR ReqInfo::ReqInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ReqInfoOneOf_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReqInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqInfoDefaultTypeInternal() {}
  union {
    ReqInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqInfoDefaultTypeInternal _ReqInfo_default_instance_;
PROTOBUF_CONSTEXPR DriveRequest::DriveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reqpriority_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetveh_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetrsu_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.reqid_)*/0u
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.lifetime_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DriveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DriveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DriveRequestDefaultTypeInternal() {}
  union {
    DriveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DriveRequestDefaultTypeInternal _DriveRequest_default_instance_;
PROTOBUF_CONSTEXPR DriveBehavior::DriveBehavior(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drivebehavior_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DriveBehaviorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DriveBehaviorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DriveBehaviorDefaultTypeInternal() {}
  union {
    DriveBehavior _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DriveBehaviorDefaultTypeInternal _DriveBehavior_default_instance_;
PROTOBUF_CONSTEXPR PathPlanningPoint::PathPlanningPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.posconfid_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.accelerationconfid_)*/nullptr
  , /*decltype(_impl_.posinmap_)*/nullptr
  , /*decltype(_impl_.speed_)*/0u
  , /*decltype(_impl_.heading_)*/0u
  , /*decltype(_impl_.speedconfid_)*/0
  , /*decltype(_impl_.headingconfid_)*/0
  , /*decltype(_impl_.estimatedtime_)*/0u
  , /*decltype(_impl_.timeconfidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathPlanningPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPlanningPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPlanningPointDefaultTypeInternal() {}
  union {
    PathPlanningPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPlanningPointDefaultTypeInternal _PathPlanningPoint_default_instance_;
PROTOBUF_CONSTEXPR PathPlanning::PathPlanning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathplanning_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathPlanningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPlanningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPlanningDefaultTypeInternal() {}
  union {
    PathPlanning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPlanningDefaultTypeInternal _PathPlanning_default_instance_;
PROTOBUF_CONSTEXPR IarData::IarData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reqs_)*/{}
  , /*decltype(_impl_.currentpos_)*/nullptr
  , /*decltype(_impl_.pathplanning_)*/nullptr
  , /*decltype(_impl_.currentbehavior_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IarDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IarDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IarDataDefaultTypeInternal() {}
  union {
    IarData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IarDataDefaultTypeInternal _IarData_default_instance_;
PROTOBUF_CONSTEXPR VirData::VirData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vehicleid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.intandreq_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.msgcnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VirDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirDataDefaultTypeInternal() {}
  union {
    VirData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirDataDefaultTypeInternal _VirData_default_instance_;
PROTOBUF_CONSTEXPR DriveSuggestion::DriveSuggestion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.suggestion_)*/nullptr
  , /*decltype(_impl_.relatedlink_)*/nullptr
  , /*decltype(_impl_.relatedpath_)*/nullptr
  , /*decltype(_impl_.timeoffset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DriveSuggestionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DriveSuggestionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DriveSuggestionDefaultTypeInternal() {}
  union {
    DriveSuggestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DriveSuggestionDefaultTypeInternal _DriveSuggestion_default_instance_;
PROTOBUF_CONSTEXPR CoordinationInfo::CoordinationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coordinationinfo_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinationInfoDefaultTypeInternal() {}
  union {
    CoordinationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinationInfoDefaultTypeInternal _CoordinationInfo_default_instance_;
PROTOBUF_CONSTEXPR VehicleCoordination::VehicleCoordination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vehid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.drivesuggestion_)*/nullptr
  , /*decltype(_impl_.pathguidance_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleCoordinationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleCoordinationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleCoordinationDefaultTypeInternal() {}
  union {
    VehicleCoordination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleCoordinationDefaultTypeInternal _VehicleCoordination_default_instance_;
PROTOBUF_CONSTEXPR LaneCoordination::LaneCoordination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetlane_)*/nullptr
  , /*decltype(_impl_.relatedpath_)*/nullptr
  , /*decltype(_impl_.recommendedbehavior_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.tbegin_)*/uint64_t{0u}
  , /*decltype(_impl_.tend_)*/uint64_t{0u}
  , /*decltype(_impl_.recommendedspeed_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneCoordinationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneCoordinationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneCoordinationDefaultTypeInternal() {}
  union {
    LaneCoordination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneCoordinationDefaultTypeInternal _LaneCoordination_default_instance_;
PROTOBUF_CONSTEXPR RscData::RscData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rsuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.coordinates_)*/nullptr
  , /*decltype(_impl_.lanecoordinates_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.msgcnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RscDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RscDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RscDataDefaultTypeInternal() {}
  union {
    RscData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RscDataDefaultTypeInternal _RscData_default_instance_;
PROTOBUF_CONSTEXPR CamData::CamData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ptclist_)*/{}
  , /*decltype(_impl_.obstaclelist_)*/{}
  , /*decltype(_impl_.rtelist_)*/{}
  , /*decltype(_impl_.rtslist_)*/{}
  , /*decltype(_impl_.bsmlist_)*/{}
  , /*decltype(_impl_.virlist_)*/{}
  , /*decltype(_impl_.rsclist_)*/{}
  , /*decltype(_impl_.trafficflow_)*/{}
  , /*decltype(_impl_.signalschemelist_)*/{}
  , /*decltype(_impl_.detectedregion_)*/{}
  , /*decltype(_impl_.ver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.refpos_)*/nullptr
  , /*decltype(_impl_.roadsignalstate_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.msgcnt_)*/0u
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.toalgorithmtime_)*/uint64_t{0u}
  , /*decltype(_impl_.todatabustime_)*/uint64_t{0u}
  , /*decltype(_impl_.tocloudtime_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.scenetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamDataDefaultTypeInternal() {}
  union {
    CamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamDataDefaultTypeInternal _CamData_default_instance_;
PROTOBUF_CONSTEXPR StatusData::StatusData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.posdevice_)*/nullptr
  , /*decltype(_impl_.devicetype_)*/0
  , /*decltype(_impl_.statustype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDataDefaultTypeInternal() {}
  union {
    StatusData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDataDefaultTypeInternal _StatusData_default_instance_;
PROTOBUF_CONSTEXPR DenmData::DenmData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statuslist_)*/{}
  , /*decltype(_impl_.ver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.refpos_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.msgcnt_)*/0u
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.scenetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DenmDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenmDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenmDataDefaultTypeInternal() {}
  union {
    DenmData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenmDataDefaultTypeInternal _DenmData_default_instance_;
PROTOBUF_CONSTEXPR RsiReply::RsiReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sourcedeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creattime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distributiontime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.completiontime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updatetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourcetopic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targettopic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.eventtype_)*/0u
  , /*decltype(_impl_.operationtype_)*/0u
  , /*decltype(_impl_.camdataid_)*/uint64_t{0u}
  , /*decltype(_impl_.dataid_)*/uint64_t{0u}
  , /*decltype(_impl_.eventsourceid_)*/uint64_t{0u}
  , /*decltype(_impl_.distributionstatusid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RsiReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RsiReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RsiReplyDefaultTypeInternal() {}
  union {
    RsiReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RsiReplyDefaultTypeInternal _RsiReply_default_instance_;
PROTOBUF_CONSTEXPR RsuRsmReply::RsuRsmReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rsmreplylist_)*/{}
  , /*decltype(_impl_.sourcedeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targettopic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.camdataid_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RsuRsmReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RsuRsmReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RsuRsmReplyDefaultTypeInternal() {}
  union {
    RsuRsmReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RsuRsmReplyDefaultTypeInternal _RsuRsmReply_default_instance_;
PROTOBUF_CONSTEXPR RsmReply::RsmReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataid_)*/uint64_t{0u}
  , /*decltype(_impl_.distributionstatusid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RsmReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RsmReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RsmReplyDefaultTypeInternal() {}
  union {
    RsmReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RsmReplyDefaultTypeInternal _RsmReply_default_instance_;
PROTOBUF_CONSTEXPR MonitorStatsData::MonitorStatsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.camnums_)*/uint64_t{0u}
  , /*decltype(_impl_.participantnums_)*/uint64_t{0u}
  , /*decltype(_impl_.rtenums_)*/uint64_t{0u}
  , /*decltype(_impl_.trafficflownums_)*/uint64_t{0u}
  , /*decltype(_impl_.trafficflowstatnums_)*/uint64_t{0u}
  , /*decltype(_impl_.intersectionstatnums_)*/uint64_t{0u}
  , /*decltype(_impl_.phasestatnums_)*/uint64_t{0u}
  , /*decltype(_impl_.rtsnums_)*/uint64_t{0u}
  , /*decltype(_impl_.camerapathlistnums_)*/uint64_t{0u}
  , /*decltype(_impl_.camerapathnums_)*/uint64_t{0u}
  , /*decltype(_impl_.radarpathlistnums_)*/uint64_t{0u}
  , /*decltype(_impl_.radarpathnums_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonitorStatsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorStatsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorStatsDataDefaultTypeInternal() {}
  union {
    MonitorStatsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorStatsDataDefaultTypeInternal _MonitorStatsData_default_instance_;
}  // namespace pb
}  // namespace v2x
}  // namespace seisys
}  // namespace cn
static ::_pb::Metadata file_level_metadata_v2x_2eproto[114];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_v2x_2eproto[41];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_v2x_2eproto = nullptr;

const uint32_t TableStruct_v2x_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiTimeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiTimeDetails, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiTimeDetails, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiTimeDetails, _impl_.endtimeconfidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Position3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Position3D, _impl_.lat_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Position3D, _impl_.lon_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Position3D, _impl_.ele_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PositionConfidenceSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PositionConfidenceSet, _impl_.posconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PositionConfidenceSet, _impl_.eleconfid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSize, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSize, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSize, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSizeConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSizeConfidence, _impl_.widthconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSizeConfidence, _impl_.lengthconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantSizeConfidence, _impl_.heightconfid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Polygon, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DetectorArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DetectorArea, _impl_.areaid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DetectorArea, _impl_.settime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DetectorArea, _impl_.polygon_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DetectorArea, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DetectorArea, _impl_.laneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RegulatorySpeedLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RegulatorySpeedLimit, _impl_.speedlimittype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RegulatorySpeedLimit, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationSet4Way, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationSet4Way, _impl_.lat_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationSet4Way, _impl_.lon_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationSet4Way, _impl_.vert_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationSet4Way, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationConfidence, _impl_.lonaccelconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationConfidence, _impl_.lataccelconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationConfidence, _impl_.verticalaccelconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AccelerationConfidence, _impl_.yawrateconfid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MotionConfidenceSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MotionConfidenceSet, _impl_.speedcfd_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MotionConfidenceSet, _impl_.headingcfd_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MotionConfidenceSet, _impl_.steercfd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleSize, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleSize, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleSize, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeReferenceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeReferenceId, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeReferenceId, _impl_.nodeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapLocation, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapLocation, _impl_.linkname_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapLocation, _impl_.upstreamnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapLocation, _impl_.sectionid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapLocation, _impl_.laneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PhaseId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PhaseId, _impl_.phaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferenceLanes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferenceLanes, _impl_.referencelanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferencePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferencePath, _impl_.activepath_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferencePath, _impl_.pathradius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferenceLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferenceLink, _impl_.upstreamnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferenceLink, _impl_.downstreamnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReferenceLink, _impl_.referencelanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AllowedManeuvers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::AllowedManeuvers, _impl_.maneuvers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneStatInfo, _impl_.laneid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneStatInfo, _impl_.linkstatinfo_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneStatInfo, _impl_.sectionstatinfo_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneStatInfo, _impl_.extid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SectionStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SectionStatInfo, _impl_.sectionid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SectionStatInfo, _impl_.linkstatinfo_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SectionStatInfo, _impl_.extid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkStatInfo, _impl_.upstreamnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkStatInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkStatInfo, _impl_.nodestatinfo_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkStatInfo, _impl_.extid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeStatInfo, _impl_.nodeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementStatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementStatInfo, _impl_.remoteintersection_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementStatInfo, _impl_.turndirection_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementStatInfo, _impl_.nodestatinfo_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementStatInfo, _impl_.extid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatByInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatByInterval, _impl_.interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle, _impl_.cyclestarttime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle, _impl_.cycleendtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle, _impl_.cycletime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatType, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatType, _impl_.sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatMapElement, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatMapElement, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStatMapElement, _impl_.TrafficFlowStatMapElementOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _impl_.lanecapacity_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _impl_.lanesaturation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _impl_.lanespaceoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _impl_.lanetimeoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _impl_.laneavggrnqueue_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneIndexAdded, _impl_.lanegrnutilization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _impl_.linkcapacity_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _impl_.linksaturation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _impl_.linkspaceoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _impl_.linktimeoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _impl_.linkavggrnqueue_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkIndexAdded, _impl_.linkgrnutilization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _impl_.movementcapacity_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _impl_.movementsaturation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _impl_.movementspaceoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _impl_.movementtimeoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _impl_.movementavggrnqueue_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementIndexAdded, _impl_.movementgrnutilization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.nodespaceoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.nodetimeoccupy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.nodecapacity_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.nodesaturation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.nodegrnutilization_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.nodeavggrnqueue_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.demandindex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.supplyindex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::NodeIndexAdded, _impl_.theoryindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalControlIndexAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalControlIndexAdded, _impl_.phaseid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalControlIndexAdded, _impl_.greenstartqueue_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalControlIndexAdded, _impl_.redstartqueue_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalControlIndexAdded, _impl_.greenutilization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowExtension, _impl_.laneindex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowExtension, _impl_.linkindex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowExtension, _impl_.movementindex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowExtension, _impl_.nodeindex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowExtension, _impl_.signalindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.mapelement_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.mapelementtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.ptctype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.vehicletype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.speedpoint_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.speedarea_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.density_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.traveltime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.queuelength_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.queueint_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.congestion_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.trafficflowextension_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.timeheadway_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.spaceheadway_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlowStat, _impl_.stopnums_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlow, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlow, _impl_.gentime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlow, _impl_.stattype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TrafficFlow, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _impl_.minendtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _impl_.maxendtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _impl_.likelyendtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _impl_.timeconfidence_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _impl_.nextstarttime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::TimeCountingDown, _impl_.nextduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PhaseState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PhaseState, _impl_.light_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PhaseState, _impl_.timing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Phase, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Phase, _impl_.phasestates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IntersectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IntersectionState, _impl_.intersectionid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IntersectionState, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IntersectionState, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IntersectionState, _impl_.timeconfidence_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IntersectionState, _impl_.phases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SpatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SpatData, _impl_.msgcnt_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SpatData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SpatData, _impl_.intersections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LocalTimePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LocalTimePoint, _impl_.hh_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LocalTimePoint, _impl_.mm_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LocalTimePoint, _impl_.ss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PeriodictimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PeriodictimeSpan, _impl_.monthfilter_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PeriodictimeSpan, _impl_.dayfilter_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PeriodictimeSpan, _impl_.weekdayfilter_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PeriodictimeSpan, _impl_.fromtimepoint_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PeriodictimeSpan, _impl_.totimepoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SingleTimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SingleTimeSpan, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SingleTimeSpan, _impl_.endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimTimeType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimTimeType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimTimeType, _impl_.OptimTimeTypeOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementEx, _impl_.remoteintersection_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementEx, _impl_.phaseid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MovementEx, _impl_.turndirection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.phaseid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.order_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.movementid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.phasetime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.phaseyellowtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.phaseallredtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.mingreen_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimPhase, _impl_.maxgreen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _impl_.optimtimetype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _impl_.optimcycletime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _impl_.mincycletime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _impl_.maxcycletime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _impl_.optimphaselist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _impl_.coorphase_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::OptimData, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalScheme, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalScheme, _impl_.optimtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalScheme, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalScheme, _impl_.optimdatalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.brakepadel_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.wheelbrakes_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.traction_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.abs_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.scs_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.brakeboost_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.auxbrakes_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BrakeSystemStatus, _impl_.brakecontrol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PositionAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PositionAccuracy, _impl_.semimajor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PositionAccuracy, _impl_.semiminor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PositionAccuracy, _impl_.orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ThrottleSystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ThrottleSystemStatus, _impl_.thorttlecontrol_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ThrottleSystemStatus, _impl_.throttlepadel_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ThrottleSystemStatus, _impl_.wheelthrottles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.obuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.plateno_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.posconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.posaccuracy_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.transmission_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.steeringwheelangle_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.motionconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.brakes_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.vehicletype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.fueltype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.drivemodedrivestatus_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.emergencystatus_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.light_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.wiper_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.outofcontrol_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::BsmData, _impl_.endurance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathHistoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathHistoryPoint, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathHistoryPoint, _impl_.timeoffset_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathHistoryPoint, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathHistoryPoint, _impl_.posconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathHistoryPoint, _impl_.heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.ptcid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.ptctype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.datasource_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.deviceidlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.timeconfidence_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.ptcpos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.maplocation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.posconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.motionconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.accelset_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.accelerationconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.ptcsize_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.vehicleband_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.vehicletype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.plateno_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.platetype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.platecolor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.vehiclecolor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.ptcsizeconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.ptctypeext_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.ptctypeextconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.statusduration_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.pathhistory_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.tracking_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.polygon_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParticipantData, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.obsid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.obstype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.obstypecfd_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.obssource_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.deviceidlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.obspos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.posconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.maplocation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.motionconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.verspeed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.verspeedconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.obssizeconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.tracking_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObstacleData, _impl_.polygon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObjIdValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObjIdValue, _impl_.ptcid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObjIdValue, _impl_.obsid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ObjIdValue, _impl_.role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.rteid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.rtetype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.eventsource_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.datasource_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.deviceidlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.rtepos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.maplocation_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.eventradius_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.timedetails_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.referencepath_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.referencelinks_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.eventobjid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.eventconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.eventimages_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.eventvideos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RteData, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.rtsid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.rtstype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.datasource_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.rtspos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.timedetails_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.refpathlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.reflinklist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.pathradius_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RtsData, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLane, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLane, _impl_.maneuvers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Connection, _impl_.remoteintersection_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Connection, _impl_.connectinglane_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Connection, _impl_.phaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesParking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesParking, _impl_.parkingandstoppinglanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesCrosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesCrosswalk, _impl_.pedestriancrosswalks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesBike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesBike, _impl_.bikelanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesSidewalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesSidewalk, _impl_.pedestriansidewalkpaths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesBarrier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesBarrier, _impl_.medianschannelization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesStriping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesStriping, _impl_.roadwaymarkings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle, _impl_.trainsandtrolleys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributesVehicle, _impl_.motorvehiclelanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneTypeAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneTypeAttributes, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneTypeAttributes, _impl_.LaneTypeAttributesOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneSharing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneSharing, _impl_.sharewith_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneType, _impl_.choiceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneType, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributes, _impl_.sharewith_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneAttributes, _impl_.lanetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneBoundary, _impl_.laneboundarytype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneBoundary, _impl_.laneboundarypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.laneid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.lanewidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.laneattributes_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.maneuvers_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.connectsto_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.speedlimits_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.leftboundary_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Lane, _impl_.rightboundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalWaitingLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalWaitingLane, _impl_.lanewidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalWaitingLane, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::SignalWaitingLane, _impl_.allowedphaseids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLaneEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLaneEx, _impl_.targetsection_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLaneEx, _impl_.targetlane_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLaneEx, _impl_.connectinglanewidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLaneEx, _impl_.connectinglanepoints_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectingLaneEx, _impl_.isolatedconnectinglane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectionEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectionEx, _impl_.remoteintersection_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectionEx, _impl_.swl_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectionEx, _impl_.connectionlane_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectionEx, _impl_.phaseid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ConnectionEx, _impl_.turndirection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::STPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::STPoint, _impl_.saxis_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::STPoint, _impl_.taxis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.lanerefid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.lanewidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.laneattributes_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.maneuvers_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.connectstoex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.speedlimits_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.stpoints_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.leftboundary_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneEx, _impl_.rightboundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Movement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Movement, _impl_.remoteintersection_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Movement, _impl_.phaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Section, _impl_.secid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Section, _impl_.lanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _impl_.upstreamnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _impl_.speedlimits_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _impl_.linkwidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _impl_.refline_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _impl_.movementsex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LinkEx, _impl_.sections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _impl_.upstreamnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _impl_.speedlimits_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _impl_.linkwidth_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _impl_.movements_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Link, _impl_.lanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ProhibitedZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ProhibitedZone, _impl_.centralcircleprohibitedzone_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ProhibitedZone, _impl_.nonmotorvehicleprohibitedzones_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ProhibitedZone, _impl_.gridlinemarkingprohibitedzones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Node, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Node, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Node, _impl_.refpos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Node, _impl_.inlinks_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Node, _impl_.inlinksex_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::Node, _impl_.prohibitedzone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MAP, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MAP, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MAP, _impl_.msgcnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapData, _impl_.mapslice_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapData, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapData, _impl_.etag_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapData, _impl_.ack_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MapData, _impl_.seqnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqLaneChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqLaneChange, _impl_.upstreamnode_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqLaneChange, _impl_.downstreamnode_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqLaneChange, _impl_.targetlane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqClearTheWay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqClearTheWay, _impl_.upstreamnode_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqClearTheWay, _impl_.downstreamnode_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqClearTheWay, _impl_.targetlane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqSignalPriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqSignalPriority, _impl_.intersectionid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqSignalPriority, _impl_.requiredmove_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqSignalPriority, _impl_.estimatedarrivaltime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqSignalPriority, _impl_.distance2intersection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqSensorSharing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqSensorSharing, _impl_.detectorarea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParkingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParkingRequest, _impl_.req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParkingType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ParkingType, _impl_.parkingtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqParkingArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqParkingArea, _impl_.vehicletype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqParkingArea, _impl_.req_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqParkingArea, _impl_.parkingtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqParkingArea, _impl_.expectedparkingslotid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::ReqInfo, _impl_.ReqInfoOneOf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _impl_.reqpriority_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _impl_.targetveh_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _impl_.targetrsu_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveRequest, _impl_.lifetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveBehavior, _impl_.drivebehavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.posconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.speedconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.headingconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.accelerationconfid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.estimatedtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.timeconfidence_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanningPoint, _impl_.posinmap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::PathPlanning, _impl_.pathplanning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IarData, _impl_.currentpos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IarData, _impl_.pathplanning_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IarData, _impl_.currentbehavior_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::IarData, _impl_.reqs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VirData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VirData, _impl_.msgcnt_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VirData, _impl_.vehicleid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VirData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VirData, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VirData, _impl_.intandreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveSuggestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveSuggestion, _impl_.suggestion_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveSuggestion, _impl_.timeoffset_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveSuggestion, _impl_.relatedlink_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DriveSuggestion, _impl_.relatedpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CoordinationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CoordinationInfo, _impl_.coordinationinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleCoordination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleCoordination, _impl_.vehid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleCoordination, _impl_.drivesuggestion_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleCoordination, _impl_.pathguidance_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::VehicleCoordination, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.targetlane_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.relatedpath_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.tbegin_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.tend_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.recommendedspeed_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.recommendedbehavior_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::LaneCoordination, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RscData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RscData, _impl_.msgcnt_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RscData, _impl_.rsuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RscData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RscData, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RscData, _impl_.coordinates_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RscData, _impl_.lanecoordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.msgcnt_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.mapdeviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.refpos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.scenetype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.ptclist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.obstaclelist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.rtelist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.rtslist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.bsmlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.virlist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.rsclist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.roadsignalstate_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.trafficflow_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.signalschemelist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.detectedregion_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.toalgorithmtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.todatabustime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.tocloudtime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::CamData, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::StatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::StatusData, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::StatusData, _impl_.mapdeviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::StatusData, _impl_.devicetype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::StatusData, _impl_.statustype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::StatusData, _impl_.posdevice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.msgcnt_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.refpos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.scenetype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::DenmData, _impl_.statuslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.eventtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.sourcedeviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.targetdeviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.creattime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.distributiontime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.completiontime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.updatetime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.operationtype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.camdataid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.dataid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.eventsourceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.distributionstatusid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.sourcetopic_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsiReply, _impl_.targettopic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsuRsmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsuRsmReply, _impl_.sourcedeviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsuRsmReply, _impl_.targetdeviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsuRsmReply, _impl_.camdataid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsuRsmReply, _impl_.rsmreplylist_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsuRsmReply, _impl_.targettopic_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsuRsmReply, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsmReply, _impl_.dataid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsmReply, _impl_.distributionstatusid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::RsmReply, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.camnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.participantnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.rtenums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.trafficflownums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.trafficflowstatnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.intersectionstatnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.phasestatnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.rtsnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.camerapathlistnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.camerapathnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.radarpathlistnums_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::v2x::pb::MonitorStatsData, _impl_.radarpathnums_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cn::seisys::v2x::pb::RsiTimeDetails)},
  { 9, -1, -1, sizeof(::cn::seisys::v2x::pb::Position3D)},
  { 18, -1, -1, sizeof(::cn::seisys::v2x::pb::PositionConfidenceSet)},
  { 26, -1, -1, sizeof(::cn::seisys::v2x::pb::ParticipantSize)},
  { 35, -1, -1, sizeof(::cn::seisys::v2x::pb::ParticipantSizeConfidence)},
  { 44, -1, -1, sizeof(::cn::seisys::v2x::pb::Polygon)},
  { 51, -1, -1, sizeof(::cn::seisys::v2x::pb::DetectorArea)},
  { 62, -1, -1, sizeof(::cn::seisys::v2x::pb::RegulatorySpeedLimit)},
  { 70, -1, -1, sizeof(::cn::seisys::v2x::pb::AccelerationSet4Way)},
  { 80, -1, -1, sizeof(::cn::seisys::v2x::pb::AccelerationConfidence)},
  { 90, -1, -1, sizeof(::cn::seisys::v2x::pb::MotionConfidenceSet)},
  { 99, -1, -1, sizeof(::cn::seisys::v2x::pb::VehicleSize)},
  { 108, -1, -1, sizeof(::cn::seisys::v2x::pb::NodeReferenceId)},
  { 116, -1, -1, sizeof(::cn::seisys::v2x::pb::MapLocation)},
  { 127, -1, -1, sizeof(::cn::seisys::v2x::pb::PhaseId)},
  { 134, -1, -1, sizeof(::cn::seisys::v2x::pb::ReferenceLanes)},
  { 141, -1, -1, sizeof(::cn::seisys::v2x::pb::ReferencePath)},
  { 149, -1, -1, sizeof(::cn::seisys::v2x::pb::ReferenceLink)},
  { 158, -1, -1, sizeof(::cn::seisys::v2x::pb::AllowedManeuvers)},
  { 165, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneStatInfo)},
  { 175, -1, -1, sizeof(::cn::seisys::v2x::pb::SectionStatInfo)},
  { 184, -1, -1, sizeof(::cn::seisys::v2x::pb::LinkStatInfo)},
  { 194, -1, -1, sizeof(::cn::seisys::v2x::pb::NodeStatInfo)},
  { 201, -1, -1, sizeof(::cn::seisys::v2x::pb::MovementStatInfo)},
  { 211, -1, -1, sizeof(::cn::seisys::v2x::pb::TrafficFlowStatByInterval)},
  { 218, -1, -1, sizeof(::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle)},
  { 227, -1, -1, sizeof(::cn::seisys::v2x::pb::TrafficFlowStatType)},
  { 235, -1, -1, sizeof(::cn::seisys::v2x::pb::TrafficFlowStatMapElement)},
  { 248, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneIndexAdded)},
  { 261, -1, -1, sizeof(::cn::seisys::v2x::pb::LinkIndexAdded)},
  { 274, -1, -1, sizeof(::cn::seisys::v2x::pb::MovementIndexAdded)},
  { 287, -1, -1, sizeof(::cn::seisys::v2x::pb::NodeIndexAdded)},
  { 303, -1, -1, sizeof(::cn::seisys::v2x::pb::SignalControlIndexAdded)},
  { 313, -1, -1, sizeof(::cn::seisys::v2x::pb::TrafficFlowExtension)},
  { 324, -1, -1, sizeof(::cn::seisys::v2x::pb::TrafficFlowStat)},
  { 348, -1, -1, sizeof(::cn::seisys::v2x::pb::TrafficFlow)},
  { 358, -1, -1, sizeof(::cn::seisys::v2x::pb::TimeCountingDown)},
  { 371, -1, -1, sizeof(::cn::seisys::v2x::pb::PhaseState)},
  { 379, -1, -1, sizeof(::cn::seisys::v2x::pb::Phase)},
  { 387, -1, -1, sizeof(::cn::seisys::v2x::pb::IntersectionState)},
  { 398, -1, -1, sizeof(::cn::seisys::v2x::pb::SpatData)},
  { 407, -1, -1, sizeof(::cn::seisys::v2x::pb::LocalTimePoint)},
  { 416, -1, -1, sizeof(::cn::seisys::v2x::pb::PeriodictimeSpan)},
  { 427, -1, -1, sizeof(::cn::seisys::v2x::pb::SingleTimeSpan)},
  { 435, -1, -1, sizeof(::cn::seisys::v2x::pb::OptimTimeType)},
  { 444, -1, -1, sizeof(::cn::seisys::v2x::pb::MovementEx)},
  { 453, -1, -1, sizeof(::cn::seisys::v2x::pb::OptimPhase)},
  { 468, -1, -1, sizeof(::cn::seisys::v2x::pb::OptimData)},
  { 481, -1, -1, sizeof(::cn::seisys::v2x::pb::SignalScheme)},
  { 491, -1, -1, sizeof(::cn::seisys::v2x::pb::BrakeSystemStatus)},
  { 505, -1, -1, sizeof(::cn::seisys::v2x::pb::PositionAccuracy)},
  { 514, -1, -1, sizeof(::cn::seisys::v2x::pb::ThrottleSystemStatus)},
  { 523, -1, -1, sizeof(::cn::seisys::v2x::pb::BsmData)},
  { 552, -1, -1, sizeof(::cn::seisys::v2x::pb::PathHistoryPoint)},
  { 563, -1, -1, sizeof(::cn::seisys::v2x::pb::ParticipantData)},
  { 598, -1, -1, sizeof(::cn::seisys::v2x::pb::ObstacleData)},
  { 623, -1, -1, sizeof(::cn::seisys::v2x::pb::ObjIdValue)},
  { 632, -1, -1, sizeof(::cn::seisys::v2x::pb::RteData)},
  { 657, -1, -1, sizeof(::cn::seisys::v2x::pb::RtsData)},
  { 675, -1, -1, sizeof(::cn::seisys::v2x::pb::ConnectingLane)},
  { 683, -1, -1, sizeof(::cn::seisys::v2x::pb::Connection)},
  { 692, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesParking)},
  { 699, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesCrosswalk)},
  { 706, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesBike)},
  { 713, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesSidewalk)},
  { 720, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesBarrier)},
  { 727, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesStriping)},
  { 734, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle)},
  { 741, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributesVehicle)},
  { 748, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneTypeAttributes)},
  { 763, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneSharing)},
  { 770, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneType)},
  { 778, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneAttributes)},
  { 786, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneBoundary)},
  { 794, -1, -1, sizeof(::cn::seisys::v2x::pb::Lane)},
  { 809, -1, -1, sizeof(::cn::seisys::v2x::pb::SignalWaitingLane)},
  { 818, -1, -1, sizeof(::cn::seisys::v2x::pb::ConnectingLaneEx)},
  { 829, -1, -1, sizeof(::cn::seisys::v2x::pb::ConnectionEx)},
  { 840, -1, -1, sizeof(::cn::seisys::v2x::pb::STPoint)},
  { 848, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneEx)},
  { 863, -1, -1, sizeof(::cn::seisys::v2x::pb::Movement)},
  { 871, -1, -1, sizeof(::cn::seisys::v2x::pb::Section)},
  { 879, -1, -1, sizeof(::cn::seisys::v2x::pb::LinkEx)},
  { 892, -1, -1, sizeof(::cn::seisys::v2x::pb::Link)},
  { 905, -1, -1, sizeof(::cn::seisys::v2x::pb::ProhibitedZone)},
  { 914, -1, -1, sizeof(::cn::seisys::v2x::pb::Node)},
  { 926, -1, -1, sizeof(::cn::seisys::v2x::pb::MAP)},
  { 935, -1, -1, sizeof(::cn::seisys::v2x::pb::MapData)},
  { 946, -1, -1, sizeof(::cn::seisys::v2x::pb::ReqLaneChange)},
  { 955, -1, -1, sizeof(::cn::seisys::v2x::pb::ReqClearTheWay)},
  { 964, -1, -1, sizeof(::cn::seisys::v2x::pb::ReqSignalPriority)},
  { 974, -1, -1, sizeof(::cn::seisys::v2x::pb::ReqSensorSharing)},
  { 981, -1, -1, sizeof(::cn::seisys::v2x::pb::ParkingRequest)},
  { 988, -1, -1, sizeof(::cn::seisys::v2x::pb::ParkingType)},
  { 995, -1, -1, sizeof(::cn::seisys::v2x::pb::ReqParkingArea)},
  { 1005, -1, -1, sizeof(::cn::seisys::v2x::pb::ReqInfo)},
  { 1017, -1, -1, sizeof(::cn::seisys::v2x::pb::DriveRequest)},
  { 1030, -1, -1, sizeof(::cn::seisys::v2x::pb::DriveBehavior)},
  { 1037, -1, -1, sizeof(::cn::seisys::v2x::pb::PathPlanningPoint)},
  { 1054, -1, -1, sizeof(::cn::seisys::v2x::pb::PathPlanning)},
  { 1061, -1, -1, sizeof(::cn::seisys::v2x::pb::IarData)},
  { 1071, -1, -1, sizeof(::cn::seisys::v2x::pb::VirData)},
  { 1082, -1, -1, sizeof(::cn::seisys::v2x::pb::DriveSuggestion)},
  { 1092, -1, -1, sizeof(::cn::seisys::v2x::pb::CoordinationInfo)},
  { 1099, -1, -1, sizeof(::cn::seisys::v2x::pb::VehicleCoordination)},
  { 1109, -1, -1, sizeof(::cn::seisys::v2x::pb::LaneCoordination)},
  { 1123, -1, -1, sizeof(::cn::seisys::v2x::pb::RscData)},
  { 1135, -1, -1, sizeof(::cn::seisys::v2x::pb::CamData)},
  { 1164, -1, -1, sizeof(::cn::seisys::v2x::pb::StatusData)},
  { 1175, -1, -1, sizeof(::cn::seisys::v2x::pb::DenmData)},
  { 1189, -1, -1, sizeof(::cn::seisys::v2x::pb::RsiReply)},
  { 1211, -1, -1, sizeof(::cn::seisys::v2x::pb::RsuRsmReply)},
  { 1223, -1, -1, sizeof(::cn::seisys::v2x::pb::RsmReply)},
  { 1232, -1, -1, sizeof(::cn::seisys::v2x::pb::MonitorStatsData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::seisys::v2x::pb::_RsiTimeDetails_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Position3D_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PositionConfidenceSet_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ParticipantSize_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ParticipantSizeConfidence_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Polygon_default_instance_._instance,
  &::cn::seisys::v2x::pb::_DetectorArea_default_instance_._instance,
  &::cn::seisys::v2x::pb::_RegulatorySpeedLimit_default_instance_._instance,
  &::cn::seisys::v2x::pb::_AccelerationSet4Way_default_instance_._instance,
  &::cn::seisys::v2x::pb::_AccelerationConfidence_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MotionConfidenceSet_default_instance_._instance,
  &::cn::seisys::v2x::pb::_VehicleSize_default_instance_._instance,
  &::cn::seisys::v2x::pb::_NodeReferenceId_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MapLocation_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PhaseId_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReferenceLanes_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReferencePath_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReferenceLink_default_instance_._instance,
  &::cn::seisys::v2x::pb::_AllowedManeuvers_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneStatInfo_default_instance_._instance,
  &::cn::seisys::v2x::pb::_SectionStatInfo_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LinkStatInfo_default_instance_._instance,
  &::cn::seisys::v2x::pb::_NodeStatInfo_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MovementStatInfo_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TrafficFlowStatByInterval_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TrafficFlowStatBySignalCycle_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TrafficFlowStatType_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TrafficFlowStatMapElement_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneIndexAdded_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LinkIndexAdded_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MovementIndexAdded_default_instance_._instance,
  &::cn::seisys::v2x::pb::_NodeIndexAdded_default_instance_._instance,
  &::cn::seisys::v2x::pb::_SignalControlIndexAdded_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TrafficFlowExtension_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TrafficFlowStat_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TrafficFlow_default_instance_._instance,
  &::cn::seisys::v2x::pb::_TimeCountingDown_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PhaseState_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Phase_default_instance_._instance,
  &::cn::seisys::v2x::pb::_IntersectionState_default_instance_._instance,
  &::cn::seisys::v2x::pb::_SpatData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LocalTimePoint_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PeriodictimeSpan_default_instance_._instance,
  &::cn::seisys::v2x::pb::_SingleTimeSpan_default_instance_._instance,
  &::cn::seisys::v2x::pb::_OptimTimeType_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MovementEx_default_instance_._instance,
  &::cn::seisys::v2x::pb::_OptimPhase_default_instance_._instance,
  &::cn::seisys::v2x::pb::_OptimData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_SignalScheme_default_instance_._instance,
  &::cn::seisys::v2x::pb::_BrakeSystemStatus_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PositionAccuracy_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ThrottleSystemStatus_default_instance_._instance,
  &::cn::seisys::v2x::pb::_BsmData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PathHistoryPoint_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ParticipantData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ObstacleData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ObjIdValue_default_instance_._instance,
  &::cn::seisys::v2x::pb::_RteData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_RtsData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ConnectingLane_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Connection_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesParking_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesCrosswalk_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesBike_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesSidewalk_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesBarrier_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesStriping_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesTrackedVehicle_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributesVehicle_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneTypeAttributes_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneSharing_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneType_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneAttributes_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneBoundary_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Lane_default_instance_._instance,
  &::cn::seisys::v2x::pb::_SignalWaitingLane_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ConnectingLaneEx_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ConnectionEx_default_instance_._instance,
  &::cn::seisys::v2x::pb::_STPoint_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneEx_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Movement_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Section_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LinkEx_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Link_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ProhibitedZone_default_instance_._instance,
  &::cn::seisys::v2x::pb::_Node_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MAP_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MapData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReqLaneChange_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReqClearTheWay_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReqSignalPriority_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReqSensorSharing_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ParkingRequest_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ParkingType_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReqParkingArea_default_instance_._instance,
  &::cn::seisys::v2x::pb::_ReqInfo_default_instance_._instance,
  &::cn::seisys::v2x::pb::_DriveRequest_default_instance_._instance,
  &::cn::seisys::v2x::pb::_DriveBehavior_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PathPlanningPoint_default_instance_._instance,
  &::cn::seisys::v2x::pb::_PathPlanning_default_instance_._instance,
  &::cn::seisys::v2x::pb::_IarData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_VirData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_DriveSuggestion_default_instance_._instance,
  &::cn::seisys::v2x::pb::_CoordinationInfo_default_instance_._instance,
  &::cn::seisys::v2x::pb::_VehicleCoordination_default_instance_._instance,
  &::cn::seisys::v2x::pb::_LaneCoordination_default_instance_._instance,
  &::cn::seisys::v2x::pb::_RscData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_CamData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_StatusData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_DenmData_default_instance_._instance,
  &::cn::seisys::v2x::pb::_RsiReply_default_instance_._instance,
  &::cn::seisys::v2x::pb::_RsuRsmReply_default_instance_._instance,
  &::cn::seisys::v2x::pb::_RsmReply_default_instance_._instance,
  &::cn::seisys::v2x::pb::_MonitorStatsData_default_instance_._instance,
};

const char descriptor_table_protodef_v2x_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tv2x.proto\022\020cn.seisys.v2x.pb\"q\n\016RsiTime"
  "Details\022\021\n\tstartTime\030\001 \001(\004\022\017\n\007endTime\030\002 "
  "\001(\004\022;\n\021endTimeConfidence\030\003 \001(\0162 .cn.seis"
  "ys.v2x.pb.TimeConfidence\"3\n\nPosition3D\022\013"
  "\n\003lat\030\001 \001(\005\022\013\n\003lon\030\002 \001(\005\022\013\n\003ele\030\003 \001(\005\"\373\006"
  "\n\025PositionConfidenceSet\022M\n\tposConfid\030\001 \001"
  "(\0162:.cn.seisys.v2x.pb.PositionConfidence"
  "Set.PositionConfidence\022N\n\teleConfid\030\002 \001("
  "\0162;.cn.seisys.v2x.pb.PositionConfidenceS"
  "et.ElevationConfidence\"\337\002\n\022PositionConfi"
  "dence\022\032\n\026UNAVAILABLE_POS_CONFID\020\000\022\023\n\017POS"
  "_CONFID_500M\020\001\022\023\n\017POS_CONFID_200M\020\002\022\023\n\017P"
  "OS_CONFID_100M\020\003\022\022\n\016POS_CONFID_50M\020\004\022\022\n\016"
  "POS_CONFID_20M\020\005\022\022\n\016POS_CONFID_10M\020\006\022\021\n\r"
  "POS_CONFID_5M\020\007\022\021\n\rPOS_CONFID_2M\020\010\022\021\n\rPO"
  "S_CONFID_1M\020\t\022\023\n\017POS_CONFID_50CM\020\n\022\023\n\017PO"
  "S_CONFID_20CM\020\013\022\023\n\017POS_CONFID_10CM\020\014\022\022\n\016"
  "POS_CONFID_5CM\020\r\022\022\n\016POS_CONFID_2CM\020\016\022\022\n\016"
  "POS_CONFID_1CM\020\017\"\340\002\n\023ElevationConfidence"
  "\022\032\n\026UNAVAILABLE_ELE_CONFID\020\000\022\023\n\017ELE_CONF"
  "ID_500M\020\001\022\023\n\017ELE_CONFID_200M\020\002\022\023\n\017ELE_CO"
  "NFID_100M\020\003\022\022\n\016ELE_CONFID_50M\020\004\022\022\n\016ELE_C"
  "ONFID_20M\020\005\022\022\n\016ELE_CONFID_10M\020\006\022\021\n\rELE_C"
  "ONFID_5M\020\007\022\021\n\rELE_CONFID_2M\020\010\022\021\n\rELE_CON"
  "FID_1M\020\t\022\023\n\017ELE_CONFID_50CM\020\n\022\023\n\017ELE_CON"
  "FID_20CM\020\013\022\023\n\017ELE_CONFID_10CM\020\014\022\022\n\016ELE_C"
  "ONFID_5CM\020\r\022\022\n\016ELE_CONFID_2CM\020\016\022\022\n\016ELE_C"
  "ONFID_1CM\020\017\"@\n\017ParticipantSize\022\r\n\005width\030"
  "\001 \001(\r\022\016\n\006length\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\"\214\005"
  "\n\031ParticipantSizeConfidence\022T\n\013widthConf"
  "id\030\001 \001(\0162\?.cn.seisys.v2x.pb.ParticipantS"
  "izeConfidence.SizeValueConfidence\022U\n\014len"
  "gthConfid\030\002 \001(\0162\?.cn.seisys.v2x.pb.Parti"
  "cipantSizeConfidence.SizeValueConfidence"
  "\022U\n\014heightConfid\030\003 \001(\0162\?.cn.seisys.v2x.p"
  "b.ParticipantSizeConfidence.SizeValueCon"
  "fidence\"\352\002\n\023SizeValueConfidence\022\033\n\027SIZE_"
  "CONFID_UNAVAILABLE\020\000\022\026\n\022SIZE_CONFID_100_"
  "00\020\001\022\026\n\022SIZE_CONFID_050_00\020\002\022\026\n\022SIZE_CON"
  "FID_020_00\020\003\022\026\n\022SIZE_CONFID_010_00\020\004\022\026\n\022"
  "SIZE_CONFID_005_00\020\005\022\026\n\022SIZE_CONFID_002_"
  "00\020\006\022\026\n\022SIZE_CONFID_001_00\020\007\022\026\n\022SIZE_CON"
  "FID_000_50\020\010\022\026\n\022SIZE_CONFID_000_20\020\t\022\026\n\022"
  "SIZE_CONFID_000_10\020\n\022\026\n\022SIZE_CONFID_000_"
  "05\020\013\022\026\n\022SIZE_CONFID_000_02\020\014\022\026\n\022SIZE_CON"
  "FID_000_01\020\r\"4\n\007Polygon\022)\n\003pos\030\001 \003(\0132\034.c"
  "n.seisys.v2x.pb.Position3D\"\236\001\n\014DetectorA"
  "rea\022\016\n\006areaId\030\001 \001(\005\022\017\n\007setTime\030\002 \001(\003\022*\n\007"
  "polygon\030\003 \001(\0132\031.cn.seisys.v2x.pb.Polygon"
  "\0221\n\006nodeId\030\004 \001(\0132!.cn.seisys.v2x.pb.Node"
  "ReferenceId\022\016\n\006laneId\030\005 \001(\005\"\233\004\n\024Regulato"
  "rySpeedLimit\022M\n\016speedLimitType\030\001 \001(\01625.c"
  "n.seisys.v2x.pb.RegulatorySpeedLimit.Spe"
  "edLimitType\022\r\n\005speed\030\002 \001(\005\"\244\003\n\016SpeedLimi"
  "tType\022\027\n\023SPEED_LIMIT_UNKNOWN\020\000\022\034\n\030MAX_SP"
  "EED_IN_SCHOOL_ZONE\020\001\0225\n1MAX_SPEED_INSCHO"
  "OL_ZONE_WHEN_CHILDREN_ARE_PRESENT\020\002\022!\n\035M"
  "AX_SPEED_INCONSTRUCTION_ZONE\020\003\022\025\n\021VEHICL"
  "E_MIN_SPEED\020\004\022\021\n\rVEHICLE_SPEED\020\005\022\033\n\027VEHI"
  "CLE_NIGHT_MAX_SPEED\020\006\022\023\n\017TRUCK_MIN_SPEED"
  "\020\007\022\023\n\017TRUCK_MAX_SPEED\020\010\022\031\n\025TRUCK_NIGHT_M"
  "AX_SPEED\020\t\022$\n VEHICLES_WITH_TRAILERS_MIN"
  "_SPEED\020\n\022$\n VEHICLES_WITH_TRAILERS_MAX_S"
  "PEED\020\013\022)\n%VEHICLES_WITHTRAILERS_NIGHT_MA"
  "X_SPEED\020\014\"J\n\023AccelerationSet4Way\022\013\n\003lat\030"
  "\001 \001(\005\022\013\n\003lon\030\002 \001(\005\022\014\n\004vert\030\003 \001(\005\022\013\n\003yaw\030"
  "\004 \001(\005\"\335\006\n\026AccelerationConfidence\022N\n\016lonA"
  "ccelConfid\030\001 \001(\01626.cn.seisys.v2x.pb.Acce"
  "lerationConfidence.AccConfidence\022N\n\016latA"
  "ccelConfid\030\002 \001(\01626.cn.seisys.v2x.pb.Acce"
  "lerationConfidence.AccConfidence\022S\n\023vert"
  "icalAccelConfid\030\003 \001(\01626.cn.seisys.v2x.pb"
  ".AccelerationConfidence.AccConfidence\022R\n"
  "\ryawRateConfid\030\004 \001(\0162;.cn.seisys.v2x.pb."
  "AccelerationConfidence.AngularVConfidenc"
  "e\"\344\001\n\rAccConfidence\022\032\n\026ACC_CONFID_UNAVAI"
  "LABLE\020\000\022\030\n\024ACC_CONFID_PREC100DE\020\001\022\030\n\024ACC"
  "_CONFID_PREC10DEG\020\002\022\027\n\023ACC_CONFID_PREC5D"
  "EG\020\003\022\027\n\023ACC_CONFID_PREC1DEG\020\004\022\031\n\025ACC_CON"
  "FID_PREC0_1DEG\020\005\022\032\n\026ACC_CONFID_PREC0_05D"
  "EG\020\006\022\032\n\026ACC_CONFID_PREC0_01DEG\020\007\"\222\002\n\022Ang"
  "ularVConfidence\022\037\n\033ANGULARV_CONFID_UNAVA"
  "ILABLE\020\000\022\036\n\032ANGULARV_CONFID_PREC100DEG\020\001"
  "\022\035\n\031ANGULARV_CONFID_PREC10DEG\020\002\022\034\n\030ANGUL"
  "ARV_CONFID_PREC5DEG\020\003\022\034\n\030ANGULARV_CONFID"
  "_PREC1DEG\020\004\022\036\n\032ANGULARV_CONFID_PREC0_1DE"
  "G\020\005\022\037\n\033ANGULARV_CONFID_PREC0_05DEG\020\006\022\037\n\033"
  "ANGULARV_CONFID_PREC0_01DEG\020\007\"\250\003\n\023Motion"
  "ConfidenceSet\0223\n\010speedCfd\030\001 \001(\0162!.cn.sei"
  "sys.v2x.pb.SpeedConfidence\0227\n\nheadingCfd"
  "\030\002 \001(\0162#.cn.seisys.v2x.pb.HeadingConfide"
  "nce\022T\n\010steerCfd\030\003 \001(\0162B.cn.seisys.v2x.pb"
  ".MotionConfidenceSet.SteeringWheelAngleC"
  "onfidence\"\314\001\n\034SteeringWheelAngleConfiden"
  "ce\022+\n\'STEERING_WHEEL_ANGLE_CONFID_UNAVAI"
  "LABLE\020\000\022(\n$STEERING_WHEEL_ANGLE_CONFID_P"
  "REC2DEG\020\001\022(\n$STEERING_WHEEL_ANGLE_CONFID"
  "_PREC1DEG\020\002\022+\n\'STEERING_WHEEL_ANGLE_CONF"
  "ID_PREC0_02DEG\020\003\"<\n\013VehicleSize\022\r\n\005width"
  "\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\"1"
  "\n\017NodeReferenceId\022\016\n\006region\030\001 \001(\r\022\016\n\006nod"
  "eId\030\002 \001(\r\"\260\001\n\013MapLocation\0221\n\006nodeId\030\001 \001("
  "\0132!.cn.seisys.v2x.pb.NodeReferenceId\022\020\n\010"
  "linkName\030\002 \001(\t\0229\n\016upstreamNodeId\030\003 \001(\0132!"
  ".cn.seisys.v2x.pb.NodeReferenceId\022\021\n\tsec"
  "tionId\030\004 \001(\r\022\016\n\006laneId\030\005 \001(\r\"\032\n\007PhaseId\022"
  "\017\n\007phaseId\030\001 \001(\r\"(\n\016ReferenceLanes\022\026\n\016re"
  "ferenceLanes\030\001 \001(\r\"U\n\rReferencePath\0220\n\na"
  "ctivePath\030\001 \003(\0132\034.cn.seisys.v2x.pb.Posit"
  "ion3D\022\022\n\npathRadius\030\002 \001(\r\"\301\001\n\rReferenceL"
  "ink\0229\n\016upstreamNodeId\030\001 \001(\0132!.cn.seisys."
  "v2x.pb.NodeReferenceId\022;\n\020downstreamNode"
  "Id\030\002 \001(\0132!.cn.seisys.v2x.pb.NodeReferenc"
  "eId\0228\n\016referenceLanes\030\003 \001(\0132 .cn.seisys."
  "v2x.pb.ReferenceLanes\"%\n\020AllowedManeuver"
  "s\022\021\n\tmaneuvers\030\001 \001(\r\"\237\001\n\014LaneStatInfo\022\016\n"
  "\006laneId\030\001 \001(\r\0224\n\014linkStatInfo\030\002 \001(\0132\036.cn"
  ".seisys.v2x.pb.LinkStatInfo\022:\n\017sectionSt"
  "atInfo\030\003 \001(\0132!.cn.seisys.v2x.pb.SectionS"
  "tatInfo\022\r\n\005extId\030\004 \001(\t\"i\n\017SectionStatInf"
  "o\022\021\n\tsectionId\030\001 \001(\r\0224\n\014linkStatInfo\030\002 \001"
  "(\0132\036.cn.seisys.v2x.pb.LinkStatInfo\022\r\n\005ex"
  "tId\030\003 \001(\t\"\234\001\n\014LinkStatInfo\0229\n\016upstreamNo"
  "deId\030\001 \001(\0132!.cn.seisys.v2x.pb.NodeRefere"
  "nceId\022\014\n\004name\030\002 \001(\t\0224\n\014nodeStatInfo\030\003 \001("
  "\0132\036.cn.seisys.v2x.pb.NodeStatInfo\022\r\n\005ext"
  "Id\030\004 \001(\t\"A\n\014NodeStatInfo\0221\n\006nodeId\030\001 \001(\013"
  "2!.cn.seisys.v2x.pb.NodeReferenceId\"\311\001\n\020"
  "MovementStatInfo\022=\n\022remoteIntersection\030\001"
  " \001(\0132!.cn.seisys.v2x.pb.NodeReferenceId\022"
  "1\n\rturnDirection\030\002 \001(\0162\032.cn.seisys.v2x.p"
  "b.Maneuver\0224\n\014nodeStatInfo\030\003 \001(\0132\036.cn.se"
  "isys.v2x.pb.NodeStatInfo\022\r\n\005extId\030\004 \001(\t\""
  "-\n\031TrafficFlowStatByInterval\022\020\n\010interval"
  "\030\001 \001(\r\"_\n\034TrafficFlowStatBySignalCycle\022\026"
  "\n\016cycleStartTime\030\001 \001(\004\022\024\n\014cycleEndTime\030\002"
  " \001(\004\022\021\n\tcycleTime\030\003 \001(\r\"\226\001\n\023TrafficFlowS"
  "tatType\022=\n\010interval\030\001 \001(\0132+.cn.seisys.v2"
  "x.pb.TrafficFlowStatByInterval\022@\n\010sequen"
  "ce\030\002 \001(\0132..cn.seisys.v2x.pb.TrafficFlowS"
  "tatBySignalCycle\"\233\003\n\031TrafficFlowStatMapE"
  "lement\0226\n\014detectorArea\030\001 \001(\0132\036.cn.seisys"
  ".v2x.pb.DetectorAreaH\000\0226\n\014laneStatInfo\030\002"
  " \001(\0132\036.cn.seisys.v2x.pb.LaneStatInfoH\000\022<"
  "\n\017sectionStatInfo\030\003 \001(\0132!.cn.seisys.v2x."
  "pb.SectionStatInfoH\000\0226\n\014linkStatInfo\030\004 \001"
  "(\0132\036.cn.seisys.v2x.pb.LinkStatInfoH\000\0226\n\014"
  "nodeStatInfo\030\005 \001(\0132\036.cn.seisys.v2x.pb.No"
  "deStatInfoH\000\022>\n\020movementStatInfo\030\006 \001(\0132\""
  ".cn.seisys.v2x.pb.MovementStatInfoH\000B \n\036"
  "TrafficFlowStatMapElementOneOf\"\267\001\n\016LaneI"
  "ndexAdded\022\021\n\ttimestamp\030\001 \001(\004\022\024\n\014laneCapa"
  "city\030\002 \001(\r\022\026\n\016laneSaturation\030\003 \001(\r\022\027\n\017la"
  "neSpaceOccupy\030\004 \001(\r\022\026\n\016laneTimeOccupy\030\005 "
  "\001(\r\022\027\n\017laneAvgGrnQueue\030\006 \001(\r\022\032\n\022laneGrnU"
  "tilization\030\007 \001(\r\"\267\001\n\016LinkIndexAdded\022\021\n\tt"
  "imestamp\030\001 \001(\004\022\024\n\014linkCapacity\030\002 \001(\r\022\026\n\016"
  "linkSaturation\030\003 \001(\r\022\027\n\017linkSpaceOccupy\030"
  "\004 \001(\r\022\026\n\016linkTimeOccupy\030\005 \001(\r\022\027\n\017linkAvg"
  "GrnQueue\030\006 \001(\r\022\032\n\022linkGrnUtilization\030\007 \001"
  "(\r\"\323\001\n\022MovementIndexAdded\022\021\n\ttimestamp\030\001"
  " \001(\004\022\030\n\020movementCapacity\030\002 \001(\r\022\032\n\022moveme"
  "ntSaturation\030\003 \001(\r\022\033\n\023movementSpaceOccup"
  "y\030\004 \001(\r\022\032\n\022movementTimeOccupy\030\005 \001(\r\022\033\n\023m"
  "ovementAvgGrnQueue\030\006 \001(\r\022\036\n\026movementGrnU"
  "tilization\030\007 \001(\r\"\366\001\n\016NodeIndexAdded\022\021\n\tt"
  "imestamp\030\001 \001(\004\022\027\n\017nodeSpaceOccupy\030\002 \001(\r\022"
  "\026\n\016nodeTimeOccupy\030\003 \001(\r\022\024\n\014nodeCapacity\030"
  "\004 \001(\004\022\026\n\016nodeSaturation\030\005 \001(\r\022\032\n\022nodeGrn"
  "Utilization\030\006 \001(\r\022\027\n\017nodeAvgGrnQueue\030\007 \001"
  "(\r\022\023\n\013demandIndex\030\010 \001(\r\022\023\n\013supplyIndex\030\t"
  " \001(\r\022\023\n\013theoryIndex\030\n \001(\r\"t\n\027SignalContr"
  "olIndexAdded\022\017\n\007phaseId\030\001 \001(\r\022\027\n\017greenSt"
  "artQueue\030\002 \001(\r\022\025\n\rredStartQueue\030\003 \001(\r\022\030\n"
  "\020greenUtilization\030\004 \001(\r\"\262\002\n\024TrafficFlowE"
  "xtension\0223\n\tlaneIndex\030\001 \003(\0132 .cn.seisys."
  "v2x.pb.LaneIndexAdded\0223\n\tlinkIndex\030\002 \003(\013"
  "2 .cn.seisys.v2x.pb.LinkIndexAdded\022;\n\rmo"
  "vementIndex\030\003 \003(\0132$.cn.seisys.v2x.pb.Mov"
  "ementIndexAdded\0223\n\tnodeIndex\030\004 \003(\0132 .cn."
  "seisys.v2x.pb.NodeIndexAdded\022>\n\013signalIn"
  "dex\030\005 \003(\0132).cn.seisys.v2x.pb.SignalContr"
  "olIndexAdded\"\260\004\n\017TrafficFlowStat\022\?\n\nmapE"
  "lement\030\001 \001(\0132+.cn.seisys.v2x.pb.TrafficF"
  "lowStatMapElement\0228\n\016mapElementType\030\002 \001("
  "\0162 .cn.seisys.v2x.pb.MapElementType\0222\n\007p"
  "tcType\030\003 \001(\0162!.cn.seisys.v2x.pb.Particip"
  "antType\0222\n\013vehicleType\030\004 \001(\0162\035.cn.seisys"
  ".v2x.pb.VehicleType\022\021\n\ttimestamp\030\005 \001(\004\022\016"
  "\n\006volume\030\006 \001(\r\022\022\n\nspeedPoint\030\007 \001(\r\022\021\n\tsp"
  "eedArea\030\010 \001(\r\022\017\n\007density\030\t \001(\r\022\022\n\ntravel"
  "Time\030\n \001(\r\022\r\n\005delay\030\013 \001(\r\022\023\n\013queueLength"
  "\030\014 \001(\r\022\020\n\010queueInt\030\r \001(\r\022\022\n\ncongestion\030\016"
  " \001(\r\022D\n\024trafficFlowExtension\030\017 \001(\0132&.cn."
  "seisys.v2x.pb.TrafficFlowExtension\022\023\n\013ti"
  "meHeadway\030\020 \001(\r\022\024\n\014spaceHeadway\030\021 \001(\r\022\020\n"
  "\010stopNums\030\022 \001(\r\"\274\001\n\013TrafficFlow\0221\n\006nodeI"
  "d\030\001 \001(\0132!.cn.seisys.v2x.pb.NodeReference"
  "Id\022\017\n\007genTime\030\002 \001(\004\0227\n\010statType\030\003 \001(\0132%."
  "cn.seisys.v2x.pb.TrafficFlowStatType\0220\n\005"
  "stats\030\004 \003(\0132!.cn.seisys.v2x.pb.TrafficFl"
  "owStat\"\313\001\n\020TimeCountingDown\022\021\n\tstartTime"
  "\030\001 \001(\r\022\022\n\nminEndTime\030\002 \001(\r\022\022\n\nmaxEndTime"
  "\030\003 \001(\r\022\025\n\rlikelyEndTime\030\004 \001(\r\0228\n\016timeCon"
  "fidence\030\005 \001(\0162 .cn.seisys.v2x.pb.TimeCon"
  "fidence\022\025\n\rnextStartTime\030\006 \001(\r\022\024\n\014nextDu"
  "ration\030\007 \001(\r\"\204\003\n\nPhaseState\0226\n\005light\030\001 \001"
  "(\0162\'.cn.seisys.v2x.pb.PhaseState.LightSt"
  "ate\0222\n\006timing\030\002 \001(\0132\".cn.seisys.v2x.pb.T"
  "imeCountingDown\"\211\002\n\nLightState\022\027\n\023LIGHT_"
  "STATE_UNKNOWN\020\000\022\024\n\020LIGHT_STATE_DARK\020\001\022\034\n"
  "\030LIGHT_STATE_FLASHING_RED\020\002\022\023\n\017LIGHT_STA"
  "TE_RED\020\003\022\036\n\032LIGHT_STATE_FLASHING_GREEN\020\004"
  "\022 \n\034LIGHT_STATE_PERMISSIVE_GREEN\020\005\022\036\n\032LI"
  "GHT_STATE_PROTETED_GREEN\020\006\022\026\n\022LIGHT_STAT"
  "E_YELLOW\020\007\022\037\n\033LIGHT_STATE_FLASHING_YELLO"
  "W\020\010\"F\n\005Phase\022\n\n\002id\030\001 \001(\r\0221\n\013phaseStates\030"
  "\002 \003(\0132\034.cn.seisys.v2x.pb.PhaseState\"\324\001\n\021"
  "IntersectionState\0229\n\016intersectionId\030\001 \001("
  "\0132!.cn.seisys.v2x.pb.NodeReferenceId\022\016\n\006"
  "status\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\004\0228\n\016timeC"
  "onfidence\030\004 \001(\0162 .cn.seisys.v2x.pb.TimeC"
  "onfidence\022\'\n\006phases\030\005 \003(\0132\027.cn.seisys.v2"
  "x.pb.Phase\"i\n\010SpatData\022\016\n\006msgCnt\030\001 \001(\r\022\021"
  "\n\ttimestamp\030\002 \001(\004\022:\n\rintersections\030\003 \003(\013"
  "2#.cn.seisys.v2x.pb.IntersectionState\"4\n"
  "\016LocalTimePoint\022\n\n\002hh\030\001 \001(\005\022\n\n\002mm\030\002 \001(\005\022"
  "\n\n\002ss\030\003 \001(\005\"\301\001\n\020PeriodictimeSpan\022\023\n\013mont"
  "hFilter\030\001 \001(\005\022\021\n\tdayFilter\030\002 \001(\005\022\025\n\rweek"
  "dayFilter\030\003 \001(\005\0227\n\rfromTimePoint\030\004 \001(\0132 "
  ".cn.seisys.v2x.pb.LocalTimePoint\0225\n\013toTi"
  "mePoint\030\005 \001(\0132 .cn.seisys.v2x.pb.LocalTi"
  "mePoint\"4\n\016SingleTimeSpan\022\021\n\tstartTime\030\001"
  " \001(\004\022\017\n\007endTime\030\002 \001(\004\"\221\001\n\rOptimTimeType\022"
  "2\n\006single\030\001 \001(\0132 .cn.seisys.v2x.pb.Singl"
  "eTimeSpanH\000\0226\n\010periodic\030\002 \001(\0132\".cn.seisy"
  "s.v2x.pb.PeriodictimeSpanH\000B\024\n\022OptimTime"
  "TypeOneOf\"\217\001\n\nMovementEx\022=\n\022remoteInters"
  "ection\030\001 \001(\0132!.cn.seisys.v2x.pb.NodeRefe"
  "renceId\022\017\n\007phaseId\030\002 \001(\r\0221\n\rturnDirectio"
  "n\030\003 \001(\0162\032.cn.seisys.v2x.pb.Maneuver\"\326\001\n\n"
  "OptimPhase\022\017\n\007phaseId\030\001 \001(\r\022\r\n\005order\030\002 \001"
  "(\r\0220\n\nmovementId\030\003 \003(\0132\034.cn.seisys.v2x.p"
  "b.MovementEx\022\021\n\tphaseTime\030\004 \001(\r\022\r\n\005green"
  "\030\005 \001(\r\022\027\n\017phaseYellowTime\030\006 \001(\r\022\027\n\017phase"
  "AllRedTime\030\007 \001(\r\022\020\n\010minGreen\030\010 \001(\r\022\020\n\010ma"
  "xGreen\030\t \001(\r\"\340\001\n\tOptimData\0226\n\roptimTimeT"
  "ype\030\001 \001(\0132\037.cn.seisys.v2x.pb.OptimTimeTy"
  "pe\022\026\n\016optimCycleTime\030\002 \001(\r\022\024\n\014minCycleTi"
  "me\030\003 \001(\r\022\024\n\014maxCycleTime\030\004 \001(\r\0224\n\016optimP"
  "haseList\030\005 \003(\0132\034.cn.seisys.v2x.pb.OptimP"
  "hase\022\021\n\tcoorPhase\030\006 \001(\t\022\016\n\006offset\030\007 \001(\r\""
  "\233\001\n\014SignalScheme\0221\n\006nodeId\030\001 \001(\0132!.cn.se"
  "isys.v2x.pb.NodeReferenceId\022\021\n\toptimType"
  "\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\004\0222\n\roptimDataLi"
  "st\030\004 \003(\0132\033.cn.seisys.v2x.pb.OptimData\"\371\007"
  "\n\021BrakeSystemStatus\022H\n\nbrakePadel\030\001 \001(\0162"
  "4.cn.seisys.v2x.pb.BrakeSystemStatus.Bra"
  "kePedalStatus\022\023\n\013wheelBrakes\030\002 \001(\r\022K\n\010tr"
  "action\030\003 \001(\01629.cn.seisys.v2x.pb.BrakeSys"
  "temStatus.TractionControlStatus\022D\n\003abs\030\004"
  " \001(\01627.cn.seisys.v2x.pb.BrakeSystemStatu"
  "s.AntiLockBrakeStatus\022G\n\003scs\030\005 \001(\0162:.cn."
  "seisys.v2x.pb.BrakeSystemStatus.Stabilit"
  "yControlStatus\022I\n\nbrakeBoost\030\006 \001(\01625.cn."
  "seisys.v2x.pb.BrakeSystemStatus.BrakeBoo"
  "stApplied\022K\n\tauxBrakes\030\007 \001(\01628.cn.seisys"
  ".v2x.pb.BrakeSystemStatus.AuxiliaryBrake"
  "Status\022\024\n\014brakeControl\030\010 \001(\r\"F\n\020BrakePed"
  "alStatus\022\025\n\021UNAVAILABLE_PEDAL\020\000\022\r\n\tOFF_P"
  "EDAL\020\001\022\014\n\010ON_PEDAL\020\002\"j\n\025TractionControlS"
  "tatus\022\030\n\024UNAVAILABLE_TRACTION\020\000\022\020\n\014OFF_T"
  "RACTION\020\001\022\017\n\013ON_TRACTION\020\002\022\024\n\020ENGAGED_TR"
  "ACTION\020\003\"T\n\023AntiLockBrakeStatus\022\023\n\017UNAVA"
  "ILABLE_ABS\020\000\022\013\n\007OFF_ABS\020\001\022\n\n\006ON_ABS\020\002\022\017\n"
  "\013ENGAGED_ABS\020\003\"W\n\026StabilityControlStatus"
  "\022\023\n\017UNAVAILABLE_SCS\020\000\022\013\n\007OFF_SCS\020\001\022\n\n\006ON"
  "_SCS\020\002\022\017\n\013ENGAGED_SCS\020\003\"A\n\021BrakeBoostApp"
  "lied\022\023\n\017UNAVAILABLE_BBA\020\000\022\013\n\007OFF_BBA\020\001\022\n"
  "\n\006ON_BBA\020\002\"U\n\024AuxiliaryBrakeStatus\022\023\n\017UN"
  "AVAILABLE_AUX\020\000\022\013\n\007OFF_AUX\020\001\022\n\n\006ON_AUX\020\002"
  "\022\017\n\013ENGAGED_AUX\020\003\"M\n\020PositionAccuracy\022\021\n"
  "\tsemiMajor\030\001 \001(\005\022\021\n\tsemiMinor\030\002 \001(\005\022\023\n\013o"
  "rientation\030\003 \001(\005\"\331\001\n\024ThrottleSystemStatu"
  "s\022\027\n\017thorttleControl\030\001 \001(\r\022Q\n\rthrottlePa"
  "del\030\002 \001(\0162:.cn.seisys.v2x.pb.ThrottleSys"
  "temStatus.ThrottlePedalStauts\022\026\n\016wheelTh"
  "rottles\030\003 \001(\005\"=\n\023ThrottlePedalStauts\022\025\n\021"
  "UNAVAILABLE_PEDAL\020\000\022\007\n\003OFF\020\001\022\006\n\002ON\020\002\"\342\014\n"
  "\007BsmData\022\r\n\005obuId\030\001 \001(\t\022\017\n\007plateNo\030\002 \001(\t"
  "\022\021\n\ttimestamp\030\003 \001(\004\022)\n\003pos\030\004 \001(\0132\034.cn.se"
  "isys.v2x.pb.Position3D\022:\n\tposConfid\030\005 \001("
  "\0132\'.cn.seisys.v2x.pb.PositionConfidenceS"
  "et\0227\n\013posAccuracy\030\006 \001(\0132\".cn.seisys.v2x."
  "pb.PositionAccuracy\022;\n\014acceleration\030\007 \001("
  "\0132%.cn.seisys.v2x.pb.AccelerationSet4Way"
  "\022A\n\014transmission\030\010 \001(\0162+.cn.seisys.v2x.p"
  "b.BsmData.TransmissionState\022\r\n\005speed\030\t \001"
  "(\r\022\017\n\007heading\030\n \001(\r\022\032\n\022steeringWheelAngl"
  "e\030\013 \001(\005\022;\n\014motionConfid\030\014 \001(\0132%.cn.seisy"
  "s.v2x.pb.MotionConfidenceSet\0223\n\006brakes\030\r"
  " \001(\0132#.cn.seisys.v2x.pb.BrakeSystemStatu"
  "s\0228\n\010throttle\030\016 \001(\0132&.cn.seisys.v2x.pb.T"
  "hrottleSystemStatus\022+\n\004size\030\017 \001(\0132\035.cn.s"
  "eisys.v2x.pb.VehicleSize\0222\n\013vehicleType\030"
  "\020 \001(\0162\035.cn.seisys.v2x.pb.VehicleType\022;\n\010"
  "fuelType\030\021 \001(\0162).cn.seisys.v2x.pb.BsmDat"
  "a.VehicleFuelType\022C\n\024driveModedriveStatu"
  "s\030\022 \001(\0162%.cn.seisys.v2x.pb.BsmData.Drive"
  "Status\022A\n\017emergencyStatus\030\023 \001(\0162(.cn.sei"
  "sys.v2x.pb.BsmData.EmergenyStatus\022\r\n\005lig"
  "ht\030\024 \001(\r\022.\n\005wiper\030\025 \001(\0162\037.cn.seisys.v2x."
  "pb.BsmData.Wiper\022<\n\014outofControl\030\026 \001(\0162&"
  ".cn.seisys.v2x.pb.BsmData.OutofControl\022\021"
  "\n\tendurance\030\027 \001(\r\"\366\001\n\021TransmissionState\022"
  "\030\n\024TRANSMISSION_NEUTRAL\020\000\022\025\n\021TRANSMISSIO"
  "N_PARK\020\001\022\036\n\032TRANSMISSION_FORWARD_GEARS\020\002"
  "\022\036\n\032TRANSMISSION_REVERSE_GEARS\020\003\022\032\n\026TRAN"
  "SMISSION_RESERVED1\020\004\022\032\n\026TRANSMISSION_RES"
  "ERVED2\020\005\022\032\n\026TRANSMISSION_RESERVED3\020\006\022\034\n\030"
  "TRANSMISSION_UNAVAILABLE\020\007\"\255\001\n\017VehicleFu"
  "elType\022\034\n\030VEHICLE_TUEL_UNKNOWNFUEL\020\000\022\014\n\010"
  "GASOLINE\020\001\022\013\n\007ETHANOL\020\002\022\n\n\006DIESEL\020\003\022\014\n\010E"
  "LECTRIC\020\004\022\n\n\006HYBRID\020\005\022\014\n\010HYDROGEN\020\006\022\020\n\014N"
  "ATGASLIQUID\020\007\022\016\n\nNATGASCOMP\020\010\022\013\n\007PROPANE"
  "\020\t\"6\n\013DriveStatus\022\r\n\tAUTOPILOT\020\000\022\n\n\006MANU"
  "AL\020\001\022\014\n\010SECURITY\020\002\"+\n\016EmergenyStatus\022\013\n\007"
  "NO_EMER\020\000\022\014\n\010YES_EMER\020\001\")\n\005Wiper\022\007\n\003OFF\020"
  "\000\022\007\n\003INT\020\001\022\006\n\002LO\020\002\022\006\n\002HI\020\003\"-\n\014OutofContr"
  "ol\022\r\n\tNO_OUTCON\020\000\022\016\n\nYES_OUTCON\020\001\"\255\001\n\020Pa"
  "thHistoryPoint\022)\n\003pos\030\001 \001(\0132\034.cn.seisys."
  "v2x.pb.Position3D\022\022\n\ntimeOffset\030\002 \001(\r\022\r\n"
  "\005speed\030\003 \001(\r\022:\n\tposConfid\030\004 \001(\0132\'.cn.sei"
  "sys.v2x.pb.PositionConfidenceSet\022\017\n\007head"
  "ing\030\005 \001(\r\"\361\r\n\017ParticipantData\022\r\n\005ptcId\030\001"
  " \001(\004\0222\n\007ptcType\030\002 \001(\0162!.cn.seisys.v2x.pb"
  ".ParticipantType\0220\n\ndataSource\030\003 \001(\0162\034.c"
  "n.seisys.v2x.pb.DataSource\022\024\n\014deviceIdLi"
  "st\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\004\0228\n\016timeConfi"
  "dence\030\006 \001(\0162 .cn.seisys.v2x.pb.TimeConfi"
  "dence\022,\n\006ptcPos\030\007 \001(\0132\034.cn.seisys.v2x.pb"
  ".Position3D\0222\n\013mapLocation\030\010 \001(\0132\035.cn.se"
  "isys.v2x.pb.MapLocation\022:\n\tposConfid\030\t \001"
  "(\0132\'.cn.seisys.v2x.pb.PositionConfidence"
  "Set\022\r\n\005speed\030\n \001(\r\022\017\n\007heading\030\013 \001(\r\022;\n\014m"
  "otionConfid\030\014 \001(\0132%.cn.seisys.v2x.pb.Mot"
  "ionConfidenceSet\0227\n\010accelSet\030\r \001(\0132%.cn."
  "seisys.v2x.pb.AccelerationSet4Way\022D\n\022acc"
  "elerationConfid\030\016 \001(\0132(.cn.seisys.v2x.pb"
  ".AccelerationConfidence\0222\n\007ptcSize\030\017 \001(\013"
  "2!.cn.seisys.v2x.pb.ParticipantSize\022\023\n\013v"
  "ehicleBand\030\020 \001(\t\0222\n\013vehicleType\030\021 \001(\0162\035."
  "cn.seisys.v2x.pb.VehicleType\022\017\n\007plateNo\030"
  "\022 \001(\t\022.\n\tplateType\030\023 \001(\0162\033.cn.seisys.v2x"
  ".pb.PlateType\022@\n\nplateColor\030\024 \001(\0162,.cn.s"
  "eisys.v2x.pb.ParticipantData.PlateColor\022"
  "D\n\014vehicleColor\030\025 \001(\0162..cn.seisys.v2x.pb"
  ".ParticipantData.VehicleColor\022B\n\rptcSize"
  "Confid\030\026 \001(\0132+.cn.seisys.v2x.pb.Particip"
  "antSizeConfidence\022H\n\nptcTypeExt\030\027 \001(\01624."
  "cn.seisys.v2x.pb.ParticipantData.Partici"
  "pantTypeExt\022\030\n\020ptcTypeExtConfid\030\030 \001(\r\022\026\n"
  "\016statusDuration\030\031 \001(\r\0227\n\013pathHistory\030\032 \003"
  "(\0132\".cn.seisys.v2x.pb.PathHistoryPoint\022\020"
  "\n\010tracking\030\033 \001(\r\022*\n\007polygon\030\034 \001(\0132\031.cn.s"
  "eisys.v2x.pb.Polygon\022\n\n\002id\030\035 \001(\004\"\233\001\n\nPla"
  "teColor\022\027\n\023UNKNOWN_PLATE_COLOR\020\000\022\016\n\nBLUE"
  "_PLATE\020\001\022\020\n\014YELLOW_PLATE\020\002\022\017\n\013WHITE_PLAT"
  "E\020\003\022\017\n\013BLACK_PLATE\020\004\022\026\n\022YELLOW_GREEN_PLA"
  "TE\020\005\022\030\n\024GRADIENT_GREEN_PLATE\020\006\"\237\001\n\014Vehic"
  "leColor\022\031\n\025UNKNOWN_VEHICEL_COLOR\020\000\022\t\n\005WH"
  "ITE\020\001\022\010\n\004GRAY\020\002\022\n\n\006YELLOW\020\003\022\010\n\004PINK\020\004\022\007\n"
  "\003RED\020\005\022\t\n\005GREEN\020\006\022\010\n\004BLUE\020\007\022\t\n\005BROWN\020\010\022\t"
  "\n\005BLACK\020\t\022\n\n\006PURPLE\020\n\022\t\n\005OTHER\020\013\"\302\001\n\022Par"
  "ticipantTypeExt\022\033\n\027UNKNOWN_OBJECT_TYPE_E"
  "XT\020\000\022\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNM"
  "OVABLE\020\002\022\007\n\003CAR\020\003\022\007\n\003VAN\020\004\022\t\n\005TRUCK\020\005\022\007\n"
  "\003BUS\020\006\022\013\n\007CYCLIST\020\007\022\020\n\014MOTORCYCLIST\020\010\022\016\n"
  "\nTRICYCLIST\020\t\022\016\n\nPEDESTRIAN\020\n\"\365\005\n\014Obstac"
  "leData\022\r\n\005obsId\030\001 \001(\004\0220\n\007obsType\030\002 \001(\0162\037"
  ".cn.seisys.v2x.pb.ObstaclesType\022\022\n\nobsty"
  "peCfd\030\003 \001(\r\022/\n\tobsSource\030\004 \001(\0162\034.cn.seis"
  "ys.v2x.pb.DataSource\022\021\n\ttimestamp\030\005 \001(\004\022"
  "\024\n\014deviceIdList\030\006 \001(\t\022,\n\006obsPos\030\007 \001(\0132\034."
  "cn.seisys.v2x.pb.Position3D\022:\n\tposConfid"
  "\030\010 \001(\0132\'.cn.seisys.v2x.pb.PositionConfid"
  "enceSet\0222\n\013mapLocation\030\t \001(\0132\035.cn.seisys"
  ".v2x.pb.MapLocation\022\r\n\005speed\030\n \001(\r\022\017\n\007he"
  "ading\030\013 \001(\r\022;\n\014motionConfid\030\014 \001(\0132%.cn.s"
  "eisys.v2x.pb.MotionConfidenceSet\022\020\n\010verS"
  "peed\030\r \001(\r\0229\n\016verSpeedConfid\030\016 \001(\0162!.cn."
  "seisys.v2x.pb.SpeedConfidence\022;\n\014acceler"
  "ation\030\017 \001(\0132%.cn.seisys.v2x.pb.Accelerat"
  "ionSet4Way\022/\n\004size\030\020 \001(\0132!.cn.seisys.v2x"
  ".pb.ParticipantSize\022B\n\robsSizeConfid\030\021 \001"
  "(\0132+.cn.seisys.v2x.pb.ParticipantSizeCon"
  "fidence\022\020\n\010tracking\030\022 \001(\r\022*\n\007polygon\030\023 \001"
  "(\0132\031.cn.seisys.v2x.pb.Polygon\"\212\001\n\nObjIdV"
  "alue\022\r\n\005ptcId\030\001 \001(\004\022\r\n\005obsId\030\002 \001(\004\022/\n\004ro"
  "le\030\003 \001(\0162!.cn.seisys.v2x.pb.ObjIdValue.R"
  "ole\"-\n\004Role\022\n\n\006ACTIVE\020\000\022\013\n\007PASSIVE\020\001\022\014\n\010"
  "NOTCLEAR\020\002\"\233\006\n\007RteData\022\r\n\005rteId\030\001 \001(\r\022\017\n"
  "\007rteType\030\002 \001(\r\022\023\n\013description\030\003 \001(\t\022:\n\013e"
  "ventSource\030\004 \001(\0162%.cn.seisys.v2x.pb.RteD"
  "ata.EventSource\0220\n\ndataSource\030\005 \001(\0162\034.cn"
  ".seisys.v2x.pb.DataSource\022\024\n\014deviceIdLis"
  "t\030\006 \001(\t\022,\n\006rtePos\030\007 \001(\0132\034.cn.seisys.v2x."
  "pb.Position3D\0222\n\013mapLocation\030\010 \001(\0132\035.cn."
  "seisys.v2x.pb.MapLocation\022\023\n\013eventRadius"
  "\030\t \001(\r\0225\n\013timeDetails\030\n \001(\0132 .cn.seisys."
  "v2x.pb.RsiTimeDetails\022\020\n\010priority\030\013 \001(\t\022"
  "6\n\rreferencePath\030\014 \003(\0132\037.cn.seisys.v2x.p"
  "b.ReferencePath\0227\n\016referenceLinks\030\r \003(\0132"
  "\037.cn.seisys.v2x.pb.ReferenceLink\0220\n\neven"
  "tObjId\030\016 \003(\0132\034.cn.seisys.v2x.pb.ObjIdVal"
  "ue\022\023\n\013eventConfid\030\017 \001(\005\022\023\n\013eventImages\030\020"
  " \001(\t\022\023\n\013eventVideos\030\021 \001(\t\022\021\n\tsessionId\030\022"
  " \001(\004\022\n\n\002id\030\023 \001(\004\"\225\001\n\013EventSource\022\030\n\024UNKN"
  "OWN_EVENT_SOURCE\020\000\022\022\n\016TRAFFIC_POLICE\020\001\022\r"
  "\n\tGOVENMENT\020\002\022\035\n\031METEOROLOGICAL_DEPARTME"
  "NT\020\003\022\025\n\021INTERNET_SERVICES\020\004\022\023\n\017LOCAL_DET"
  "ECTION\020\005\"\206\003\n\007RtsData\022\r\n\005rtsId\030\001 \001(\005\022\017\n\007r"
  "tsType\030\002 \001(\005\0220\n\ndataSource\030\003 \001(\0162\034.cn.se"
  "isys.v2x.pb.DataSource\022\020\n\010priority\030\004 \001(\t"
  "\022,\n\006rtsPos\030\005 \001(\0132\034.cn.seisys.v2x.pb.Posi"
  "tion3D\0225\n\013timeDetails\030\006 \001(\0132 .cn.seisys."
  "v2x.pb.RsiTimeDetails\022\023\n\013description\030\007 \001"
  "(\t\0224\n\013refPathList\030\010 \003(\0132\037.cn.seisys.v2x."
  "pb.ReferencePath\0224\n\013refLinkList\030\t \003(\0132\037."
  "cn.seisys.v2x.pb.ReferenceLink\022\022\n\npathRa"
  "dius\030\n \001(\r\022\021\n\tsessionId\030\013 \001(\004\022\n\n\002id\030\014 \001("
  "\004\"U\n\016ConnectingLane\022\014\n\004lane\030\001 \001(\r\0225\n\tman"
  "euvers\030\002 \001(\0132\".cn.seisys.v2x.pb.AllowedM"
  "aneuvers\"\226\001\n\nConnection\022=\n\022remoteInterse"
  "ction\030\001 \001(\0132!.cn.seisys.v2x.pb.NodeRefer"
  "enceId\0228\n\016connectingLane\030\002 \001(\0132 .cn.seis"
  "ys.v2x.pb.ConnectingLane\022\017\n\007phaseId\030\003 \001("
  "\r\"8\n\025LaneAttributesParking\022\037\n\027parkingAnd"
  "StoppingLanes\030\001 \001(\r\"7\n\027LaneAttributesCro"
  "sswalk\022\034\n\024pedestrianCrosswalks\030\001 \001(\r\"\'\n\022"
  "LaneAttributesBike\022\021\n\tbikeLanes\030\001 \001(\r\"9\n"
  "\026LaneAttributesSidewalk\022\037\n\027pedestrianSid"
  "ewalkPaths\030\001 \001(\r\"6\n\025LaneAttributesBarrie"
  "r\022\035\n\025mediansChannelization\030\001 \001(\r\"1\n\026Lane"
  "AttributesStriping\022\027\n\017roadwayMarkings\030\001 "
  "\001(\r\"9\n\034LaneAttributesTrackedVehicle\022\031\n\021t"
  "rainsAndTrolleys\030\001 \001(\r\"2\n\025LaneAttributes"
  "Vehicle\022\031\n\021motorVehicleLanes\030\001 \001(\r\"\360\004\n\022L"
  "aneTypeAttributes\022D\n\021motorVehicleLanes\030\001"
  " \001(\0132\'.cn.seisys.v2x.pb.LaneAttributesVe"
  "hicleH\000\022I\n\024pedestrianCrosswalks\030\002 \001(\0132)."
  "cn.seisys.v2x.pb.LaneAttributesCrosswalk"
  "H\000\0229\n\tbikeLanes\030\003 \001(\0132$.cn.seisys.v2x.pb"
  ".LaneAttributesBikeH\000\022K\n\027pedestrianSidew"
  "alkPaths\030\004 \001(\0132(.cn.seisys.v2x.pb.LaneAt"
  "tributesSidewalkH\000\022H\n\025mediansChannelizat"
  "ion\030\005 \001(\0132\'.cn.seisys.v2x.pb.LaneAttribu"
  "tesBarrierH\000\022C\n\017roadwayMarkings\030\006 \001(\0132(."
  "cn.seisys.v2x.pb.LaneAttributesStripingH"
  "\000\022K\n\021trainsAndTrolleys\030\007 \001(\0132..cn.seisys"
  ".v2x.pb.LaneAttributesTrackedVehicleH\000\022J"
  "\n\027parkingAndStoppingLanes\030\010 \001(\0132\'.cn.sei"
  "sys.v2x.pb.LaneAttributesParkingH\000B\031\n\027La"
  "neTypeAttributesOneOf\" \n\013LaneSharing\022\021\n\t"
  "shareWith\030\001 \001(\r\"Q\n\010LaneType\022\020\n\010choiceId\030"
  "\001 \001(\r\0223\n\005value\030\002 \001(\0132$.cn.seisys.v2x.pb."
  "LaneTypeAttributes\"p\n\016LaneAttributes\0220\n\t"
  "shareWith\030\001 \001(\0132\035.cn.seisys.v2x.pb.LaneS"
  "haring\022,\n\010laneType\030\002 \001(\0132\032.cn.seisys.v2x"
  ".pb.LaneType\"b\n\014LaneBoundary\022\030\n\020laneBoun"
  "daryType\030\001 \001(\r\0228\n\022laneBoundaryPoints\030\002 \003"
  "(\0132\034.cn.seisys.v2x.pb.Position3D\"\244\003\n\004Lan"
  "e\022\016\n\006laneId\030\001 \001(\r\022\021\n\tlaneWidth\030\002 \001(\r\0228\n\016"
  "laneAttributes\030\003 \001(\0132 .cn.seisys.v2x.pb."
  "LaneAttributes\0225\n\tmaneuvers\030\004 \001(\0132\".cn.s"
  "eisys.v2x.pb.AllowedManeuvers\0220\n\nconnect"
  "sTo\030\005 \003(\0132\034.cn.seisys.v2x.pb.Connection\022"
  ";\n\013speedLimits\030\006 \003(\0132&.cn.seisys.v2x.pb."
  "RegulatorySpeedLimit\022,\n\006points\030\007 \003(\0132\034.c"
  "n.seisys.v2x.pb.Position3D\0224\n\014leftBounda"
  "ry\030\010 \003(\0132\036.cn.seisys.v2x.pb.LaneBoundary"
  "\0225\n\rrightBoundary\030\t \003(\0132\036.cn.seisys.v2x."
  "pb.LaneBoundary\"\210\001\n\021SignalWaitingLane\022\021\n"
  "\tlaneWidth\030\001 \001(\005\022,\n\006points\030\002 \001(\0132\034.cn.se"
  "isys.v2x.pb.Position3D\0222\n\017allowedPhaseId"
  "s\030\003 \003(\0132\031.cn.seisys.v2x.pb.PhaseId\"\266\001\n\020C"
  "onnectingLaneEx\022\025\n\rtargetSection\030\001 \001(\005\022\022"
  "\n\ntargetLane\030\002 \001(\005\022\033\n\023connectingLaneWidt"
  "h\030\003 \001(\005\022:\n\024connectingLanePoints\030\004 \001(\0132\034."
  "cn.seisys.v2x.pb.Position3D\022\036\n\026isolatedC"
  "onnectingLane\030\005 \001(\010\"\377\001\n\014ConnectionEx\022=\n\022"
  "remoteIntersection\030\001 \001(\0132!.cn.seisys.v2x"
  ".pb.NodeReferenceId\0220\n\003swl\030\002 \001(\0132#.cn.se"
  "isys.v2x.pb.SignalWaitingLane\022:\n\016connect"
  "ionLane\030\003 \003(\0132\".cn.seisys.v2x.pb.Connect"
  "ingLaneEx\022\017\n\007phaseId\030\004 \001(\r\0221\n\rturnDirect"
  "ion\030\005 \001(\0162\032.cn.seisys.v2x.pb.Maneuver\"\'\n"
  "\007STPoint\022\r\n\005sAxis\030\001 \001(\005\022\r\n\005tAxis\030\002 \001(\005\"\254"
  "\003\n\006LaneEx\022\021\n\tlaneRefId\030\001 \001(\005\022\021\n\tlaneWidt"
  "h\030\002 \001(\r\0228\n\016laneAttributes\030\003 \001(\0132 .cn.sei"
  "sys.v2x.pb.LaneAttributes\0225\n\tmaneuvers\030\004"
  " \001(\0132\".cn.seisys.v2x.pb.AllowedManeuvers"
  "\0224\n\014connectsToEx\030\005 \003(\0132\036.cn.seisys.v2x.p"
  "b.ConnectionEx\022;\n\013speedLimits\030\006 \003(\0132&.cn"
  ".seisys.v2x.pb.RegulatorySpeedLimit\022+\n\010s"
  "tPoints\030\007 \003(\0132\031.cn.seisys.v2x.pb.STPoint"
  "\0224\n\014leftBoundary\030\010 \003(\0132\036.cn.seisys.v2x.p"
  "b.LaneBoundary\0225\n\rrightBoundary\030\t \003(\0132\036."
  "cn.seisys.v2x.pb.LaneBoundary\"Z\n\010Movemen"
  "t\022=\n\022remoteIntersection\030\001 \001(\0132!.cn.seisy"
  "s.v2x.pb.NodeReferenceId\022\017\n\007phaseId\030\002 \001("
  "\r\"A\n\007Section\022\r\n\005SecId\030\001 \001(\r\022\'\n\005lanes\030\002 \003"
  "(\0132\030.cn.seisys.v2x.pb.LaneEx\"\260\002\n\006LinkEx\022"
  "\014\n\004name\030\001 \001(\t\0229\n\016upstreamNodeId\030\002 \001(\0132!."
  "cn.seisys.v2x.pb.NodeReferenceId\022;\n\013spee"
  "dLimits\030\003 \003(\0132&.cn.seisys.v2x.pb.Regulat"
  "orySpeedLimit\022\021\n\tlinkWidth\030\004 \001(\r\022-\n\007refL"
  "ine\030\005 \003(\0132\034.cn.seisys.v2x.pb.Position3D\022"
  "1\n\013movementsEx\030\006 \003(\0132\034.cn.seisys.v2x.pb."
  "MovementEx\022+\n\010sections\030\007 \003(\0132\031.cn.seisys"
  ".v2x.pb.Section\"\243\002\n\004Link\022\014\n\004name\030\001 \001(\t\0229"
  "\n\016upstreamNodeId\030\002 \001(\0132!.cn.seisys.v2x.p"
  "b.NodeReferenceId\022;\n\013speedLimits\030\003 \003(\0132&"
  ".cn.seisys.v2x.pb.RegulatorySpeedLimit\022\021"
  "\n\tlinkWidth\030\004 \001(\r\022,\n\006points\030\005 \003(\0132\034.cn.s"
  "eisys.v2x.pb.Position3D\022-\n\tmovements\030\006 \003"
  "(\0132\032.cn.seisys.v2x.pb.Movement\022%\n\005lanes\030"
  "\007 \003(\0132\026.cn.seisys.v2x.pb.Lane\"\326\001\n\016Prohib"
  "itedZone\022>\n\033centralCircleProhibitedZone\030"
  "\001 \001(\0132\031.cn.seisys.v2x.pb.Polygon\022A\n\036nonM"
  "otorVehicleProhibitedZones\030\002 \003(\0132\031.cn.se"
  "isys.v2x.pb.Polygon\022A\n\036gridLineMarkingPr"
  "ohibitedZones\030\003 \003(\0132\031.cn.seisys.v2x.pb.P"
  "olygon\"\201\002\n\004Node\022\014\n\004name\030\001 \001(\t\022-\n\002id\030\002 \001("
  "\0132!.cn.seisys.v2x.pb.NodeReferenceId\022,\n\006"
  "refPos\030\003 \001(\0132\034.cn.seisys.v2x.pb.Position"
  "3D\022\'\n\007inLinks\030\004 \003(\0132\026.cn.seisys.v2x.pb.L"
  "ink\022+\n\tinLinksEx\030\005 \003(\0132\030.cn.seisys.v2x.p"
  "b.LinkEx\0228\n\016prohibitedZone\030\006 \001(\0132 .cn.se"
  "isys.v2x.pb.ProhibitedZone\"O\n\003MAP\022\021\n\ttim"
  "estamp\030\001 \001(\r\022%\n\005nodes\030\002 \003(\0132\026.cn.seisys."
  "v2x.pb.Node\022\016\n\006msgCnt\030\003 \001(\r\"j\n\007MapData\022\020"
  "\n\010mapSlice\030\001 \001(\t\022\"\n\003map\030\002 \001(\0132\025.cn.seisy"
  "s.v2x.pb.MAP\022\014\n\004eTag\030\003 \001(\t\022\013\n\003ack\030\004 \001(\010\022"
  "\016\n\006seqNum\030\005 \001(\t\"\227\001\n\rReqLaneChange\0227\n\014upS"
  "treamNode\030\001 \001(\0132!.cn.seisys.v2x.pb.NodeR"
  "eferenceId\0229\n\016downStreamNode\030\002 \001(\0132!.cn."
  "seisys.v2x.pb.NodeReferenceId\022\022\n\ntargetL"
  "ane\030\003 \001(\r\"\230\001\n\016ReqClearTheWay\0227\n\014upStream"
  "Node\030\001 \001(\0132!.cn.seisys.v2x.pb.NodeRefere"
  "nceId\0229\n\016downStreamNode\030\002 \001(\0132!.cn.seisy"
  "s.v2x.pb.NodeReferenceId\022\022\n\ntargetLane\030\003"
  " \001(\r\"\305\001\n\021ReqSignalPriority\0229\n\016intersecti"
  "onId\030\001 \001(\0132!.cn.seisys.v2x.pb.NodeRefere"
  "nceId\0228\n\014requiredMove\030\002 \001(\0132\".cn.seisys."
  "v2x.pb.MovementStatInfo\022\034\n\024estimatedArri"
  "valTime\030\003 \001(\r\022\035\n\025distance2Intersection\030\004"
  " \001(\r\"I\n\020ReqSensorSharing\0225\n\014detectorArea"
  "\030\001 \003(\0132\037.cn.seisys.v2x.pb.ReferencePath\""
  "\035\n\016ParkingRequest\022\013\n\003req\030\001 \001(\r\"\"\n\013Parkin"
  "gType\022\023\n\013parkingType\030\001 \001(\r\"\306\001\n\016ReqParkin"
  "gArea\0222\n\013vehicleType\030\001 \001(\0162\035.cn.seisys.v"
  "2x.pb.VehicleType\022-\n\003req\030\002 \001(\0132 .cn.seis"
  "ys.v2x.pb.ParkingRequest\0222\n\013parkingType\030"
  "\003 \001(\0132\035.cn.seisys.v2x.pb.ParkingType\022\035\n\025"
  "expectedParkingSlotId\030\004 \001(\r\"\272\002\n\007ReqInfo\022"
  "5\n\nlaneChange\030\001 \001(\0132\037.cn.seisys.v2x.pb.R"
  "eqLaneChangeH\000\0227\n\013clearTheWay\030\002 \001(\0132 .cn"
  ".seisys.v2x.pb.ReqClearTheWayH\000\022=\n\016signa"
  "lPriority\030\003 \001(\0132#.cn.seisys.v2x.pb.ReqSi"
  "gnalPriorityH\000\022;\n\rsensorSharing\030\004 \001(\0132\"."
  "cn.seisys.v2x.pb.ReqSensorSharingH\000\0223\n\007p"
  "arking\030\005 \001(\0132 .cn.seisys.v2x.pb.ReqParki"
  "ngAreaH\000B\016\n\014ReqInfoOneOf\"\235\002\n\014DriveReques"
  "t\022\r\n\005reqId\030\001 \001(\r\0228\n\006status\030\002 \001(\0162(.cn.se"
  "isys.v2x.pb.DriveRequest.ReqStatus\022\023\n\013re"
  "qPriority\030\003 \001(\t\022\021\n\ttargetVeh\030\004 \001(\t\022\021\n\tta"
  "rgetRsu\030\005 \001(\t\022\'\n\004info\030\006 \001(\0132\031.cn.seisys."
  "v2x.pb.ReqInfo\022\020\n\010lifeTime\030\007 \001(\r\"N\n\tReqS"
  "tatus\022\013\n\007UNKNOWN\020\000\022\013\n\007REQUEST\020\001\022\r\n\tCOMFI"
  "RMED\020\002\022\n\n\006CANCEL\020\003\022\014\n\010COMPLETE\020\004\"&\n\rDriv"
  "eBehavior\022\025\n\rdriveBehavior\030\001 \001(\005\"\225\004\n\021Pat"
  "hPlanningPoint\022)\n\003pos\030\001 \001(\0132\034.cn.seisys."
  "v2x.pb.Position3D\022:\n\tposConfid\030\002 \001(\0132\'.c"
  "n.seisys.v2x.pb.PositionConfidenceSet\022\r\n"
  "\005speed\030\003 \001(\r\022\017\n\007heading\030\004 \001(\r\0226\n\013speedCo"
  "nfid\030\005 \001(\0162!.cn.seisys.v2x.pb.SpeedConfi"
  "dence\022:\n\rheadingConfid\030\006 \001(\0162#.cn.seisys"
  ".v2x.pb.HeadingConfidence\022;\n\014acceleratio"
  "n\030\007 \001(\0132%.cn.seisys.v2x.pb.AccelerationS"
  "et4Way\022D\n\022accelerationConfid\030\010 \001(\0132(.cn."
  "seisys.v2x.pb.AccelerationConfidence\022\025\n\r"
  "estimatedTime\030\t \001(\r\0228\n\016timeConfidence\030\n "
  "\001(\0162 .cn.seisys.v2x.pb.TimeConfidence\0221\n"
  "\010posInMap\030\013 \001(\0132\037.cn.seisys.v2x.pb.Refer"
  "enceLink\"I\n\014PathPlanning\0229\n\014pathPlanning"
  "\030\001 \003(\0132#.cn.seisys.v2x.pb.PathPlanningPo"
  "int\"\340\001\n\007IarData\0227\n\ncurrentPos\030\001 \001(\0132#.cn"
  ".seisys.v2x.pb.PathPlanningPoint\0224\n\014path"
  "Planning\030\002 \001(\0132\036.cn.seisys.v2x.pb.PathPl"
  "anning\0228\n\017currentBehavior\030\003 \001(\0132\037.cn.sei"
  "sys.v2x.pb.DriveBehavior\022,\n\004reqs\030\004 \003(\0132\036"
  ".cn.seisys.v2x.pb.DriveRequest\"\230\001\n\007VirDa"
  "ta\022\016\n\006msgCnt\030\001 \001(\r\022\021\n\tvehicleId\030\002 \001(\t\022\021\n"
  "\ttimestamp\030\003 \001(\004\022)\n\003pos\030\004 \001(\0132\034.cn.seisy"
  "s.v2x.pb.Position3D\022,\n\tintAndReq\030\005 \001(\0132\031"
  ".cn.seisys.v2x.pb.IarData\"\306\001\n\017DriveSugge"
  "stion\0223\n\nsuggestion\030\001 \001(\0132\037.cn.seisys.v2"
  "x.pb.DriveBehavior\022\022\n\ntimeOffset\030\002 \001(\r\0224"
  "\n\013relatedLink\030\003 \001(\0132\037.cn.seisys.v2x.pb.R"
  "eferenceLink\0224\n\013relatedPath\030\004 \001(\0132\037.cn.s"
  "eisys.v2x.pb.ReferencePath\",\n\020Coordinati"
  "onInfo\022\030\n\020coordinationInfo\030\001 \001(\005\"\310\001\n\023Veh"
  "icleCoordination\022\r\n\005vehId\030\001 \001(\t\022:\n\017drive"
  "Suggestion\030\002 \001(\0132!.cn.seisys.v2x.pb.Driv"
  "eSuggestion\0224\n\014pathGuidance\030\003 \001(\0132\036.cn.s"
  "eisys.v2x.pb.PathPlanning\0220\n\004info\030\004 \001(\0132"
  "\".cn.seisys.v2x.pb.CoordinationInfo\"\272\002\n\020"
  "LaneCoordination\0223\n\ntargetLane\030\001 \001(\0132\037.c"
  "n.seisys.v2x.pb.ReferenceLink\0224\n\013related"
  "Path\030\002 \001(\0132\037.cn.seisys.v2x.pb.ReferenceP"
  "ath\022\016\n\006tBegin\030\003 \001(\004\022\014\n\004tEnd\030\004 \001(\004\022\030\n\020rec"
  "ommendedSpeed\030\005 \001(\r\022<\n\023recommendedBehavi"
  "or\030\006 \001(\0132\037.cn.seisys.v2x.pb.DriveBehavio"
  "r\0220\n\004info\030\007 \001(\0132\".cn.seisys.v2x.pb.Coord"
  "inationInfo\022\023\n\013description\030\010 \001(\t\"\337\001\n\007Rsc"
  "Data\022\016\n\006msgCnt\030\001 \001(\r\022\r\n\005rsuId\030\002 \001(\t\022\021\n\tt"
  "imestamp\030\003 \001(\004\022)\n\003pos\030\004 \001(\0132\034.cn.seisys."
  "v2x.pb.Position3D\022:\n\013coordinates\030\005 \001(\0132%"
  ".cn.seisys.v2x.pb.VehicleCoordination\022;\n"
  "\017laneCoordinates\030\006 \001(\0132\".cn.seisys.v2x.p"
  "b.LaneCoordination\"\271\006\n\007CamData\022\014\n\004type\030\001"
  " \001(\r\022\013\n\003ver\030\002 \001(\t\022\016\n\006msgCnt\030\003 \001(\r\022\021\n\ttim"
  "estamp\030\004 \001(\004\022\020\n\010deviceId\030\005 \001(\t\022\023\n\013mapDev"
  "iceId\030\006 \001(\t\022,\n\006refPos\030\007 \001(\0132\034.cn.seisys."
  "v2x.pb.Position3D\022.\n\tsceneType\030\010 \001(\0162\033.c"
  "n.seisys.v2x.pb.SceneType\0222\n\007ptcList\030\t \003"
  "(\0132!.cn.seisys.v2x.pb.ParticipantData\0224\n"
  "\014obstacleList\030\n \003(\0132\036.cn.seisys.v2x.pb.O"
  "bstacleData\022*\n\007rteList\030\013 \003(\0132\031.cn.seisys"
  ".v2x.pb.RteData\022*\n\007rtsList\030\014 \003(\0132\031.cn.se"
  "isys.v2x.pb.RtsData\022*\n\007bsmList\030\r \003(\0132\031.c"
  "n.seisys.v2x.pb.BsmData\022*\n\007virList\030\016 \003(\013"
  "2\031.cn.seisys.v2x.pb.VirData\022*\n\007rscList\030\017"
  " \003(\0132\031.cn.seisys.v2x.pb.RscData\0223\n\017roadS"
  "ignalState\030\020 \001(\0132\032.cn.seisys.v2x.pb.Spat"
  "Data\0222\n\013trafficFlow\030\021 \003(\0132\035.cn.seisys.v2"
  "x.pb.TrafficFlow\0228\n\020signalSchemeList\030\022 \003"
  "(\0132\036.cn.seisys.v2x.pb.SignalScheme\0221\n\016de"
  "tectedRegion\030\023 \003(\0132\031.cn.seisys.v2x.pb.Po"
  "lygon\022\027\n\017toAlgorithmTime\030\024 \001(\004\022\025\n\rtoData"
  "busTime\030\025 \001(\004\022\023\n\013toCloudTime\030\026 \001(\004\022\n\n\002id"
  "\030\027 \001(\004\"\200\003\n\nStatusData\022\020\n\010deviceId\030\001 \001(\t\022"
  "\023\n\013mapDeviceId\030\002 \001(\t\0220\n\ndeviceType\030\003 \001(\016"
  "2\034.cn.seisys.v2x.pb.DeviceType\022;\n\nstatus"
  "Type\030\004 \001(\0162\'.cn.seisys.v2x.pb.StatusData"
  ".StatusType\022/\n\tposDevice\030\005 \001(\0132\034.cn.seis"
  "ys.v2x.pb.Position3D\"\252\001\n\nStatusType\022\026\n\022D"
  "EV_STATUS_UNKNOWN\020\000\022\021\n\rDEV_STATUS_OK\020\001\022\027"
  "\n\023DEV_STATUS_ABNORMAL\020\002\022\022\n\016DEV_STATUS_OF"
  "F\020\003\022\025\n\021DEV_STATUS_REBOOT\020\004\022\027\n\023DEV_STATUS"
  "_MAINTAIN\020\005\022\024\n\020DEV_STATUS_SCRAP\020\006\"\351\001\n\010De"
  "nmData\022\014\n\004type\030\001 \001(\r\022\013\n\003ver\030\002 \001(\t\022\016\n\006msg"
  "Cnt\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\004\022\017\n\007address\030"
  "\005 \001(\t\022,\n\006refPos\030\006 \001(\0132\034.cn.seisys.v2x.pb"
  ".Position3D\022.\n\tsceneType\030\007 \001(\0162\033.cn.seis"
  "ys.v2x.pb.SceneType\0220\n\nstatusList\030\010 \003(\0132"
  "\034.cn.seisys.v2x.pb.StatusData\"\340\002\n\010RsiRep"
  "ly\022\n\n\002id\030\001 \001(\004\022\021\n\teventType\030\002 \001(\r\022\026\n\016sou"
  "rceDeviceId\030\003 \001(\t\022\026\n\016targetDeviceId\030\004 \001("
  "\t\022\021\n\tcreatTime\030\005 \001(\t\022\030\n\020distributionTime"
  "\030\006 \001(\t\022\026\n\016completionTime\030\007 \001(\t\022\022\n\nupdate"
  "Time\030\010 \001(\t\022\025\n\roperationType\030\t \001(\r\022\021\n\tcam"
  "DataId\030\n \001(\004\022\016\n\006dataId\030\013 \001(\004\022\025\n\reventSou"
  "rceId\030\014 \001(\004\022\034\n\024distributionStatusId\030\r \001("
  "\r\022\023\n\013description\030\016 \001(\t\022\023\n\013sourceTopic\030\017 "
  "\001(\t\022\023\n\013targetTopic\030\020 \001(\t\"\252\001\n\013RsuRsmReply"
  "\022\026\n\016sourceDeviceId\030\001 \001(\t\022\026\n\016targetDevice"
  "Id\030\002 \001(\t\022\021\n\tcamDataId\030\003 \001(\004\0220\n\014rsmReplyL"
  "ist\030\004 \003(\0132\032.cn.seisys.v2x.pb.RsmReply\022\023\n"
  "\013targetTopic\030\005 \001(\t\022\021\n\ttimestamp\030\006 \001(\004\"M\n"
  "\010RsmReply\022\016\n\006dataId\030\001 \001(\004\022\034\n\024distributio"
  "nStatusId\030\002 \001(\r\022\023\n\013description\030\003 \001(\t\"\324\002\n"
  "\020MonitorStatsData\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010"
  "deviceId\030\002 \001(\t\022\017\n\007camNums\030\003 \001(\004\022\027\n\017parti"
  "cipantNums\030\004 \001(\004\022\017\n\007rteNums\030\005 \001(\004\022\027\n\017tra"
  "fficflowNums\030\006 \001(\004\022\033\n\023trafficflowStatNum"
  "s\030\007 \001(\004\022\034\n\024intersectionStatNums\030\010 \001(\004\022\025\n"
  "\rphaseStatNums\030\t \001(\004\022\017\n\007rtsNums\030\n \001(\004\022\032\n"
  "\022cameraPathListNums\030\013 \001(\004\022\026\n\016cameraPathN"
  "ums\030\014 \001(\004\022\031\n\021radarPathListNums\030\r \001(\004\022\025\n\r"
  "radarPathNums\030\016 \001(\004*\311\001\n\014Message_Type\022\016\n\n"
  "UKNOWN_MSG\020\000\022\016\n\nOBJECT_MSG\020\001\022\r\n\tEVENT_MS"
  "G\020\002\022\020\n\014OBSTACLE_MSG\020\003\022\016\n\nSTATUS_MSG\020\004\022\013\n"
  "\007RTE_MSG\020\005\022\013\n\007RTS_MSG\020\006\022\014\n\010SPAT_MSG\020\007\022\013\n"
  "\007MAP_MSG\020\010\022\013\n\007VIR_MSG\020\t\022\013\n\007RSC_MSG\020\n\022\013\n\007"
  "CAM_MSG\020\013\022\014\n\010DENM_MSG\020\014*\346\001\n\nDataSource\022\027"
  "\n\023DATA_SOURCE_UNKNOWN\020\000\022\014\n\010SELFINFO\020\001\022\007\n"
  "\003V2X\020\002\022\t\n\005VIDEO\020\003\022\023\n\017MICROWAVE_RADAR\020\004\022\010"
  "\n\004LOOP\020\005\022\t\n\005LIDAR\020\006\022\016\n\nINTEGRATED\020\007\022\027\n\023D"
  "ATA_SOURCE_RESERVE\020\010\022\024\n\020CLOUD_FORWARDING"
  "\020\t\022\016\n\nMEC_TO_MEC\020\n\022\022\n\016CLOUD_TO_CLOUD\020\013\022\020"
  "\n\014CLOUD_MANUAL\020\014*\370\006\n\016TimeConfidence\022\017\n\013U"
  "NAVAILABLE\020\000\022\020\n\014TIME_100_000\020\001\022\020\n\014TIME_0"
  "50_000\020\002\022\020\n\014TIME_020_000\020\003\022\020\n\014TIME_010_0"
  "00\020\004\022\020\n\014TIME_002_000\020\005\022\020\n\014TIME_001_000\020\006"
  "\022\020\n\014TIME_000_500\020\007\022\020\n\014TIME_000_200\020\010\022\020\n\014"
  "TIME_000_100\020\t\022\020\n\014TIME_000_050\020\n\022\020\n\014TIME"
  "_000_020\020\013\022\020\n\014TIME_000_010\020\014\022\020\n\014TIME_000"
  "_005\020\r\022\020\n\014TIME_000_002\020\016\022\020\n\014TIME_000_001"
  "\020\017\022\022\n\016TIME_000_000_5\020\020\022\022\n\016TIME_000_000_2"
  "\020\021\022\022\n\016TIME_000_000_1\020\022\022\023\n\017TIME_000_000_0"
  "5\020\023\022\023\n\017TIME_000_000_02\020\024\022\023\n\017TIME_000_000"
  "_01\020\025\022\024\n\020TIME_000_000_005\020\026\022\024\n\020TIME_000_"
  "000_002\020\027\022\024\n\020TIME_000_000_001\020\030\022\026\n\022TIME_"
  "000_000_000_5\020\031\022\026\n\022TIME_000_000_000_2\020\032\022"
  "\026\n\022TIME_000_000_000_1\020\033\022\027\n\023TIME_000_000_"
  "000_05\020\034\022\027\n\023TIME_000_000_000_02\020\035\022\027\n\023TIM"
  "E_000_000_000_01\020\036\022\030\n\024TIME_000_000_000_0"
  "05\020\037\022\030\n\024TIME_000_000_000_002\020 \022\030\n\024TIME_0"
  "00_000_000_001\020!\022\032\n\026TIME_000_000_000_000"
  "_5\020\"\022\032\n\026TIME_000_000_000_000_2\020#\022\032\n\026TIME"
  "_000_000_000_000_1\020$\022\033\n\027TIME_000_000_000"
  "_000_05\020%\022\033\n\027TIME_000_000_000_000_02\020&\022\033"
  "\n\027TIME_000_000_000_000_01\020\'*\210\001\n\017Particip"
  "antType\022\026\n\022OBJECTTYPE_UNKNOWN\020\000\022\024\n\020OBJEC"
  "TTYPE_MOTOR\020\001\022\030\n\024OBJECTTYPE_NON_MOTOR\020\002\022"
  "\031\n\025OBJECTTYPE_PEDESTRIAN\020\003\022\022\n\016OBJECTTYPE"
  "_RSU\020\004*\324\001\n\017SpeedConfidence\022\034\n\030SPEED_CONF"
  "ID_UNAVAILABLE\020\000\022\026\n\022SPEED_CONFID_100MS\020\001"
  "\022\025\n\021SPEED_CONFID_10MS\020\002\022\024\n\020SPEED_CONFID_"
  "5MS\020\003\022\024\n\020SPEED_CONFID_1MS\020\004\022\026\n\022SPEED_CON"
  "FID_0_1MS\020\005\022\027\n\023SPEED_CONFID_0_05MS\020\006\022\027\n\023"
  "SPEED_CONFID_0_01MS\020\007*\217\002\n\021HeadingConfide"
  "nce\022\036\n\032HEADING_CONFID_UNAVAILABLE\020\000\022\034\n\030H"
  "EADING_CONFID_PREC10DEG\020\001\022\035\n\031HEADING_CON"
  "FIDE_PREC05DEG\020\002\022\035\n\031HEADING_CONFIDE_PREC"
  "01DEG\020\003\022\034\n\030HEADING_CONFID_PREC_1DEG\020\004\022\036\n"
  "\032HEADING_CONFID_PREC0_05DEG\020\005\022\036\n\032HEADING"
  "_CONFID_PREC0_01DEG\020\006\022 \n\034HEADING_CONFID_"
  "PREC0_0125DEG\020\007*\232\r\n\013VehicleType\022\031\n\025UNKNO"
  "WN_VEHICLE_CLASS\020\000\022\"\n\036PASSENGER_VEHICLE_"
  "TYPE_UNKNOWN\020\n\022\024\n\020MOTOR_LIGHTTRUNK\020\024\022\036\n\032"
  "TRUCK_VEHICLE_TYPE_UNKNOWN\020\031\022\033\n\027MOTORCYC"
  "LE_TYPE_UNKNOWN\020(\022\030\n\024TRANSIT_TYPE_UNKNOW"
  "N\0202\022\032\n\026EMERGENCY_TYPE_UNKNOWN\020<\022\031\n\025SPECI"
  "AL_VEHICLE_CLASS\020\001\022 \n\034PASSENGER_VEHICLE_"
  "TYPE_OTHER\020\013\022\"\n\036LIGHT_TRUCK_VEHICLE_TYPE"
  "_OTHER\020\025\022\034\n\030TRUCK_VEHICLE_TYPE_OTHER\020\032\022\023"
  "\n\017TRUCK_AXLE_CNT2\020\033\022\023\n\017TRUCK_AXLE_CNT3\020\034"
  "\022\023\n\017TRUCK_AXLE_CNT4\020\035\022\033\n\027TRUCK_AXLE_CNT4"
  "_TRAILER\020\036\022\033\n\027TRUCK_AXLE_CNT5_TRAILER\020\037\022"
  "\033\n\027TRUCK_AXLE_CNT6_TRAILER\020 \022\036\n\032TRUCK_AX"
  "LECNT5MULTITRAILER\020!\022!\n\035TRUCK_AXLE_CNT6_"
  "MULTI_TRAILER\020\"\022!\n\035TRUCK_AXLE_CNT7_MULTI"
  "_TRAILER\020#\022\031\n\025MOTORCYCLE_TYPE_OTHER\020)\022\037\n"
  "\033MOTORCYCLE_CRUISER_STANDARD\020*\022(\n$SPORT_"
  "UNCLAD_MOTORCYCLE_SPORT_UNCLAD\020+\022\034\n\030MOTO"
  "RCYCLE_SPORT_TOURING\020,\022\032\n\026MOTORCYCLE_SUP"
  "ER_SPORT\020-\022\026\n\022MOTORCYCLE_TOURING\020.\022\024\n\020MO"
  "TORCYCLE_TRIKE\020/\022\032\n\026MOTORCYCLE_WPASSENGE"
  "RS\0200\022\026\n\022TRANSIT_TYPE_OTHER\0203\022\017\n\013TRANSIT_"
  "BRT\0204\022\027\n\023TRANSIT_EXPRESS_BUS\0205\022\025\n\021TRANSI"
  "T_LOCAL_BUS\0206\022\026\n\022TRANSIT_SCHOOL_BUS\0207\022\032\n"
  "\026TRANSIT_FIXED_GUIdEWAY\0208\022\027\n\023TRANSIT_PAR"
  "ATRANSIT\0209\022!\n\035TRANSIT_PARATRANSIT_AMBULA"
  "NCE\020:\022\030\n\024EMERGENCY_TYPE_OTHER\020=\022 \n\034EMERG"
  "ENCY_FIRE_LIGHT_VEHICLE\020>\022 \n\034EMERGENCY_F"
  "IRE_HEAVY_VEHICLE\020\?\022$\n EMERGENCY_FIRE_PA"
  "RAMEDIC_VEHICLE\020@\022$\n EMERGENCY_FIRE_AMBU"
  "LANCE_VEHICLE\020A\022\"\n\036EMERGENCY_POLICE_LIGH"
  "T_VEHICLE\020B\022\"\n\036EMERGENCY_POLICE_HEAVY_VE"
  "HICLE\020C\022\035\n\031EMERGENCY_OTHER_RESPONDER\020D\022\035"
  "\n\031EMERGENCY_OTHER_AMBULANCE\020E\022\037\n\033OTHER_T"
  "RAVELER_TYPE_UNKNOWN\020P\022\035\n\031OTHER_TRAVELER"
  "_TYPE_OTHER\020Q\022\035\n\031OTHER_TRAVELER_PEDESTRI"
  "AN\020R\022$\n OTHER_TRAVELER_VISUALLY_DISABLED"
  "\020S\022&\n\"OTHER_TRAVELER_PHYSICALLY_DISABLED"
  "\020T\022\032\n\026OTHER_TRAVELER_BICYCLE\020U\022)\n%OTHER_"
  "TRAVELER_VULNERABLE_ROAD_WORKER\020V\022\037\n\033INF"
  "RASTRUCTURE_TYPE_UNKNOWN\020Z\022\030\n\024INFRASTRUC"
  "TURE_FIXED\020[\022\032\n\026INFRASTRUCTURE_MOVABLE\020\\"
  "\022\032\n\026EQUIPPED_CARGO_TRAILER\020]*f\n\010Maneuver"
  "\022\025\n\021MANEUVER_STRAIGHT\020\000\022\026\n\022MANEUVER_LEFT"
  "_TURN\020\001\022\027\n\023MANEUVER_RIGHT_TURN\020\002\022\022\n\016MANE"
  "UVER_UTURN\020\003*\340\001\n\016MapElementType\022\034\n\030MAP_E"
  "LEMENT_TYPE_UNKNOWN\020\000\022\"\n\036MAP_ELEMENT_TYP"
  "E_DETECTOR_AREA\020\001\022\031\n\025MAP_ELEMENT_TYPE_LA"
  "NE\020\002\022\034\n\030MAP_ELEMENT_TYPE_SECTION\020\003\022\031\n\025MA"
  "P_ELEMENT_TYPE_LINK\020\004\022\031\n\025MAP_ELEMENT_TYP"
  "E_NODE\020\005\022\035\n\031MAP_ELEMENT_TYPE_MOVEMENT\020\006*"
  "\374\006\n\tPlateType\022\021\n\rUNKNOWN_PLATE\020\000\022\023\n\017LARG"
  "E_CAR_PLATE\020\001\022\023\n\017SMALL_CAR_PLATE\020\002\022\025\n\021EM"
  "BASSY_CAR_PLATE\020\003\022\027\n\023CONSULATE_CAR_PLATE"
  "\020\004\022\026\n\022OVERSEAS_CAR_PLATE\020\005\022\025\n\021FOREIGN_CA"
  "R_PLATE\020\006\022\035\n\031ORDINARY_MOTORCYCLE_PLATE\020\007"
  "\022\017\n\013MOPED_PLATE\020\010\022\034\n\030EMBASSY_MOTORCYCLE_"
  "PLATE\020\t\022\036\n\032CONSULATE_MOTORCYCLE_PLATE\020\n\022"
  "\035\n\031OVERSEAS_MOTORCYCLE_PLATE\020\013\022\034\n\030FOREIG"
  "N_MOTORCYCLE_PLATE\020\014\022\023\n\017LOW_SPEED_PLATE\020"
  "\r\022\021\n\rTRACTOR_PLATE\020\016\022\021\n\rTRAILER_PLATE\020\017\022"
  "\023\n\017COACH_CAR_PLATE\020\020\022\032\n\026COACH_MOTORCYCLE"
  "_PLATE\020\021\022\031\n\025TEMPORARY_ENTRY_PLATE\020\024\022$\n T"
  "EMPORARY_ENTRY_MOTORCYCLE_PLATE\020\025\022\033\n\027TEM"
  "PORARY_DRIVING_PLATE\020\026\022\024\n\020POLICE_CAR_PLA"
  "TE\020\027\022\033\n\027POLICE_MOTORCYCLE_PLATE\020\030\022)\n%ORI"
  "GINAL_AGRICULTURAL_MACHINERY_PLATE\020\031\022\022\n\016"
  "HONGKONG_PLATE\020\032\022\017\n\013MACAU_PLATE\020\033\022\026\n\022ARM"
  "ED_POLICE_PLATE\020\037\022\016\n\nARMY_PLATE\020 \022\023\n\017NO_"
  "NUMBER_PLATE\020)\022\016\n\nFAKE_PLATE\020*\022\032\n\026MISAPP"
  "ROPRIATION_PLATE\020+\022\026\n\022UNRECOGNIZED_PLATE"
  "\020,\022\'\n#LARGE_NEW_ENERGY_YELLOW_GREEN_PLAT"
  "E\0203\022 \n\034SMALL_NEW_ENERGY_GREEN_PLATE\0204\022\017\n"
  "\013OTHER_PLATE\020c*\257\002\n\rObstaclesType\022\032\n\026UNKN"
  "OWN_OBSTACLES_TYPE\020\000\022\014\n\010ROCKFALL\020\001\022\r\n\tLA"
  "NDSLIDE\020\002\022\024\n\020ANIMAL_INTRUSION\020\003\022\020\n\014LIQUI"
  "D_SPILL\020\004\022\023\n\017GOODS_SCATTERED\020\005\022\017\n\013TRAFFI"
  "CCONE\020\006\022\023\n\017SAFETY_TRIANGLE\020\007\022\025\n\021TRAFFIC_"
  "ROADBLOCK\020\010\022\"\n\036INSPECTION_SHAFT_WITHOUT_"
  "COVER\020\t\022\025\n\021UNKNOWN_FRAGMENTS\020\n\022\027\n\023UNKNOW"
  "N_HARD_OBJECT\020\013\022\027\n\023UNKNOWN_SOFT_OBJECT\020\014"
  "*o\n\tSceneType\022\024\n\020SCENE_TYPE_URBAN\020\000\022\030\n\024S"
  "CENE_TYPE_HIGHSPEED\020\001\022\031\n\025SCENE_TYPE_CLOS"
  "EDPARK\020\002\022\027\n\023SCENE_TYPE_RESERVED\020\003*\205\003\n\nDe"
  "viceType\022\027\n\023DEVICE_TYPE_UNKONWN\020\000\022\007\n\003OBU"
  "\020\001\022\007\n\003RSU\020\002\022\t\n\005OTHER\020d\022\013\n\006CAMERA\020\310\001\022\020\n\013M"
  "ICRO_RADAR\020\312\001\022\020\n\013LASER_RADAR\020\313\001\022\010\n\003MEC\020\314"
  "\001\022\n\n\005SIBOX\020\315\001\022\023\n\016WEATHER_SENSOR\020\316\001\022\010\n\003VM"
  "S\020\317\001\022\016\n\tMMW_RADAR\020\320\001\022\n\n\005CLOUD\020\321\001\022\024\n\017ELEC"
  "TRONIC_TAGS\020\322\001\022\025\n\020WISDOM_LIGHTPOLE\020\323\001\022\030\n"
  "\023WISDOM_MANHOLECOVER\020\324\001\022\024\n\017WISDOM_PLATFO"
  "RM\020\325\001\022\014\n\007CARRIER\020\326\001\022\027\n\022INTEGRATED_CABINE"
  "T\020\330\001\022\014\n\007CORE_SW\020\331\001\022\016\n\tGATHER_SW\020\332\001\022\016\n\tAC"
  "CESS_SW\020\333\001\022\r\n\010POLE_BOX\020\334\001B\032\n\026cn.seisys.v"
  "2x.protocolP\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_v2x_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_v2x_2eproto = {
    false, false, 33381, descriptor_table_protodef_v2x_2eproto,
    "v2x.proto",
    &descriptor_table_v2x_2eproto_once, nullptr, 0, 114,
    schemas, file_default_instances, TableStruct_v2x_2eproto::offsets,
    file_level_metadata_v2x_2eproto, file_level_enum_descriptors_v2x_2eproto,
    file_level_service_descriptors_v2x_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_v2x_2eproto_getter() {
  return &descriptor_table_v2x_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_v2x_2eproto(&descriptor_table_v2x_2eproto);
namespace cn {
namespace seisys {
namespace v2x {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionConfidenceSet_PositionConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[0];
}
bool PositionConfidenceSet_PositionConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::UNAVAILABLE_POS_CONFID;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_500M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_200M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_100M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_50M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_20M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_10M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_5M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_2M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_1M;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_50CM;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_20CM;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_10CM;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_5CM;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_2CM;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::POS_CONFID_1CM;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::PositionConfidence_MIN;
constexpr PositionConfidenceSet_PositionConfidence PositionConfidenceSet::PositionConfidence_MAX;
constexpr int PositionConfidenceSet::PositionConfidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionConfidenceSet_ElevationConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[1];
}
bool PositionConfidenceSet_ElevationConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::UNAVAILABLE_ELE_CONFID;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_500M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_200M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_100M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_50M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_20M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_10M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_5M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_2M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_1M;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_50CM;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_20CM;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_10CM;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_5CM;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_2CM;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ELE_CONFID_1CM;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ElevationConfidence_MIN;
constexpr PositionConfidenceSet_ElevationConfidence PositionConfidenceSet::ElevationConfidence_MAX;
constexpr int PositionConfidenceSet::ElevationConfidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantSizeConfidence_SizeValueConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[2];
}
bool ParticipantSizeConfidence_SizeValueConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_UNAVAILABLE;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_100_00;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_050_00;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_020_00;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_010_00;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_005_00;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_002_00;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_001_00;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_000_50;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_000_20;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_000_10;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_000_05;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_000_02;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SIZE_CONFID_000_01;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SizeValueConfidence_MIN;
constexpr ParticipantSizeConfidence_SizeValueConfidence ParticipantSizeConfidence::SizeValueConfidence_MAX;
constexpr int ParticipantSizeConfidence::SizeValueConfidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegulatorySpeedLimit_SpeedLimitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[3];
}
bool RegulatorySpeedLimit_SpeedLimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::SPEED_LIMIT_UNKNOWN;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::MAX_SPEED_IN_SCHOOL_ZONE;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::MAX_SPEED_INSCHOOL_ZONE_WHEN_CHILDREN_ARE_PRESENT;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::MAX_SPEED_INCONSTRUCTION_ZONE;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::VEHICLE_MIN_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::VEHICLE_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::VEHICLE_NIGHT_MAX_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::TRUCK_MIN_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::TRUCK_MAX_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::TRUCK_NIGHT_MAX_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::VEHICLES_WITH_TRAILERS_MIN_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::VEHICLES_WITH_TRAILERS_MAX_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::VEHICLES_WITHTRAILERS_NIGHT_MAX_SPEED;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::SpeedLimitType_MIN;
constexpr RegulatorySpeedLimit_SpeedLimitType RegulatorySpeedLimit::SpeedLimitType_MAX;
constexpr int RegulatorySpeedLimit::SpeedLimitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccelerationConfidence_AccConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[4];
}
bool AccelerationConfidence_AccConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_UNAVAILABLE;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_PREC100DE;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_PREC10DEG;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_PREC5DEG;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_PREC1DEG;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_PREC0_1DEG;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_PREC0_05DEG;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::ACC_CONFID_PREC0_01DEG;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::AccConfidence_MIN;
constexpr AccelerationConfidence_AccConfidence AccelerationConfidence::AccConfidence_MAX;
constexpr int AccelerationConfidence::AccConfidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccelerationConfidence_AngularVConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[5];
}
bool AccelerationConfidence_AngularVConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_UNAVAILABLE;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_PREC100DEG;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_PREC10DEG;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_PREC5DEG;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_PREC1DEG;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_PREC0_1DEG;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_PREC0_05DEG;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::ANGULARV_CONFID_PREC0_01DEG;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::AngularVConfidence_MIN;
constexpr AccelerationConfidence_AngularVConfidence AccelerationConfidence::AngularVConfidence_MAX;
constexpr int AccelerationConfidence::AngularVConfidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionConfidenceSet_SteeringWheelAngleConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[6];
}
bool MotionConfidenceSet_SteeringWheelAngleConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MotionConfidenceSet_SteeringWheelAngleConfidence MotionConfidenceSet::STEERING_WHEEL_ANGLE_CONFID_UNAVAILABLE;
constexpr MotionConfidenceSet_SteeringWheelAngleConfidence MotionConfidenceSet::STEERING_WHEEL_ANGLE_CONFID_PREC2DEG;
constexpr MotionConfidenceSet_SteeringWheelAngleConfidence MotionConfidenceSet::STEERING_WHEEL_ANGLE_CONFID_PREC1DEG;
constexpr MotionConfidenceSet_SteeringWheelAngleConfidence MotionConfidenceSet::STEERING_WHEEL_ANGLE_CONFID_PREC0_02DEG;
constexpr MotionConfidenceSet_SteeringWheelAngleConfidence MotionConfidenceSet::SteeringWheelAngleConfidence_MIN;
constexpr MotionConfidenceSet_SteeringWheelAngleConfidence MotionConfidenceSet::SteeringWheelAngleConfidence_MAX;
constexpr int MotionConfidenceSet::SteeringWheelAngleConfidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhaseState_LightState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[7];
}
bool PhaseState_LightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_UNKNOWN;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_DARK;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_FLASHING_RED;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_RED;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_FLASHING_GREEN;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_PERMISSIVE_GREEN;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_PROTETED_GREEN;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_YELLOW;
constexpr PhaseState_LightState PhaseState::LIGHT_STATE_FLASHING_YELLOW;
constexpr PhaseState_LightState PhaseState::LightState_MIN;
constexpr PhaseState_LightState PhaseState::LightState_MAX;
constexpr int PhaseState::LightState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeSystemStatus_BrakePedalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[8];
}
bool BrakeSystemStatus_BrakePedalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BrakeSystemStatus_BrakePedalStatus BrakeSystemStatus::UNAVAILABLE_PEDAL;
constexpr BrakeSystemStatus_BrakePedalStatus BrakeSystemStatus::OFF_PEDAL;
constexpr BrakeSystemStatus_BrakePedalStatus BrakeSystemStatus::ON_PEDAL;
constexpr BrakeSystemStatus_BrakePedalStatus BrakeSystemStatus::BrakePedalStatus_MIN;
constexpr BrakeSystemStatus_BrakePedalStatus BrakeSystemStatus::BrakePedalStatus_MAX;
constexpr int BrakeSystemStatus::BrakePedalStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeSystemStatus_TractionControlStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[9];
}
bool BrakeSystemStatus_TractionControlStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BrakeSystemStatus_TractionControlStatus BrakeSystemStatus::UNAVAILABLE_TRACTION;
constexpr BrakeSystemStatus_TractionControlStatus BrakeSystemStatus::OFF_TRACTION;
constexpr BrakeSystemStatus_TractionControlStatus BrakeSystemStatus::ON_TRACTION;
constexpr BrakeSystemStatus_TractionControlStatus BrakeSystemStatus::ENGAGED_TRACTION;
constexpr BrakeSystemStatus_TractionControlStatus BrakeSystemStatus::TractionControlStatus_MIN;
constexpr BrakeSystemStatus_TractionControlStatus BrakeSystemStatus::TractionControlStatus_MAX;
constexpr int BrakeSystemStatus::TractionControlStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeSystemStatus_AntiLockBrakeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[10];
}
bool BrakeSystemStatus_AntiLockBrakeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BrakeSystemStatus_AntiLockBrakeStatus BrakeSystemStatus::UNAVAILABLE_ABS;
constexpr BrakeSystemStatus_AntiLockBrakeStatus BrakeSystemStatus::OFF_ABS;
constexpr BrakeSystemStatus_AntiLockBrakeStatus BrakeSystemStatus::ON_ABS;
constexpr BrakeSystemStatus_AntiLockBrakeStatus BrakeSystemStatus::ENGAGED_ABS;
constexpr BrakeSystemStatus_AntiLockBrakeStatus BrakeSystemStatus::AntiLockBrakeStatus_MIN;
constexpr BrakeSystemStatus_AntiLockBrakeStatus BrakeSystemStatus::AntiLockBrakeStatus_MAX;
constexpr int BrakeSystemStatus::AntiLockBrakeStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeSystemStatus_StabilityControlStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[11];
}
bool BrakeSystemStatus_StabilityControlStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BrakeSystemStatus_StabilityControlStatus BrakeSystemStatus::UNAVAILABLE_SCS;
constexpr BrakeSystemStatus_StabilityControlStatus BrakeSystemStatus::OFF_SCS;
constexpr BrakeSystemStatus_StabilityControlStatus BrakeSystemStatus::ON_SCS;
constexpr BrakeSystemStatus_StabilityControlStatus BrakeSystemStatus::ENGAGED_SCS;
constexpr BrakeSystemStatus_StabilityControlStatus BrakeSystemStatus::StabilityControlStatus_MIN;
constexpr BrakeSystemStatus_StabilityControlStatus BrakeSystemStatus::StabilityControlStatus_MAX;
constexpr int BrakeSystemStatus::StabilityControlStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeSystemStatus_BrakeBoostApplied_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[12];
}
bool BrakeSystemStatus_BrakeBoostApplied_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BrakeSystemStatus_BrakeBoostApplied BrakeSystemStatus::UNAVAILABLE_BBA;
constexpr BrakeSystemStatus_BrakeBoostApplied BrakeSystemStatus::OFF_BBA;
constexpr BrakeSystemStatus_BrakeBoostApplied BrakeSystemStatus::ON_BBA;
constexpr BrakeSystemStatus_BrakeBoostApplied BrakeSystemStatus::BrakeBoostApplied_MIN;
constexpr BrakeSystemStatus_BrakeBoostApplied BrakeSystemStatus::BrakeBoostApplied_MAX;
constexpr int BrakeSystemStatus::BrakeBoostApplied_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrakeSystemStatus_AuxiliaryBrakeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[13];
}
bool BrakeSystemStatus_AuxiliaryBrakeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BrakeSystemStatus_AuxiliaryBrakeStatus BrakeSystemStatus::UNAVAILABLE_AUX;
constexpr BrakeSystemStatus_AuxiliaryBrakeStatus BrakeSystemStatus::OFF_AUX;
constexpr BrakeSystemStatus_AuxiliaryBrakeStatus BrakeSystemStatus::ON_AUX;
constexpr BrakeSystemStatus_AuxiliaryBrakeStatus BrakeSystemStatus::ENGAGED_AUX;
constexpr BrakeSystemStatus_AuxiliaryBrakeStatus BrakeSystemStatus::AuxiliaryBrakeStatus_MIN;
constexpr BrakeSystemStatus_AuxiliaryBrakeStatus BrakeSystemStatus::AuxiliaryBrakeStatus_MAX;
constexpr int BrakeSystemStatus::AuxiliaryBrakeStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThrottleSystemStatus_ThrottlePedalStauts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[14];
}
bool ThrottleSystemStatus_ThrottlePedalStauts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ThrottleSystemStatus_ThrottlePedalStauts ThrottleSystemStatus::UNAVAILABLE_PEDAL;
constexpr ThrottleSystemStatus_ThrottlePedalStauts ThrottleSystemStatus::OFF;
constexpr ThrottleSystemStatus_ThrottlePedalStauts ThrottleSystemStatus::ON;
constexpr ThrottleSystemStatus_ThrottlePedalStauts ThrottleSystemStatus::ThrottlePedalStauts_MIN;
constexpr ThrottleSystemStatus_ThrottlePedalStauts ThrottleSystemStatus::ThrottlePedalStauts_MAX;
constexpr int ThrottleSystemStatus::ThrottlePedalStauts_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BsmData_TransmissionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[15];
}
bool BsmData_TransmissionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_NEUTRAL;
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_PARK;
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_FORWARD_GEARS;
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_REVERSE_GEARS;
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_RESERVED1;
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_RESERVED2;
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_RESERVED3;
constexpr BsmData_TransmissionState BsmData::TRANSMISSION_UNAVAILABLE;
constexpr BsmData_TransmissionState BsmData::TransmissionState_MIN;
constexpr BsmData_TransmissionState BsmData::TransmissionState_MAX;
constexpr int BsmData::TransmissionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BsmData_VehicleFuelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[16];
}
bool BsmData_VehicleFuelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BsmData_VehicleFuelType BsmData::VEHICLE_TUEL_UNKNOWNFUEL;
constexpr BsmData_VehicleFuelType BsmData::GASOLINE;
constexpr BsmData_VehicleFuelType BsmData::ETHANOL;
constexpr BsmData_VehicleFuelType BsmData::DIESEL;
constexpr BsmData_VehicleFuelType BsmData::ELECTRIC;
constexpr BsmData_VehicleFuelType BsmData::HYBRID;
constexpr BsmData_VehicleFuelType BsmData::HYDROGEN;
constexpr BsmData_VehicleFuelType BsmData::NATGASLIQUID;
constexpr BsmData_VehicleFuelType BsmData::NATGASCOMP;
constexpr BsmData_VehicleFuelType BsmData::PROPANE;
constexpr BsmData_VehicleFuelType BsmData::VehicleFuelType_MIN;
constexpr BsmData_VehicleFuelType BsmData::VehicleFuelType_MAX;
constexpr int BsmData::VehicleFuelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BsmData_DriveStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[17];
}
bool BsmData_DriveStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BsmData_DriveStatus BsmData::AUTOPILOT;
constexpr BsmData_DriveStatus BsmData::MANUAL;
constexpr BsmData_DriveStatus BsmData::SECURITY;
constexpr BsmData_DriveStatus BsmData::DriveStatus_MIN;
constexpr BsmData_DriveStatus BsmData::DriveStatus_MAX;
constexpr int BsmData::DriveStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BsmData_EmergenyStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[18];
}
bool BsmData_EmergenyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BsmData_EmergenyStatus BsmData::NO_EMER;
constexpr BsmData_EmergenyStatus BsmData::YES_EMER;
constexpr BsmData_EmergenyStatus BsmData::EmergenyStatus_MIN;
constexpr BsmData_EmergenyStatus BsmData::EmergenyStatus_MAX;
constexpr int BsmData::EmergenyStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BsmData_Wiper_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[19];
}
bool BsmData_Wiper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BsmData_Wiper BsmData::OFF;
constexpr BsmData_Wiper BsmData::INT;
constexpr BsmData_Wiper BsmData::LO;
constexpr BsmData_Wiper BsmData::HI;
constexpr BsmData_Wiper BsmData::Wiper_MIN;
constexpr BsmData_Wiper BsmData::Wiper_MAX;
constexpr int BsmData::Wiper_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BsmData_OutofControl_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[20];
}
bool BsmData_OutofControl_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BsmData_OutofControl BsmData::NO_OUTCON;
constexpr BsmData_OutofControl BsmData::YES_OUTCON;
constexpr BsmData_OutofControl BsmData::OutofControl_MIN;
constexpr BsmData_OutofControl BsmData::OutofControl_MAX;
constexpr int BsmData::OutofControl_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantData_PlateColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[21];
}
bool ParticipantData_PlateColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParticipantData_PlateColor ParticipantData::UNKNOWN_PLATE_COLOR;
constexpr ParticipantData_PlateColor ParticipantData::BLUE_PLATE;
constexpr ParticipantData_PlateColor ParticipantData::YELLOW_PLATE;
constexpr ParticipantData_PlateColor ParticipantData::WHITE_PLATE;
constexpr ParticipantData_PlateColor ParticipantData::BLACK_PLATE;
constexpr ParticipantData_PlateColor ParticipantData::YELLOW_GREEN_PLATE;
constexpr ParticipantData_PlateColor ParticipantData::GRADIENT_GREEN_PLATE;
constexpr ParticipantData_PlateColor ParticipantData::PlateColor_MIN;
constexpr ParticipantData_PlateColor ParticipantData::PlateColor_MAX;
constexpr int ParticipantData::PlateColor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantData_VehicleColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[22];
}
bool ParticipantData_VehicleColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParticipantData_VehicleColor ParticipantData::UNKNOWN_VEHICEL_COLOR;
constexpr ParticipantData_VehicleColor ParticipantData::WHITE;
constexpr ParticipantData_VehicleColor ParticipantData::GRAY;
constexpr ParticipantData_VehicleColor ParticipantData::YELLOW;
constexpr ParticipantData_VehicleColor ParticipantData::PINK;
constexpr ParticipantData_VehicleColor ParticipantData::RED;
constexpr ParticipantData_VehicleColor ParticipantData::GREEN;
constexpr ParticipantData_VehicleColor ParticipantData::BLUE;
constexpr ParticipantData_VehicleColor ParticipantData::BROWN;
constexpr ParticipantData_VehicleColor ParticipantData::BLACK;
constexpr ParticipantData_VehicleColor ParticipantData::PURPLE;
constexpr ParticipantData_VehicleColor ParticipantData::OTHER;
constexpr ParticipantData_VehicleColor ParticipantData::VehicleColor_MIN;
constexpr ParticipantData_VehicleColor ParticipantData::VehicleColor_MAX;
constexpr int ParticipantData::VehicleColor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantData_ParticipantTypeExt_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[23];
}
bool ParticipantData_ParticipantTypeExt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParticipantData_ParticipantTypeExt ParticipantData::UNKNOWN_OBJECT_TYPE_EXT;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::UNKNOWN_MOVABLE;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::UNKNOWN_UNMOVABLE;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::CAR;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::VAN;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::TRUCK;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::BUS;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::CYCLIST;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::MOTORCYCLIST;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::TRICYCLIST;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::PEDESTRIAN;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::ParticipantTypeExt_MIN;
constexpr ParticipantData_ParticipantTypeExt ParticipantData::ParticipantTypeExt_MAX;
constexpr int ParticipantData::ParticipantTypeExt_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjIdValue_Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[24];
}
bool ObjIdValue_Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObjIdValue_Role ObjIdValue::ACTIVE;
constexpr ObjIdValue_Role ObjIdValue::PASSIVE;
constexpr ObjIdValue_Role ObjIdValue::NOTCLEAR;
constexpr ObjIdValue_Role ObjIdValue::Role_MIN;
constexpr ObjIdValue_Role ObjIdValue::Role_MAX;
constexpr int ObjIdValue::Role_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RteData_EventSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[25];
}
bool RteData_EventSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RteData_EventSource RteData::UNKNOWN_EVENT_SOURCE;
constexpr RteData_EventSource RteData::TRAFFIC_POLICE;
constexpr RteData_EventSource RteData::GOVENMENT;
constexpr RteData_EventSource RteData::METEOROLOGICAL_DEPARTMENT;
constexpr RteData_EventSource RteData::INTERNET_SERVICES;
constexpr RteData_EventSource RteData::LOCAL_DETECTION;
constexpr RteData_EventSource RteData::EventSource_MIN;
constexpr RteData_EventSource RteData::EventSource_MAX;
constexpr int RteData::EventSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveRequest_ReqStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[26];
}
bool DriveRequest_ReqStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DriveRequest_ReqStatus DriveRequest::UNKNOWN;
constexpr DriveRequest_ReqStatus DriveRequest::REQUEST;
constexpr DriveRequest_ReqStatus DriveRequest::COMFIRMED;
constexpr DriveRequest_ReqStatus DriveRequest::CANCEL;
constexpr DriveRequest_ReqStatus DriveRequest::COMPLETE;
constexpr DriveRequest_ReqStatus DriveRequest::ReqStatus_MIN;
constexpr DriveRequest_ReqStatus DriveRequest::ReqStatus_MAX;
constexpr int DriveRequest::ReqStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusData_StatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[27];
}
bool StatusData_StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StatusData_StatusType StatusData::DEV_STATUS_UNKNOWN;
constexpr StatusData_StatusType StatusData::DEV_STATUS_OK;
constexpr StatusData_StatusType StatusData::DEV_STATUS_ABNORMAL;
constexpr StatusData_StatusType StatusData::DEV_STATUS_OFF;
constexpr StatusData_StatusType StatusData::DEV_STATUS_REBOOT;
constexpr StatusData_StatusType StatusData::DEV_STATUS_MAINTAIN;
constexpr StatusData_StatusType StatusData::DEV_STATUS_SCRAP;
constexpr StatusData_StatusType StatusData::StatusType_MIN;
constexpr StatusData_StatusType StatusData::StatusType_MAX;
constexpr int StatusData::StatusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[28];
}
bool Message_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[29];
}
bool DataSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[30];
}
bool TimeConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticipantType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[31];
}
bool ParticipantType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpeedConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[32];
}
bool SpeedConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeadingConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[33];
}
bool HeadingConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[34];
}
bool VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 20:
    case 21:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 90:
    case 91:
    case 92:
    case 93:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Maneuver_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[35];
}
bool Maneuver_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapElementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[36];
}
bool MapElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[37];
}
bool PlateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 31:
    case 32:
    case 41:
    case 42:
    case 43:
    case 44:
    case 51:
    case 52:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstaclesType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[38];
}
bool ObstaclesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SceneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[39];
}
bool SceneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v2x_2eproto);
  return file_level_enum_descriptors_v2x_2eproto[40];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 200:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RsiTimeDetails::_Internal {
 public:
};

RsiTimeDetails::RsiTimeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RsiTimeDetails)
}
RsiTimeDetails::RsiTimeDetails(const RsiTimeDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RsiTimeDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.endtimeconfidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.starttime_, &from._impl_.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endtimeconfidence_) -
    reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.endtimeconfidence_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RsiTimeDetails)
}

inline void RsiTimeDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){uint64_t{0u}}
    , decltype(_impl_.endtime_){uint64_t{0u}}
    , decltype(_impl_.endtimeconfidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RsiTimeDetails::~RsiTimeDetails() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RsiTimeDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RsiTimeDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RsiTimeDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RsiTimeDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RsiTimeDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.endtimeconfidence_) -
      reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.endtimeconfidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RsiTimeDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 startTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 endTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TimeConfidence endTimeConfidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_endtimeconfidence(static_cast<::cn::seisys::v2x::pb::TimeConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RsiTimeDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RsiTimeDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 startTime = 1;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_starttime(), target);
  }

  // uint64 endTime = 2;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_endtime(), target);
  }

  // .cn.seisys.v2x.pb.TimeConfidence endTimeConfidence = 3;
  if (this->_internal_endtimeconfidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_endtimeconfidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RsiTimeDetails)
  return target;
}

size_t RsiTimeDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RsiTimeDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 startTime = 1;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_starttime());
  }

  // uint64 endTime = 2;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_endtime());
  }

  // .cn.seisys.v2x.pb.TimeConfidence endTimeConfidence = 3;
  if (this->_internal_endtimeconfidence() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_endtimeconfidence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RsiTimeDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RsiTimeDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RsiTimeDetails::GetClassData() const { return &_class_data_; }


void RsiTimeDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RsiTimeDetails*>(&to_msg);
  auto& from = static_cast<const RsiTimeDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RsiTimeDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_endtimeconfidence() != 0) {
    _this->_internal_set_endtimeconfidence(from._internal_endtimeconfidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RsiTimeDetails::CopyFrom(const RsiTimeDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RsiTimeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsiTimeDetails::IsInitialized() const {
  return true;
}

void RsiTimeDetails::InternalSwap(RsiTimeDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RsiTimeDetails, _impl_.endtimeconfidence_)
      + sizeof(RsiTimeDetails::_impl_.endtimeconfidence_)
      - PROTOBUF_FIELD_OFFSET(RsiTimeDetails, _impl_.starttime_)>(
          reinterpret_cast<char*>(&_impl_.starttime_),
          reinterpret_cast<char*>(&other->_impl_.starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RsiTimeDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[0]);
}

// ===================================================================

class Position3D::_Internal {
 public:
};

Position3D::Position3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Position3D)
}
Position3D::Position3D(const Position3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lat_){}
    , decltype(_impl_.lon_){}
    , decltype(_impl_.ele_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lat_, &from._impl_.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ele_) -
    reinterpret_cast<char*>(&_impl_.lat_)) + sizeof(_impl_.ele_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Position3D)
}

inline void Position3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lat_){0}
    , decltype(_impl_.lon_){0}
    , decltype(_impl_.ele_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position3D::~Position3D() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Position3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Position3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ele_) -
      reinterpret_cast<char*>(&_impl_.lat_)) + sizeof(_impl_.ele_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ele = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ele_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Position3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lat = 1;
  if (this->_internal_lat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lat(), target);
  }

  // int32 lon = 2;
  if (this->_internal_lon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lon(), target);
  }

  // int32 ele = 3;
  if (this->_internal_ele() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ele(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Position3D)
  return target;
}

size_t Position3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Position3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lat = 1;
  if (this->_internal_lat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lat());
  }

  // int32 lon = 2;
  if (this->_internal_lon() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lon());
  }

  // int32 ele = 3;
  if (this->_internal_ele() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ele());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position3D::GetClassData() const { return &_class_data_; }


void Position3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position3D*>(&to_msg);
  auto& from = static_cast<const Position3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Position3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lat() != 0) {
    _this->_internal_set_lat(from._internal_lat());
  }
  if (from._internal_lon() != 0) {
    _this->_internal_set_lon(from._internal_lon());
  }
  if (from._internal_ele() != 0) {
    _this->_internal_set_ele(from._internal_ele());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position3D::CopyFrom(const Position3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Position3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position3D::IsInitialized() const {
  return true;
}

void Position3D::InternalSwap(Position3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position3D, _impl_.ele_)
      + sizeof(Position3D::_impl_.ele_)
      - PROTOBUF_FIELD_OFFSET(Position3D, _impl_.lat_)>(
          reinterpret_cast<char*>(&_impl_.lat_),
          reinterpret_cast<char*>(&other->_impl_.lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[1]);
}

// ===================================================================

class PositionConfidenceSet::_Internal {
 public:
};

PositionConfidenceSet::PositionConfidenceSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PositionConfidenceSet)
}
PositionConfidenceSet::PositionConfidenceSet(const PositionConfidenceSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionConfidenceSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posconfid_){}
    , decltype(_impl_.eleconfid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posconfid_, &from._impl_.posconfid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eleconfid_) -
    reinterpret_cast<char*>(&_impl_.posconfid_)) + sizeof(_impl_.eleconfid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PositionConfidenceSet)
}

inline void PositionConfidenceSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posconfid_){0}
    , decltype(_impl_.eleconfid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionConfidenceSet::~PositionConfidenceSet() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PositionConfidenceSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionConfidenceSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionConfidenceSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionConfidenceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PositionConfidenceSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posconfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.eleconfid_) -
      reinterpret_cast<char*>(&_impl_.posconfid_)) + sizeof(_impl_.eleconfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionConfidenceSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.PositionConfidenceSet.PositionConfidence posConfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_posconfid(static_cast<::cn::seisys::v2x::pb::PositionConfidenceSet_PositionConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PositionConfidenceSet.ElevationConfidence eleConfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eleconfid(static_cast<::cn::seisys::v2x::pb::PositionConfidenceSet_ElevationConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionConfidenceSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PositionConfidenceSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.PositionConfidenceSet.PositionConfidence posConfid = 1;
  if (this->_internal_posconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_posconfid(), target);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet.ElevationConfidence eleConfid = 2;
  if (this->_internal_eleconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eleconfid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PositionConfidenceSet)
  return target;
}

size_t PositionConfidenceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PositionConfidenceSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.PositionConfidenceSet.PositionConfidence posConfid = 1;
  if (this->_internal_posconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_posconfid());
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet.ElevationConfidence eleConfid = 2;
  if (this->_internal_eleconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_eleconfid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionConfidenceSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionConfidenceSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionConfidenceSet::GetClassData() const { return &_class_data_; }


void PositionConfidenceSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionConfidenceSet*>(&to_msg);
  auto& from = static_cast<const PositionConfidenceSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PositionConfidenceSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posconfid() != 0) {
    _this->_internal_set_posconfid(from._internal_posconfid());
  }
  if (from._internal_eleconfid() != 0) {
    _this->_internal_set_eleconfid(from._internal_eleconfid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionConfidenceSet::CopyFrom(const PositionConfidenceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PositionConfidenceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionConfidenceSet::IsInitialized() const {
  return true;
}

void PositionConfidenceSet::InternalSwap(PositionConfidenceSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionConfidenceSet, _impl_.eleconfid_)
      + sizeof(PositionConfidenceSet::_impl_.eleconfid_)
      - PROTOBUF_FIELD_OFFSET(PositionConfidenceSet, _impl_.posconfid_)>(
          reinterpret_cast<char*>(&_impl_.posconfid_),
          reinterpret_cast<char*>(&other->_impl_.posconfid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionConfidenceSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[2]);
}

// ===================================================================

class ParticipantSize::_Internal {
 public:
};

ParticipantSize::ParticipantSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ParticipantSize)
}
ParticipantSize::ParticipantSize(const ParticipantSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ParticipantSize)
}

inline void ParticipantSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0u}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParticipantSize::~ParticipantSize() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ParticipantSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParticipantSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantSize::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ParticipantSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ParticipantSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ParticipantSize)
  return target;
}

size_t ParticipantSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ParticipantSize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantSize::GetClassData() const { return &_class_data_; }


void ParticipantSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantSize*>(&to_msg);
  auto& from = static_cast<const ParticipantSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ParticipantSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantSize::CopyFrom(const ParticipantSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ParticipantSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantSize::IsInitialized() const {
  return true;
}

void ParticipantSize::InternalSwap(ParticipantSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantSize, _impl_.height_)
      + sizeof(ParticipantSize::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ParticipantSize, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[3]);
}

// ===================================================================

class ParticipantSizeConfidence::_Internal {
 public:
};

ParticipantSizeConfidence::ParticipantSizeConfidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ParticipantSizeConfidence)
}
ParticipantSizeConfidence::ParticipantSizeConfidence(const ParticipantSizeConfidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantSizeConfidence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.widthconfid_){}
    , decltype(_impl_.lengthconfid_){}
    , decltype(_impl_.heightconfid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.widthconfid_, &from._impl_.widthconfid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heightconfid_) -
    reinterpret_cast<char*>(&_impl_.widthconfid_)) + sizeof(_impl_.heightconfid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ParticipantSizeConfidence)
}

inline void ParticipantSizeConfidence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.widthconfid_){0}
    , decltype(_impl_.lengthconfid_){0}
    , decltype(_impl_.heightconfid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParticipantSizeConfidence::~ParticipantSizeConfidence() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ParticipantSizeConfidence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantSizeConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParticipantSizeConfidence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantSizeConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ParticipantSizeConfidence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.widthconfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.heightconfid_) -
      reinterpret_cast<char*>(&_impl_.widthconfid_)) + sizeof(_impl_.heightconfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantSizeConfidence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence widthConfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_widthconfid(static_cast<::cn::seisys::v2x::pb::ParticipantSizeConfidence_SizeValueConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence lengthConfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lengthconfid(static_cast<::cn::seisys::v2x::pb::ParticipantSizeConfidence_SizeValueConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence heightConfid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_heightconfid(static_cast<::cn::seisys::v2x::pb::ParticipantSizeConfidence_SizeValueConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantSizeConfidence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ParticipantSizeConfidence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence widthConfid = 1;
  if (this->_internal_widthconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_widthconfid(), target);
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence lengthConfid = 2;
  if (this->_internal_lengthconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lengthconfid(), target);
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence heightConfid = 3;
  if (this->_internal_heightconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_heightconfid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ParticipantSizeConfidence)
  return target;
}

size_t ParticipantSizeConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ParticipantSizeConfidence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence widthConfid = 1;
  if (this->_internal_widthconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_widthconfid());
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence lengthConfid = 2;
  if (this->_internal_lengthconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lengthconfid());
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence.SizeValueConfidence heightConfid = 3;
  if (this->_internal_heightconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_heightconfid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantSizeConfidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantSizeConfidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantSizeConfidence::GetClassData() const { return &_class_data_; }


void ParticipantSizeConfidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantSizeConfidence*>(&to_msg);
  auto& from = static_cast<const ParticipantSizeConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ParticipantSizeConfidence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_widthconfid() != 0) {
    _this->_internal_set_widthconfid(from._internal_widthconfid());
  }
  if (from._internal_lengthconfid() != 0) {
    _this->_internal_set_lengthconfid(from._internal_lengthconfid());
  }
  if (from._internal_heightconfid() != 0) {
    _this->_internal_set_heightconfid(from._internal_heightconfid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantSizeConfidence::CopyFrom(const ParticipantSizeConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ParticipantSizeConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantSizeConfidence::IsInitialized() const {
  return true;
}

void ParticipantSizeConfidence::InternalSwap(ParticipantSizeConfidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantSizeConfidence, _impl_.heightconfid_)
      + sizeof(ParticipantSizeConfidence::_impl_.heightconfid_)
      - PROTOBUF_FIELD_OFFSET(ParticipantSizeConfidence, _impl_.widthconfid_)>(
          reinterpret_cast<char*>(&_impl_.widthconfid_),
          reinterpret_cast<char*>(&other->_impl_.widthconfid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantSizeConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[4]);
}

// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Polygon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){from._impl_.pos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Polygon)
}

inline void Polygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Polygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pos_.~RepeatedPtrField();
}

void Polygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.seisys.v2x.pb.Position3D pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Position3D pos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pos_size()); i < n; i++) {
    const auto& repfield = this->_internal_pos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Position3D pos = 1;
  total_size += 1UL * this->_internal_pos_size();
  for (const auto& msg : this->_impl_.pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon::GetClassData() const { return &_class_data_; }


void Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Polygon*>(&to_msg);
  auto& from = static_cast<const Polygon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Polygon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pos_.MergeFrom(from._impl_.pos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pos_.InternalSwap(&other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[5]);
}

// ===================================================================

class DetectorArea::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Polygon& polygon(const DetectorArea* msg);
  static const ::cn::seisys::v2x::pb::NodeReferenceId& nodeid(const DetectorArea* msg);
};

const ::cn::seisys::v2x::pb::Polygon&
DetectorArea::_Internal::polygon(const DetectorArea* msg) {
  return *msg->_impl_.polygon_;
}
const ::cn::seisys::v2x::pb::NodeReferenceId&
DetectorArea::_Internal::nodeid(const DetectorArea* msg) {
  return *msg->_impl_.nodeid_;
}
DetectorArea::DetectorArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.DetectorArea)
}
DetectorArea::DetectorArea(const DetectorArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectorArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.settime_){}
    , decltype(_impl_.areaid_){}
    , decltype(_impl_.laneid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_polygon()) {
    _this->_impl_.polygon_ = new ::cn::seisys::v2x::pb::Polygon(*from._impl_.polygon_);
  }
  if (from._internal_has_nodeid()) {
    _this->_impl_.nodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.nodeid_);
  }
  ::memcpy(&_impl_.settime_, &from._impl_.settime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.laneid_) -
    reinterpret_cast<char*>(&_impl_.settime_)) + sizeof(_impl_.laneid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.DetectorArea)
}

inline void DetectorArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.settime_){int64_t{0}}
    , decltype(_impl_.areaid_){0}
    , decltype(_impl_.laneid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectorArea::~DetectorArea() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.DetectorArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectorArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.polygon_;
  if (this != internal_default_instance()) delete _impl_.nodeid_;
}

void DetectorArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectorArea::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.DetectorArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.polygon_ != nullptr) {
    delete _impl_.polygon_;
  }
  _impl_.polygon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nodeid_ != nullptr) {
    delete _impl_.nodeid_;
  }
  _impl_.nodeid_ = nullptr;
  ::memset(&_impl_.settime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.laneid_) -
      reinterpret_cast<char*>(&_impl_.settime_)) + sizeof(_impl_.laneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectorArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 areaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 setTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.settime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Polygon polygon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 laneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectorArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.DetectorArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 areaId = 1;
  if (this->_internal_areaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_areaid(), target);
  }

  // int64 setTime = 2;
  if (this->_internal_settime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_settime(), target);
  }

  // .cn.seisys.v2x.pb.Polygon polygon = 3;
  if (this->_internal_has_polygon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::polygon(this),
        _Internal::polygon(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 4;
  if (this->_internal_has_nodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::nodeid(this),
        _Internal::nodeid(this).GetCachedSize(), target, stream);
  }

  // int32 laneId = 5;
  if (this->_internal_laneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_laneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.DetectorArea)
  return target;
}

size_t DetectorArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.DetectorArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.Polygon polygon = 3;
  if (this->_internal_has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.polygon_);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 4;
  if (this->_internal_has_nodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodeid_);
  }

  // int64 setTime = 2;
  if (this->_internal_settime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_settime());
  }

  // int32 areaId = 1;
  if (this->_internal_areaid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areaid());
  }

  // int32 laneId = 5;
  if (this->_internal_laneid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_laneid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectorArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectorArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectorArea::GetClassData() const { return &_class_data_; }


void DetectorArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectorArea*>(&to_msg);
  auto& from = static_cast<const DetectorArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.DetectorArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_polygon()) {
    _this->_internal_mutable_polygon()->::cn::seisys::v2x::pb::Polygon::MergeFrom(
        from._internal_polygon());
  }
  if (from._internal_has_nodeid()) {
    _this->_internal_mutable_nodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_nodeid());
  }
  if (from._internal_settime() != 0) {
    _this->_internal_set_settime(from._internal_settime());
  }
  if (from._internal_areaid() != 0) {
    _this->_internal_set_areaid(from._internal_areaid());
  }
  if (from._internal_laneid() != 0) {
    _this->_internal_set_laneid(from._internal_laneid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectorArea::CopyFrom(const DetectorArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.DetectorArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorArea::IsInitialized() const {
  return true;
}

void DetectorArea::InternalSwap(DetectorArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectorArea, _impl_.laneid_)
      + sizeof(DetectorArea::_impl_.laneid_)
      - PROTOBUF_FIELD_OFFSET(DetectorArea, _impl_.polygon_)>(
          reinterpret_cast<char*>(&_impl_.polygon_),
          reinterpret_cast<char*>(&other->_impl_.polygon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectorArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[6]);
}

// ===================================================================

class RegulatorySpeedLimit::_Internal {
 public:
};

RegulatorySpeedLimit::RegulatorySpeedLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RegulatorySpeedLimit)
}
RegulatorySpeedLimit::RegulatorySpeedLimit(const RegulatorySpeedLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegulatorySpeedLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speedlimittype_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.speedlimittype_, &from._impl_.speedlimittype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.speedlimittype_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RegulatorySpeedLimit)
}

inline void RegulatorySpeedLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speedlimittype_){0}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegulatorySpeedLimit::~RegulatorySpeedLimit() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RegulatorySpeedLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegulatorySpeedLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegulatorySpeedLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegulatorySpeedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RegulatorySpeedLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.speedlimittype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.speedlimittype_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegulatorySpeedLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.RegulatorySpeedLimit.SpeedLimitType speedLimitType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speedlimittype(static_cast<::cn::seisys::v2x::pb::RegulatorySpeedLimit_SpeedLimitType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegulatorySpeedLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RegulatorySpeedLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.RegulatorySpeedLimit.SpeedLimitType speedLimitType = 1;
  if (this->_internal_speedlimittype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_speedlimittype(), target);
  }

  // int32 speed = 2;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RegulatorySpeedLimit)
  return target;
}

size_t RegulatorySpeedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RegulatorySpeedLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.RegulatorySpeedLimit.SpeedLimitType speedLimitType = 1;
  if (this->_internal_speedlimittype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_speedlimittype());
  }

  // int32 speed = 2;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegulatorySpeedLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegulatorySpeedLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegulatorySpeedLimit::GetClassData() const { return &_class_data_; }


void RegulatorySpeedLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegulatorySpeedLimit*>(&to_msg);
  auto& from = static_cast<const RegulatorySpeedLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RegulatorySpeedLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_speedlimittype() != 0) {
    _this->_internal_set_speedlimittype(from._internal_speedlimittype());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegulatorySpeedLimit::CopyFrom(const RegulatorySpeedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RegulatorySpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegulatorySpeedLimit::IsInitialized() const {
  return true;
}

void RegulatorySpeedLimit::InternalSwap(RegulatorySpeedLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegulatorySpeedLimit, _impl_.speed_)
      + sizeof(RegulatorySpeedLimit::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(RegulatorySpeedLimit, _impl_.speedlimittype_)>(
          reinterpret_cast<char*>(&_impl_.speedlimittype_),
          reinterpret_cast<char*>(&other->_impl_.speedlimittype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegulatorySpeedLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[7]);
}

// ===================================================================

class AccelerationSet4Way::_Internal {
 public:
};

AccelerationSet4Way::AccelerationSet4Way(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.AccelerationSet4Way)
}
AccelerationSet4Way::AccelerationSet4Way(const AccelerationSet4Way& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccelerationSet4Way* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lat_){}
    , decltype(_impl_.lon_){}
    , decltype(_impl_.vert_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lat_, &from._impl_.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.lat_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.AccelerationSet4Way)
}

inline void AccelerationSet4Way::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lat_){0}
    , decltype(_impl_.lon_){0}
    , decltype(_impl_.vert_){0}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccelerationSet4Way::~AccelerationSet4Way() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.AccelerationSet4Way)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccelerationSet4Way::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccelerationSet4Way::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccelerationSet4Way::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.AccelerationSet4Way)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.lat_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelerationSet4Way::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccelerationSet4Way::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.AccelerationSet4Way)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lat = 1;
  if (this->_internal_lat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lat(), target);
  }

  // int32 lon = 2;
  if (this->_internal_lon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lon(), target);
  }

  // int32 vert = 3;
  if (this->_internal_vert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_vert(), target);
  }

  // int32 yaw = 4;
  if (this->_internal_yaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.AccelerationSet4Way)
  return target;
}

size_t AccelerationSet4Way::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.AccelerationSet4Way)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lat = 1;
  if (this->_internal_lat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lat());
  }

  // int32 lon = 2;
  if (this->_internal_lon() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lon());
  }

  // int32 vert = 3;
  if (this->_internal_vert() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vert());
  }

  // int32 yaw = 4;
  if (this->_internal_yaw() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yaw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccelerationSet4Way::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccelerationSet4Way::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccelerationSet4Way::GetClassData() const { return &_class_data_; }


void AccelerationSet4Way::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccelerationSet4Way*>(&to_msg);
  auto& from = static_cast<const AccelerationSet4Way&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.AccelerationSet4Way)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lat() != 0) {
    _this->_internal_set_lat(from._internal_lat());
  }
  if (from._internal_lon() != 0) {
    _this->_internal_set_lon(from._internal_lon());
  }
  if (from._internal_vert() != 0) {
    _this->_internal_set_vert(from._internal_vert());
  }
  if (from._internal_yaw() != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccelerationSet4Way::CopyFrom(const AccelerationSet4Way& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.AccelerationSet4Way)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationSet4Way::IsInitialized() const {
  return true;
}

void AccelerationSet4Way::InternalSwap(AccelerationSet4Way* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelerationSet4Way, _impl_.yaw_)
      + sizeof(AccelerationSet4Way::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(AccelerationSet4Way, _impl_.lat_)>(
          reinterpret_cast<char*>(&_impl_.lat_),
          reinterpret_cast<char*>(&other->_impl_.lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerationSet4Way::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[8]);
}

// ===================================================================

class AccelerationConfidence::_Internal {
 public:
};

AccelerationConfidence::AccelerationConfidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.AccelerationConfidence)
}
AccelerationConfidence::AccelerationConfidence(const AccelerationConfidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccelerationConfidence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lonaccelconfid_){}
    , decltype(_impl_.lataccelconfid_){}
    , decltype(_impl_.verticalaccelconfid_){}
    , decltype(_impl_.yawrateconfid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lonaccelconfid_, &from._impl_.lonaccelconfid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yawrateconfid_) -
    reinterpret_cast<char*>(&_impl_.lonaccelconfid_)) + sizeof(_impl_.yawrateconfid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.AccelerationConfidence)
}

inline void AccelerationConfidence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lonaccelconfid_){0}
    , decltype(_impl_.lataccelconfid_){0}
    , decltype(_impl_.verticalaccelconfid_){0}
    , decltype(_impl_.yawrateconfid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccelerationConfidence::~AccelerationConfidence() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.AccelerationConfidence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccelerationConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccelerationConfidence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccelerationConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.AccelerationConfidence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lonaccelconfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yawrateconfid_) -
      reinterpret_cast<char*>(&_impl_.lonaccelconfid_)) + sizeof(_impl_.yawrateconfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelerationConfidence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence lonAccelConfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lonaccelconfid(static_cast<::cn::seisys::v2x::pb::AccelerationConfidence_AccConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence latAccelConfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lataccelconfid(static_cast<::cn::seisys::v2x::pb::AccelerationConfidence_AccConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence verticalAccelConfid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_verticalaccelconfid(static_cast<::cn::seisys::v2x::pb::AccelerationConfidence_AccConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationConfidence.AngularVConfidence yawRateConfid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_yawrateconfid(static_cast<::cn::seisys::v2x::pb::AccelerationConfidence_AngularVConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccelerationConfidence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.AccelerationConfidence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence lonAccelConfid = 1;
  if (this->_internal_lonaccelconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lonaccelconfid(), target);
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence latAccelConfid = 2;
  if (this->_internal_lataccelconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lataccelconfid(), target);
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence verticalAccelConfid = 3;
  if (this->_internal_verticalaccelconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_verticalaccelconfid(), target);
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence.AngularVConfidence yawRateConfid = 4;
  if (this->_internal_yawrateconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_yawrateconfid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.AccelerationConfidence)
  return target;
}

size_t AccelerationConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.AccelerationConfidence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence lonAccelConfid = 1;
  if (this->_internal_lonaccelconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lonaccelconfid());
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence latAccelConfid = 2;
  if (this->_internal_lataccelconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lataccelconfid());
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence.AccConfidence verticalAccelConfid = 3;
  if (this->_internal_verticalaccelconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_verticalaccelconfid());
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence.AngularVConfidence yawRateConfid = 4;
  if (this->_internal_yawrateconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_yawrateconfid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccelerationConfidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccelerationConfidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccelerationConfidence::GetClassData() const { return &_class_data_; }


void AccelerationConfidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccelerationConfidence*>(&to_msg);
  auto& from = static_cast<const AccelerationConfidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.AccelerationConfidence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lonaccelconfid() != 0) {
    _this->_internal_set_lonaccelconfid(from._internal_lonaccelconfid());
  }
  if (from._internal_lataccelconfid() != 0) {
    _this->_internal_set_lataccelconfid(from._internal_lataccelconfid());
  }
  if (from._internal_verticalaccelconfid() != 0) {
    _this->_internal_set_verticalaccelconfid(from._internal_verticalaccelconfid());
  }
  if (from._internal_yawrateconfid() != 0) {
    _this->_internal_set_yawrateconfid(from._internal_yawrateconfid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccelerationConfidence::CopyFrom(const AccelerationConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.AccelerationConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationConfidence::IsInitialized() const {
  return true;
}

void AccelerationConfidence::InternalSwap(AccelerationConfidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelerationConfidence, _impl_.yawrateconfid_)
      + sizeof(AccelerationConfidence::_impl_.yawrateconfid_)
      - PROTOBUF_FIELD_OFFSET(AccelerationConfidence, _impl_.lonaccelconfid_)>(
          reinterpret_cast<char*>(&_impl_.lonaccelconfid_),
          reinterpret_cast<char*>(&other->_impl_.lonaccelconfid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerationConfidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[9]);
}

// ===================================================================

class MotionConfidenceSet::_Internal {
 public:
};

MotionConfidenceSet::MotionConfidenceSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MotionConfidenceSet)
}
MotionConfidenceSet::MotionConfidenceSet(const MotionConfidenceSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotionConfidenceSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speedcfd_){}
    , decltype(_impl_.headingcfd_){}
    , decltype(_impl_.steercfd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.speedcfd_, &from._impl_.speedcfd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steercfd_) -
    reinterpret_cast<char*>(&_impl_.speedcfd_)) + sizeof(_impl_.steercfd_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MotionConfidenceSet)
}

inline void MotionConfidenceSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speedcfd_){0}
    , decltype(_impl_.headingcfd_){0}
    , decltype(_impl_.steercfd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MotionConfidenceSet::~MotionConfidenceSet() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MotionConfidenceSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotionConfidenceSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotionConfidenceSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotionConfidenceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MotionConfidenceSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.speedcfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.steercfd_) -
      reinterpret_cast<char*>(&_impl_.speedcfd_)) + sizeof(_impl_.steercfd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionConfidenceSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.SpeedConfidence speedCfd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speedcfd(static_cast<::cn::seisys::v2x::pb::SpeedConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.HeadingConfidence headingCfd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_headingcfd(static_cast<::cn::seisys::v2x::pb::HeadingConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MotionConfidenceSet.SteeringWheelAngleConfidence steerCfd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_steercfd(static_cast<::cn::seisys::v2x::pb::MotionConfidenceSet_SteeringWheelAngleConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionConfidenceSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MotionConfidenceSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.SpeedConfidence speedCfd = 1;
  if (this->_internal_speedcfd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_speedcfd(), target);
  }

  // .cn.seisys.v2x.pb.HeadingConfidence headingCfd = 2;
  if (this->_internal_headingcfd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_headingcfd(), target);
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet.SteeringWheelAngleConfidence steerCfd = 3;
  if (this->_internal_steercfd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_steercfd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MotionConfidenceSet)
  return target;
}

size_t MotionConfidenceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MotionConfidenceSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.SpeedConfidence speedCfd = 1;
  if (this->_internal_speedcfd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_speedcfd());
  }

  // .cn.seisys.v2x.pb.HeadingConfidence headingCfd = 2;
  if (this->_internal_headingcfd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_headingcfd());
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet.SteeringWheelAngleConfidence steerCfd = 3;
  if (this->_internal_steercfd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_steercfd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionConfidenceSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotionConfidenceSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionConfidenceSet::GetClassData() const { return &_class_data_; }


void MotionConfidenceSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotionConfidenceSet*>(&to_msg);
  auto& from = static_cast<const MotionConfidenceSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MotionConfidenceSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_speedcfd() != 0) {
    _this->_internal_set_speedcfd(from._internal_speedcfd());
  }
  if (from._internal_headingcfd() != 0) {
    _this->_internal_set_headingcfd(from._internal_headingcfd());
  }
  if (from._internal_steercfd() != 0) {
    _this->_internal_set_steercfd(from._internal_steercfd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionConfidenceSet::CopyFrom(const MotionConfidenceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MotionConfidenceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionConfidenceSet::IsInitialized() const {
  return true;
}

void MotionConfidenceSet::InternalSwap(MotionConfidenceSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionConfidenceSet, _impl_.steercfd_)
      + sizeof(MotionConfidenceSet::_impl_.steercfd_)
      - PROTOBUF_FIELD_OFFSET(MotionConfidenceSet, _impl_.speedcfd_)>(
          reinterpret_cast<char*>(&_impl_.speedcfd_),
          reinterpret_cast<char*>(&other->_impl_.speedcfd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionConfidenceSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[10]);
}

// ===================================================================

class VehicleSize::_Internal {
 public:
};

VehicleSize::VehicleSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.VehicleSize)
}
VehicleSize::VehicleSize(const VehicleSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.VehicleSize)
}

inline void VehicleSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleSize::~VehicleSize() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.VehicleSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleSize::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.VehicleSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.VehicleSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.VehicleSize)
  return target;
}

size_t VehicleSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.VehicleSize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleSize::GetClassData() const { return &_class_data_; }


void VehicleSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleSize*>(&to_msg);
  auto& from = static_cast<const VehicleSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.VehicleSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleSize::CopyFrom(const VehicleSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.VehicleSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSize::IsInitialized() const {
  return true;
}

void VehicleSize::InternalSwap(VehicleSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleSize, _impl_.height_)
      + sizeof(VehicleSize::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(VehicleSize, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[11]);
}

// ===================================================================

class NodeReferenceId::_Internal {
 public:
};

NodeReferenceId::NodeReferenceId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.NodeReferenceId)
}
NodeReferenceId::NodeReferenceId(const NodeReferenceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeReferenceId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.nodeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.region_, &from._impl_.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nodeid_) -
    reinterpret_cast<char*>(&_impl_.region_)) + sizeof(_impl_.nodeid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.NodeReferenceId)
}

inline void NodeReferenceId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){0u}
    , decltype(_impl_.nodeid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeReferenceId::~NodeReferenceId() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.NodeReferenceId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeReferenceId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeReferenceId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeReferenceId::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.NodeReferenceId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nodeid_) -
      reinterpret_cast<char*>(&_impl_.region_)) + sizeof(_impl_.nodeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeReferenceId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeReferenceId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.NodeReferenceId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 region = 1;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_region(), target);
  }

  // uint32 nodeId = 2;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nodeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.NodeReferenceId)
  return target;
}

size_t NodeReferenceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.NodeReferenceId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 region = 1;
  if (this->_internal_region() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region());
  }

  // uint32 nodeId = 2;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeReferenceId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeReferenceId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeReferenceId::GetClassData() const { return &_class_data_; }


void NodeReferenceId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeReferenceId*>(&to_msg);
  auto& from = static_cast<const NodeReferenceId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.NodeReferenceId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_region() != 0) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeReferenceId::CopyFrom(const NodeReferenceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.NodeReferenceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReferenceId::IsInitialized() const {
  return true;
}

void NodeReferenceId::InternalSwap(NodeReferenceId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeReferenceId, _impl_.nodeid_)
      + sizeof(NodeReferenceId::_impl_.nodeid_)
      - PROTOBUF_FIELD_OFFSET(NodeReferenceId, _impl_.region_)>(
          reinterpret_cast<char*>(&_impl_.region_),
          reinterpret_cast<char*>(&other->_impl_.region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeReferenceId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[12]);
}

// ===================================================================

class MapLocation::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& nodeid(const MapLocation* msg);
  static const ::cn::seisys::v2x::pb::NodeReferenceId& upstreamnodeid(const MapLocation* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
MapLocation::_Internal::nodeid(const MapLocation* msg) {
  return *msg->_impl_.nodeid_;
}
const ::cn::seisys::v2x::pb::NodeReferenceId&
MapLocation::_Internal::upstreamnodeid(const MapLocation* msg) {
  return *msg->_impl_.upstreamnodeid_;
}
MapLocation::MapLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MapLocation)
}
MapLocation::MapLocation(const MapLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linkname_){}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.sectionid_){}
    , decltype(_impl_.laneid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.linkname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_linkname().empty()) {
    _this->_impl_.linkname_.Set(from._internal_linkname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nodeid()) {
    _this->_impl_.nodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.nodeid_);
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_impl_.upstreamnodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.upstreamnodeid_);
  }
  ::memcpy(&_impl_.sectionid_, &from._impl_.sectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.laneid_) -
    reinterpret_cast<char*>(&_impl_.sectionid_)) + sizeof(_impl_.laneid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MapLocation)
}

inline void MapLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linkname_){}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.sectionid_){0u}
    , decltype(_impl_.laneid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.linkname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapLocation::~MapLocation() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MapLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.linkname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nodeid_;
  if (this != internal_default_instance()) delete _impl_.upstreamnodeid_;
}

void MapLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MapLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.linkname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.nodeid_ != nullptr) {
    delete _impl_.nodeid_;
  }
  _impl_.nodeid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.upstreamnodeid_ != nullptr) {
    delete _impl_.upstreamnodeid_;
  }
  _impl_.upstreamnodeid_ = nullptr;
  ::memset(&_impl_.sectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.laneid_) -
      reinterpret_cast<char*>(&_impl_.sectionid_)) + sizeof(_impl_.laneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string linkName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_linkname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.MapLocation.linkName"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upstreamnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sectionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MapLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nodeid(this),
        _Internal::nodeid(this).GetCachedSize(), target, stream);
  }

  // string linkName = 2;
  if (!this->_internal_linkname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkname().data(), static_cast<int>(this->_internal_linkname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.MapLocation.linkName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_linkname(), target);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 3;
  if (this->_internal_has_upstreamnodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::upstreamnodeid(this),
        _Internal::upstreamnodeid(this).GetCachedSize(), target, stream);
  }

  // uint32 sectionId = 4;
  if (this->_internal_sectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sectionid(), target);
  }

  // uint32 laneId = 5;
  if (this->_internal_laneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_laneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MapLocation)
  return target;
}

size_t MapLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MapLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string linkName = 2;
  if (!this->_internal_linkname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkname());
  }

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodeid_);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 3;
  if (this->_internal_has_upstreamnodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upstreamnodeid_);
  }

  // uint32 sectionId = 4;
  if (this->_internal_sectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sectionid());
  }

  // uint32 laneId = 5;
  if (this->_internal_laneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_laneid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapLocation::GetClassData() const { return &_class_data_; }


void MapLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapLocation*>(&to_msg);
  auto& from = static_cast<const MapLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MapLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_linkname().empty()) {
    _this->_internal_set_linkname(from._internal_linkname());
  }
  if (from._internal_has_nodeid()) {
    _this->_internal_mutable_nodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_nodeid());
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_internal_mutable_upstreamnodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_upstreamnodeid());
  }
  if (from._internal_sectionid() != 0) {
    _this->_internal_set_sectionid(from._internal_sectionid());
  }
  if (from._internal_laneid() != 0) {
    _this->_internal_set_laneid(from._internal_laneid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapLocation::CopyFrom(const MapLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MapLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLocation::IsInitialized() const {
  return true;
}

void MapLocation::InternalSwap(MapLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkname_, lhs_arena,
      &other->_impl_.linkname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapLocation, _impl_.laneid_)
      + sizeof(MapLocation::_impl_.laneid_)
      - PROTOBUF_FIELD_OFFSET(MapLocation, _impl_.nodeid_)>(
          reinterpret_cast<char*>(&_impl_.nodeid_),
          reinterpret_cast<char*>(&other->_impl_.nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[13]);
}

// ===================================================================

class PhaseId::_Internal {
 public:
};

PhaseId::PhaseId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PhaseId)
}
PhaseId::PhaseId(const PhaseId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhaseId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phaseid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.phaseid_ = from._impl_.phaseid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PhaseId)
}

inline void PhaseId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phaseid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PhaseId::~PhaseId() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PhaseId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhaseId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PhaseId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhaseId::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PhaseId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phaseid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 phaseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhaseId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PhaseId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phaseId = 1;
  if (this->_internal_phaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PhaseId)
  return target;
}

size_t PhaseId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PhaseId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 phaseId = 1;
  if (this->_internal_phaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhaseId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhaseId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhaseId::GetClassData() const { return &_class_data_; }


void PhaseId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhaseId*>(&to_msg);
  auto& from = static_cast<const PhaseId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PhaseId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_phaseid() != 0) {
    _this->_internal_set_phaseid(from._internal_phaseid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhaseId::CopyFrom(const PhaseId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PhaseId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseId::IsInitialized() const {
  return true;
}

void PhaseId::InternalSwap(PhaseId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.phaseid_, other->_impl_.phaseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[14]);
}

// ===================================================================

class ReferenceLanes::_Internal {
 public:
};

ReferenceLanes::ReferenceLanes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReferenceLanes)
}
ReferenceLanes::ReferenceLanes(const ReferenceLanes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceLanes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.referencelanes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.referencelanes_ = from._impl_.referencelanes_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReferenceLanes)
}

inline void ReferenceLanes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.referencelanes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReferenceLanes::~ReferenceLanes() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReferenceLanes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLanes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReferenceLanes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLanes::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReferenceLanes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.referencelanes_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLanes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 referenceLanes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.referencelanes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLanes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReferenceLanes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 referenceLanes = 1;
  if (this->_internal_referencelanes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_referencelanes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReferenceLanes)
  return target;
}

size_t ReferenceLanes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReferenceLanes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 referenceLanes = 1;
  if (this->_internal_referencelanes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_referencelanes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLanes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceLanes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLanes::GetClassData() const { return &_class_data_; }


void ReferenceLanes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceLanes*>(&to_msg);
  auto& from = static_cast<const ReferenceLanes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReferenceLanes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_referencelanes() != 0) {
    _this->_internal_set_referencelanes(from._internal_referencelanes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLanes::CopyFrom(const ReferenceLanes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReferenceLanes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLanes::IsInitialized() const {
  return true;
}

void ReferenceLanes::InternalSwap(ReferenceLanes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.referencelanes_, other->_impl_.referencelanes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLanes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[15]);
}

// ===================================================================

class ReferencePath::_Internal {
 public:
};

ReferencePath::ReferencePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReferencePath)
}
ReferencePath::ReferencePath(const ReferencePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferencePath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.activepath_){from._impl_.activepath_}
    , decltype(_impl_.pathradius_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pathradius_ = from._impl_.pathradius_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReferencePath)
}

inline void ReferencePath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.activepath_){arena}
    , decltype(_impl_.pathradius_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReferencePath::~ReferencePath() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReferencePath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferencePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activepath_.~RepeatedPtrField();
}

void ReferencePath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferencePath::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReferencePath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activepath_.Clear();
  _impl_.pathradius_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferencePath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.seisys.v2x.pb.Position3D activePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activepath(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 pathRadius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pathradius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferencePath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReferencePath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Position3D activePath = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activepath_size()); i < n; i++) {
    const auto& repfield = this->_internal_activepath(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 pathRadius = 2;
  if (this->_internal_pathradius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pathradius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReferencePath)
  return target;
}

size_t ReferencePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReferencePath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Position3D activePath = 1;
  total_size += 1UL * this->_internal_activepath_size();
  for (const auto& msg : this->_impl_.activepath_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pathRadius = 2;
  if (this->_internal_pathradius() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pathradius());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferencePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferencePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferencePath::GetClassData() const { return &_class_data_; }


void ReferencePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferencePath*>(&to_msg);
  auto& from = static_cast<const ReferencePath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReferencePath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activepath_.MergeFrom(from._impl_.activepath_);
  if (from._internal_pathradius() != 0) {
    _this->_internal_set_pathradius(from._internal_pathradius());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferencePath::CopyFrom(const ReferencePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReferencePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferencePath::IsInitialized() const {
  return true;
}

void ReferencePath::InternalSwap(ReferencePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.activepath_.InternalSwap(&other->_impl_.activepath_);
  swap(_impl_.pathradius_, other->_impl_.pathradius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferencePath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[16]);
}

// ===================================================================

class ReferenceLink::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& upstreamnodeid(const ReferenceLink* msg);
  static const ::cn::seisys::v2x::pb::NodeReferenceId& downstreamnodeid(const ReferenceLink* msg);
  static const ::cn::seisys::v2x::pb::ReferenceLanes& referencelanes(const ReferenceLink* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
ReferenceLink::_Internal::upstreamnodeid(const ReferenceLink* msg) {
  return *msg->_impl_.upstreamnodeid_;
}
const ::cn::seisys::v2x::pb::NodeReferenceId&
ReferenceLink::_Internal::downstreamnodeid(const ReferenceLink* msg) {
  return *msg->_impl_.downstreamnodeid_;
}
const ::cn::seisys::v2x::pb::ReferenceLanes&
ReferenceLink::_Internal::referencelanes(const ReferenceLink* msg) {
  return *msg->_impl_.referencelanes_;
}
ReferenceLink::ReferenceLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReferenceLink)
}
ReferenceLink::ReferenceLink(const ReferenceLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.downstreamnodeid_){nullptr}
    , decltype(_impl_.referencelanes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upstreamnodeid()) {
    _this->_impl_.upstreamnodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.upstreamnodeid_);
  }
  if (from._internal_has_downstreamnodeid()) {
    _this->_impl_.downstreamnodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.downstreamnodeid_);
  }
  if (from._internal_has_referencelanes()) {
    _this->_impl_.referencelanes_ = new ::cn::seisys::v2x::pb::ReferenceLanes(*from._impl_.referencelanes_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReferenceLink)
}

inline void ReferenceLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.downstreamnodeid_){nullptr}
    , decltype(_impl_.referencelanes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReferenceLink::~ReferenceLink() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReferenceLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.upstreamnodeid_;
  if (this != internal_default_instance()) delete _impl_.downstreamnodeid_;
  if (this != internal_default_instance()) delete _impl_.referencelanes_;
}

void ReferenceLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLink::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReferenceLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.upstreamnodeid_ != nullptr) {
    delete _impl_.upstreamnodeid_;
  }
  _impl_.upstreamnodeid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.downstreamnodeid_ != nullptr) {
    delete _impl_.downstreamnodeid_;
  }
  _impl_.downstreamnodeid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.referencelanes_ != nullptr) {
    delete _impl_.referencelanes_;
  }
  _impl_.referencelanes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_upstreamnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId downstreamNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_downstreamnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReferenceLanes referenceLanes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_referencelanes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReferenceLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 1;
  if (this->_internal_has_upstreamnodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::upstreamnodeid(this),
        _Internal::upstreamnodeid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId downstreamNodeId = 2;
  if (this->_internal_has_downstreamnodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::downstreamnodeid(this),
        _Internal::downstreamnodeid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ReferenceLanes referenceLanes = 3;
  if (this->_internal_has_referencelanes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::referencelanes(this),
        _Internal::referencelanes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReferenceLink)
  return target;
}

size_t ReferenceLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReferenceLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 1;
  if (this->_internal_has_upstreamnodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upstreamnodeid_);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId downstreamNodeId = 2;
  if (this->_internal_has_downstreamnodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.downstreamnodeid_);
  }

  // .cn.seisys.v2x.pb.ReferenceLanes referenceLanes = 3;
  if (this->_internal_has_referencelanes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.referencelanes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLink::GetClassData() const { return &_class_data_; }


void ReferenceLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceLink*>(&to_msg);
  auto& from = static_cast<const ReferenceLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReferenceLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_upstreamnodeid()) {
    _this->_internal_mutable_upstreamnodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_upstreamnodeid());
  }
  if (from._internal_has_downstreamnodeid()) {
    _this->_internal_mutable_downstreamnodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_downstreamnodeid());
  }
  if (from._internal_has_referencelanes()) {
    _this->_internal_mutable_referencelanes()->::cn::seisys::v2x::pb::ReferenceLanes::MergeFrom(
        from._internal_referencelanes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLink::CopyFrom(const ReferenceLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReferenceLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLink::IsInitialized() const {
  return true;
}

void ReferenceLink::InternalSwap(ReferenceLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLink, _impl_.referencelanes_)
      + sizeof(ReferenceLink::_impl_.referencelanes_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLink, _impl_.upstreamnodeid_)>(
          reinterpret_cast<char*>(&_impl_.upstreamnodeid_),
          reinterpret_cast<char*>(&other->_impl_.upstreamnodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[17]);
}

// ===================================================================

class AllowedManeuvers::_Internal {
 public:
};

AllowedManeuvers::AllowedManeuvers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.AllowedManeuvers)
}
AllowedManeuvers::AllowedManeuvers(const AllowedManeuvers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllowedManeuvers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maneuvers_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.maneuvers_ = from._impl_.maneuvers_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.AllowedManeuvers)
}

inline void AllowedManeuvers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maneuvers_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllowedManeuvers::~AllowedManeuvers() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.AllowedManeuvers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowedManeuvers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllowedManeuvers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowedManeuvers::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.AllowedManeuvers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maneuvers_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedManeuvers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 maneuvers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.maneuvers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowedManeuvers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.AllowedManeuvers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maneuvers = 1;
  if (this->_internal_maneuvers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maneuvers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.AllowedManeuvers)
  return target;
}

size_t AllowedManeuvers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.AllowedManeuvers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 maneuvers = 1;
  if (this->_internal_maneuvers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maneuvers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedManeuvers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllowedManeuvers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedManeuvers::GetClassData() const { return &_class_data_; }


void AllowedManeuvers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllowedManeuvers*>(&to_msg);
  auto& from = static_cast<const AllowedManeuvers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.AllowedManeuvers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_maneuvers() != 0) {
    _this->_internal_set_maneuvers(from._internal_maneuvers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedManeuvers::CopyFrom(const AllowedManeuvers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.AllowedManeuvers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedManeuvers::IsInitialized() const {
  return true;
}

void AllowedManeuvers::InternalSwap(AllowedManeuvers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.maneuvers_, other->_impl_.maneuvers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedManeuvers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[18]);
}

// ===================================================================

class LaneStatInfo::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LinkStatInfo& linkstatinfo(const LaneStatInfo* msg);
  static const ::cn::seisys::v2x::pb::SectionStatInfo& sectionstatinfo(const LaneStatInfo* msg);
};

const ::cn::seisys::v2x::pb::LinkStatInfo&
LaneStatInfo::_Internal::linkstatinfo(const LaneStatInfo* msg) {
  return *msg->_impl_.linkstatinfo_;
}
const ::cn::seisys::v2x::pb::SectionStatInfo&
LaneStatInfo::_Internal::sectionstatinfo(const LaneStatInfo* msg) {
  return *msg->_impl_.sectionstatinfo_;
}
LaneStatInfo::LaneStatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneStatInfo)
}
LaneStatInfo::LaneStatInfo(const LaneStatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneStatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extid_){}
    , decltype(_impl_.linkstatinfo_){nullptr}
    , decltype(_impl_.sectionstatinfo_){nullptr}
    , decltype(_impl_.laneid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extid().empty()) {
    _this->_impl_.extid_.Set(from._internal_extid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_linkstatinfo()) {
    _this->_impl_.linkstatinfo_ = new ::cn::seisys::v2x::pb::LinkStatInfo(*from._impl_.linkstatinfo_);
  }
  if (from._internal_has_sectionstatinfo()) {
    _this->_impl_.sectionstatinfo_ = new ::cn::seisys::v2x::pb::SectionStatInfo(*from._impl_.sectionstatinfo_);
  }
  _this->_impl_.laneid_ = from._impl_.laneid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneStatInfo)
}

inline void LaneStatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extid_){}
    , decltype(_impl_.linkstatinfo_){nullptr}
    , decltype(_impl_.sectionstatinfo_){nullptr}
    , decltype(_impl_.laneid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaneStatInfo::~LaneStatInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneStatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneStatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.linkstatinfo_;
  if (this != internal_default_instance()) delete _impl_.sectionstatinfo_;
}

void LaneStatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneStatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.linkstatinfo_ != nullptr) {
    delete _impl_.linkstatinfo_;
  }
  _impl_.linkstatinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sectionstatinfo_ != nullptr) {
    delete _impl_.sectionstatinfo_;
  }
  _impl_.sectionstatinfo_ = nullptr;
  _impl_.laneid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneStatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 laneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkstatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SectionStatInfo sectionStatInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionstatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_extid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.LaneStatInfo.extId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneStatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneStatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 laneId = 1;
  if (this->_internal_laneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_laneid(), target);
  }

  // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 2;
  if (this->_internal_has_linkstatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::linkstatinfo(this),
        _Internal::linkstatinfo(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.SectionStatInfo sectionStatInfo = 3;
  if (this->_internal_has_sectionstatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sectionstatinfo(this),
        _Internal::sectionstatinfo(this).GetCachedSize(), target, stream);
  }

  // string extId = 4;
  if (!this->_internal_extid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extid().data(), static_cast<int>(this->_internal_extid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.LaneStatInfo.extId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_extid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneStatInfo)
  return target;
}

size_t LaneStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneStatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extId = 4;
  if (!this->_internal_extid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extid());
  }

  // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 2;
  if (this->_internal_has_linkstatinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linkstatinfo_);
  }

  // .cn.seisys.v2x.pb.SectionStatInfo sectionStatInfo = 3;
  if (this->_internal_has_sectionstatinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sectionstatinfo_);
  }

  // uint32 laneId = 1;
  if (this->_internal_laneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_laneid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneStatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneStatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneStatInfo::GetClassData() const { return &_class_data_; }


void LaneStatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneStatInfo*>(&to_msg);
  auto& from = static_cast<const LaneStatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneStatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extid().empty()) {
    _this->_internal_set_extid(from._internal_extid());
  }
  if (from._internal_has_linkstatinfo()) {
    _this->_internal_mutable_linkstatinfo()->::cn::seisys::v2x::pb::LinkStatInfo::MergeFrom(
        from._internal_linkstatinfo());
  }
  if (from._internal_has_sectionstatinfo()) {
    _this->_internal_mutable_sectionstatinfo()->::cn::seisys::v2x::pb::SectionStatInfo::MergeFrom(
        from._internal_sectionstatinfo());
  }
  if (from._internal_laneid() != 0) {
    _this->_internal_set_laneid(from._internal_laneid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneStatInfo::CopyFrom(const LaneStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneStatInfo::IsInitialized() const {
  return true;
}

void LaneStatInfo::InternalSwap(LaneStatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extid_, lhs_arena,
      &other->_impl_.extid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneStatInfo, _impl_.laneid_)
      + sizeof(LaneStatInfo::_impl_.laneid_)
      - PROTOBUF_FIELD_OFFSET(LaneStatInfo, _impl_.linkstatinfo_)>(
          reinterpret_cast<char*>(&_impl_.linkstatinfo_),
          reinterpret_cast<char*>(&other->_impl_.linkstatinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneStatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[19]);
}

// ===================================================================

class SectionStatInfo::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LinkStatInfo& linkstatinfo(const SectionStatInfo* msg);
};

const ::cn::seisys::v2x::pb::LinkStatInfo&
SectionStatInfo::_Internal::linkstatinfo(const SectionStatInfo* msg) {
  return *msg->_impl_.linkstatinfo_;
}
SectionStatInfo::SectionStatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.SectionStatInfo)
}
SectionStatInfo::SectionStatInfo(const SectionStatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionStatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extid_){}
    , decltype(_impl_.linkstatinfo_){nullptr}
    , decltype(_impl_.sectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extid().empty()) {
    _this->_impl_.extid_.Set(from._internal_extid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_linkstatinfo()) {
    _this->_impl_.linkstatinfo_ = new ::cn::seisys::v2x::pb::LinkStatInfo(*from._impl_.linkstatinfo_);
  }
  _this->_impl_.sectionid_ = from._impl_.sectionid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.SectionStatInfo)
}

inline void SectionStatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extid_){}
    , decltype(_impl_.linkstatinfo_){nullptr}
    , decltype(_impl_.sectionid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SectionStatInfo::~SectionStatInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.SectionStatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionStatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.linkstatinfo_;
}

void SectionStatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.SectionStatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.linkstatinfo_ != nullptr) {
    delete _impl_.linkstatinfo_;
  }
  _impl_.linkstatinfo_ = nullptr;
  _impl_.sectionid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionStatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sectionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkstatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_extid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.SectionStatInfo.extId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionStatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.SectionStatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sectionId = 1;
  if (this->_internal_sectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sectionid(), target);
  }

  // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 2;
  if (this->_internal_has_linkstatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::linkstatinfo(this),
        _Internal::linkstatinfo(this).GetCachedSize(), target, stream);
  }

  // string extId = 3;
  if (!this->_internal_extid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extid().data(), static_cast<int>(this->_internal_extid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.SectionStatInfo.extId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.SectionStatInfo)
  return target;
}

size_t SectionStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.SectionStatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extId = 3;
  if (!this->_internal_extid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extid());
  }

  // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 2;
  if (this->_internal_has_linkstatinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linkstatinfo_);
  }

  // uint32 sectionId = 1;
  if (this->_internal_sectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionStatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionStatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionStatInfo::GetClassData() const { return &_class_data_; }


void SectionStatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionStatInfo*>(&to_msg);
  auto& from = static_cast<const SectionStatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.SectionStatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extid().empty()) {
    _this->_internal_set_extid(from._internal_extid());
  }
  if (from._internal_has_linkstatinfo()) {
    _this->_internal_mutable_linkstatinfo()->::cn::seisys::v2x::pb::LinkStatInfo::MergeFrom(
        from._internal_linkstatinfo());
  }
  if (from._internal_sectionid() != 0) {
    _this->_internal_set_sectionid(from._internal_sectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionStatInfo::CopyFrom(const SectionStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.SectionStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionStatInfo::IsInitialized() const {
  return true;
}

void SectionStatInfo::InternalSwap(SectionStatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extid_, lhs_arena,
      &other->_impl_.extid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionStatInfo, _impl_.sectionid_)
      + sizeof(SectionStatInfo::_impl_.sectionid_)
      - PROTOBUF_FIELD_OFFSET(SectionStatInfo, _impl_.linkstatinfo_)>(
          reinterpret_cast<char*>(&_impl_.linkstatinfo_),
          reinterpret_cast<char*>(&other->_impl_.linkstatinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionStatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[20]);
}

// ===================================================================

class LinkStatInfo::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& upstreamnodeid(const LinkStatInfo* msg);
  static const ::cn::seisys::v2x::pb::NodeStatInfo& nodestatinfo(const LinkStatInfo* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
LinkStatInfo::_Internal::upstreamnodeid(const LinkStatInfo* msg) {
  return *msg->_impl_.upstreamnodeid_;
}
const ::cn::seisys::v2x::pb::NodeStatInfo&
LinkStatInfo::_Internal::nodestatinfo(const LinkStatInfo* msg) {
  return *msg->_impl_.nodestatinfo_;
}
LinkStatInfo::LinkStatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LinkStatInfo)
}
LinkStatInfo::LinkStatInfo(const LinkStatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinkStatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extid_){}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.nodestatinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extid().empty()) {
    _this->_impl_.extid_.Set(from._internal_extid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_impl_.upstreamnodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.upstreamnodeid_);
  }
  if (from._internal_has_nodestatinfo()) {
    _this->_impl_.nodestatinfo_ = new ::cn::seisys::v2x::pb::NodeStatInfo(*from._impl_.nodestatinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LinkStatInfo)
}

inline void LinkStatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extid_){}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.nodestatinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkStatInfo::~LinkStatInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LinkStatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkStatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.extid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.upstreamnodeid_;
  if (this != internal_default_instance()) delete _impl_.nodestatinfo_;
}

void LinkStatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LinkStatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.extid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.upstreamnodeid_ != nullptr) {
    delete _impl_.upstreamnodeid_;
  }
  _impl_.upstreamnodeid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nodestatinfo_ != nullptr) {
    delete _impl_.nodestatinfo_;
  }
  _impl_.nodestatinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkStatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_upstreamnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.LinkStatInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodestatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_extid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.LinkStatInfo.extId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkStatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LinkStatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 1;
  if (this->_internal_has_upstreamnodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::upstreamnodeid(this),
        _Internal::upstreamnodeid(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.LinkStatInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 3;
  if (this->_internal_has_nodestatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nodestatinfo(this),
        _Internal::nodestatinfo(this).GetCachedSize(), target, stream);
  }

  // string extId = 4;
  if (!this->_internal_extid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extid().data(), static_cast<int>(this->_internal_extid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.LinkStatInfo.extId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_extid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LinkStatInfo)
  return target;
}

size_t LinkStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LinkStatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string extId = 4;
  if (!this->_internal_extid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extid());
  }

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 1;
  if (this->_internal_has_upstreamnodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upstreamnodeid_);
  }

  // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 3;
  if (this->_internal_has_nodestatinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodestatinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkStatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinkStatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkStatInfo::GetClassData() const { return &_class_data_; }


void LinkStatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinkStatInfo*>(&to_msg);
  auto& from = static_cast<const LinkStatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LinkStatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_extid().empty()) {
    _this->_internal_set_extid(from._internal_extid());
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_internal_mutable_upstreamnodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_upstreamnodeid());
  }
  if (from._internal_has_nodestatinfo()) {
    _this->_internal_mutable_nodestatinfo()->::cn::seisys::v2x::pb::NodeStatInfo::MergeFrom(
        from._internal_nodestatinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkStatInfo::CopyFrom(const LinkStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LinkStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkStatInfo::IsInitialized() const {
  return true;
}

void LinkStatInfo::InternalSwap(LinkStatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extid_, lhs_arena,
      &other->_impl_.extid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkStatInfo, _impl_.nodestatinfo_)
      + sizeof(LinkStatInfo::_impl_.nodestatinfo_)
      - PROTOBUF_FIELD_OFFSET(LinkStatInfo, _impl_.upstreamnodeid_)>(
          reinterpret_cast<char*>(&_impl_.upstreamnodeid_),
          reinterpret_cast<char*>(&other->_impl_.upstreamnodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkStatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[21]);
}

// ===================================================================

class NodeStatInfo::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& nodeid(const NodeStatInfo* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
NodeStatInfo::_Internal::nodeid(const NodeStatInfo* msg) {
  return *msg->_impl_.nodeid_;
}
NodeStatInfo::NodeStatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.NodeStatInfo)
}
NodeStatInfo::NodeStatInfo(const NodeStatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeStatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodeid()) {
    _this->_impl_.nodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.nodeid_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.NodeStatInfo)
}

inline void NodeStatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeStatInfo::~NodeStatInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.NodeStatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeStatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nodeid_;
}

void NodeStatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.NodeStatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.nodeid_ != nullptr) {
    delete _impl_.nodeid_;
  }
  _impl_.nodeid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeStatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.NodeStatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nodeid(this),
        _Internal::nodeid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.NodeStatInfo)
  return target;
}

size_t NodeStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.NodeStatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodeid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeStatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeStatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeStatInfo::GetClassData() const { return &_class_data_; }


void NodeStatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeStatInfo*>(&to_msg);
  auto& from = static_cast<const NodeStatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.NodeStatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodeid()) {
    _this->_internal_mutable_nodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeStatInfo::CopyFrom(const NodeStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.NodeStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatInfo::IsInitialized() const {
  return true;
}

void NodeStatInfo::InternalSwap(NodeStatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.nodeid_, other->_impl_.nodeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[22]);
}

// ===================================================================

class MovementStatInfo::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& remoteintersection(const MovementStatInfo* msg);
  static const ::cn::seisys::v2x::pb::NodeStatInfo& nodestatinfo(const MovementStatInfo* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
MovementStatInfo::_Internal::remoteintersection(const MovementStatInfo* msg) {
  return *msg->_impl_.remoteintersection_;
}
const ::cn::seisys::v2x::pb::NodeStatInfo&
MovementStatInfo::_Internal::nodestatinfo(const MovementStatInfo* msg) {
  return *msg->_impl_.nodestatinfo_;
}
MovementStatInfo::MovementStatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MovementStatInfo)
}
MovementStatInfo::MovementStatInfo(const MovementStatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovementStatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extid_){}
    , decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.nodestatinfo_){nullptr}
    , decltype(_impl_.turndirection_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extid().empty()) {
    _this->_impl_.extid_.Set(from._internal_extid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_remoteintersection()) {
    _this->_impl_.remoteintersection_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.remoteintersection_);
  }
  if (from._internal_has_nodestatinfo()) {
    _this->_impl_.nodestatinfo_ = new ::cn::seisys::v2x::pb::NodeStatInfo(*from._impl_.nodestatinfo_);
  }
  _this->_impl_.turndirection_ = from._impl_.turndirection_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MovementStatInfo)
}

inline void MovementStatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extid_){}
    , decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.nodestatinfo_){nullptr}
    , decltype(_impl_.turndirection_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.extid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MovementStatInfo::~MovementStatInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MovementStatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovementStatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.remoteintersection_;
  if (this != internal_default_instance()) delete _impl_.nodestatinfo_;
}

void MovementStatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovementStatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MovementStatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.remoteintersection_ != nullptr) {
    delete _impl_.remoteintersection_;
  }
  _impl_.remoteintersection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nodestatinfo_ != nullptr) {
    delete _impl_.nodestatinfo_;
  }
  _impl_.nodestatinfo_ = nullptr;
  _impl_.turndirection_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovementStatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_remoteintersection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Maneuver turnDirection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turndirection(static_cast<::cn::seisys::v2x::pb::Maneuver>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodestatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_extid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.MovementStatInfo.extId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovementStatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MovementStatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::remoteintersection(this),
        _Internal::remoteintersection(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.Maneuver turnDirection = 2;
  if (this->_internal_turndirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_turndirection(), target);
  }

  // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 3;
  if (this->_internal_has_nodestatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nodestatinfo(this),
        _Internal::nodestatinfo(this).GetCachedSize(), target, stream);
  }

  // string extId = 4;
  if (!this->_internal_extid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extid().data(), static_cast<int>(this->_internal_extid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.MovementStatInfo.extId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_extid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MovementStatInfo)
  return target;
}

size_t MovementStatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MovementStatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extId = 4;
  if (!this->_internal_extid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extid());
  }

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remoteintersection_);
  }

  // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 3;
  if (this->_internal_has_nodestatinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodestatinfo_);
  }

  // .cn.seisys.v2x.pb.Maneuver turnDirection = 2;
  if (this->_internal_turndirection() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turndirection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovementStatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovementStatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovementStatInfo::GetClassData() const { return &_class_data_; }


void MovementStatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovementStatInfo*>(&to_msg);
  auto& from = static_cast<const MovementStatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MovementStatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extid().empty()) {
    _this->_internal_set_extid(from._internal_extid());
  }
  if (from._internal_has_remoteintersection()) {
    _this->_internal_mutable_remoteintersection()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_remoteintersection());
  }
  if (from._internal_has_nodestatinfo()) {
    _this->_internal_mutable_nodestatinfo()->::cn::seisys::v2x::pb::NodeStatInfo::MergeFrom(
        from._internal_nodestatinfo());
  }
  if (from._internal_turndirection() != 0) {
    _this->_internal_set_turndirection(from._internal_turndirection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovementStatInfo::CopyFrom(const MovementStatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MovementStatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovementStatInfo::IsInitialized() const {
  return true;
}

void MovementStatInfo::InternalSwap(MovementStatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extid_, lhs_arena,
      &other->_impl_.extid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovementStatInfo, _impl_.turndirection_)
      + sizeof(MovementStatInfo::_impl_.turndirection_)
      - PROTOBUF_FIELD_OFFSET(MovementStatInfo, _impl_.remoteintersection_)>(
          reinterpret_cast<char*>(&_impl_.remoteintersection_),
          reinterpret_cast<char*>(&other->_impl_.remoteintersection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovementStatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[23]);
}

// ===================================================================

class TrafficFlowStatByInterval::_Internal {
 public:
};

TrafficFlowStatByInterval::TrafficFlowStatByInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
}
TrafficFlowStatByInterval::TrafficFlowStatByInterval(const TrafficFlowStatByInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficFlowStatByInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.interval_ = from._impl_.interval_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
}

inline void TrafficFlowStatByInterval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interval_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficFlowStatByInterval::~TrafficFlowStatByInterval() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficFlowStatByInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficFlowStatByInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficFlowStatByInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interval_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficFlowStatByInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficFlowStatByInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 interval = 1;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
  return target;
}

size_t TrafficFlowStatByInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 interval = 1;
  if (this->_internal_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficFlowStatByInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficFlowStatByInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficFlowStatByInterval::GetClassData() const { return &_class_data_; }


void TrafficFlowStatByInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficFlowStatByInterval*>(&to_msg);
  auto& from = static_cast<const TrafficFlowStatByInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficFlowStatByInterval::CopyFrom(const TrafficFlowStatByInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TrafficFlowStatByInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlowStatByInterval::IsInitialized() const {
  return true;
}

void TrafficFlowStatByInterval::InternalSwap(TrafficFlowStatByInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.interval_, other->_impl_.interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficFlowStatByInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[24]);
}

// ===================================================================

class TrafficFlowStatBySignalCycle::_Internal {
 public:
};

TrafficFlowStatBySignalCycle::TrafficFlowStatBySignalCycle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
}
TrafficFlowStatBySignalCycle::TrafficFlowStatBySignalCycle(const TrafficFlowStatBySignalCycle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficFlowStatBySignalCycle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cyclestarttime_){}
    , decltype(_impl_.cycleendtime_){}
    , decltype(_impl_.cycletime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cyclestarttime_, &from._impl_.cyclestarttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cycletime_) -
    reinterpret_cast<char*>(&_impl_.cyclestarttime_)) + sizeof(_impl_.cycletime_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
}

inline void TrafficFlowStatBySignalCycle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cyclestarttime_){uint64_t{0u}}
    , decltype(_impl_.cycleendtime_){uint64_t{0u}}
    , decltype(_impl_.cycletime_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficFlowStatBySignalCycle::~TrafficFlowStatBySignalCycle() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficFlowStatBySignalCycle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficFlowStatBySignalCycle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficFlowStatBySignalCycle::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cyclestarttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cycletime_) -
      reinterpret_cast<char*>(&_impl_.cyclestarttime_)) + sizeof(_impl_.cycletime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficFlowStatBySignalCycle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cycleStartTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cyclestarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cycleEndTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cycleendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cycleTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cycletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficFlowStatBySignalCycle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cycleStartTime = 1;
  if (this->_internal_cyclestarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cyclestarttime(), target);
  }

  // uint64 cycleEndTime = 2;
  if (this->_internal_cycleendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cycleendtime(), target);
  }

  // uint32 cycleTime = 3;
  if (this->_internal_cycletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cycletime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
  return target;
}

size_t TrafficFlowStatBySignalCycle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cycleStartTime = 1;
  if (this->_internal_cyclestarttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cyclestarttime());
  }

  // uint64 cycleEndTime = 2;
  if (this->_internal_cycleendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cycleendtime());
  }

  // uint32 cycleTime = 3;
  if (this->_internal_cycletime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cycletime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficFlowStatBySignalCycle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficFlowStatBySignalCycle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficFlowStatBySignalCycle::GetClassData() const { return &_class_data_; }


void TrafficFlowStatBySignalCycle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficFlowStatBySignalCycle*>(&to_msg);
  auto& from = static_cast<const TrafficFlowStatBySignalCycle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cyclestarttime() != 0) {
    _this->_internal_set_cyclestarttime(from._internal_cyclestarttime());
  }
  if (from._internal_cycleendtime() != 0) {
    _this->_internal_set_cycleendtime(from._internal_cycleendtime());
  }
  if (from._internal_cycletime() != 0) {
    _this->_internal_set_cycletime(from._internal_cycletime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficFlowStatBySignalCycle::CopyFrom(const TrafficFlowStatBySignalCycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlowStatBySignalCycle::IsInitialized() const {
  return true;
}

void TrafficFlowStatBySignalCycle::InternalSwap(TrafficFlowStatBySignalCycle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficFlowStatBySignalCycle, _impl_.cycletime_)
      + sizeof(TrafficFlowStatBySignalCycle::_impl_.cycletime_)
      - PROTOBUF_FIELD_OFFSET(TrafficFlowStatBySignalCycle, _impl_.cyclestarttime_)>(
          reinterpret_cast<char*>(&_impl_.cyclestarttime_),
          reinterpret_cast<char*>(&other->_impl_.cyclestarttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficFlowStatBySignalCycle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[25]);
}

// ===================================================================

class TrafficFlowStatType::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::TrafficFlowStatByInterval& interval(const TrafficFlowStatType* msg);
  static const ::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle& sequence(const TrafficFlowStatType* msg);
};

const ::cn::seisys::v2x::pb::TrafficFlowStatByInterval&
TrafficFlowStatType::_Internal::interval(const TrafficFlowStatType* msg) {
  return *msg->_impl_.interval_;
}
const ::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle&
TrafficFlowStatType::_Internal::sequence(const TrafficFlowStatType* msg) {
  return *msg->_impl_.sequence_;
}
TrafficFlowStatType::TrafficFlowStatType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TrafficFlowStatType)
}
TrafficFlowStatType::TrafficFlowStatType(const TrafficFlowStatType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficFlowStatType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.sequence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::cn::seisys::v2x::pb::TrafficFlowStatByInterval(*from._impl_.interval_);
  }
  if (from._internal_has_sequence()) {
    _this->_impl_.sequence_ = new ::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle(*from._impl_.sequence_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TrafficFlowStatType)
}

inline void TrafficFlowStatType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.sequence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficFlowStatType::~TrafficFlowStatType() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TrafficFlowStatType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficFlowStatType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.interval_;
  if (this != internal_default_instance()) delete _impl_.sequence_;
}

void TrafficFlowStatType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficFlowStatType::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TrafficFlowStatType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sequence_ != nullptr) {
    delete _impl_.sequence_;
  }
  _impl_.sequence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficFlowStatType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.TrafficFlowStatByInterval interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficFlowStatType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TrafficFlowStatType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.TrafficFlowStatByInterval interval = 1;
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle sequence = 2;
  if (this->_internal_has_sequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sequence(this),
        _Internal::sequence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TrafficFlowStatType)
  return target;
}

size_t TrafficFlowStatType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TrafficFlowStatType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.TrafficFlowStatByInterval interval = 1;
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  // .cn.seisys.v2x.pb.TrafficFlowStatBySignalCycle sequence = 2;
  if (this->_internal_has_sequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sequence_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficFlowStatType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficFlowStatType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficFlowStatType::GetClassData() const { return &_class_data_; }


void TrafficFlowStatType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficFlowStatType*>(&to_msg);
  auto& from = static_cast<const TrafficFlowStatType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TrafficFlowStatType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::cn::seisys::v2x::pb::TrafficFlowStatByInterval::MergeFrom(
        from._internal_interval());
  }
  if (from._internal_has_sequence()) {
    _this->_internal_mutable_sequence()->::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle::MergeFrom(
        from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficFlowStatType::CopyFrom(const TrafficFlowStatType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TrafficFlowStatType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlowStatType::IsInitialized() const {
  return true;
}

void TrafficFlowStatType::InternalSwap(TrafficFlowStatType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficFlowStatType, _impl_.sequence_)
      + sizeof(TrafficFlowStatType::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(TrafficFlowStatType, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficFlowStatType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[26]);
}

// ===================================================================

class TrafficFlowStatMapElement::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::DetectorArea& detectorarea(const TrafficFlowStatMapElement* msg);
  static const ::cn::seisys::v2x::pb::LaneStatInfo& lanestatinfo(const TrafficFlowStatMapElement* msg);
  static const ::cn::seisys::v2x::pb::SectionStatInfo& sectionstatinfo(const TrafficFlowStatMapElement* msg);
  static const ::cn::seisys::v2x::pb::LinkStatInfo& linkstatinfo(const TrafficFlowStatMapElement* msg);
  static const ::cn::seisys::v2x::pb::NodeStatInfo& nodestatinfo(const TrafficFlowStatMapElement* msg);
  static const ::cn::seisys::v2x::pb::MovementStatInfo& movementstatinfo(const TrafficFlowStatMapElement* msg);
};

const ::cn::seisys::v2x::pb::DetectorArea&
TrafficFlowStatMapElement::_Internal::detectorarea(const TrafficFlowStatMapElement* msg) {
  return *msg->_impl_.TrafficFlowStatMapElementOneOf_.detectorarea_;
}
const ::cn::seisys::v2x::pb::LaneStatInfo&
TrafficFlowStatMapElement::_Internal::lanestatinfo(const TrafficFlowStatMapElement* msg) {
  return *msg->_impl_.TrafficFlowStatMapElementOneOf_.lanestatinfo_;
}
const ::cn::seisys::v2x::pb::SectionStatInfo&
TrafficFlowStatMapElement::_Internal::sectionstatinfo(const TrafficFlowStatMapElement* msg) {
  return *msg->_impl_.TrafficFlowStatMapElementOneOf_.sectionstatinfo_;
}
const ::cn::seisys::v2x::pb::LinkStatInfo&
TrafficFlowStatMapElement::_Internal::linkstatinfo(const TrafficFlowStatMapElement* msg) {
  return *msg->_impl_.TrafficFlowStatMapElementOneOf_.linkstatinfo_;
}
const ::cn::seisys::v2x::pb::NodeStatInfo&
TrafficFlowStatMapElement::_Internal::nodestatinfo(const TrafficFlowStatMapElement* msg) {
  return *msg->_impl_.TrafficFlowStatMapElementOneOf_.nodestatinfo_;
}
const ::cn::seisys::v2x::pb::MovementStatInfo&
TrafficFlowStatMapElement::_Internal::movementstatinfo(const TrafficFlowStatMapElement* msg) {
  return *msg->_impl_.TrafficFlowStatMapElementOneOf_.movementstatinfo_;
}
void TrafficFlowStatMapElement::set_allocated_detectorarea(::cn::seisys::v2x::pb::DetectorArea* detectorarea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_TrafficFlowStatMapElementOneOf();
  if (detectorarea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(detectorarea);
    if (message_arena != submessage_arena) {
      detectorarea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detectorarea, submessage_arena);
    }
    set_has_detectorarea();
    _impl_.TrafficFlowStatMapElementOneOf_.detectorarea_ = detectorarea;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.TrafficFlowStatMapElement.detectorArea)
}
void TrafficFlowStatMapElement::set_allocated_lanestatinfo(::cn::seisys::v2x::pb::LaneStatInfo* lanestatinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_TrafficFlowStatMapElementOneOf();
  if (lanestatinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lanestatinfo);
    if (message_arena != submessage_arena) {
      lanestatinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lanestatinfo, submessage_arena);
    }
    set_has_lanestatinfo();
    _impl_.TrafficFlowStatMapElementOneOf_.lanestatinfo_ = lanestatinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.TrafficFlowStatMapElement.laneStatInfo)
}
void TrafficFlowStatMapElement::set_allocated_sectionstatinfo(::cn::seisys::v2x::pb::SectionStatInfo* sectionstatinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_TrafficFlowStatMapElementOneOf();
  if (sectionstatinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sectionstatinfo);
    if (message_arena != submessage_arena) {
      sectionstatinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sectionstatinfo, submessage_arena);
    }
    set_has_sectionstatinfo();
    _impl_.TrafficFlowStatMapElementOneOf_.sectionstatinfo_ = sectionstatinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.TrafficFlowStatMapElement.sectionStatInfo)
}
void TrafficFlowStatMapElement::set_allocated_linkstatinfo(::cn::seisys::v2x::pb::LinkStatInfo* linkstatinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_TrafficFlowStatMapElementOneOf();
  if (linkstatinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(linkstatinfo);
    if (message_arena != submessage_arena) {
      linkstatinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linkstatinfo, submessage_arena);
    }
    set_has_linkstatinfo();
    _impl_.TrafficFlowStatMapElementOneOf_.linkstatinfo_ = linkstatinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.TrafficFlowStatMapElement.linkStatInfo)
}
void TrafficFlowStatMapElement::set_allocated_nodestatinfo(::cn::seisys::v2x::pb::NodeStatInfo* nodestatinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_TrafficFlowStatMapElementOneOf();
  if (nodestatinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nodestatinfo);
    if (message_arena != submessage_arena) {
      nodestatinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodestatinfo, submessage_arena);
    }
    set_has_nodestatinfo();
    _impl_.TrafficFlowStatMapElementOneOf_.nodestatinfo_ = nodestatinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.TrafficFlowStatMapElement.nodeStatInfo)
}
void TrafficFlowStatMapElement::set_allocated_movementstatinfo(::cn::seisys::v2x::pb::MovementStatInfo* movementstatinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_TrafficFlowStatMapElementOneOf();
  if (movementstatinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(movementstatinfo);
    if (message_arena != submessage_arena) {
      movementstatinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movementstatinfo, submessage_arena);
    }
    set_has_movementstatinfo();
    _impl_.TrafficFlowStatMapElementOneOf_.movementstatinfo_ = movementstatinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.TrafficFlowStatMapElement.movementStatInfo)
}
TrafficFlowStatMapElement::TrafficFlowStatMapElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
}
TrafficFlowStatMapElement::TrafficFlowStatMapElement(const TrafficFlowStatMapElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficFlowStatMapElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.TrafficFlowStatMapElementOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_TrafficFlowStatMapElementOneOf();
  switch (from.TrafficFlowStatMapElementOneOf_case()) {
    case kDetectorArea: {
      _this->_internal_mutable_detectorarea()->::cn::seisys::v2x::pb::DetectorArea::MergeFrom(
          from._internal_detectorarea());
      break;
    }
    case kLaneStatInfo: {
      _this->_internal_mutable_lanestatinfo()->::cn::seisys::v2x::pb::LaneStatInfo::MergeFrom(
          from._internal_lanestatinfo());
      break;
    }
    case kSectionStatInfo: {
      _this->_internal_mutable_sectionstatinfo()->::cn::seisys::v2x::pb::SectionStatInfo::MergeFrom(
          from._internal_sectionstatinfo());
      break;
    }
    case kLinkStatInfo: {
      _this->_internal_mutable_linkstatinfo()->::cn::seisys::v2x::pb::LinkStatInfo::MergeFrom(
          from._internal_linkstatinfo());
      break;
    }
    case kNodeStatInfo: {
      _this->_internal_mutable_nodestatinfo()->::cn::seisys::v2x::pb::NodeStatInfo::MergeFrom(
          from._internal_nodestatinfo());
      break;
    }
    case kMovementStatInfo: {
      _this->_internal_mutable_movementstatinfo()->::cn::seisys::v2x::pb::MovementStatInfo::MergeFrom(
          from._internal_movementstatinfo());
      break;
    }
    case TRAFFICFLOWSTATMAPELEMENTONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
}

inline void TrafficFlowStatMapElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.TrafficFlowStatMapElementOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_TrafficFlowStatMapElementOneOf();
}

TrafficFlowStatMapElement::~TrafficFlowStatMapElement() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficFlowStatMapElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_TrafficFlowStatMapElementOneOf()) {
    clear_TrafficFlowStatMapElementOneOf();
  }
}

void TrafficFlowStatMapElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficFlowStatMapElement::clear_TrafficFlowStatMapElementOneOf() {
// @@protoc_insertion_point(one_of_clear_start:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  switch (TrafficFlowStatMapElementOneOf_case()) {
    case kDetectorArea: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.TrafficFlowStatMapElementOneOf_.detectorarea_;
      }
      break;
    }
    case kLaneStatInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.TrafficFlowStatMapElementOneOf_.lanestatinfo_;
      }
      break;
    }
    case kSectionStatInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.TrafficFlowStatMapElementOneOf_.sectionstatinfo_;
      }
      break;
    }
    case kLinkStatInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.TrafficFlowStatMapElementOneOf_.linkstatinfo_;
      }
      break;
    }
    case kNodeStatInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.TrafficFlowStatMapElementOneOf_.nodestatinfo_;
      }
      break;
    }
    case kMovementStatInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.TrafficFlowStatMapElementOneOf_.movementstatinfo_;
      }
      break;
    }
    case TRAFFICFLOWSTATMAPELEMENTONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TRAFFICFLOWSTATMAPELEMENTONEOF_NOT_SET;
}


void TrafficFlowStatMapElement::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_TrafficFlowStatMapElementOneOf();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficFlowStatMapElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.DetectorArea detectorArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detectorarea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneStatInfo laneStatInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lanestatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SectionStatInfo sectionStatInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectionstatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linkstatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodestatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MovementStatInfo movementStatInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_movementstatinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficFlowStatMapElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.DetectorArea detectorArea = 1;
  if (_internal_has_detectorarea()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::detectorarea(this),
        _Internal::detectorarea(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneStatInfo laneStatInfo = 2;
  if (_internal_has_lanestatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lanestatinfo(this),
        _Internal::lanestatinfo(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.SectionStatInfo sectionStatInfo = 3;
  if (_internal_has_sectionstatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sectionstatinfo(this),
        _Internal::sectionstatinfo(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 4;
  if (_internal_has_linkstatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::linkstatinfo(this),
        _Internal::linkstatinfo(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 5;
  if (_internal_has_nodestatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::nodestatinfo(this),
        _Internal::nodestatinfo(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.MovementStatInfo movementStatInfo = 6;
  if (_internal_has_movementstatinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::movementstatinfo(this),
        _Internal::movementstatinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  return target;
}

size_t TrafficFlowStatMapElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (TrafficFlowStatMapElementOneOf_case()) {
    // .cn.seisys.v2x.pb.DetectorArea detectorArea = 1;
    case kDetectorArea: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.TrafficFlowStatMapElementOneOf_.detectorarea_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneStatInfo laneStatInfo = 2;
    case kLaneStatInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.TrafficFlowStatMapElementOneOf_.lanestatinfo_);
      break;
    }
    // .cn.seisys.v2x.pb.SectionStatInfo sectionStatInfo = 3;
    case kSectionStatInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.TrafficFlowStatMapElementOneOf_.sectionstatinfo_);
      break;
    }
    // .cn.seisys.v2x.pb.LinkStatInfo linkStatInfo = 4;
    case kLinkStatInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.TrafficFlowStatMapElementOneOf_.linkstatinfo_);
      break;
    }
    // .cn.seisys.v2x.pb.NodeStatInfo nodeStatInfo = 5;
    case kNodeStatInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.TrafficFlowStatMapElementOneOf_.nodestatinfo_);
      break;
    }
    // .cn.seisys.v2x.pb.MovementStatInfo movementStatInfo = 6;
    case kMovementStatInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.TrafficFlowStatMapElementOneOf_.movementstatinfo_);
      break;
    }
    case TRAFFICFLOWSTATMAPELEMENTONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficFlowStatMapElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficFlowStatMapElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficFlowStatMapElement::GetClassData() const { return &_class_data_; }


void TrafficFlowStatMapElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficFlowStatMapElement*>(&to_msg);
  auto& from = static_cast<const TrafficFlowStatMapElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.TrafficFlowStatMapElementOneOf_case()) {
    case kDetectorArea: {
      _this->_internal_mutable_detectorarea()->::cn::seisys::v2x::pb::DetectorArea::MergeFrom(
          from._internal_detectorarea());
      break;
    }
    case kLaneStatInfo: {
      _this->_internal_mutable_lanestatinfo()->::cn::seisys::v2x::pb::LaneStatInfo::MergeFrom(
          from._internal_lanestatinfo());
      break;
    }
    case kSectionStatInfo: {
      _this->_internal_mutable_sectionstatinfo()->::cn::seisys::v2x::pb::SectionStatInfo::MergeFrom(
          from._internal_sectionstatinfo());
      break;
    }
    case kLinkStatInfo: {
      _this->_internal_mutable_linkstatinfo()->::cn::seisys::v2x::pb::LinkStatInfo::MergeFrom(
          from._internal_linkstatinfo());
      break;
    }
    case kNodeStatInfo: {
      _this->_internal_mutable_nodestatinfo()->::cn::seisys::v2x::pb::NodeStatInfo::MergeFrom(
          from._internal_nodestatinfo());
      break;
    }
    case kMovementStatInfo: {
      _this->_internal_mutable_movementstatinfo()->::cn::seisys::v2x::pb::MovementStatInfo::MergeFrom(
          from._internal_movementstatinfo());
      break;
    }
    case TRAFFICFLOWSTATMAPELEMENTONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficFlowStatMapElement::CopyFrom(const TrafficFlowStatMapElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TrafficFlowStatMapElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlowStatMapElement::IsInitialized() const {
  return true;
}

void TrafficFlowStatMapElement::InternalSwap(TrafficFlowStatMapElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.TrafficFlowStatMapElementOneOf_, other->_impl_.TrafficFlowStatMapElementOneOf_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficFlowStatMapElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[27]);
}

// ===================================================================

class LaneIndexAdded::_Internal {
 public:
};

LaneIndexAdded::LaneIndexAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneIndexAdded)
}
LaneIndexAdded::LaneIndexAdded(const LaneIndexAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneIndexAdded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.lanecapacity_){}
    , decltype(_impl_.lanesaturation_){}
    , decltype(_impl_.lanespaceoccupy_){}
    , decltype(_impl_.lanetimeoccupy_){}
    , decltype(_impl_.laneavggrnqueue_){}
    , decltype(_impl_.lanegrnutilization_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lanegrnutilization_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.lanegrnutilization_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneIndexAdded)
}

inline void LaneIndexAdded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.lanecapacity_){0u}
    , decltype(_impl_.lanesaturation_){0u}
    , decltype(_impl_.lanespaceoccupy_){0u}
    , decltype(_impl_.lanetimeoccupy_){0u}
    , decltype(_impl_.laneavggrnqueue_){0u}
    , decltype(_impl_.lanegrnutilization_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneIndexAdded::~LaneIndexAdded() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneIndexAdded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneIndexAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneIndexAdded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneIndexAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneIndexAdded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lanegrnutilization_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.lanegrnutilization_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneIndexAdded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneCapacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lanecapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneSaturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lanesaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneSpaceOccupy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lanespaceoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneTimeOccupy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lanetimeoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneAvgGrnQueue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.laneavggrnqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneGrnUtilization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.lanegrnutilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneIndexAdded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneIndexAdded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 laneCapacity = 2;
  if (this->_internal_lanecapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lanecapacity(), target);
  }

  // uint32 laneSaturation = 3;
  if (this->_internal_lanesaturation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lanesaturation(), target);
  }

  // uint32 laneSpaceOccupy = 4;
  if (this->_internal_lanespaceoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lanespaceoccupy(), target);
  }

  // uint32 laneTimeOccupy = 5;
  if (this->_internal_lanetimeoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lanetimeoccupy(), target);
  }

  // uint32 laneAvgGrnQueue = 6;
  if (this->_internal_laneavggrnqueue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_laneavggrnqueue(), target);
  }

  // uint32 laneGrnUtilization = 7;
  if (this->_internal_lanegrnutilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lanegrnutilization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneIndexAdded)
  return target;
}

size_t LaneIndexAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneIndexAdded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 laneCapacity = 2;
  if (this->_internal_lanecapacity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lanecapacity());
  }

  // uint32 laneSaturation = 3;
  if (this->_internal_lanesaturation() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lanesaturation());
  }

  // uint32 laneSpaceOccupy = 4;
  if (this->_internal_lanespaceoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lanespaceoccupy());
  }

  // uint32 laneTimeOccupy = 5;
  if (this->_internal_lanetimeoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lanetimeoccupy());
  }

  // uint32 laneAvgGrnQueue = 6;
  if (this->_internal_laneavggrnqueue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_laneavggrnqueue());
  }

  // uint32 laneGrnUtilization = 7;
  if (this->_internal_lanegrnutilization() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lanegrnutilization());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneIndexAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneIndexAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneIndexAdded::GetClassData() const { return &_class_data_; }


void LaneIndexAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneIndexAdded*>(&to_msg);
  auto& from = static_cast<const LaneIndexAdded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneIndexAdded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_lanecapacity() != 0) {
    _this->_internal_set_lanecapacity(from._internal_lanecapacity());
  }
  if (from._internal_lanesaturation() != 0) {
    _this->_internal_set_lanesaturation(from._internal_lanesaturation());
  }
  if (from._internal_lanespaceoccupy() != 0) {
    _this->_internal_set_lanespaceoccupy(from._internal_lanespaceoccupy());
  }
  if (from._internal_lanetimeoccupy() != 0) {
    _this->_internal_set_lanetimeoccupy(from._internal_lanetimeoccupy());
  }
  if (from._internal_laneavggrnqueue() != 0) {
    _this->_internal_set_laneavggrnqueue(from._internal_laneavggrnqueue());
  }
  if (from._internal_lanegrnutilization() != 0) {
    _this->_internal_set_lanegrnutilization(from._internal_lanegrnutilization());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneIndexAdded::CopyFrom(const LaneIndexAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneIndexAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneIndexAdded::IsInitialized() const {
  return true;
}

void LaneIndexAdded::InternalSwap(LaneIndexAdded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneIndexAdded, _impl_.lanegrnutilization_)
      + sizeof(LaneIndexAdded::_impl_.lanegrnutilization_)
      - PROTOBUF_FIELD_OFFSET(LaneIndexAdded, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneIndexAdded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[28]);
}

// ===================================================================

class LinkIndexAdded::_Internal {
 public:
};

LinkIndexAdded::LinkIndexAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LinkIndexAdded)
}
LinkIndexAdded::LinkIndexAdded(const LinkIndexAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinkIndexAdded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.linkcapacity_){}
    , decltype(_impl_.linksaturation_){}
    , decltype(_impl_.linkspaceoccupy_){}
    , decltype(_impl_.linktimeoccupy_){}
    , decltype(_impl_.linkavggrnqueue_){}
    , decltype(_impl_.linkgrnutilization_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.linkgrnutilization_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.linkgrnutilization_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LinkIndexAdded)
}

inline void LinkIndexAdded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.linkcapacity_){0u}
    , decltype(_impl_.linksaturation_){0u}
    , decltype(_impl_.linkspaceoccupy_){0u}
    , decltype(_impl_.linktimeoccupy_){0u}
    , decltype(_impl_.linkavggrnqueue_){0u}
    , decltype(_impl_.linkgrnutilization_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LinkIndexAdded::~LinkIndexAdded() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LinkIndexAdded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkIndexAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinkIndexAdded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkIndexAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LinkIndexAdded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.linkgrnutilization_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.linkgrnutilization_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkIndexAdded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 linkCapacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.linkcapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 linkSaturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.linksaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 linkSpaceOccupy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.linkspaceoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 linkTimeOccupy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.linktimeoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 linkAvgGrnQueue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.linkavggrnqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 linkGrnUtilization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.linkgrnutilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkIndexAdded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LinkIndexAdded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 linkCapacity = 2;
  if (this->_internal_linkcapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linkcapacity(), target);
  }

  // uint32 linkSaturation = 3;
  if (this->_internal_linksaturation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_linksaturation(), target);
  }

  // uint32 linkSpaceOccupy = 4;
  if (this->_internal_linkspaceoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_linkspaceoccupy(), target);
  }

  // uint32 linkTimeOccupy = 5;
  if (this->_internal_linktimeoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_linktimeoccupy(), target);
  }

  // uint32 linkAvgGrnQueue = 6;
  if (this->_internal_linkavggrnqueue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_linkavggrnqueue(), target);
  }

  // uint32 linkGrnUtilization = 7;
  if (this->_internal_linkgrnutilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_linkgrnutilization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LinkIndexAdded)
  return target;
}

size_t LinkIndexAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LinkIndexAdded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 linkCapacity = 2;
  if (this->_internal_linkcapacity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linkcapacity());
  }

  // uint32 linkSaturation = 3;
  if (this->_internal_linksaturation() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linksaturation());
  }

  // uint32 linkSpaceOccupy = 4;
  if (this->_internal_linkspaceoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linkspaceoccupy());
  }

  // uint32 linkTimeOccupy = 5;
  if (this->_internal_linktimeoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linktimeoccupy());
  }

  // uint32 linkAvgGrnQueue = 6;
  if (this->_internal_linkavggrnqueue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linkavggrnqueue());
  }

  // uint32 linkGrnUtilization = 7;
  if (this->_internal_linkgrnutilization() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linkgrnutilization());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkIndexAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinkIndexAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkIndexAdded::GetClassData() const { return &_class_data_; }


void LinkIndexAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinkIndexAdded*>(&to_msg);
  auto& from = static_cast<const LinkIndexAdded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LinkIndexAdded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_linkcapacity() != 0) {
    _this->_internal_set_linkcapacity(from._internal_linkcapacity());
  }
  if (from._internal_linksaturation() != 0) {
    _this->_internal_set_linksaturation(from._internal_linksaturation());
  }
  if (from._internal_linkspaceoccupy() != 0) {
    _this->_internal_set_linkspaceoccupy(from._internal_linkspaceoccupy());
  }
  if (from._internal_linktimeoccupy() != 0) {
    _this->_internal_set_linktimeoccupy(from._internal_linktimeoccupy());
  }
  if (from._internal_linkavggrnqueue() != 0) {
    _this->_internal_set_linkavggrnqueue(from._internal_linkavggrnqueue());
  }
  if (from._internal_linkgrnutilization() != 0) {
    _this->_internal_set_linkgrnutilization(from._internal_linkgrnutilization());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkIndexAdded::CopyFrom(const LinkIndexAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LinkIndexAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkIndexAdded::IsInitialized() const {
  return true;
}

void LinkIndexAdded::InternalSwap(LinkIndexAdded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkIndexAdded, _impl_.linkgrnutilization_)
      + sizeof(LinkIndexAdded::_impl_.linkgrnutilization_)
      - PROTOBUF_FIELD_OFFSET(LinkIndexAdded, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkIndexAdded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[29]);
}

// ===================================================================

class MovementIndexAdded::_Internal {
 public:
};

MovementIndexAdded::MovementIndexAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MovementIndexAdded)
}
MovementIndexAdded::MovementIndexAdded(const MovementIndexAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovementIndexAdded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.movementcapacity_){}
    , decltype(_impl_.movementsaturation_){}
    , decltype(_impl_.movementspaceoccupy_){}
    , decltype(_impl_.movementtimeoccupy_){}
    , decltype(_impl_.movementavggrnqueue_){}
    , decltype(_impl_.movementgrnutilization_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.movementgrnutilization_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.movementgrnutilization_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MovementIndexAdded)
}

inline void MovementIndexAdded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.movementcapacity_){0u}
    , decltype(_impl_.movementsaturation_){0u}
    , decltype(_impl_.movementspaceoccupy_){0u}
    , decltype(_impl_.movementtimeoccupy_){0u}
    , decltype(_impl_.movementavggrnqueue_){0u}
    , decltype(_impl_.movementgrnutilization_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MovementIndexAdded::~MovementIndexAdded() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MovementIndexAdded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovementIndexAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MovementIndexAdded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovementIndexAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MovementIndexAdded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.movementgrnutilization_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.movementgrnutilization_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovementIndexAdded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 movementCapacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.movementcapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 movementSaturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.movementsaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 movementSpaceOccupy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.movementspaceoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 movementTimeOccupy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.movementtimeoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 movementAvgGrnQueue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.movementavggrnqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 movementGrnUtilization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.movementgrnutilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovementIndexAdded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MovementIndexAdded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 movementCapacity = 2;
  if (this->_internal_movementcapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_movementcapacity(), target);
  }

  // uint32 movementSaturation = 3;
  if (this->_internal_movementsaturation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_movementsaturation(), target);
  }

  // uint32 movementSpaceOccupy = 4;
  if (this->_internal_movementspaceoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_movementspaceoccupy(), target);
  }

  // uint32 movementTimeOccupy = 5;
  if (this->_internal_movementtimeoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_movementtimeoccupy(), target);
  }

  // uint32 movementAvgGrnQueue = 6;
  if (this->_internal_movementavggrnqueue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_movementavggrnqueue(), target);
  }

  // uint32 movementGrnUtilization = 7;
  if (this->_internal_movementgrnutilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_movementgrnutilization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MovementIndexAdded)
  return target;
}

size_t MovementIndexAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MovementIndexAdded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 movementCapacity = 2;
  if (this->_internal_movementcapacity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_movementcapacity());
  }

  // uint32 movementSaturation = 3;
  if (this->_internal_movementsaturation() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_movementsaturation());
  }

  // uint32 movementSpaceOccupy = 4;
  if (this->_internal_movementspaceoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_movementspaceoccupy());
  }

  // uint32 movementTimeOccupy = 5;
  if (this->_internal_movementtimeoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_movementtimeoccupy());
  }

  // uint32 movementAvgGrnQueue = 6;
  if (this->_internal_movementavggrnqueue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_movementavggrnqueue());
  }

  // uint32 movementGrnUtilization = 7;
  if (this->_internal_movementgrnutilization() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_movementgrnutilization());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovementIndexAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovementIndexAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovementIndexAdded::GetClassData() const { return &_class_data_; }


void MovementIndexAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovementIndexAdded*>(&to_msg);
  auto& from = static_cast<const MovementIndexAdded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MovementIndexAdded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_movementcapacity() != 0) {
    _this->_internal_set_movementcapacity(from._internal_movementcapacity());
  }
  if (from._internal_movementsaturation() != 0) {
    _this->_internal_set_movementsaturation(from._internal_movementsaturation());
  }
  if (from._internal_movementspaceoccupy() != 0) {
    _this->_internal_set_movementspaceoccupy(from._internal_movementspaceoccupy());
  }
  if (from._internal_movementtimeoccupy() != 0) {
    _this->_internal_set_movementtimeoccupy(from._internal_movementtimeoccupy());
  }
  if (from._internal_movementavggrnqueue() != 0) {
    _this->_internal_set_movementavggrnqueue(from._internal_movementavggrnqueue());
  }
  if (from._internal_movementgrnutilization() != 0) {
    _this->_internal_set_movementgrnutilization(from._internal_movementgrnutilization());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovementIndexAdded::CopyFrom(const MovementIndexAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MovementIndexAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovementIndexAdded::IsInitialized() const {
  return true;
}

void MovementIndexAdded::InternalSwap(MovementIndexAdded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovementIndexAdded, _impl_.movementgrnutilization_)
      + sizeof(MovementIndexAdded::_impl_.movementgrnutilization_)
      - PROTOBUF_FIELD_OFFSET(MovementIndexAdded, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovementIndexAdded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[30]);
}

// ===================================================================

class NodeIndexAdded::_Internal {
 public:
};

NodeIndexAdded::NodeIndexAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.NodeIndexAdded)
}
NodeIndexAdded::NodeIndexAdded(const NodeIndexAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeIndexAdded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.nodespaceoccupy_){}
    , decltype(_impl_.nodetimeoccupy_){}
    , decltype(_impl_.nodecapacity_){}
    , decltype(_impl_.nodesaturation_){}
    , decltype(_impl_.nodegrnutilization_){}
    , decltype(_impl_.nodeavggrnqueue_){}
    , decltype(_impl_.demandindex_){}
    , decltype(_impl_.supplyindex_){}
    , decltype(_impl_.theoryindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theoryindex_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.theoryindex_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.NodeIndexAdded)
}

inline void NodeIndexAdded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.nodespaceoccupy_){0u}
    , decltype(_impl_.nodetimeoccupy_){0u}
    , decltype(_impl_.nodecapacity_){uint64_t{0u}}
    , decltype(_impl_.nodesaturation_){0u}
    , decltype(_impl_.nodegrnutilization_){0u}
    , decltype(_impl_.nodeavggrnqueue_){0u}
    , decltype(_impl_.demandindex_){0u}
    , decltype(_impl_.supplyindex_){0u}
    , decltype(_impl_.theoryindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeIndexAdded::~NodeIndexAdded() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.NodeIndexAdded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeIndexAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeIndexAdded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeIndexAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.NodeIndexAdded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.theoryindex_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.theoryindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeIndexAdded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nodeSpaceOccupy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nodespaceoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nodeTimeOccupy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.nodetimeoccupy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nodeCapacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.nodecapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nodeSaturation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.nodesaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nodeGrnUtilization = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.nodegrnutilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nodeAvgGrnQueue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.nodeavggrnqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 demandIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.demandindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 supplyIndex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.supplyindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 theoryIndex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.theoryindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeIndexAdded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.NodeIndexAdded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 nodeSpaceOccupy = 2;
  if (this->_internal_nodespaceoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nodespaceoccupy(), target);
  }

  // uint32 nodeTimeOccupy = 3;
  if (this->_internal_nodetimeoccupy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nodetimeoccupy(), target);
  }

  // uint64 nodeCapacity = 4;
  if (this->_internal_nodecapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_nodecapacity(), target);
  }

  // uint32 nodeSaturation = 5;
  if (this->_internal_nodesaturation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nodesaturation(), target);
  }

  // uint32 nodeGrnUtilization = 6;
  if (this->_internal_nodegrnutilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_nodegrnutilization(), target);
  }

  // uint32 nodeAvgGrnQueue = 7;
  if (this->_internal_nodeavggrnqueue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_nodeavggrnqueue(), target);
  }

  // uint32 demandIndex = 8;
  if (this->_internal_demandindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_demandindex(), target);
  }

  // uint32 supplyIndex = 9;
  if (this->_internal_supplyindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_supplyindex(), target);
  }

  // uint32 theoryIndex = 10;
  if (this->_internal_theoryindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_theoryindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.NodeIndexAdded)
  return target;
}

size_t NodeIndexAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.NodeIndexAdded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 nodeSpaceOccupy = 2;
  if (this->_internal_nodespaceoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodespaceoccupy());
  }

  // uint32 nodeTimeOccupy = 3;
  if (this->_internal_nodetimeoccupy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodetimeoccupy());
  }

  // uint64 nodeCapacity = 4;
  if (this->_internal_nodecapacity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nodecapacity());
  }

  // uint32 nodeSaturation = 5;
  if (this->_internal_nodesaturation() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodesaturation());
  }

  // uint32 nodeGrnUtilization = 6;
  if (this->_internal_nodegrnutilization() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodegrnutilization());
  }

  // uint32 nodeAvgGrnQueue = 7;
  if (this->_internal_nodeavggrnqueue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodeavggrnqueue());
  }

  // uint32 demandIndex = 8;
  if (this->_internal_demandindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_demandindex());
  }

  // uint32 supplyIndex = 9;
  if (this->_internal_supplyindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_supplyindex());
  }

  // uint32 theoryIndex = 10;
  if (this->_internal_theoryindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_theoryindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeIndexAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeIndexAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeIndexAdded::GetClassData() const { return &_class_data_; }


void NodeIndexAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeIndexAdded*>(&to_msg);
  auto& from = static_cast<const NodeIndexAdded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.NodeIndexAdded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_nodespaceoccupy() != 0) {
    _this->_internal_set_nodespaceoccupy(from._internal_nodespaceoccupy());
  }
  if (from._internal_nodetimeoccupy() != 0) {
    _this->_internal_set_nodetimeoccupy(from._internal_nodetimeoccupy());
  }
  if (from._internal_nodecapacity() != 0) {
    _this->_internal_set_nodecapacity(from._internal_nodecapacity());
  }
  if (from._internal_nodesaturation() != 0) {
    _this->_internal_set_nodesaturation(from._internal_nodesaturation());
  }
  if (from._internal_nodegrnutilization() != 0) {
    _this->_internal_set_nodegrnutilization(from._internal_nodegrnutilization());
  }
  if (from._internal_nodeavggrnqueue() != 0) {
    _this->_internal_set_nodeavggrnqueue(from._internal_nodeavggrnqueue());
  }
  if (from._internal_demandindex() != 0) {
    _this->_internal_set_demandindex(from._internal_demandindex());
  }
  if (from._internal_supplyindex() != 0) {
    _this->_internal_set_supplyindex(from._internal_supplyindex());
  }
  if (from._internal_theoryindex() != 0) {
    _this->_internal_set_theoryindex(from._internal_theoryindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeIndexAdded::CopyFrom(const NodeIndexAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.NodeIndexAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeIndexAdded::IsInitialized() const {
  return true;
}

void NodeIndexAdded::InternalSwap(NodeIndexAdded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeIndexAdded, _impl_.theoryindex_)
      + sizeof(NodeIndexAdded::_impl_.theoryindex_)
      - PROTOBUF_FIELD_OFFSET(NodeIndexAdded, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeIndexAdded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[31]);
}

// ===================================================================

class SignalControlIndexAdded::_Internal {
 public:
};

SignalControlIndexAdded::SignalControlIndexAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.SignalControlIndexAdded)
}
SignalControlIndexAdded::SignalControlIndexAdded(const SignalControlIndexAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalControlIndexAdded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phaseid_){}
    , decltype(_impl_.greenstartqueue_){}
    , decltype(_impl_.redstartqueue_){}
    , decltype(_impl_.greenutilization_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.phaseid_, &from._impl_.phaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.greenutilization_) -
    reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.greenutilization_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.SignalControlIndexAdded)
}

inline void SignalControlIndexAdded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phaseid_){0u}
    , decltype(_impl_.greenstartqueue_){0u}
    , decltype(_impl_.redstartqueue_){0u}
    , decltype(_impl_.greenutilization_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalControlIndexAdded::~SignalControlIndexAdded() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.SignalControlIndexAdded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalControlIndexAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignalControlIndexAdded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalControlIndexAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.SignalControlIndexAdded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.phaseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.greenutilization_) -
      reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.greenutilization_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalControlIndexAdded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 phaseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 greenStartQueue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.greenstartqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 redStartQueue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.redstartqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 greenUtilization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.greenutilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalControlIndexAdded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.SignalControlIndexAdded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phaseId = 1;
  if (this->_internal_phaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phaseid(), target);
  }

  // uint32 greenStartQueue = 2;
  if (this->_internal_greenstartqueue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_greenstartqueue(), target);
  }

  // uint32 redStartQueue = 3;
  if (this->_internal_redstartqueue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_redstartqueue(), target);
  }

  // uint32 greenUtilization = 4;
  if (this->_internal_greenutilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_greenutilization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.SignalControlIndexAdded)
  return target;
}

size_t SignalControlIndexAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.SignalControlIndexAdded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 phaseId = 1;
  if (this->_internal_phaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseid());
  }

  // uint32 greenStartQueue = 2;
  if (this->_internal_greenstartqueue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_greenstartqueue());
  }

  // uint32 redStartQueue = 3;
  if (this->_internal_redstartqueue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redstartqueue());
  }

  // uint32 greenUtilization = 4;
  if (this->_internal_greenutilization() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_greenutilization());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalControlIndexAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalControlIndexAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalControlIndexAdded::GetClassData() const { return &_class_data_; }


void SignalControlIndexAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalControlIndexAdded*>(&to_msg);
  auto& from = static_cast<const SignalControlIndexAdded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.SignalControlIndexAdded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_phaseid() != 0) {
    _this->_internal_set_phaseid(from._internal_phaseid());
  }
  if (from._internal_greenstartqueue() != 0) {
    _this->_internal_set_greenstartqueue(from._internal_greenstartqueue());
  }
  if (from._internal_redstartqueue() != 0) {
    _this->_internal_set_redstartqueue(from._internal_redstartqueue());
  }
  if (from._internal_greenutilization() != 0) {
    _this->_internal_set_greenutilization(from._internal_greenutilization());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalControlIndexAdded::CopyFrom(const SignalControlIndexAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.SignalControlIndexAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalControlIndexAdded::IsInitialized() const {
  return true;
}

void SignalControlIndexAdded::InternalSwap(SignalControlIndexAdded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalControlIndexAdded, _impl_.greenutilization_)
      + sizeof(SignalControlIndexAdded::_impl_.greenutilization_)
      - PROTOBUF_FIELD_OFFSET(SignalControlIndexAdded, _impl_.phaseid_)>(
          reinterpret_cast<char*>(&_impl_.phaseid_),
          reinterpret_cast<char*>(&other->_impl_.phaseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalControlIndexAdded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[32]);
}

// ===================================================================

class TrafficFlowExtension::_Internal {
 public:
};

TrafficFlowExtension::TrafficFlowExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TrafficFlowExtension)
}
TrafficFlowExtension::TrafficFlowExtension(const TrafficFlowExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficFlowExtension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.laneindex_){from._impl_.laneindex_}
    , decltype(_impl_.linkindex_){from._impl_.linkindex_}
    , decltype(_impl_.movementindex_){from._impl_.movementindex_}
    , decltype(_impl_.nodeindex_){from._impl_.nodeindex_}
    , decltype(_impl_.signalindex_){from._impl_.signalindex_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TrafficFlowExtension)
}

inline void TrafficFlowExtension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.laneindex_){arena}
    , decltype(_impl_.linkindex_){arena}
    , decltype(_impl_.movementindex_){arena}
    , decltype(_impl_.nodeindex_){arena}
    , decltype(_impl_.signalindex_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficFlowExtension::~TrafficFlowExtension() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TrafficFlowExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficFlowExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.laneindex_.~RepeatedPtrField();
  _impl_.linkindex_.~RepeatedPtrField();
  _impl_.movementindex_.~RepeatedPtrField();
  _impl_.nodeindex_.~RepeatedPtrField();
  _impl_.signalindex_.~RepeatedPtrField();
}

void TrafficFlowExtension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficFlowExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TrafficFlowExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.laneindex_.Clear();
  _impl_.linkindex_.Clear();
  _impl_.movementindex_.Clear();
  _impl_.nodeindex_.Clear();
  _impl_.signalindex_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficFlowExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.seisys.v2x.pb.LaneIndexAdded laneIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_laneindex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.LinkIndexAdded linkIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linkindex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.MovementIndexAdded movementIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movementindex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.NodeIndexAdded nodeIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodeindex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.SignalControlIndexAdded signalIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signalindex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficFlowExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TrafficFlowExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.LaneIndexAdded laneIndex = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_laneindex_size()); i < n; i++) {
    const auto& repfield = this->_internal_laneindex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.LinkIndexAdded linkIndex = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_linkindex_size()); i < n; i++) {
    const auto& repfield = this->_internal_linkindex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.MovementIndexAdded movementIndex = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movementindex_size()); i < n; i++) {
    const auto& repfield = this->_internal_movementindex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.NodeIndexAdded nodeIndex = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodeindex_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodeindex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.SignalControlIndexAdded signalIndex = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signalindex_size()); i < n; i++) {
    const auto& repfield = this->_internal_signalindex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TrafficFlowExtension)
  return target;
}

size_t TrafficFlowExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TrafficFlowExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.LaneIndexAdded laneIndex = 1;
  total_size += 1UL * this->_internal_laneindex_size();
  for (const auto& msg : this->_impl_.laneindex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.LinkIndexAdded linkIndex = 2;
  total_size += 1UL * this->_internal_linkindex_size();
  for (const auto& msg : this->_impl_.linkindex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.MovementIndexAdded movementIndex = 3;
  total_size += 1UL * this->_internal_movementindex_size();
  for (const auto& msg : this->_impl_.movementindex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.NodeIndexAdded nodeIndex = 4;
  total_size += 1UL * this->_internal_nodeindex_size();
  for (const auto& msg : this->_impl_.nodeindex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.SignalControlIndexAdded signalIndex = 5;
  total_size += 1UL * this->_internal_signalindex_size();
  for (const auto& msg : this->_impl_.signalindex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficFlowExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficFlowExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficFlowExtension::GetClassData() const { return &_class_data_; }


void TrafficFlowExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficFlowExtension*>(&to_msg);
  auto& from = static_cast<const TrafficFlowExtension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TrafficFlowExtension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.laneindex_.MergeFrom(from._impl_.laneindex_);
  _this->_impl_.linkindex_.MergeFrom(from._impl_.linkindex_);
  _this->_impl_.movementindex_.MergeFrom(from._impl_.movementindex_);
  _this->_impl_.nodeindex_.MergeFrom(from._impl_.nodeindex_);
  _this->_impl_.signalindex_.MergeFrom(from._impl_.signalindex_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficFlowExtension::CopyFrom(const TrafficFlowExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TrafficFlowExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlowExtension::IsInitialized() const {
  return true;
}

void TrafficFlowExtension::InternalSwap(TrafficFlowExtension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.laneindex_.InternalSwap(&other->_impl_.laneindex_);
  _impl_.linkindex_.InternalSwap(&other->_impl_.linkindex_);
  _impl_.movementindex_.InternalSwap(&other->_impl_.movementindex_);
  _impl_.nodeindex_.InternalSwap(&other->_impl_.nodeindex_);
  _impl_.signalindex_.InternalSwap(&other->_impl_.signalindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficFlowExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[33]);
}

// ===================================================================

class TrafficFlowStat::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::TrafficFlowStatMapElement& mapelement(const TrafficFlowStat* msg);
  static const ::cn::seisys::v2x::pb::TrafficFlowExtension& trafficflowextension(const TrafficFlowStat* msg);
};

const ::cn::seisys::v2x::pb::TrafficFlowStatMapElement&
TrafficFlowStat::_Internal::mapelement(const TrafficFlowStat* msg) {
  return *msg->_impl_.mapelement_;
}
const ::cn::seisys::v2x::pb::TrafficFlowExtension&
TrafficFlowStat::_Internal::trafficflowextension(const TrafficFlowStat* msg) {
  return *msg->_impl_.trafficflowextension_;
}
TrafficFlowStat::TrafficFlowStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TrafficFlowStat)
}
TrafficFlowStat::TrafficFlowStat(const TrafficFlowStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficFlowStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapelement_){nullptr}
    , decltype(_impl_.trafficflowextension_){nullptr}
    , decltype(_impl_.mapelementtype_){}
    , decltype(_impl_.ptctype_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.vehicletype_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.speedpoint_){}
    , decltype(_impl_.speedarea_){}
    , decltype(_impl_.density_){}
    , decltype(_impl_.traveltime_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.queuelength_){}
    , decltype(_impl_.queueint_){}
    , decltype(_impl_.congestion_){}
    , decltype(_impl_.timeheadway_){}
    , decltype(_impl_.spaceheadway_){}
    , decltype(_impl_.stopnums_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapelement()) {
    _this->_impl_.mapelement_ = new ::cn::seisys::v2x::pb::TrafficFlowStatMapElement(*from._impl_.mapelement_);
  }
  if (from._internal_has_trafficflowextension()) {
    _this->_impl_.trafficflowextension_ = new ::cn::seisys::v2x::pb::TrafficFlowExtension(*from._impl_.trafficflowextension_);
  }
  ::memcpy(&_impl_.mapelementtype_, &from._impl_.mapelementtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stopnums_) -
    reinterpret_cast<char*>(&_impl_.mapelementtype_)) + sizeof(_impl_.stopnums_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TrafficFlowStat)
}

inline void TrafficFlowStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapelement_){nullptr}
    , decltype(_impl_.trafficflowextension_){nullptr}
    , decltype(_impl_.mapelementtype_){0}
    , decltype(_impl_.ptctype_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.vehicletype_){0}
    , decltype(_impl_.volume_){0u}
    , decltype(_impl_.speedpoint_){0u}
    , decltype(_impl_.speedarea_){0u}
    , decltype(_impl_.density_){0u}
    , decltype(_impl_.traveltime_){0u}
    , decltype(_impl_.delay_){0u}
    , decltype(_impl_.queuelength_){0u}
    , decltype(_impl_.queueint_){0u}
    , decltype(_impl_.congestion_){0u}
    , decltype(_impl_.timeheadway_){0u}
    , decltype(_impl_.spaceheadway_){0u}
    , decltype(_impl_.stopnums_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficFlowStat::~TrafficFlowStat() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TrafficFlowStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficFlowStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mapelement_;
  if (this != internal_default_instance()) delete _impl_.trafficflowextension_;
}

void TrafficFlowStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficFlowStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TrafficFlowStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mapelement_ != nullptr) {
    delete _impl_.mapelement_;
  }
  _impl_.mapelement_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trafficflowextension_ != nullptr) {
    delete _impl_.trafficflowextension_;
  }
  _impl_.trafficflowextension_ = nullptr;
  ::memset(&_impl_.mapelementtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stopnums_) -
      reinterpret_cast<char*>(&_impl_.mapelementtype_)) + sizeof(_impl_.stopnums_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficFlowStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.TrafficFlowStatMapElement mapElement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapelement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MapElementType mapElementType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mapelementtype(static_cast<::cn::seisys::v2x::pb::MapElementType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantType ptcType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ptctype(static_cast<::cn::seisys::v2x::pb::ParticipantType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.VehicleType vehicleType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehicletype(static_cast<::cn::seisys::v2x::pb::VehicleType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speedPoint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.speedpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speedArea = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.speedarea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 density = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.density_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 travelTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.traveltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 delay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 queueLength = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.queuelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 queueInt = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.queueint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 congestion = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.congestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TrafficFlowExtension trafficFlowExtension = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_trafficflowextension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timeHeadway = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.timeheadway_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 spaceHeadway = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.spaceheadway_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stopNums = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.stopnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficFlowStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TrafficFlowStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.TrafficFlowStatMapElement mapElement = 1;
  if (this->_internal_has_mapelement()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mapelement(this),
        _Internal::mapelement(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.MapElementType mapElementType = 2;
  if (this->_internal_mapelementtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mapelementtype(), target);
  }

  // .cn.seisys.v2x.pb.ParticipantType ptcType = 3;
  if (this->_internal_ptctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ptctype(), target);
  }

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 4;
  if (this->_internal_vehicletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vehicletype(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // uint32 volume = 6;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_volume(), target);
  }

  // uint32 speedPoint = 7;
  if (this->_internal_speedpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_speedpoint(), target);
  }

  // uint32 speedArea = 8;
  if (this->_internal_speedarea() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_speedarea(), target);
  }

  // uint32 density = 9;
  if (this->_internal_density() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_density(), target);
  }

  // uint32 travelTime = 10;
  if (this->_internal_traveltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_traveltime(), target);
  }

  // uint32 delay = 11;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_delay(), target);
  }

  // uint32 queueLength = 12;
  if (this->_internal_queuelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_queuelength(), target);
  }

  // uint32 queueInt = 13;
  if (this->_internal_queueint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_queueint(), target);
  }

  // uint32 congestion = 14;
  if (this->_internal_congestion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_congestion(), target);
  }

  // .cn.seisys.v2x.pb.TrafficFlowExtension trafficFlowExtension = 15;
  if (this->_internal_has_trafficflowextension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::trafficflowextension(this),
        _Internal::trafficflowextension(this).GetCachedSize(), target, stream);
  }

  // uint32 timeHeadway = 16;
  if (this->_internal_timeheadway() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_timeheadway(), target);
  }

  // uint32 spaceHeadway = 17;
  if (this->_internal_spaceheadway() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_spaceheadway(), target);
  }

  // uint32 stopNums = 18;
  if (this->_internal_stopnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_stopnums(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TrafficFlowStat)
  return target;
}

size_t TrafficFlowStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TrafficFlowStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.TrafficFlowStatMapElement mapElement = 1;
  if (this->_internal_has_mapelement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapelement_);
  }

  // .cn.seisys.v2x.pb.TrafficFlowExtension trafficFlowExtension = 15;
  if (this->_internal_has_trafficflowextension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trafficflowextension_);
  }

  // .cn.seisys.v2x.pb.MapElementType mapElementType = 2;
  if (this->_internal_mapelementtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mapelementtype());
  }

  // .cn.seisys.v2x.pb.ParticipantType ptcType = 3;
  if (this->_internal_ptctype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ptctype());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 4;
  if (this->_internal_vehicletype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicletype());
  }

  // uint32 volume = 6;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_volume());
  }

  // uint32 speedPoint = 7;
  if (this->_internal_speedpoint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speedpoint());
  }

  // uint32 speedArea = 8;
  if (this->_internal_speedarea() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speedarea());
  }

  // uint32 density = 9;
  if (this->_internal_density() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_density());
  }

  // uint32 travelTime = 10;
  if (this->_internal_traveltime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_traveltime());
  }

  // uint32 delay = 11;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_delay());
  }

  // uint32 queueLength = 12;
  if (this->_internal_queuelength() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queuelength());
  }

  // uint32 queueInt = 13;
  if (this->_internal_queueint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queueint());
  }

  // uint32 congestion = 14;
  if (this->_internal_congestion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_congestion());
  }

  // uint32 timeHeadway = 16;
  if (this->_internal_timeheadway() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_timeheadway());
  }

  // uint32 spaceHeadway = 17;
  if (this->_internal_spaceheadway() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_spaceheadway());
  }

  // uint32 stopNums = 18;
  if (this->_internal_stopnums() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_stopnums());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficFlowStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficFlowStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficFlowStat::GetClassData() const { return &_class_data_; }


void TrafficFlowStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficFlowStat*>(&to_msg);
  auto& from = static_cast<const TrafficFlowStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TrafficFlowStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mapelement()) {
    _this->_internal_mutable_mapelement()->::cn::seisys::v2x::pb::TrafficFlowStatMapElement::MergeFrom(
        from._internal_mapelement());
  }
  if (from._internal_has_trafficflowextension()) {
    _this->_internal_mutable_trafficflowextension()->::cn::seisys::v2x::pb::TrafficFlowExtension::MergeFrom(
        from._internal_trafficflowextension());
  }
  if (from._internal_mapelementtype() != 0) {
    _this->_internal_set_mapelementtype(from._internal_mapelementtype());
  }
  if (from._internal_ptctype() != 0) {
    _this->_internal_set_ptctype(from._internal_ptctype());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_vehicletype() != 0) {
    _this->_internal_set_vehicletype(from._internal_vehicletype());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_speedpoint() != 0) {
    _this->_internal_set_speedpoint(from._internal_speedpoint());
  }
  if (from._internal_speedarea() != 0) {
    _this->_internal_set_speedarea(from._internal_speedarea());
  }
  if (from._internal_density() != 0) {
    _this->_internal_set_density(from._internal_density());
  }
  if (from._internal_traveltime() != 0) {
    _this->_internal_set_traveltime(from._internal_traveltime());
  }
  if (from._internal_delay() != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  if (from._internal_queuelength() != 0) {
    _this->_internal_set_queuelength(from._internal_queuelength());
  }
  if (from._internal_queueint() != 0) {
    _this->_internal_set_queueint(from._internal_queueint());
  }
  if (from._internal_congestion() != 0) {
    _this->_internal_set_congestion(from._internal_congestion());
  }
  if (from._internal_timeheadway() != 0) {
    _this->_internal_set_timeheadway(from._internal_timeheadway());
  }
  if (from._internal_spaceheadway() != 0) {
    _this->_internal_set_spaceheadway(from._internal_spaceheadway());
  }
  if (from._internal_stopnums() != 0) {
    _this->_internal_set_stopnums(from._internal_stopnums());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficFlowStat::CopyFrom(const TrafficFlowStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TrafficFlowStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlowStat::IsInitialized() const {
  return true;
}

void TrafficFlowStat::InternalSwap(TrafficFlowStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficFlowStat, _impl_.stopnums_)
      + sizeof(TrafficFlowStat::_impl_.stopnums_)
      - PROTOBUF_FIELD_OFFSET(TrafficFlowStat, _impl_.mapelement_)>(
          reinterpret_cast<char*>(&_impl_.mapelement_),
          reinterpret_cast<char*>(&other->_impl_.mapelement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficFlowStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[34]);
}

// ===================================================================

class TrafficFlow::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& nodeid(const TrafficFlow* msg);
  static const ::cn::seisys::v2x::pb::TrafficFlowStatType& stattype(const TrafficFlow* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
TrafficFlow::_Internal::nodeid(const TrafficFlow* msg) {
  return *msg->_impl_.nodeid_;
}
const ::cn::seisys::v2x::pb::TrafficFlowStatType&
TrafficFlow::_Internal::stattype(const TrafficFlow* msg) {
  return *msg->_impl_.stattype_;
}
TrafficFlow::TrafficFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TrafficFlow)
}
TrafficFlow::TrafficFlow(const TrafficFlow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficFlow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.stattype_){nullptr}
    , decltype(_impl_.gentime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodeid()) {
    _this->_impl_.nodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.nodeid_);
  }
  if (from._internal_has_stattype()) {
    _this->_impl_.stattype_ = new ::cn::seisys::v2x::pb::TrafficFlowStatType(*from._impl_.stattype_);
  }
  _this->_impl_.gentime_ = from._impl_.gentime_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TrafficFlow)
}

inline void TrafficFlow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.stattype_){nullptr}
    , decltype(_impl_.gentime_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficFlow::~TrafficFlow() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TrafficFlow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficFlow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.nodeid_;
  if (this != internal_default_instance()) delete _impl_.stattype_;
}

void TrafficFlow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TrafficFlow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.nodeid_ != nullptr) {
    delete _impl_.nodeid_;
  }
  _impl_.nodeid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stattype_ != nullptr) {
    delete _impl_.stattype_;
  }
  _impl_.stattype_ = nullptr;
  _impl_.gentime_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficFlow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 genTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TrafficFlowStatType statType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stattype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.TrafficFlowStat stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficFlow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TrafficFlow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nodeid(this),
        _Internal::nodeid(this).GetCachedSize(), target, stream);
  }

  // uint64 genTime = 2;
  if (this->_internal_gentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gentime(), target);
  }

  // .cn.seisys.v2x.pb.TrafficFlowStatType statType = 3;
  if (this->_internal_has_stattype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stattype(this),
        _Internal::stattype(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.TrafficFlowStat stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TrafficFlow)
  return target;
}

size_t TrafficFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TrafficFlow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.TrafficFlowStat stats = 4;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodeid_);
  }

  // .cn.seisys.v2x.pb.TrafficFlowStatType statType = 3;
  if (this->_internal_has_stattype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stattype_);
  }

  // uint64 genTime = 2;
  if (this->_internal_gentime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gentime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficFlow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficFlow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficFlow::GetClassData() const { return &_class_data_; }


void TrafficFlow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficFlow*>(&to_msg);
  auto& from = static_cast<const TrafficFlow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TrafficFlow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_nodeid()) {
    _this->_internal_mutable_nodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_nodeid());
  }
  if (from._internal_has_stattype()) {
    _this->_internal_mutable_stattype()->::cn::seisys::v2x::pb::TrafficFlowStatType::MergeFrom(
        from._internal_stattype());
  }
  if (from._internal_gentime() != 0) {
    _this->_internal_set_gentime(from._internal_gentime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficFlow::CopyFrom(const TrafficFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TrafficFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlow::IsInitialized() const {
  return true;
}

void TrafficFlow::InternalSwap(TrafficFlow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficFlow, _impl_.gentime_)
      + sizeof(TrafficFlow::_impl_.gentime_)
      - PROTOBUF_FIELD_OFFSET(TrafficFlow, _impl_.nodeid_)>(
          reinterpret_cast<char*>(&_impl_.nodeid_),
          reinterpret_cast<char*>(&other->_impl_.nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficFlow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[35]);
}

// ===================================================================

class TimeCountingDown::_Internal {
 public:
};

TimeCountingDown::TimeCountingDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.TimeCountingDown)
}
TimeCountingDown::TimeCountingDown(const TimeCountingDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeCountingDown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){}
    , decltype(_impl_.minendtime_){}
    , decltype(_impl_.maxendtime_){}
    , decltype(_impl_.likelyendtime_){}
    , decltype(_impl_.timeconfidence_){}
    , decltype(_impl_.nextstarttime_){}
    , decltype(_impl_.nextduration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.starttime_, &from._impl_.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nextduration_) -
    reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.nextduration_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.TimeCountingDown)
}

inline void TimeCountingDown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){0u}
    , decltype(_impl_.minendtime_){0u}
    , decltype(_impl_.maxendtime_){0u}
    , decltype(_impl_.likelyendtime_){0u}
    , decltype(_impl_.timeconfidence_){0}
    , decltype(_impl_.nextstarttime_){0u}
    , decltype(_impl_.nextduration_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeCountingDown::~TimeCountingDown() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.TimeCountingDown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeCountingDown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeCountingDown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeCountingDown::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.TimeCountingDown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nextduration_) -
      reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.nextduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeCountingDown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 startTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minEndTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxEndTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 likelyEndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.likelyendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeconfidence(static_cast<::cn::seisys::v2x::pb::TimeConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 nextStartTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.nextstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nextDuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.nextduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeCountingDown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.TimeCountingDown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 startTime = 1;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_starttime(), target);
  }

  // uint32 minEndTime = 2;
  if (this->_internal_minendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minendtime(), target);
  }

  // uint32 maxEndTime = 3;
  if (this->_internal_maxendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxendtime(), target);
  }

  // uint32 likelyEndTime = 4;
  if (this->_internal_likelyendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_likelyendtime(), target);
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 5;
  if (this->_internal_timeconfidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_timeconfidence(), target);
  }

  // uint32 nextStartTime = 6;
  if (this->_internal_nextstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_nextstarttime(), target);
  }

  // uint32 nextDuration = 7;
  if (this->_internal_nextduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_nextduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.TimeCountingDown)
  return target;
}

size_t TimeCountingDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.TimeCountingDown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 startTime = 1;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starttime());
  }

  // uint32 minEndTime = 2;
  if (this->_internal_minendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minendtime());
  }

  // uint32 maxEndTime = 3;
  if (this->_internal_maxendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxendtime());
  }

  // uint32 likelyEndTime = 4;
  if (this->_internal_likelyendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_likelyendtime());
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 5;
  if (this->_internal_timeconfidence() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_timeconfidence());
  }

  // uint32 nextStartTime = 6;
  if (this->_internal_nextstarttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextstarttime());
  }

  // uint32 nextDuration = 7;
  if (this->_internal_nextduration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextduration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeCountingDown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeCountingDown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeCountingDown::GetClassData() const { return &_class_data_; }


void TimeCountingDown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeCountingDown*>(&to_msg);
  auto& from = static_cast<const TimeCountingDown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.TimeCountingDown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_minendtime() != 0) {
    _this->_internal_set_minendtime(from._internal_minendtime());
  }
  if (from._internal_maxendtime() != 0) {
    _this->_internal_set_maxendtime(from._internal_maxendtime());
  }
  if (from._internal_likelyendtime() != 0) {
    _this->_internal_set_likelyendtime(from._internal_likelyendtime());
  }
  if (from._internal_timeconfidence() != 0) {
    _this->_internal_set_timeconfidence(from._internal_timeconfidence());
  }
  if (from._internal_nextstarttime() != 0) {
    _this->_internal_set_nextstarttime(from._internal_nextstarttime());
  }
  if (from._internal_nextduration() != 0) {
    _this->_internal_set_nextduration(from._internal_nextduration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeCountingDown::CopyFrom(const TimeCountingDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.TimeCountingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeCountingDown::IsInitialized() const {
  return true;
}

void TimeCountingDown::InternalSwap(TimeCountingDown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeCountingDown, _impl_.nextduration_)
      + sizeof(TimeCountingDown::_impl_.nextduration_)
      - PROTOBUF_FIELD_OFFSET(TimeCountingDown, _impl_.starttime_)>(
          reinterpret_cast<char*>(&_impl_.starttime_),
          reinterpret_cast<char*>(&other->_impl_.starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeCountingDown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[36]);
}

// ===================================================================

class PhaseState::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::TimeCountingDown& timing(const PhaseState* msg);
};

const ::cn::seisys::v2x::pb::TimeCountingDown&
PhaseState::_Internal::timing(const PhaseState* msg) {
  return *msg->_impl_.timing_;
}
PhaseState::PhaseState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PhaseState)
}
PhaseState::PhaseState(const PhaseState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhaseState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timing_){nullptr}
    , decltype(_impl_.light_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timing()) {
    _this->_impl_.timing_ = new ::cn::seisys::v2x::pb::TimeCountingDown(*from._impl_.timing_);
  }
  _this->_impl_.light_ = from._impl_.light_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PhaseState)
}

inline void PhaseState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timing_){nullptr}
    , decltype(_impl_.light_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PhaseState::~PhaseState() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PhaseState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhaseState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timing_;
}

void PhaseState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhaseState::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PhaseState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timing_ != nullptr) {
    delete _impl_.timing_;
  }
  _impl_.timing_ = nullptr;
  _impl_.light_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhaseState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.PhaseState.LightState light = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_light(static_cast<::cn::seisys::v2x::pb::PhaseState_LightState>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TimeCountingDown timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhaseState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PhaseState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.PhaseState.LightState light = 1;
  if (this->_internal_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_light(), target);
  }

  // .cn.seisys.v2x.pb.TimeCountingDown timing = 2;
  if (this->_internal_has_timing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timing(this),
        _Internal::timing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PhaseState)
  return target;
}

size_t PhaseState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PhaseState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.TimeCountingDown timing = 2;
  if (this->_internal_has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timing_);
  }

  // .cn.seisys.v2x.pb.PhaseState.LightState light = 1;
  if (this->_internal_light() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_light());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhaseState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhaseState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhaseState::GetClassData() const { return &_class_data_; }


void PhaseState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhaseState*>(&to_msg);
  auto& from = static_cast<const PhaseState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PhaseState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timing()) {
    _this->_internal_mutable_timing()->::cn::seisys::v2x::pb::TimeCountingDown::MergeFrom(
        from._internal_timing());
  }
  if (from._internal_light() != 0) {
    _this->_internal_set_light(from._internal_light());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhaseState::CopyFrom(const PhaseState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PhaseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseState::IsInitialized() const {
  return true;
}

void PhaseState::InternalSwap(PhaseState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhaseState, _impl_.light_)
      + sizeof(PhaseState::_impl_.light_)
      - PROTOBUF_FIELD_OFFSET(PhaseState, _impl_.timing_)>(
          reinterpret_cast<char*>(&_impl_.timing_),
          reinterpret_cast<char*>(&other->_impl_.timing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[37]);
}

// ===================================================================

class Phase::_Internal {
 public:
};

Phase::Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Phase)
}
Phase::Phase(const Phase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Phase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phasestates_){from._impl_.phasestates_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Phase)
}

inline void Phase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phasestates_){arena}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Phase::~Phase() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Phase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Phase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phasestates_.~RepeatedPtrField();
}

void Phase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Phase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phasestates_.Clear();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Phase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.PhaseState phaseStates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phasestates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Phase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Phase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .cn.seisys.v2x.pb.PhaseState phaseStates = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phasestates_size()); i < n; i++) {
    const auto& repfield = this->_internal_phasestates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Phase)
  return target;
}

size_t Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Phase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.PhaseState phaseStates = 2;
  total_size += 1UL * this->_internal_phasestates_size();
  for (const auto& msg : this->_impl_.phasestates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Phase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Phase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Phase::GetClassData() const { return &_class_data_; }


void Phase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Phase*>(&to_msg);
  auto& from = static_cast<const Phase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Phase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.phasestates_.MergeFrom(from._impl_.phasestates_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Phase::CopyFrom(const Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phase::IsInitialized() const {
  return true;
}

void Phase::InternalSwap(Phase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.phasestates_.InternalSwap(&other->_impl_.phasestates_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Phase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[38]);
}

// ===================================================================

class IntersectionState::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& intersectionid(const IntersectionState* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
IntersectionState::_Internal::intersectionid(const IntersectionState* msg) {
  return *msg->_impl_.intersectionid_;
}
IntersectionState::IntersectionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.IntersectionState)
}
IntersectionState::IntersectionState(const IntersectionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntersectionState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phases_){from._impl_.phases_}
    , decltype(_impl_.status_){}
    , decltype(_impl_.intersectionid_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.timeconfidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_intersectionid()) {
    _this->_impl_.intersectionid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.intersectionid_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeconfidence_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.timeconfidence_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.IntersectionState)
}

inline void IntersectionState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phases_){arena}
    , decltype(_impl_.status_){}
    , decltype(_impl_.intersectionid_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.timeconfidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IntersectionState::~IntersectionState() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.IntersectionState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntersectionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phases_.~RepeatedPtrField();
  _impl_.status_.Destroy();
  if (this != internal_default_instance()) delete _impl_.intersectionid_;
}

void IntersectionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntersectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.IntersectionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phases_.Clear();
  _impl_.status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.intersectionid_ != nullptr) {
    delete _impl_.intersectionid_;
  }
  _impl_.intersectionid_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeconfidence_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.timeconfidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntersectionState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId intersectionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersectionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.IntersectionState.status"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeconfidence(static_cast<::cn::seisys::v2x::pb::TimeConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Phase phases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntersectionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.IntersectionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId intersectionId = 1;
  if (this->_internal_has_intersectionid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::intersectionid(this),
        _Internal::intersectionid(this).GetCachedSize(), target, stream);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.IntersectionState.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 4;
  if (this->_internal_timeconfidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_timeconfidence(), target);
  }

  // repeated .cn.seisys.v2x.pb.Phase phases = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phases_size()); i < n; i++) {
    const auto& repfield = this->_internal_phases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.IntersectionState)
  return target;
}

size_t IntersectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.IntersectionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Phase phases = 5;
  total_size += 1UL * this->_internal_phases_size();
  for (const auto& msg : this->_impl_.phases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .cn.seisys.v2x.pb.NodeReferenceId intersectionId = 1;
  if (this->_internal_has_intersectionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.intersectionid_);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 4;
  if (this->_internal_timeconfidence() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_timeconfidence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntersectionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntersectionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntersectionState::GetClassData() const { return &_class_data_; }


void IntersectionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntersectionState*>(&to_msg);
  auto& from = static_cast<const IntersectionState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.IntersectionState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.phases_.MergeFrom(from._impl_.phases_);
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_has_intersectionid()) {
    _this->_internal_mutable_intersectionid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_intersectionid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timeconfidence() != 0) {
    _this->_internal_set_timeconfidence(from._internal_timeconfidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntersectionState::CopyFrom(const IntersectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.IntersectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionState::IsInitialized() const {
  return true;
}

void IntersectionState::InternalSwap(IntersectionState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.phases_.InternalSwap(&other->_impl_.phases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntersectionState, _impl_.timeconfidence_)
      + sizeof(IntersectionState::_impl_.timeconfidence_)
      - PROTOBUF_FIELD_OFFSET(IntersectionState, _impl_.intersectionid_)>(
          reinterpret_cast<char*>(&_impl_.intersectionid_),
          reinterpret_cast<char*>(&other->_impl_.intersectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntersectionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[39]);
}

// ===================================================================

class SpatData::_Internal {
 public:
};

SpatData::SpatData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.SpatData)
}
SpatData::SpatData(const SpatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpatData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.intersections_){from._impl_.intersections_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.msgcnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msgcnt_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.SpatData)
}

inline void SpatData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.intersections_){arena}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.msgcnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpatData::~SpatData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.SpatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpatData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intersections_.~RepeatedPtrField();
}

void SpatData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpatData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.SpatData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intersections_.Clear();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msgcnt_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msgCnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.IntersectionState intersections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intersections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.SpatData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msgCnt = 1;
  if (this->_internal_msgcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgcnt(), target);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .cn.seisys.v2x.pb.IntersectionState intersections = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intersections_size()); i < n; i++) {
    const auto& repfield = this->_internal_intersections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.SpatData)
  return target;
}

size_t SpatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.SpatData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.IntersectionState intersections = 3;
  total_size += 1UL * this->_internal_intersections_size();
  for (const auto& msg : this->_impl_.intersections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 msgCnt = 1;
  if (this->_internal_msgcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgcnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatData::GetClassData() const { return &_class_data_; }


void SpatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpatData*>(&to_msg);
  auto& from = static_cast<const SpatData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.SpatData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.intersections_.MergeFrom(from._impl_.intersections_);
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_msgcnt() != 0) {
    _this->_internal_set_msgcnt(from._internal_msgcnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatData::CopyFrom(const SpatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.SpatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatData::IsInitialized() const {
  return true;
}

void SpatData::InternalSwap(SpatData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.intersections_.InternalSwap(&other->_impl_.intersections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatData, _impl_.msgcnt_)
      + sizeof(SpatData::_impl_.msgcnt_)
      - PROTOBUF_FIELD_OFFSET(SpatData, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[40]);
}

// ===================================================================

class LocalTimePoint::_Internal {
 public:
};

LocalTimePoint::LocalTimePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LocalTimePoint)
}
LocalTimePoint::LocalTimePoint(const LocalTimePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalTimePoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hh_){}
    , decltype(_impl_.mm_){}
    , decltype(_impl_.ss_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hh_, &from._impl_.hh_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ss_) -
    reinterpret_cast<char*>(&_impl_.hh_)) + sizeof(_impl_.ss_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LocalTimePoint)
}

inline void LocalTimePoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hh_){0}
    , decltype(_impl_.mm_){0}
    , decltype(_impl_.ss_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocalTimePoint::~LocalTimePoint() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LocalTimePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTimePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalTimePoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalTimePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LocalTimePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ss_) -
      reinterpret_cast<char*>(&_impl_.hh_)) + sizeof(_impl_.ss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalTimePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTimePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LocalTimePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hh = 1;
  if (this->_internal_hh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_hh(), target);
  }

  // int32 mm = 2;
  if (this->_internal_mm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mm(), target);
  }

  // int32 ss = 3;
  if (this->_internal_ss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LocalTimePoint)
  return target;
}

size_t LocalTimePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LocalTimePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hh = 1;
  if (this->_internal_hh() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hh());
  }

  // int32 mm = 2;
  if (this->_internal_mm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mm());
  }

  // int32 ss = 3;
  if (this->_internal_ss() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ss());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalTimePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalTimePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalTimePoint::GetClassData() const { return &_class_data_; }


void LocalTimePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalTimePoint*>(&to_msg);
  auto& from = static_cast<const LocalTimePoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LocalTimePoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hh() != 0) {
    _this->_internal_set_hh(from._internal_hh());
  }
  if (from._internal_mm() != 0) {
    _this->_internal_set_mm(from._internal_mm());
  }
  if (from._internal_ss() != 0) {
    _this->_internal_set_ss(from._internal_ss());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalTimePoint::CopyFrom(const LocalTimePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LocalTimePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTimePoint::IsInitialized() const {
  return true;
}

void LocalTimePoint::InternalSwap(LocalTimePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalTimePoint, _impl_.ss_)
      + sizeof(LocalTimePoint::_impl_.ss_)
      - PROTOBUF_FIELD_OFFSET(LocalTimePoint, _impl_.hh_)>(
          reinterpret_cast<char*>(&_impl_.hh_),
          reinterpret_cast<char*>(&other->_impl_.hh_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalTimePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[41]);
}

// ===================================================================

class PeriodictimeSpan::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LocalTimePoint& fromtimepoint(const PeriodictimeSpan* msg);
  static const ::cn::seisys::v2x::pb::LocalTimePoint& totimepoint(const PeriodictimeSpan* msg);
};

const ::cn::seisys::v2x::pb::LocalTimePoint&
PeriodictimeSpan::_Internal::fromtimepoint(const PeriodictimeSpan* msg) {
  return *msg->_impl_.fromtimepoint_;
}
const ::cn::seisys::v2x::pb::LocalTimePoint&
PeriodictimeSpan::_Internal::totimepoint(const PeriodictimeSpan* msg) {
  return *msg->_impl_.totimepoint_;
}
PeriodictimeSpan::PeriodictimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PeriodictimeSpan)
}
PeriodictimeSpan::PeriodictimeSpan(const PeriodictimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeriodictimeSpan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fromtimepoint_){nullptr}
    , decltype(_impl_.totimepoint_){nullptr}
    , decltype(_impl_.monthfilter_){}
    , decltype(_impl_.dayfilter_){}
    , decltype(_impl_.weekdayfilter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fromtimepoint()) {
    _this->_impl_.fromtimepoint_ = new ::cn::seisys::v2x::pb::LocalTimePoint(*from._impl_.fromtimepoint_);
  }
  if (from._internal_has_totimepoint()) {
    _this->_impl_.totimepoint_ = new ::cn::seisys::v2x::pb::LocalTimePoint(*from._impl_.totimepoint_);
  }
  ::memcpy(&_impl_.monthfilter_, &from._impl_.monthfilter_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weekdayfilter_) -
    reinterpret_cast<char*>(&_impl_.monthfilter_)) + sizeof(_impl_.weekdayfilter_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PeriodictimeSpan)
}

inline void PeriodictimeSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fromtimepoint_){nullptr}
    , decltype(_impl_.totimepoint_){nullptr}
    , decltype(_impl_.monthfilter_){0}
    , decltype(_impl_.dayfilter_){0}
    , decltype(_impl_.weekdayfilter_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeriodictimeSpan::~PeriodictimeSpan() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PeriodictimeSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeriodictimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fromtimepoint_;
  if (this != internal_default_instance()) delete _impl_.totimepoint_;
}

void PeriodictimeSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeriodictimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PeriodictimeSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fromtimepoint_ != nullptr) {
    delete _impl_.fromtimepoint_;
  }
  _impl_.fromtimepoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.totimepoint_ != nullptr) {
    delete _impl_.totimepoint_;
  }
  _impl_.totimepoint_ = nullptr;
  ::memset(&_impl_.monthfilter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weekdayfilter_) -
      reinterpret_cast<char*>(&_impl_.monthfilter_)) + sizeof(_impl_.weekdayfilter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodictimeSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monthFilter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monthfilter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dayFilter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dayfilter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weekdayFilter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.weekdayfilter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LocalTimePoint fromTimePoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromtimepoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LocalTimePoint toTimePoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_totimepoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeriodictimeSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PeriodictimeSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monthFilter = 1;
  if (this->_internal_monthfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_monthfilter(), target);
  }

  // int32 dayFilter = 2;
  if (this->_internal_dayfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dayfilter(), target);
  }

  // int32 weekdayFilter = 3;
  if (this->_internal_weekdayfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_weekdayfilter(), target);
  }

  // .cn.seisys.v2x.pb.LocalTimePoint fromTimePoint = 4;
  if (this->_internal_has_fromtimepoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fromtimepoint(this),
        _Internal::fromtimepoint(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LocalTimePoint toTimePoint = 5;
  if (this->_internal_has_totimepoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::totimepoint(this),
        _Internal::totimepoint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PeriodictimeSpan)
  return target;
}

size_t PeriodictimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PeriodictimeSpan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.LocalTimePoint fromTimePoint = 4;
  if (this->_internal_has_fromtimepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fromtimepoint_);
  }

  // .cn.seisys.v2x.pb.LocalTimePoint toTimePoint = 5;
  if (this->_internal_has_totimepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.totimepoint_);
  }

  // int32 monthFilter = 1;
  if (this->_internal_monthfilter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monthfilter());
  }

  // int32 dayFilter = 2;
  if (this->_internal_dayfilter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dayfilter());
  }

  // int32 weekdayFilter = 3;
  if (this->_internal_weekdayfilter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weekdayfilter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeriodictimeSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeriodictimeSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeriodictimeSpan::GetClassData() const { return &_class_data_; }


void PeriodictimeSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeriodictimeSpan*>(&to_msg);
  auto& from = static_cast<const PeriodictimeSpan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PeriodictimeSpan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fromtimepoint()) {
    _this->_internal_mutable_fromtimepoint()->::cn::seisys::v2x::pb::LocalTimePoint::MergeFrom(
        from._internal_fromtimepoint());
  }
  if (from._internal_has_totimepoint()) {
    _this->_internal_mutable_totimepoint()->::cn::seisys::v2x::pb::LocalTimePoint::MergeFrom(
        from._internal_totimepoint());
  }
  if (from._internal_monthfilter() != 0) {
    _this->_internal_set_monthfilter(from._internal_monthfilter());
  }
  if (from._internal_dayfilter() != 0) {
    _this->_internal_set_dayfilter(from._internal_dayfilter());
  }
  if (from._internal_weekdayfilter() != 0) {
    _this->_internal_set_weekdayfilter(from._internal_weekdayfilter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeriodictimeSpan::CopyFrom(const PeriodictimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PeriodictimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodictimeSpan::IsInitialized() const {
  return true;
}

void PeriodictimeSpan::InternalSwap(PeriodictimeSpan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeriodictimeSpan, _impl_.weekdayfilter_)
      + sizeof(PeriodictimeSpan::_impl_.weekdayfilter_)
      - PROTOBUF_FIELD_OFFSET(PeriodictimeSpan, _impl_.fromtimepoint_)>(
          reinterpret_cast<char*>(&_impl_.fromtimepoint_),
          reinterpret_cast<char*>(&other->_impl_.fromtimepoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodictimeSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[42]);
}

// ===================================================================

class SingleTimeSpan::_Internal {
 public:
};

SingleTimeSpan::SingleTimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.SingleTimeSpan)
}
SingleTimeSpan::SingleTimeSpan(const SingleTimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleTimeSpan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.starttime_, &from._impl_.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endtime_) -
    reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.endtime_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.SingleTimeSpan)
}

inline void SingleTimeSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){uint64_t{0u}}
    , decltype(_impl_.endtime_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleTimeSpan::~SingleTimeSpan() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.SingleTimeSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleTimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleTimeSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleTimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.SingleTimeSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.endtime_) -
      reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.endtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTimeSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 startTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 endTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleTimeSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.SingleTimeSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 startTime = 1;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_starttime(), target);
  }

  // uint64 endTime = 2;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.SingleTimeSpan)
  return target;
}

size_t SingleTimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.SingleTimeSpan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 startTime = 1;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_starttime());
  }

  // uint64 endTime = 2;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_endtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleTimeSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleTimeSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleTimeSpan::GetClassData() const { return &_class_data_; }


void SingleTimeSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleTimeSpan*>(&to_msg);
  auto& from = static_cast<const SingleTimeSpan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.SingleTimeSpan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleTimeSpan::CopyFrom(const SingleTimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.SingleTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTimeSpan::IsInitialized() const {
  return true;
}

void SingleTimeSpan::InternalSwap(SingleTimeSpan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleTimeSpan, _impl_.endtime_)
      + sizeof(SingleTimeSpan::_impl_.endtime_)
      - PROTOBUF_FIELD_OFFSET(SingleTimeSpan, _impl_.starttime_)>(
          reinterpret_cast<char*>(&_impl_.starttime_),
          reinterpret_cast<char*>(&other->_impl_.starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTimeSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[43]);
}

// ===================================================================

class OptimTimeType::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::SingleTimeSpan& single(const OptimTimeType* msg);
  static const ::cn::seisys::v2x::pb::PeriodictimeSpan& periodic(const OptimTimeType* msg);
};

const ::cn::seisys::v2x::pb::SingleTimeSpan&
OptimTimeType::_Internal::single(const OptimTimeType* msg) {
  return *msg->_impl_.OptimTimeTypeOneOf_.single_;
}
const ::cn::seisys::v2x::pb::PeriodictimeSpan&
OptimTimeType::_Internal::periodic(const OptimTimeType* msg) {
  return *msg->_impl_.OptimTimeTypeOneOf_.periodic_;
}
void OptimTimeType::set_allocated_single(::cn::seisys::v2x::pb::SingleTimeSpan* single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_OptimTimeTypeOneOf();
  if (single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single);
    if (message_arena != submessage_arena) {
      single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single, submessage_arena);
    }
    set_has_single();
    _impl_.OptimTimeTypeOneOf_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.OptimTimeType.single)
}
void OptimTimeType::set_allocated_periodic(::cn::seisys::v2x::pb::PeriodictimeSpan* periodic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_OptimTimeTypeOneOf();
  if (periodic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(periodic);
    if (message_arena != submessage_arena) {
      periodic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, periodic, submessage_arena);
    }
    set_has_periodic();
    _impl_.OptimTimeTypeOneOf_.periodic_ = periodic;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.OptimTimeType.periodic)
}
OptimTimeType::OptimTimeType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.OptimTimeType)
}
OptimTimeType::OptimTimeType(const OptimTimeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptimTimeType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.OptimTimeTypeOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_OptimTimeTypeOneOf();
  switch (from.OptimTimeTypeOneOf_case()) {
    case kSingle: {
      _this->_internal_mutable_single()->::cn::seisys::v2x::pb::SingleTimeSpan::MergeFrom(
          from._internal_single());
      break;
    }
    case kPeriodic: {
      _this->_internal_mutable_periodic()->::cn::seisys::v2x::pb::PeriodictimeSpan::MergeFrom(
          from._internal_periodic());
      break;
    }
    case OPTIMTIMETYPEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.OptimTimeType)
}

inline void OptimTimeType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.OptimTimeTypeOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_OptimTimeTypeOneOf();
}

OptimTimeType::~OptimTimeType() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.OptimTimeType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptimTimeType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_OptimTimeTypeOneOf()) {
    clear_OptimTimeTypeOneOf();
  }
}

void OptimTimeType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptimTimeType::clear_OptimTimeTypeOneOf() {
// @@protoc_insertion_point(one_of_clear_start:cn.seisys.v2x.pb.OptimTimeType)
  switch (OptimTimeTypeOneOf_case()) {
    case kSingle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.OptimTimeTypeOneOf_.single_;
      }
      break;
    }
    case kPeriodic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.OptimTimeTypeOneOf_.periodic_;
      }
      break;
    }
    case OPTIMTIMETYPEONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIMTIMETYPEONEOF_NOT_SET;
}


void OptimTimeType::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.OptimTimeType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_OptimTimeTypeOneOf();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptimTimeType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.SingleTimeSpan single = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PeriodictimeSpan periodic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_periodic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptimTimeType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.OptimTimeType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.SingleTimeSpan single = 1;
  if (_internal_has_single()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::single(this),
        _Internal::single(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PeriodictimeSpan periodic = 2;
  if (_internal_has_periodic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::periodic(this),
        _Internal::periodic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.OptimTimeType)
  return target;
}

size_t OptimTimeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.OptimTimeType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (OptimTimeTypeOneOf_case()) {
    // .cn.seisys.v2x.pb.SingleTimeSpan single = 1;
    case kSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.OptimTimeTypeOneOf_.single_);
      break;
    }
    // .cn.seisys.v2x.pb.PeriodictimeSpan periodic = 2;
    case kPeriodic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.OptimTimeTypeOneOf_.periodic_);
      break;
    }
    case OPTIMTIMETYPEONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptimTimeType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptimTimeType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptimTimeType::GetClassData() const { return &_class_data_; }


void OptimTimeType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptimTimeType*>(&to_msg);
  auto& from = static_cast<const OptimTimeType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.OptimTimeType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.OptimTimeTypeOneOf_case()) {
    case kSingle: {
      _this->_internal_mutable_single()->::cn::seisys::v2x::pb::SingleTimeSpan::MergeFrom(
          from._internal_single());
      break;
    }
    case kPeriodic: {
      _this->_internal_mutable_periodic()->::cn::seisys::v2x::pb::PeriodictimeSpan::MergeFrom(
          from._internal_periodic());
      break;
    }
    case OPTIMTIMETYPEONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptimTimeType::CopyFrom(const OptimTimeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.OptimTimeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimTimeType::IsInitialized() const {
  return true;
}

void OptimTimeType::InternalSwap(OptimTimeType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.OptimTimeTypeOneOf_, other->_impl_.OptimTimeTypeOneOf_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimTimeType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[44]);
}

// ===================================================================

class MovementEx::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& remoteintersection(const MovementEx* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
MovementEx::_Internal::remoteintersection(const MovementEx* msg) {
  return *msg->_impl_.remoteintersection_;
}
MovementEx::MovementEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MovementEx)
}
MovementEx::MovementEx(const MovementEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovementEx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.phaseid_){}
    , decltype(_impl_.turndirection_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_remoteintersection()) {
    _this->_impl_.remoteintersection_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.remoteintersection_);
  }
  ::memcpy(&_impl_.phaseid_, &from._impl_.phaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.turndirection_) -
    reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.turndirection_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MovementEx)
}

inline void MovementEx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.phaseid_){0u}
    , decltype(_impl_.turndirection_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MovementEx::~MovementEx() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MovementEx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovementEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.remoteintersection_;
}

void MovementEx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovementEx::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MovementEx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.remoteintersection_ != nullptr) {
    delete _impl_.remoteintersection_;
  }
  _impl_.remoteintersection_ = nullptr;
  ::memset(&_impl_.phaseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.turndirection_) -
      reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.turndirection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovementEx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_remoteintersection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phaseId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Maneuver turnDirection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turndirection(static_cast<::cn::seisys::v2x::pb::Maneuver>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovementEx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MovementEx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::remoteintersection(this),
        _Internal::remoteintersection(this).GetCachedSize(), target, stream);
  }

  // uint32 phaseId = 2;
  if (this->_internal_phaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_phaseid(), target);
  }

  // .cn.seisys.v2x.pb.Maneuver turnDirection = 3;
  if (this->_internal_turndirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_turndirection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MovementEx)
  return target;
}

size_t MovementEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MovementEx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remoteintersection_);
  }

  // uint32 phaseId = 2;
  if (this->_internal_phaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseid());
  }

  // .cn.seisys.v2x.pb.Maneuver turnDirection = 3;
  if (this->_internal_turndirection() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turndirection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovementEx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovementEx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovementEx::GetClassData() const { return &_class_data_; }


void MovementEx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovementEx*>(&to_msg);
  auto& from = static_cast<const MovementEx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MovementEx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_remoteintersection()) {
    _this->_internal_mutable_remoteintersection()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_remoteintersection());
  }
  if (from._internal_phaseid() != 0) {
    _this->_internal_set_phaseid(from._internal_phaseid());
  }
  if (from._internal_turndirection() != 0) {
    _this->_internal_set_turndirection(from._internal_turndirection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovementEx::CopyFrom(const MovementEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MovementEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovementEx::IsInitialized() const {
  return true;
}

void MovementEx::InternalSwap(MovementEx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovementEx, _impl_.turndirection_)
      + sizeof(MovementEx::_impl_.turndirection_)
      - PROTOBUF_FIELD_OFFSET(MovementEx, _impl_.remoteintersection_)>(
          reinterpret_cast<char*>(&_impl_.remoteintersection_),
          reinterpret_cast<char*>(&other->_impl_.remoteintersection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovementEx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[45]);
}

// ===================================================================

class OptimPhase::_Internal {
 public:
};

OptimPhase::OptimPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.OptimPhase)
}
OptimPhase::OptimPhase(const OptimPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptimPhase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.movementid_){from._impl_.movementid_}
    , decltype(_impl_.phaseid_){}
    , decltype(_impl_.order_){}
    , decltype(_impl_.phasetime_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.phaseyellowtime_){}
    , decltype(_impl_.phaseallredtime_){}
    , decltype(_impl_.mingreen_){}
    , decltype(_impl_.maxgreen_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.phaseid_, &from._impl_.phaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxgreen_) -
    reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.maxgreen_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.OptimPhase)
}

inline void OptimPhase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.movementid_){arena}
    , decltype(_impl_.phaseid_){0u}
    , decltype(_impl_.order_){0u}
    , decltype(_impl_.phasetime_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.phaseyellowtime_){0u}
    , decltype(_impl_.phaseallredtime_){0u}
    , decltype(_impl_.mingreen_){0u}
    , decltype(_impl_.maxgreen_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptimPhase::~OptimPhase() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.OptimPhase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptimPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.movementid_.~RepeatedPtrField();
}

void OptimPhase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptimPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.OptimPhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.movementid_.Clear();
  ::memset(&_impl_.phaseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxgreen_) -
      reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.maxgreen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptimPhase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 phaseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.MovementEx movementId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movementid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 phaseTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.phasetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 green = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phaseYellowTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.phaseyellowtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phaseAllRedTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.phaseallredtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minGreen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mingreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxGreen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.maxgreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptimPhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.OptimPhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phaseId = 1;
  if (this->_internal_phaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phaseid(), target);
  }

  // uint32 order = 2;
  if (this->_internal_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_order(), target);
  }

  // repeated .cn.seisys.v2x.pb.MovementEx movementId = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movementid_size()); i < n; i++) {
    const auto& repfield = this->_internal_movementid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 phaseTime = 4;
  if (this->_internal_phasetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_phasetime(), target);
  }

  // uint32 green = 5;
  if (this->_internal_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_green(), target);
  }

  // uint32 phaseYellowTime = 6;
  if (this->_internal_phaseyellowtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_phaseyellowtime(), target);
  }

  // uint32 phaseAllRedTime = 7;
  if (this->_internal_phaseallredtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_phaseallredtime(), target);
  }

  // uint32 minGreen = 8;
  if (this->_internal_mingreen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_mingreen(), target);
  }

  // uint32 maxGreen = 9;
  if (this->_internal_maxgreen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_maxgreen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.OptimPhase)
  return target;
}

size_t OptimPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.OptimPhase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.MovementEx movementId = 3;
  total_size += 1UL * this->_internal_movementid_size();
  for (const auto& msg : this->_impl_.movementid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 phaseId = 1;
  if (this->_internal_phaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseid());
  }

  // uint32 order = 2;
  if (this->_internal_order() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_order());
  }

  // uint32 phaseTime = 4;
  if (this->_internal_phasetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phasetime());
  }

  // uint32 green = 5;
  if (this->_internal_green() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
  }

  // uint32 phaseYellowTime = 6;
  if (this->_internal_phaseyellowtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseyellowtime());
  }

  // uint32 phaseAllRedTime = 7;
  if (this->_internal_phaseallredtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseallredtime());
  }

  // uint32 minGreen = 8;
  if (this->_internal_mingreen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mingreen());
  }

  // uint32 maxGreen = 9;
  if (this->_internal_maxgreen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxgreen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptimPhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptimPhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptimPhase::GetClassData() const { return &_class_data_; }


void OptimPhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptimPhase*>(&to_msg);
  auto& from = static_cast<const OptimPhase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.OptimPhase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.movementid_.MergeFrom(from._impl_.movementid_);
  if (from._internal_phaseid() != 0) {
    _this->_internal_set_phaseid(from._internal_phaseid());
  }
  if (from._internal_order() != 0) {
    _this->_internal_set_order(from._internal_order());
  }
  if (from._internal_phasetime() != 0) {
    _this->_internal_set_phasetime(from._internal_phasetime());
  }
  if (from._internal_green() != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  if (from._internal_phaseyellowtime() != 0) {
    _this->_internal_set_phaseyellowtime(from._internal_phaseyellowtime());
  }
  if (from._internal_phaseallredtime() != 0) {
    _this->_internal_set_phaseallredtime(from._internal_phaseallredtime());
  }
  if (from._internal_mingreen() != 0) {
    _this->_internal_set_mingreen(from._internal_mingreen());
  }
  if (from._internal_maxgreen() != 0) {
    _this->_internal_set_maxgreen(from._internal_maxgreen());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptimPhase::CopyFrom(const OptimPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.OptimPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimPhase::IsInitialized() const {
  return true;
}

void OptimPhase::InternalSwap(OptimPhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.movementid_.InternalSwap(&other->_impl_.movementid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptimPhase, _impl_.maxgreen_)
      + sizeof(OptimPhase::_impl_.maxgreen_)
      - PROTOBUF_FIELD_OFFSET(OptimPhase, _impl_.phaseid_)>(
          reinterpret_cast<char*>(&_impl_.phaseid_),
          reinterpret_cast<char*>(&other->_impl_.phaseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimPhase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[46]);
}

// ===================================================================

class OptimData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::OptimTimeType& optimtimetype(const OptimData* msg);
};

const ::cn::seisys::v2x::pb::OptimTimeType&
OptimData::_Internal::optimtimetype(const OptimData* msg) {
  return *msg->_impl_.optimtimetype_;
}
OptimData::OptimData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.OptimData)
}
OptimData::OptimData(const OptimData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptimData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optimphaselist_){from._impl_.optimphaselist_}
    , decltype(_impl_.coorphase_){}
    , decltype(_impl_.optimtimetype_){nullptr}
    , decltype(_impl_.optimcycletime_){}
    , decltype(_impl_.mincycletime_){}
    , decltype(_impl_.maxcycletime_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.coorphase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coorphase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coorphase().empty()) {
    _this->_impl_.coorphase_.Set(from._internal_coorphase(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_optimtimetype()) {
    _this->_impl_.optimtimetype_ = new ::cn::seisys::v2x::pb::OptimTimeType(*from._impl_.optimtimetype_);
  }
  ::memcpy(&_impl_.optimcycletime_, &from._impl_.optimcycletime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.optimcycletime_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.OptimData)
}

inline void OptimData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.optimphaselist_){arena}
    , decltype(_impl_.coorphase_){}
    , decltype(_impl_.optimtimetype_){nullptr}
    , decltype(_impl_.optimcycletime_){0u}
    , decltype(_impl_.mincycletime_){0u}
    , decltype(_impl_.maxcycletime_){0u}
    , decltype(_impl_.offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.coorphase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coorphase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OptimData::~OptimData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.OptimData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptimData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.optimphaselist_.~RepeatedPtrField();
  _impl_.coorphase_.Destroy();
  if (this != internal_default_instance()) delete _impl_.optimtimetype_;
}

void OptimData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptimData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.OptimData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.optimphaselist_.Clear();
  _impl_.coorphase_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.optimtimetype_ != nullptr) {
    delete _impl_.optimtimetype_;
  }
  _impl_.optimtimetype_ = nullptr;
  ::memset(&_impl_.optimcycletime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.optimcycletime_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptimData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.OptimTimeType optimTimeType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimtimetype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 optimCycleTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.optimcycletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minCycleTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mincycletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxCycleTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.maxcycletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.OptimPhase optimPhaseList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optimphaselist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string coorPhase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_coorphase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.OptimData.coorPhase"));
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptimData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.OptimData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.OptimTimeType optimTimeType = 1;
  if (this->_internal_has_optimtimetype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::optimtimetype(this),
        _Internal::optimtimetype(this).GetCachedSize(), target, stream);
  }

  // uint32 optimCycleTime = 2;
  if (this->_internal_optimcycletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_optimcycletime(), target);
  }

  // uint32 minCycleTime = 3;
  if (this->_internal_mincycletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mincycletime(), target);
  }

  // uint32 maxCycleTime = 4;
  if (this->_internal_maxcycletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxcycletime(), target);
  }

  // repeated .cn.seisys.v2x.pb.OptimPhase optimPhaseList = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_optimphaselist_size()); i < n; i++) {
    const auto& repfield = this->_internal_optimphaselist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string coorPhase = 6;
  if (!this->_internal_coorphase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coorphase().data(), static_cast<int>(this->_internal_coorphase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.OptimData.coorPhase");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_coorphase(), target);
  }

  // uint32 offset = 7;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.OptimData)
  return target;
}

size_t OptimData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.OptimData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.OptimPhase optimPhaseList = 5;
  total_size += 1UL * this->_internal_optimphaselist_size();
  for (const auto& msg : this->_impl_.optimphaselist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string coorPhase = 6;
  if (!this->_internal_coorphase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coorphase());
  }

  // .cn.seisys.v2x.pb.OptimTimeType optimTimeType = 1;
  if (this->_internal_has_optimtimetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optimtimetype_);
  }

  // uint32 optimCycleTime = 2;
  if (this->_internal_optimcycletime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_optimcycletime());
  }

  // uint32 minCycleTime = 3;
  if (this->_internal_mincycletime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mincycletime());
  }

  // uint32 maxCycleTime = 4;
  if (this->_internal_maxcycletime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxcycletime());
  }

  // uint32 offset = 7;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptimData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptimData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptimData::GetClassData() const { return &_class_data_; }


void OptimData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptimData*>(&to_msg);
  auto& from = static_cast<const OptimData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.OptimData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.optimphaselist_.MergeFrom(from._impl_.optimphaselist_);
  if (!from._internal_coorphase().empty()) {
    _this->_internal_set_coorphase(from._internal_coorphase());
  }
  if (from._internal_has_optimtimetype()) {
    _this->_internal_mutable_optimtimetype()->::cn::seisys::v2x::pb::OptimTimeType::MergeFrom(
        from._internal_optimtimetype());
  }
  if (from._internal_optimcycletime() != 0) {
    _this->_internal_set_optimcycletime(from._internal_optimcycletime());
  }
  if (from._internal_mincycletime() != 0) {
    _this->_internal_set_mincycletime(from._internal_mincycletime());
  }
  if (from._internal_maxcycletime() != 0) {
    _this->_internal_set_maxcycletime(from._internal_maxcycletime());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptimData::CopyFrom(const OptimData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.OptimData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimData::IsInitialized() const {
  return true;
}

void OptimData::InternalSwap(OptimData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.optimphaselist_.InternalSwap(&other->_impl_.optimphaselist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coorphase_, lhs_arena,
      &other->_impl_.coorphase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptimData, _impl_.offset_)
      + sizeof(OptimData::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(OptimData, _impl_.optimtimetype_)>(
          reinterpret_cast<char*>(&_impl_.optimtimetype_),
          reinterpret_cast<char*>(&other->_impl_.optimtimetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[47]);
}

// ===================================================================

class SignalScheme::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& nodeid(const SignalScheme* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
SignalScheme::_Internal::nodeid(const SignalScheme* msg) {
  return *msg->_impl_.nodeid_;
}
SignalScheme::SignalScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.SignalScheme)
}
SignalScheme::SignalScheme(const SignalScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalScheme* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optimdatalist_){from._impl_.optimdatalist_}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.optimtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodeid()) {
    _this->_impl_.nodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.nodeid_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optimtype_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.optimtype_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.SignalScheme)
}

inline void SignalScheme::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.optimdatalist_){arena}
    , decltype(_impl_.nodeid_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.optimtype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalScheme::~SignalScheme() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.SignalScheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.optimdatalist_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.nodeid_;
}

void SignalScheme::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.SignalScheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.optimdatalist_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.nodeid_ != nullptr) {
    delete _impl_.nodeid_;
  }
  _impl_.nodeid_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.optimtype_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.optimtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalScheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 optimType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.optimtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.OptimData optimDataList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optimdatalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalScheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.SignalScheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nodeid(this),
        _Internal::nodeid(this).GetCachedSize(), target, stream);
  }

  // uint32 optimType = 2;
  if (this->_internal_optimtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_optimtype(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // repeated .cn.seisys.v2x.pb.OptimData optimDataList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_optimdatalist_size()); i < n; i++) {
    const auto& repfield = this->_internal_optimdatalist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.SignalScheme)
  return target;
}

size_t SignalScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.SignalScheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.OptimData optimDataList = 4;
  total_size += 1UL * this->_internal_optimdatalist_size();
  for (const auto& msg : this->_impl_.optimdatalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId nodeId = 1;
  if (this->_internal_has_nodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodeid_);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 optimType = 2;
  if (this->_internal_optimtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_optimtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalScheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalScheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalScheme::GetClassData() const { return &_class_data_; }


void SignalScheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalScheme*>(&to_msg);
  auto& from = static_cast<const SignalScheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.SignalScheme)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.optimdatalist_.MergeFrom(from._impl_.optimdatalist_);
  if (from._internal_has_nodeid()) {
    _this->_internal_mutable_nodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_nodeid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_optimtype() != 0) {
    _this->_internal_set_optimtype(from._internal_optimtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalScheme::CopyFrom(const SignalScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.SignalScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalScheme::IsInitialized() const {
  return true;
}

void SignalScheme::InternalSwap(SignalScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.optimdatalist_.InternalSwap(&other->_impl_.optimdatalist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalScheme, _impl_.optimtype_)
      + sizeof(SignalScheme::_impl_.optimtype_)
      - PROTOBUF_FIELD_OFFSET(SignalScheme, _impl_.nodeid_)>(
          reinterpret_cast<char*>(&_impl_.nodeid_),
          reinterpret_cast<char*>(&other->_impl_.nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalScheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[48]);
}

// ===================================================================

class BrakeSystemStatus::_Internal {
 public:
};

BrakeSystemStatus::BrakeSystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.BrakeSystemStatus)
}
BrakeSystemStatus::BrakeSystemStatus(const BrakeSystemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrakeSystemStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brakepadel_){}
    , decltype(_impl_.wheelbrakes_){}
    , decltype(_impl_.traction_){}
    , decltype(_impl_.abs_){}
    , decltype(_impl_.scs_){}
    , decltype(_impl_.brakeboost_){}
    , decltype(_impl_.auxbrakes_){}
    , decltype(_impl_.brakecontrol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brakepadel_, &from._impl_.brakepadel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brakecontrol_) -
    reinterpret_cast<char*>(&_impl_.brakepadel_)) + sizeof(_impl_.brakecontrol_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.BrakeSystemStatus)
}

inline void BrakeSystemStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brakepadel_){0}
    , decltype(_impl_.wheelbrakes_){0u}
    , decltype(_impl_.traction_){0}
    , decltype(_impl_.abs_){0}
    , decltype(_impl_.scs_){0}
    , decltype(_impl_.brakeboost_){0}
    , decltype(_impl_.auxbrakes_){0}
    , decltype(_impl_.brakecontrol_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BrakeSystemStatus::~BrakeSystemStatus() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.BrakeSystemStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrakeSystemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BrakeSystemStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrakeSystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.BrakeSystemStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.brakepadel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.brakecontrol_) -
      reinterpret_cast<char*>(&_impl_.brakepadel_)) + sizeof(_impl_.brakecontrol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrakeSystemStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.BrakeSystemStatus.BrakePedalStatus brakePadel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_brakepadel(static_cast<::cn::seisys::v2x::pb::BrakeSystemStatus_BrakePedalStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 wheelBrakes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.wheelbrakes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BrakeSystemStatus.TractionControlStatus traction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traction(static_cast<::cn::seisys::v2x::pb::BrakeSystemStatus_TractionControlStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BrakeSystemStatus.AntiLockBrakeStatus abs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_abs(static_cast<::cn::seisys::v2x::pb::BrakeSystemStatus_AntiLockBrakeStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BrakeSystemStatus.StabilityControlStatus scs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scs(static_cast<::cn::seisys::v2x::pb::BrakeSystemStatus_StabilityControlStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BrakeSystemStatus.BrakeBoostApplied brakeBoost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_brakeboost(static_cast<::cn::seisys::v2x::pb::BrakeSystemStatus_BrakeBoostApplied>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BrakeSystemStatus.AuxiliaryBrakeStatus auxBrakes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auxbrakes(static_cast<::cn::seisys::v2x::pb::BrakeSystemStatus_AuxiliaryBrakeStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 brakeControl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.brakecontrol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrakeSystemStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.BrakeSystemStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.BrakeSystemStatus.BrakePedalStatus brakePadel = 1;
  if (this->_internal_brakepadel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brakepadel(), target);
  }

  // uint32 wheelBrakes = 2;
  if (this->_internal_wheelbrakes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wheelbrakes(), target);
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.TractionControlStatus traction = 3;
  if (this->_internal_traction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_traction(), target);
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.AntiLockBrakeStatus abs = 4;
  if (this->_internal_abs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_abs(), target);
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.StabilityControlStatus scs = 5;
  if (this->_internal_scs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_scs(), target);
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.BrakeBoostApplied brakeBoost = 6;
  if (this->_internal_brakeboost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_brakeboost(), target);
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.AuxiliaryBrakeStatus auxBrakes = 7;
  if (this->_internal_auxbrakes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_auxbrakes(), target);
  }

  // uint32 brakeControl = 8;
  if (this->_internal_brakecontrol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_brakecontrol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.BrakeSystemStatus)
  return target;
}

size_t BrakeSystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.BrakeSystemStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.BrakeSystemStatus.BrakePedalStatus brakePadel = 1;
  if (this->_internal_brakepadel() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_brakepadel());
  }

  // uint32 wheelBrakes = 2;
  if (this->_internal_wheelbrakes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wheelbrakes());
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.TractionControlStatus traction = 3;
  if (this->_internal_traction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_traction());
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.AntiLockBrakeStatus abs = 4;
  if (this->_internal_abs() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_abs());
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.StabilityControlStatus scs = 5;
  if (this->_internal_scs() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scs());
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.BrakeBoostApplied brakeBoost = 6;
  if (this->_internal_brakeboost() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_brakeboost());
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus.AuxiliaryBrakeStatus auxBrakes = 7;
  if (this->_internal_auxbrakes() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_auxbrakes());
  }

  // uint32 brakeControl = 8;
  if (this->_internal_brakecontrol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_brakecontrol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrakeSystemStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrakeSystemStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrakeSystemStatus::GetClassData() const { return &_class_data_; }


void BrakeSystemStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrakeSystemStatus*>(&to_msg);
  auto& from = static_cast<const BrakeSystemStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.BrakeSystemStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_brakepadel() != 0) {
    _this->_internal_set_brakepadel(from._internal_brakepadel());
  }
  if (from._internal_wheelbrakes() != 0) {
    _this->_internal_set_wheelbrakes(from._internal_wheelbrakes());
  }
  if (from._internal_traction() != 0) {
    _this->_internal_set_traction(from._internal_traction());
  }
  if (from._internal_abs() != 0) {
    _this->_internal_set_abs(from._internal_abs());
  }
  if (from._internal_scs() != 0) {
    _this->_internal_set_scs(from._internal_scs());
  }
  if (from._internal_brakeboost() != 0) {
    _this->_internal_set_brakeboost(from._internal_brakeboost());
  }
  if (from._internal_auxbrakes() != 0) {
    _this->_internal_set_auxbrakes(from._internal_auxbrakes());
  }
  if (from._internal_brakecontrol() != 0) {
    _this->_internal_set_brakecontrol(from._internal_brakecontrol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrakeSystemStatus::CopyFrom(const BrakeSystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.BrakeSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrakeSystemStatus::IsInitialized() const {
  return true;
}

void BrakeSystemStatus::InternalSwap(BrakeSystemStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrakeSystemStatus, _impl_.brakecontrol_)
      + sizeof(BrakeSystemStatus::_impl_.brakecontrol_)
      - PROTOBUF_FIELD_OFFSET(BrakeSystemStatus, _impl_.brakepadel_)>(
          reinterpret_cast<char*>(&_impl_.brakepadel_),
          reinterpret_cast<char*>(&other->_impl_.brakepadel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrakeSystemStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[49]);
}

// ===================================================================

class PositionAccuracy::_Internal {
 public:
};

PositionAccuracy::PositionAccuracy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PositionAccuracy)
}
PositionAccuracy::PositionAccuracy(const PositionAccuracy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionAccuracy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.semimajor_){}
    , decltype(_impl_.semiminor_){}
    , decltype(_impl_.orientation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.semimajor_, &from._impl_.semimajor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.orientation_) -
    reinterpret_cast<char*>(&_impl_.semimajor_)) + sizeof(_impl_.orientation_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PositionAccuracy)
}

inline void PositionAccuracy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.semimajor_){0}
    , decltype(_impl_.semiminor_){0}
    , decltype(_impl_.orientation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionAccuracy::~PositionAccuracy() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PositionAccuracy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionAccuracy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PositionAccuracy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.semimajor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.orientation_) -
      reinterpret_cast<char*>(&_impl_.semimajor_)) + sizeof(_impl_.orientation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionAccuracy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 semiMajor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.semimajor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 semiMinor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.semiminor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionAccuracy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PositionAccuracy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 semiMajor = 1;
  if (this->_internal_semimajor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_semimajor(), target);
  }

  // int32 semiMinor = 2;
  if (this->_internal_semiminor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_semiminor(), target);
  }

  // int32 orientation = 3;
  if (this->_internal_orientation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PositionAccuracy)
  return target;
}

size_t PositionAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PositionAccuracy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 semiMajor = 1;
  if (this->_internal_semimajor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_semimajor());
  }

  // int32 semiMinor = 2;
  if (this->_internal_semiminor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_semiminor());
  }

  // int32 orientation = 3;
  if (this->_internal_orientation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_orientation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionAccuracy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionAccuracy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionAccuracy::GetClassData() const { return &_class_data_; }


void PositionAccuracy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionAccuracy*>(&to_msg);
  auto& from = static_cast<const PositionAccuracy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PositionAccuracy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_semimajor() != 0) {
    _this->_internal_set_semimajor(from._internal_semimajor());
  }
  if (from._internal_semiminor() != 0) {
    _this->_internal_set_semiminor(from._internal_semiminor());
  }
  if (from._internal_orientation() != 0) {
    _this->_internal_set_orientation(from._internal_orientation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionAccuracy::CopyFrom(const PositionAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PositionAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionAccuracy::IsInitialized() const {
  return true;
}

void PositionAccuracy::InternalSwap(PositionAccuracy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionAccuracy, _impl_.orientation_)
      + sizeof(PositionAccuracy::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(PositionAccuracy, _impl_.semimajor_)>(
          reinterpret_cast<char*>(&_impl_.semimajor_),
          reinterpret_cast<char*>(&other->_impl_.semimajor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionAccuracy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[50]);
}

// ===================================================================

class ThrottleSystemStatus::_Internal {
 public:
};

ThrottleSystemStatus::ThrottleSystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ThrottleSystemStatus)
}
ThrottleSystemStatus::ThrottleSystemStatus(const ThrottleSystemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThrottleSystemStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.thorttlecontrol_){}
    , decltype(_impl_.throttlepadel_){}
    , decltype(_impl_.wheelthrottles_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.thorttlecontrol_, &from._impl_.thorttlecontrol_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wheelthrottles_) -
    reinterpret_cast<char*>(&_impl_.thorttlecontrol_)) + sizeof(_impl_.wheelthrottles_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ThrottleSystemStatus)
}

inline void ThrottleSystemStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.thorttlecontrol_){0u}
    , decltype(_impl_.throttlepadel_){0}
    , decltype(_impl_.wheelthrottles_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThrottleSystemStatus::~ThrottleSystemStatus() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ThrottleSystemStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThrottleSystemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThrottleSystemStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThrottleSystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ThrottleSystemStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.thorttlecontrol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wheelthrottles_) -
      reinterpret_cast<char*>(&_impl_.thorttlecontrol_)) + sizeof(_impl_.wheelthrottles_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThrottleSystemStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 thorttleControl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.thorttlecontrol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ThrottleSystemStatus.ThrottlePedalStauts throttlePadel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_throttlepadel(static_cast<::cn::seisys::v2x::pb::ThrottleSystemStatus_ThrottlePedalStauts>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 wheelThrottles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.wheelthrottles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThrottleSystemStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ThrottleSystemStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 thorttleControl = 1;
  if (this->_internal_thorttlecontrol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_thorttlecontrol(), target);
  }

  // .cn.seisys.v2x.pb.ThrottleSystemStatus.ThrottlePedalStauts throttlePadel = 2;
  if (this->_internal_throttlepadel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_throttlepadel(), target);
  }

  // int32 wheelThrottles = 3;
  if (this->_internal_wheelthrottles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_wheelthrottles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ThrottleSystemStatus)
  return target;
}

size_t ThrottleSystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ThrottleSystemStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 thorttleControl = 1;
  if (this->_internal_thorttlecontrol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_thorttlecontrol());
  }

  // .cn.seisys.v2x.pb.ThrottleSystemStatus.ThrottlePedalStauts throttlePadel = 2;
  if (this->_internal_throttlepadel() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_throttlepadel());
  }

  // int32 wheelThrottles = 3;
  if (this->_internal_wheelthrottles() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wheelthrottles());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThrottleSystemStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThrottleSystemStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThrottleSystemStatus::GetClassData() const { return &_class_data_; }


void ThrottleSystemStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThrottleSystemStatus*>(&to_msg);
  auto& from = static_cast<const ThrottleSystemStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ThrottleSystemStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_thorttlecontrol() != 0) {
    _this->_internal_set_thorttlecontrol(from._internal_thorttlecontrol());
  }
  if (from._internal_throttlepadel() != 0) {
    _this->_internal_set_throttlepadel(from._internal_throttlepadel());
  }
  if (from._internal_wheelthrottles() != 0) {
    _this->_internal_set_wheelthrottles(from._internal_wheelthrottles());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThrottleSystemStatus::CopyFrom(const ThrottleSystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ThrottleSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleSystemStatus::IsInitialized() const {
  return true;
}

void ThrottleSystemStatus::InternalSwap(ThrottleSystemStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThrottleSystemStatus, _impl_.wheelthrottles_)
      + sizeof(ThrottleSystemStatus::_impl_.wheelthrottles_)
      - PROTOBUF_FIELD_OFFSET(ThrottleSystemStatus, _impl_.thorttlecontrol_)>(
          reinterpret_cast<char*>(&_impl_.thorttlecontrol_),
          reinterpret_cast<char*>(&other->_impl_.thorttlecontrol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThrottleSystemStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[51]);
}

// ===================================================================

class BsmData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& pos(const BsmData* msg);
  static const ::cn::seisys::v2x::pb::PositionConfidenceSet& posconfid(const BsmData* msg);
  static const ::cn::seisys::v2x::pb::PositionAccuracy& posaccuracy(const BsmData* msg);
  static const ::cn::seisys::v2x::pb::AccelerationSet4Way& acceleration(const BsmData* msg);
  static const ::cn::seisys::v2x::pb::MotionConfidenceSet& motionconfid(const BsmData* msg);
  static const ::cn::seisys::v2x::pb::BrakeSystemStatus& brakes(const BsmData* msg);
  static const ::cn::seisys::v2x::pb::ThrottleSystemStatus& throttle(const BsmData* msg);
  static const ::cn::seisys::v2x::pb::VehicleSize& size(const BsmData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
BsmData::_Internal::pos(const BsmData* msg) {
  return *msg->_impl_.pos_;
}
const ::cn::seisys::v2x::pb::PositionConfidenceSet&
BsmData::_Internal::posconfid(const BsmData* msg) {
  return *msg->_impl_.posconfid_;
}
const ::cn::seisys::v2x::pb::PositionAccuracy&
BsmData::_Internal::posaccuracy(const BsmData* msg) {
  return *msg->_impl_.posaccuracy_;
}
const ::cn::seisys::v2x::pb::AccelerationSet4Way&
BsmData::_Internal::acceleration(const BsmData* msg) {
  return *msg->_impl_.acceleration_;
}
const ::cn::seisys::v2x::pb::MotionConfidenceSet&
BsmData::_Internal::motionconfid(const BsmData* msg) {
  return *msg->_impl_.motionconfid_;
}
const ::cn::seisys::v2x::pb::BrakeSystemStatus&
BsmData::_Internal::brakes(const BsmData* msg) {
  return *msg->_impl_.brakes_;
}
const ::cn::seisys::v2x::pb::ThrottleSystemStatus&
BsmData::_Internal::throttle(const BsmData* msg) {
  return *msg->_impl_.throttle_;
}
const ::cn::seisys::v2x::pb::VehicleSize&
BsmData::_Internal::size(const BsmData* msg) {
  return *msg->_impl_.size_;
}
BsmData::BsmData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.BsmData)
}
BsmData::BsmData(const BsmData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BsmData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obuid_){}
    , decltype(_impl_.plateno_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.posaccuracy_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.motionconfid_){nullptr}
    , decltype(_impl_.brakes_){nullptr}
    , decltype(_impl_.throttle_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.transmission_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.steeringwheelangle_){}
    , decltype(_impl_.vehicletype_){}
    , decltype(_impl_.fueltype_){}
    , decltype(_impl_.drivemodedrivestatus_){}
    , decltype(_impl_.emergencystatus_){}
    , decltype(_impl_.light_){}
    , decltype(_impl_.wiper_){}
    , decltype(_impl_.outofcontrol_){}
    , decltype(_impl_.endurance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_obuid().empty()) {
    _this->_impl_.obuid_.Set(from._internal_obuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.plateno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plateno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plateno().empty()) {
    _this->_impl_.plateno_.Set(from._internal_plateno(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.pos_);
  }
  if (from._internal_has_posconfid()) {
    _this->_impl_.posconfid_ = new ::cn::seisys::v2x::pb::PositionConfidenceSet(*from._impl_.posconfid_);
  }
  if (from._internal_has_posaccuracy()) {
    _this->_impl_.posaccuracy_ = new ::cn::seisys::v2x::pb::PositionAccuracy(*from._impl_.posaccuracy_);
  }
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::cn::seisys::v2x::pb::AccelerationSet4Way(*from._impl_.acceleration_);
  }
  if (from._internal_has_motionconfid()) {
    _this->_impl_.motionconfid_ = new ::cn::seisys::v2x::pb::MotionConfidenceSet(*from._impl_.motionconfid_);
  }
  if (from._internal_has_brakes()) {
    _this->_impl_.brakes_ = new ::cn::seisys::v2x::pb::BrakeSystemStatus(*from._impl_.brakes_);
  }
  if (from._internal_has_throttle()) {
    _this->_impl_.throttle_ = new ::cn::seisys::v2x::pb::ThrottleSystemStatus(*from._impl_.throttle_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::cn::seisys::v2x::pb::VehicleSize(*from._impl_.size_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endurance_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.endurance_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.BsmData)
}

inline void BsmData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obuid_){}
    , decltype(_impl_.plateno_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.posaccuracy_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.motionconfid_){nullptr}
    , decltype(_impl_.brakes_){nullptr}
    , decltype(_impl_.throttle_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.transmission_){0}
    , decltype(_impl_.speed_){0u}
    , decltype(_impl_.heading_){0u}
    , decltype(_impl_.steeringwheelangle_){0}
    , decltype(_impl_.vehicletype_){0}
    , decltype(_impl_.fueltype_){0}
    , decltype(_impl_.drivemodedrivestatus_){0}
    , decltype(_impl_.emergencystatus_){0}
    , decltype(_impl_.light_){0u}
    , decltype(_impl_.wiper_){0}
    , decltype(_impl_.outofcontrol_){0}
    , decltype(_impl_.endurance_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.obuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.plateno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plateno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BsmData::~BsmData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.BsmData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BsmData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obuid_.Destroy();
  _impl_.plateno_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.posconfid_;
  if (this != internal_default_instance()) delete _impl_.posaccuracy_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.motionconfid_;
  if (this != internal_default_instance()) delete _impl_.brakes_;
  if (this != internal_default_instance()) delete _impl_.throttle_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void BsmData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BsmData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.BsmData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obuid_.ClearToEmpty();
  _impl_.plateno_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posconfid_ != nullptr) {
    delete _impl_.posconfid_;
  }
  _impl_.posconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posaccuracy_ != nullptr) {
    delete _impl_.posaccuracy_;
  }
  _impl_.posaccuracy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.motionconfid_ != nullptr) {
    delete _impl_.motionconfid_;
  }
  _impl_.motionconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brakes_ != nullptr) {
    delete _impl_.brakes_;
  }
  _impl_.brakes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.throttle_ != nullptr) {
    delete _impl_.throttle_;
  }
  _impl_.throttle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.endurance_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.endurance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BsmData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string obuId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.BsmData.obuId"));
        } else
          goto handle_unusual;
        continue;
      // string plateNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_plateno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.BsmData.plateNo"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_posconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PositionAccuracy posAccuracy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_posaccuracy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BsmData.TransmissionState transmission = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transmission(static_cast<::cn::seisys::v2x::pb::BsmData_TransmissionState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heading = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 steeringWheelAngle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.steeringwheelangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_motionconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BrakeSystemStatus brakes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_brakes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ThrottleSystemStatus throttle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.VehicleSize size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.VehicleType vehicleType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehicletype(static_cast<::cn::seisys::v2x::pb::VehicleType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BsmData.VehicleFuelType fuelType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fueltype(static_cast<::cn::seisys::v2x::pb::BsmData_VehicleFuelType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BsmData.DriveStatus driveModedriveStatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_drivemodedrivestatus(static_cast<::cn::seisys::v2x::pb::BsmData_DriveStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BsmData.EmergenyStatus emergencyStatus = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_emergencystatus(static_cast<::cn::seisys::v2x::pb::BsmData_EmergenyStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 light = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BsmData.Wiper wiper = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wiper(static_cast<::cn::seisys::v2x::pb::BsmData_Wiper>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.BsmData.OutofControl outofControl = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_outofcontrol(static_cast<::cn::seisys::v2x::pb::BsmData_OutofControl>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 endurance = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.endurance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BsmData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.BsmData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string obuId = 1;
  if (!this->_internal_obuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obuid().data(), static_cast<int>(this->_internal_obuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.BsmData.obuId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obuid(), target);
  }

  // string plateNo = 2;
  if (!this->_internal_plateno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plateno().data(), static_cast<int>(this->_internal_plateno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.BsmData.plateNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_plateno(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .cn.seisys.v2x.pb.Position3D pos = 4;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 5;
  if (this->_internal_has_posconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::posconfid(this),
        _Internal::posconfid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PositionAccuracy posAccuracy = 6;
  if (this->_internal_has_posaccuracy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::posaccuracy(this),
        _Internal::posaccuracy(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 7;
  if (this->_internal_has_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.BsmData.TransmissionState transmission = 8;
  if (this->_internal_transmission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_transmission(), target);
  }

  // uint32 speed = 9;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_speed(), target);
  }

  // uint32 heading = 10;
  if (this->_internal_heading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_heading(), target);
  }

  // int32 steeringWheelAngle = 11;
  if (this->_internal_steeringwheelangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_steeringwheelangle(), target);
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
  if (this->_internal_has_motionconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::motionconfid(this),
        _Internal::motionconfid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus brakes = 13;
  if (this->_internal_has_brakes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::brakes(this),
        _Internal::brakes(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ThrottleSystemStatus throttle = 14;
  if (this->_internal_has_throttle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::throttle(this),
        _Internal::throttle(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.VehicleSize size = 15;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 16;
  if (this->_internal_vehicletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_vehicletype(), target);
  }

  // .cn.seisys.v2x.pb.BsmData.VehicleFuelType fuelType = 17;
  if (this->_internal_fueltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_fueltype(), target);
  }

  // .cn.seisys.v2x.pb.BsmData.DriveStatus driveModedriveStatus = 18;
  if (this->_internal_drivemodedrivestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_drivemodedrivestatus(), target);
  }

  // .cn.seisys.v2x.pb.BsmData.EmergenyStatus emergencyStatus = 19;
  if (this->_internal_emergencystatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_emergencystatus(), target);
  }

  // uint32 light = 20;
  if (this->_internal_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_light(), target);
  }

  // .cn.seisys.v2x.pb.BsmData.Wiper wiper = 21;
  if (this->_internal_wiper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_wiper(), target);
  }

  // .cn.seisys.v2x.pb.BsmData.OutofControl outofControl = 22;
  if (this->_internal_outofcontrol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_outofcontrol(), target);
  }

  // uint32 endurance = 23;
  if (this->_internal_endurance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_endurance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.BsmData)
  return target;
}

size_t BsmData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.BsmData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string obuId = 1;
  if (!this->_internal_obuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obuid());
  }

  // string plateNo = 2;
  if (!this->_internal_plateno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plateno());
  }

  // .cn.seisys.v2x.pb.Position3D pos = 4;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 5;
  if (this->_internal_has_posconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posconfid_);
  }

  // .cn.seisys.v2x.pb.PositionAccuracy posAccuracy = 6;
  if (this->_internal_has_posaccuracy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posaccuracy_);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 7;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acceleration_);
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
  if (this->_internal_has_motionconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motionconfid_);
  }

  // .cn.seisys.v2x.pb.BrakeSystemStatus brakes = 13;
  if (this->_internal_has_brakes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brakes_);
  }

  // .cn.seisys.v2x.pb.ThrottleSystemStatus throttle = 14;
  if (this->_internal_has_throttle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.throttle_);
  }

  // .cn.seisys.v2x.pb.VehicleSize size = 15;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .cn.seisys.v2x.pb.BsmData.TransmissionState transmission = 8;
  if (this->_internal_transmission() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_transmission());
  }

  // uint32 speed = 9;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint32 heading = 10;
  if (this->_internal_heading() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heading());
  }

  // int32 steeringWheelAngle = 11;
  if (this->_internal_steeringwheelangle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_steeringwheelangle());
  }

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 16;
  if (this->_internal_vehicletype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicletype());
  }

  // .cn.seisys.v2x.pb.BsmData.VehicleFuelType fuelType = 17;
  if (this->_internal_fueltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fueltype());
  }

  // .cn.seisys.v2x.pb.BsmData.DriveStatus driveModedriveStatus = 18;
  if (this->_internal_drivemodedrivestatus() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_drivemodedrivestatus());
  }

  // .cn.seisys.v2x.pb.BsmData.EmergenyStatus emergencyStatus = 19;
  if (this->_internal_emergencystatus() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_emergencystatus());
  }

  // uint32 light = 20;
  if (this->_internal_light() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_light());
  }

  // .cn.seisys.v2x.pb.BsmData.Wiper wiper = 21;
  if (this->_internal_wiper() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wiper());
  }

  // .cn.seisys.v2x.pb.BsmData.OutofControl outofControl = 22;
  if (this->_internal_outofcontrol() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_outofcontrol());
  }

  // uint32 endurance = 23;
  if (this->_internal_endurance() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_endurance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BsmData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BsmData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BsmData::GetClassData() const { return &_class_data_; }


void BsmData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BsmData*>(&to_msg);
  auto& from = static_cast<const BsmData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.BsmData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_obuid().empty()) {
    _this->_internal_set_obuid(from._internal_obuid());
  }
  if (!from._internal_plateno().empty()) {
    _this->_internal_set_plateno(from._internal_plateno());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_posconfid()) {
    _this->_internal_mutable_posconfid()->::cn::seisys::v2x::pb::PositionConfidenceSet::MergeFrom(
        from._internal_posconfid());
  }
  if (from._internal_has_posaccuracy()) {
    _this->_internal_mutable_posaccuracy()->::cn::seisys::v2x::pb::PositionAccuracy::MergeFrom(
        from._internal_posaccuracy());
  }
  if (from._internal_has_acceleration()) {
    _this->_internal_mutable_acceleration()->::cn::seisys::v2x::pb::AccelerationSet4Way::MergeFrom(
        from._internal_acceleration());
  }
  if (from._internal_has_motionconfid()) {
    _this->_internal_mutable_motionconfid()->::cn::seisys::v2x::pb::MotionConfidenceSet::MergeFrom(
        from._internal_motionconfid());
  }
  if (from._internal_has_brakes()) {
    _this->_internal_mutable_brakes()->::cn::seisys::v2x::pb::BrakeSystemStatus::MergeFrom(
        from._internal_brakes());
  }
  if (from._internal_has_throttle()) {
    _this->_internal_mutable_throttle()->::cn::seisys::v2x::pb::ThrottleSystemStatus::MergeFrom(
        from._internal_throttle());
  }
  if (from._internal_has_size()) {
    _this->_internal_mutable_size()->::cn::seisys::v2x::pb::VehicleSize::MergeFrom(
        from._internal_size());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_transmission() != 0) {
    _this->_internal_set_transmission(from._internal_transmission());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_heading() != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  if (from._internal_steeringwheelangle() != 0) {
    _this->_internal_set_steeringwheelangle(from._internal_steeringwheelangle());
  }
  if (from._internal_vehicletype() != 0) {
    _this->_internal_set_vehicletype(from._internal_vehicletype());
  }
  if (from._internal_fueltype() != 0) {
    _this->_internal_set_fueltype(from._internal_fueltype());
  }
  if (from._internal_drivemodedrivestatus() != 0) {
    _this->_internal_set_drivemodedrivestatus(from._internal_drivemodedrivestatus());
  }
  if (from._internal_emergencystatus() != 0) {
    _this->_internal_set_emergencystatus(from._internal_emergencystatus());
  }
  if (from._internal_light() != 0) {
    _this->_internal_set_light(from._internal_light());
  }
  if (from._internal_wiper() != 0) {
    _this->_internal_set_wiper(from._internal_wiper());
  }
  if (from._internal_outofcontrol() != 0) {
    _this->_internal_set_outofcontrol(from._internal_outofcontrol());
  }
  if (from._internal_endurance() != 0) {
    _this->_internal_set_endurance(from._internal_endurance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BsmData::CopyFrom(const BsmData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.BsmData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsmData::IsInitialized() const {
  return true;
}

void BsmData::InternalSwap(BsmData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obuid_, lhs_arena,
      &other->_impl_.obuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plateno_, lhs_arena,
      &other->_impl_.plateno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BsmData, _impl_.endurance_)
      + sizeof(BsmData::_impl_.endurance_)
      - PROTOBUF_FIELD_OFFSET(BsmData, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BsmData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[52]);
}

// ===================================================================

class PathHistoryPoint::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& pos(const PathHistoryPoint* msg);
  static const ::cn::seisys::v2x::pb::PositionConfidenceSet& posconfid(const PathHistoryPoint* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
PathHistoryPoint::_Internal::pos(const PathHistoryPoint* msg) {
  return *msg->_impl_.pos_;
}
const ::cn::seisys::v2x::pb::PositionConfidenceSet&
PathHistoryPoint::_Internal::posconfid(const PathHistoryPoint* msg) {
  return *msg->_impl_.posconfid_;
}
PathHistoryPoint::PathHistoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PathHistoryPoint)
}
PathHistoryPoint::PathHistoryPoint(const PathHistoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathHistoryPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.timeoffset_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.heading_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.pos_);
  }
  if (from._internal_has_posconfid()) {
    _this->_impl_.posconfid_ = new ::cn::seisys::v2x::pb::PositionConfidenceSet(*from._impl_.posconfid_);
  }
  ::memcpy(&_impl_.timeoffset_, &from._impl_.timeoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heading_) -
    reinterpret_cast<char*>(&_impl_.timeoffset_)) + sizeof(_impl_.heading_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PathHistoryPoint)
}

inline void PathHistoryPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.timeoffset_){0u}
    , decltype(_impl_.speed_){0u}
    , decltype(_impl_.heading_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PathHistoryPoint::~PathHistoryPoint() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PathHistoryPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathHistoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.posconfid_;
}

void PathHistoryPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathHistoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PathHistoryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posconfid_ != nullptr) {
    delete _impl_.posconfid_;
  }
  _impl_.posconfid_ = nullptr;
  ::memset(&_impl_.timeoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.heading_) -
      reinterpret_cast<char*>(&_impl_.timeoffset_)) + sizeof(_impl_.heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathHistoryPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.Position3D pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timeOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_posconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathHistoryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PathHistoryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.Position3D pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // uint32 timeOffset = 2;
  if (this->_internal_timeoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeoffset(), target);
  }

  // uint32 speed = 3;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_speed(), target);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 4;
  if (this->_internal_has_posconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::posconfid(this),
        _Internal::posconfid(this).GetCachedSize(), target, stream);
  }

  // uint32 heading = 5;
  if (this->_internal_heading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PathHistoryPoint)
  return target;
}

size_t PathHistoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PathHistoryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.Position3D pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 4;
  if (this->_internal_has_posconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posconfid_);
  }

  // uint32 timeOffset = 2;
  if (this->_internal_timeoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeoffset());
  }

  // uint32 speed = 3;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint32 heading = 5;
  if (this->_internal_heading() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heading());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathHistoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathHistoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathHistoryPoint::GetClassData() const { return &_class_data_; }


void PathHistoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathHistoryPoint*>(&to_msg);
  auto& from = static_cast<const PathHistoryPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PathHistoryPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_posconfid()) {
    _this->_internal_mutable_posconfid()->::cn::seisys::v2x::pb::PositionConfidenceSet::MergeFrom(
        from._internal_posconfid());
  }
  if (from._internal_timeoffset() != 0) {
    _this->_internal_set_timeoffset(from._internal_timeoffset());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_heading() != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathHistoryPoint::CopyFrom(const PathHistoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PathHistoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathHistoryPoint::IsInitialized() const {
  return true;
}

void PathHistoryPoint::InternalSwap(PathHistoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathHistoryPoint, _impl_.heading_)
      + sizeof(PathHistoryPoint::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(PathHistoryPoint, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathHistoryPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[53]);
}

// ===================================================================

class ParticipantData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& ptcpos(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::MapLocation& maplocation(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::PositionConfidenceSet& posconfid(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::MotionConfidenceSet& motionconfid(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::AccelerationSet4Way& accelset(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::AccelerationConfidence& accelerationconfid(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::ParticipantSize& ptcsize(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::ParticipantSizeConfidence& ptcsizeconfid(const ParticipantData* msg);
  static const ::cn::seisys::v2x::pb::Polygon& polygon(const ParticipantData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
ParticipantData::_Internal::ptcpos(const ParticipantData* msg) {
  return *msg->_impl_.ptcpos_;
}
const ::cn::seisys::v2x::pb::MapLocation&
ParticipantData::_Internal::maplocation(const ParticipantData* msg) {
  return *msg->_impl_.maplocation_;
}
const ::cn::seisys::v2x::pb::PositionConfidenceSet&
ParticipantData::_Internal::posconfid(const ParticipantData* msg) {
  return *msg->_impl_.posconfid_;
}
const ::cn::seisys::v2x::pb::MotionConfidenceSet&
ParticipantData::_Internal::motionconfid(const ParticipantData* msg) {
  return *msg->_impl_.motionconfid_;
}
const ::cn::seisys::v2x::pb::AccelerationSet4Way&
ParticipantData::_Internal::accelset(const ParticipantData* msg) {
  return *msg->_impl_.accelset_;
}
const ::cn::seisys::v2x::pb::AccelerationConfidence&
ParticipantData::_Internal::accelerationconfid(const ParticipantData* msg) {
  return *msg->_impl_.accelerationconfid_;
}
const ::cn::seisys::v2x::pb::ParticipantSize&
ParticipantData::_Internal::ptcsize(const ParticipantData* msg) {
  return *msg->_impl_.ptcsize_;
}
const ::cn::seisys::v2x::pb::ParticipantSizeConfidence&
ParticipantData::_Internal::ptcsizeconfid(const ParticipantData* msg) {
  return *msg->_impl_.ptcsizeconfid_;
}
const ::cn::seisys::v2x::pb::Polygon&
ParticipantData::_Internal::polygon(const ParticipantData* msg) {
  return *msg->_impl_.polygon_;
}
ParticipantData::ParticipantData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ParticipantData)
}
ParticipantData::ParticipantData(const ParticipantData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParticipantData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathhistory_){from._impl_.pathhistory_}
    , decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.vehicleband_){}
    , decltype(_impl_.plateno_){}
    , decltype(_impl_.ptcpos_){nullptr}
    , decltype(_impl_.maplocation_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.motionconfid_){nullptr}
    , decltype(_impl_.accelset_){nullptr}
    , decltype(_impl_.accelerationconfid_){nullptr}
    , decltype(_impl_.ptcsize_){nullptr}
    , decltype(_impl_.ptcsizeconfid_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.ptcid_){}
    , decltype(_impl_.ptctype_){}
    , decltype(_impl_.datasource_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.timeconfidence_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.vehicletype_){}
    , decltype(_impl_.platetype_){}
    , decltype(_impl_.platecolor_){}
    , decltype(_impl_.vehiclecolor_){}
    , decltype(_impl_.ptctypeext_){}
    , decltype(_impl_.ptctypeextconfid_){}
    , decltype(_impl_.statusduration_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.tracking_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceidlist().empty()) {
    _this->_impl_.deviceidlist_.Set(from._internal_deviceidlist(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vehicleband_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicleband_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vehicleband().empty()) {
    _this->_impl_.vehicleband_.Set(from._internal_vehicleband(), 
      _this->GetArenaForAllocation());
  }
  _impl_.plateno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plateno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plateno().empty()) {
    _this->_impl_.plateno_.Set(from._internal_plateno(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ptcpos()) {
    _this->_impl_.ptcpos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.ptcpos_);
  }
  if (from._internal_has_maplocation()) {
    _this->_impl_.maplocation_ = new ::cn::seisys::v2x::pb::MapLocation(*from._impl_.maplocation_);
  }
  if (from._internal_has_posconfid()) {
    _this->_impl_.posconfid_ = new ::cn::seisys::v2x::pb::PositionConfidenceSet(*from._impl_.posconfid_);
  }
  if (from._internal_has_motionconfid()) {
    _this->_impl_.motionconfid_ = new ::cn::seisys::v2x::pb::MotionConfidenceSet(*from._impl_.motionconfid_);
  }
  if (from._internal_has_accelset()) {
    _this->_impl_.accelset_ = new ::cn::seisys::v2x::pb::AccelerationSet4Way(*from._impl_.accelset_);
  }
  if (from._internal_has_accelerationconfid()) {
    _this->_impl_.accelerationconfid_ = new ::cn::seisys::v2x::pb::AccelerationConfidence(*from._impl_.accelerationconfid_);
  }
  if (from._internal_has_ptcsize()) {
    _this->_impl_.ptcsize_ = new ::cn::seisys::v2x::pb::ParticipantSize(*from._impl_.ptcsize_);
  }
  if (from._internal_has_ptcsizeconfid()) {
    _this->_impl_.ptcsizeconfid_ = new ::cn::seisys::v2x::pb::ParticipantSizeConfidence(*from._impl_.ptcsizeconfid_);
  }
  if (from._internal_has_polygon()) {
    _this->_impl_.polygon_ = new ::cn::seisys::v2x::pb::Polygon(*from._impl_.polygon_);
  }
  ::memcpy(&_impl_.ptcid_, &from._impl_.ptcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tracking_) -
    reinterpret_cast<char*>(&_impl_.ptcid_)) + sizeof(_impl_.tracking_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ParticipantData)
}

inline void ParticipantData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathhistory_){arena}
    , decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.vehicleband_){}
    , decltype(_impl_.plateno_){}
    , decltype(_impl_.ptcpos_){nullptr}
    , decltype(_impl_.maplocation_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.motionconfid_){nullptr}
    , decltype(_impl_.accelset_){nullptr}
    , decltype(_impl_.accelerationconfid_){nullptr}
    , decltype(_impl_.ptcsize_){nullptr}
    , decltype(_impl_.ptcsizeconfid_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.ptcid_){uint64_t{0u}}
    , decltype(_impl_.ptctype_){0}
    , decltype(_impl_.datasource_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.timeconfidence_){0}
    , decltype(_impl_.speed_){0u}
    , decltype(_impl_.heading_){0u}
    , decltype(_impl_.vehicletype_){0}
    , decltype(_impl_.platetype_){0}
    , decltype(_impl_.platecolor_){0}
    , decltype(_impl_.vehiclecolor_){0}
    , decltype(_impl_.ptctypeext_){0}
    , decltype(_impl_.ptctypeextconfid_){0u}
    , decltype(_impl_.statusduration_){0u}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.tracking_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vehicleband_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicleband_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.plateno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plateno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParticipantData::~ParticipantData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ParticipantData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParticipantData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathhistory_.~RepeatedPtrField();
  _impl_.deviceidlist_.Destroy();
  _impl_.vehicleband_.Destroy();
  _impl_.plateno_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ptcpos_;
  if (this != internal_default_instance()) delete _impl_.maplocation_;
  if (this != internal_default_instance()) delete _impl_.posconfid_;
  if (this != internal_default_instance()) delete _impl_.motionconfid_;
  if (this != internal_default_instance()) delete _impl_.accelset_;
  if (this != internal_default_instance()) delete _impl_.accelerationconfid_;
  if (this != internal_default_instance()) delete _impl_.ptcsize_;
  if (this != internal_default_instance()) delete _impl_.ptcsizeconfid_;
  if (this != internal_default_instance()) delete _impl_.polygon_;
}

void ParticipantData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParticipantData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ParticipantData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathhistory_.Clear();
  _impl_.deviceidlist_.ClearToEmpty();
  _impl_.vehicleband_.ClearToEmpty();
  _impl_.plateno_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ptcpos_ != nullptr) {
    delete _impl_.ptcpos_;
  }
  _impl_.ptcpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maplocation_ != nullptr) {
    delete _impl_.maplocation_;
  }
  _impl_.maplocation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posconfid_ != nullptr) {
    delete _impl_.posconfid_;
  }
  _impl_.posconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.motionconfid_ != nullptr) {
    delete _impl_.motionconfid_;
  }
  _impl_.motionconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accelset_ != nullptr) {
    delete _impl_.accelset_;
  }
  _impl_.accelset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accelerationconfid_ != nullptr) {
    delete _impl_.accelerationconfid_;
  }
  _impl_.accelerationconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ptcsize_ != nullptr) {
    delete _impl_.ptcsize_;
  }
  _impl_.ptcsize_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ptcsizeconfid_ != nullptr) {
    delete _impl_.ptcsizeconfid_;
  }
  _impl_.ptcsizeconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.polygon_ != nullptr) {
    delete _impl_.polygon_;
  }
  _impl_.polygon_ = nullptr;
  ::memset(&_impl_.ptcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tracking_) -
      reinterpret_cast<char*>(&_impl_.ptcid_)) + sizeof(_impl_.tracking_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParticipantData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ptcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ptcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantType ptcType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ptctype(static_cast<::cn::seisys::v2x::pb::ParticipantType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DataSource dataSource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datasource(static_cast<::cn::seisys::v2x::pb::DataSource>(val));
        } else
          goto handle_unusual;
        continue;
      // string deviceIdList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deviceidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.ParticipantData.deviceIdList"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeconfidence(static_cast<::cn::seisys::v2x::pb::TimeConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D ptcPos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptcpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MapLocation mapLocation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maplocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_posconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heading = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_motionconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationSet4Way accelSet = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_accelset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationConfidence accelerationConfid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_accelerationconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantSize ptcSize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptcsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vehicleBand = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_vehicleband();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.ParticipantData.vehicleBand"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.VehicleType vehicleType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehicletype(static_cast<::cn::seisys::v2x::pb::VehicleType>(val));
        } else
          goto handle_unusual;
        continue;
      // string plateNo = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_plateno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.ParticipantData.plateNo"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PlateType plateType = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platetype(static_cast<::cn::seisys::v2x::pb::PlateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantData.PlateColor plateColor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platecolor(static_cast<::cn::seisys::v2x::pb::ParticipantData_PlateColor>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantData.VehicleColor vehicleColor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehiclecolor(static_cast<::cn::seisys::v2x::pb::ParticipantData_VehicleColor>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantSizeConfidence ptcSizeConfid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptcsizeconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantData.ParticipantTypeExt ptcTypeExt = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ptctypeext(static_cast<::cn::seisys::v2x::pb::ParticipantData_ParticipantTypeExt>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 ptcTypeExtConfid = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.ptctypeextconfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 statusDuration = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.statusduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.PathHistoryPoint pathHistory = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pathhistory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 tracking = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Polygon polygon = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParticipantData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ParticipantData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ptcId = 1;
  if (this->_internal_ptcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ptcid(), target);
  }

  // .cn.seisys.v2x.pb.ParticipantType ptcType = 2;
  if (this->_internal_ptctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ptctype(), target);
  }

  // .cn.seisys.v2x.pb.DataSource dataSource = 3;
  if (this->_internal_datasource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_datasource(), target);
  }

  // string deviceIdList = 4;
  if (!this->_internal_deviceidlist().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceidlist().data(), static_cast<int>(this->_internal_deviceidlist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.ParticipantData.deviceIdList");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deviceidlist(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 6;
  if (this->_internal_timeconfidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_timeconfidence(), target);
  }

  // .cn.seisys.v2x.pb.Position3D ptcPos = 7;
  if (this->_internal_has_ptcpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ptcpos(this),
        _Internal::ptcpos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.MapLocation mapLocation = 8;
  if (this->_internal_has_maplocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::maplocation(this),
        _Internal::maplocation(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 9;
  if (this->_internal_has_posconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::posconfid(this),
        _Internal::posconfid(this).GetCachedSize(), target, stream);
  }

  // uint32 speed = 10;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_speed(), target);
  }

  // uint32 heading = 11;
  if (this->_internal_heading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_heading(), target);
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
  if (this->_internal_has_motionconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::motionconfid(this),
        _Internal::motionconfid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way accelSet = 13;
  if (this->_internal_has_accelset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::accelset(this),
        _Internal::accelset(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence accelerationConfid = 14;
  if (this->_internal_has_accelerationconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::accelerationconfid(this),
        _Internal::accelerationconfid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ParticipantSize ptcSize = 15;
  if (this->_internal_has_ptcsize()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ptcsize(this),
        _Internal::ptcsize(this).GetCachedSize(), target, stream);
  }

  // string vehicleBand = 16;
  if (!this->_internal_vehicleband().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicleband().data(), static_cast<int>(this->_internal_vehicleband().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.ParticipantData.vehicleBand");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_vehicleband(), target);
  }

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 17;
  if (this->_internal_vehicletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_vehicletype(), target);
  }

  // string plateNo = 18;
  if (!this->_internal_plateno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plateno().data(), static_cast<int>(this->_internal_plateno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.ParticipantData.plateNo");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_plateno(), target);
  }

  // .cn.seisys.v2x.pb.PlateType plateType = 19;
  if (this->_internal_platetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_platetype(), target);
  }

  // .cn.seisys.v2x.pb.ParticipantData.PlateColor plateColor = 20;
  if (this->_internal_platecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_platecolor(), target);
  }

  // .cn.seisys.v2x.pb.ParticipantData.VehicleColor vehicleColor = 21;
  if (this->_internal_vehiclecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_vehiclecolor(), target);
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence ptcSizeConfid = 22;
  if (this->_internal_has_ptcsizeconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::ptcsizeconfid(this),
        _Internal::ptcsizeconfid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ParticipantData.ParticipantTypeExt ptcTypeExt = 23;
  if (this->_internal_ptctypeext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_ptctypeext(), target);
  }

  // uint32 ptcTypeExtConfid = 24;
  if (this->_internal_ptctypeextconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_ptctypeextconfid(), target);
  }

  // uint32 statusDuration = 25;
  if (this->_internal_statusduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_statusduration(), target);
  }

  // repeated .cn.seisys.v2x.pb.PathHistoryPoint pathHistory = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pathhistory_size()); i < n; i++) {
    const auto& repfield = this->_internal_pathhistory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 tracking = 27;
  if (this->_internal_tracking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_tracking(), target);
  }

  // .cn.seisys.v2x.pb.Polygon polygon = 28;
  if (this->_internal_has_polygon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::polygon(this),
        _Internal::polygon(this).GetCachedSize(), target, stream);
  }

  // uint64 id = 29;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(29, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ParticipantData)
  return target;
}

size_t ParticipantData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ParticipantData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.PathHistoryPoint pathHistory = 26;
  total_size += 2UL * this->_internal_pathhistory_size();
  for (const auto& msg : this->_impl_.pathhistory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string deviceIdList = 4;
  if (!this->_internal_deviceidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceidlist());
  }

  // string vehicleBand = 16;
  if (!this->_internal_vehicleband().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicleband());
  }

  // string plateNo = 18;
  if (!this->_internal_plateno().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plateno());
  }

  // .cn.seisys.v2x.pb.Position3D ptcPos = 7;
  if (this->_internal_has_ptcpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ptcpos_);
  }

  // .cn.seisys.v2x.pb.MapLocation mapLocation = 8;
  if (this->_internal_has_maplocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maplocation_);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 9;
  if (this->_internal_has_posconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posconfid_);
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
  if (this->_internal_has_motionconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motionconfid_);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way accelSet = 13;
  if (this->_internal_has_accelset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accelset_);
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence accelerationConfid = 14;
  if (this->_internal_has_accelerationconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accelerationconfid_);
  }

  // .cn.seisys.v2x.pb.ParticipantSize ptcSize = 15;
  if (this->_internal_has_ptcsize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ptcsize_);
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence ptcSizeConfid = 22;
  if (this->_internal_has_ptcsizeconfid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ptcsizeconfid_);
  }

  // .cn.seisys.v2x.pb.Polygon polygon = 28;
  if (this->_internal_has_polygon()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.polygon_);
  }

  // uint64 ptcId = 1;
  if (this->_internal_ptcid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ptcid());
  }

  // .cn.seisys.v2x.pb.ParticipantType ptcType = 2;
  if (this->_internal_ptctype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ptctype());
  }

  // .cn.seisys.v2x.pb.DataSource dataSource = 3;
  if (this->_internal_datasource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_datasource());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 6;
  if (this->_internal_timeconfidence() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_timeconfidence());
  }

  // uint32 speed = 10;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint32 heading = 11;
  if (this->_internal_heading() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heading());
  }

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 17;
  if (this->_internal_vehicletype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicletype());
  }

  // .cn.seisys.v2x.pb.PlateType plateType = 19;
  if (this->_internal_platetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platetype());
  }

  // .cn.seisys.v2x.pb.ParticipantData.PlateColor plateColor = 20;
  if (this->_internal_platecolor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platecolor());
  }

  // .cn.seisys.v2x.pb.ParticipantData.VehicleColor vehicleColor = 21;
  if (this->_internal_vehiclecolor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vehiclecolor());
  }

  // .cn.seisys.v2x.pb.ParticipantData.ParticipantTypeExt ptcTypeExt = 23;
  if (this->_internal_ptctypeext() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ptctypeext());
  }

  // uint32 ptcTypeExtConfid = 24;
  if (this->_internal_ptctypeextconfid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ptctypeextconfid());
  }

  // uint32 statusDuration = 25;
  if (this->_internal_statusduration() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_statusduration());
  }

  // uint64 id = 29;
  if (this->_internal_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 tracking = 27;
  if (this->_internal_tracking() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tracking());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParticipantData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParticipantData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParticipantData::GetClassData() const { return &_class_data_; }


void ParticipantData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParticipantData*>(&to_msg);
  auto& from = static_cast<const ParticipantData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ParticipantData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pathhistory_.MergeFrom(from._impl_.pathhistory_);
  if (!from._internal_deviceidlist().empty()) {
    _this->_internal_set_deviceidlist(from._internal_deviceidlist());
  }
  if (!from._internal_vehicleband().empty()) {
    _this->_internal_set_vehicleband(from._internal_vehicleband());
  }
  if (!from._internal_plateno().empty()) {
    _this->_internal_set_plateno(from._internal_plateno());
  }
  if (from._internal_has_ptcpos()) {
    _this->_internal_mutable_ptcpos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_ptcpos());
  }
  if (from._internal_has_maplocation()) {
    _this->_internal_mutable_maplocation()->::cn::seisys::v2x::pb::MapLocation::MergeFrom(
        from._internal_maplocation());
  }
  if (from._internal_has_posconfid()) {
    _this->_internal_mutable_posconfid()->::cn::seisys::v2x::pb::PositionConfidenceSet::MergeFrom(
        from._internal_posconfid());
  }
  if (from._internal_has_motionconfid()) {
    _this->_internal_mutable_motionconfid()->::cn::seisys::v2x::pb::MotionConfidenceSet::MergeFrom(
        from._internal_motionconfid());
  }
  if (from._internal_has_accelset()) {
    _this->_internal_mutable_accelset()->::cn::seisys::v2x::pb::AccelerationSet4Way::MergeFrom(
        from._internal_accelset());
  }
  if (from._internal_has_accelerationconfid()) {
    _this->_internal_mutable_accelerationconfid()->::cn::seisys::v2x::pb::AccelerationConfidence::MergeFrom(
        from._internal_accelerationconfid());
  }
  if (from._internal_has_ptcsize()) {
    _this->_internal_mutable_ptcsize()->::cn::seisys::v2x::pb::ParticipantSize::MergeFrom(
        from._internal_ptcsize());
  }
  if (from._internal_has_ptcsizeconfid()) {
    _this->_internal_mutable_ptcsizeconfid()->::cn::seisys::v2x::pb::ParticipantSizeConfidence::MergeFrom(
        from._internal_ptcsizeconfid());
  }
  if (from._internal_has_polygon()) {
    _this->_internal_mutable_polygon()->::cn::seisys::v2x::pb::Polygon::MergeFrom(
        from._internal_polygon());
  }
  if (from._internal_ptcid() != 0) {
    _this->_internal_set_ptcid(from._internal_ptcid());
  }
  if (from._internal_ptctype() != 0) {
    _this->_internal_set_ptctype(from._internal_ptctype());
  }
  if (from._internal_datasource() != 0) {
    _this->_internal_set_datasource(from._internal_datasource());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timeconfidence() != 0) {
    _this->_internal_set_timeconfidence(from._internal_timeconfidence());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_heading() != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  if (from._internal_vehicletype() != 0) {
    _this->_internal_set_vehicletype(from._internal_vehicletype());
  }
  if (from._internal_platetype() != 0) {
    _this->_internal_set_platetype(from._internal_platetype());
  }
  if (from._internal_platecolor() != 0) {
    _this->_internal_set_platecolor(from._internal_platecolor());
  }
  if (from._internal_vehiclecolor() != 0) {
    _this->_internal_set_vehiclecolor(from._internal_vehiclecolor());
  }
  if (from._internal_ptctypeext() != 0) {
    _this->_internal_set_ptctypeext(from._internal_ptctypeext());
  }
  if (from._internal_ptctypeextconfid() != 0) {
    _this->_internal_set_ptctypeextconfid(from._internal_ptctypeextconfid());
  }
  if (from._internal_statusduration() != 0) {
    _this->_internal_set_statusduration(from._internal_statusduration());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_tracking() != 0) {
    _this->_internal_set_tracking(from._internal_tracking());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantData::CopyFrom(const ParticipantData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ParticipantData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantData::IsInitialized() const {
  return true;
}

void ParticipantData::InternalSwap(ParticipantData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pathhistory_.InternalSwap(&other->_impl_.pathhistory_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceidlist_, lhs_arena,
      &other->_impl_.deviceidlist_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vehicleband_, lhs_arena,
      &other->_impl_.vehicleband_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plateno_, lhs_arena,
      &other->_impl_.plateno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantData, _impl_.tracking_)
      + sizeof(ParticipantData::_impl_.tracking_)
      - PROTOBUF_FIELD_OFFSET(ParticipantData, _impl_.ptcpos_)>(
          reinterpret_cast<char*>(&_impl_.ptcpos_),
          reinterpret_cast<char*>(&other->_impl_.ptcpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticipantData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[54]);
}

// ===================================================================

class ObstacleData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& obspos(const ObstacleData* msg);
  static const ::cn::seisys::v2x::pb::PositionConfidenceSet& posconfid(const ObstacleData* msg);
  static const ::cn::seisys::v2x::pb::MapLocation& maplocation(const ObstacleData* msg);
  static const ::cn::seisys::v2x::pb::MotionConfidenceSet& motionconfid(const ObstacleData* msg);
  static const ::cn::seisys::v2x::pb::AccelerationSet4Way& acceleration(const ObstacleData* msg);
  static const ::cn::seisys::v2x::pb::ParticipantSize& size(const ObstacleData* msg);
  static const ::cn::seisys::v2x::pb::ParticipantSizeConfidence& obssizeconfid(const ObstacleData* msg);
  static const ::cn::seisys::v2x::pb::Polygon& polygon(const ObstacleData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
ObstacleData::_Internal::obspos(const ObstacleData* msg) {
  return *msg->_impl_.obspos_;
}
const ::cn::seisys::v2x::pb::PositionConfidenceSet&
ObstacleData::_Internal::posconfid(const ObstacleData* msg) {
  return *msg->_impl_.posconfid_;
}
const ::cn::seisys::v2x::pb::MapLocation&
ObstacleData::_Internal::maplocation(const ObstacleData* msg) {
  return *msg->_impl_.maplocation_;
}
const ::cn::seisys::v2x::pb::MotionConfidenceSet&
ObstacleData::_Internal::motionconfid(const ObstacleData* msg) {
  return *msg->_impl_.motionconfid_;
}
const ::cn::seisys::v2x::pb::AccelerationSet4Way&
ObstacleData::_Internal::acceleration(const ObstacleData* msg) {
  return *msg->_impl_.acceleration_;
}
const ::cn::seisys::v2x::pb::ParticipantSize&
ObstacleData::_Internal::size(const ObstacleData* msg) {
  return *msg->_impl_.size_;
}
const ::cn::seisys::v2x::pb::ParticipantSizeConfidence&
ObstacleData::_Internal::obssizeconfid(const ObstacleData* msg) {
  return *msg->_impl_.obssizeconfid_;
}
const ::cn::seisys::v2x::pb::Polygon&
ObstacleData::_Internal::polygon(const ObstacleData* msg) {
  return *msg->_impl_.polygon_;
}
ObstacleData::ObstacleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ObstacleData)
}
ObstacleData::ObstacleData(const ObstacleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObstacleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.obspos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.maplocation_){nullptr}
    , decltype(_impl_.motionconfid_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.obssizeconfid_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.obsid_){}
    , decltype(_impl_.obstype_){}
    , decltype(_impl_.obstypecfd_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.obssource_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.verspeed_){}
    , decltype(_impl_.verspeedconfid_){}
    , decltype(_impl_.tracking_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceidlist().empty()) {
    _this->_impl_.deviceidlist_.Set(from._internal_deviceidlist(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_obspos()) {
    _this->_impl_.obspos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.obspos_);
  }
  if (from._internal_has_posconfid()) {
    _this->_impl_.posconfid_ = new ::cn::seisys::v2x::pb::PositionConfidenceSet(*from._impl_.posconfid_);
  }
  if (from._internal_has_maplocation()) {
    _this->_impl_.maplocation_ = new ::cn::seisys::v2x::pb::MapLocation(*from._impl_.maplocation_);
  }
  if (from._internal_has_motionconfid()) {
    _this->_impl_.motionconfid_ = new ::cn::seisys::v2x::pb::MotionConfidenceSet(*from._impl_.motionconfid_);
  }
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::cn::seisys::v2x::pb::AccelerationSet4Way(*from._impl_.acceleration_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::cn::seisys::v2x::pb::ParticipantSize(*from._impl_.size_);
  }
  if (from._internal_has_obssizeconfid()) {
    _this->_impl_.obssizeconfid_ = new ::cn::seisys::v2x::pb::ParticipantSizeConfidence(*from._impl_.obssizeconfid_);
  }
  if (from._internal_has_polygon()) {
    _this->_impl_.polygon_ = new ::cn::seisys::v2x::pb::Polygon(*from._impl_.polygon_);
  }
  ::memcpy(&_impl_.obsid_, &from._impl_.obsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tracking_) -
    reinterpret_cast<char*>(&_impl_.obsid_)) + sizeof(_impl_.tracking_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ObstacleData)
}

inline void ObstacleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.obspos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.maplocation_){nullptr}
    , decltype(_impl_.motionconfid_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.obssizeconfid_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.obsid_){uint64_t{0u}}
    , decltype(_impl_.obstype_){0}
    , decltype(_impl_.obstypecfd_){0u}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.obssource_){0}
    , decltype(_impl_.speed_){0u}
    , decltype(_impl_.heading_){0u}
    , decltype(_impl_.verspeed_){0u}
    , decltype(_impl_.verspeedconfid_){0}
    , decltype(_impl_.tracking_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObstacleData::~ObstacleData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ObstacleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceidlist_.Destroy();
  if (this != internal_default_instance()) delete _impl_.obspos_;
  if (this != internal_default_instance()) delete _impl_.posconfid_;
  if (this != internal_default_instance()) delete _impl_.maplocation_;
  if (this != internal_default_instance()) delete _impl_.motionconfid_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.obssizeconfid_;
  if (this != internal_default_instance()) delete _impl_.polygon_;
}

void ObstacleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ObstacleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceidlist_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.obspos_ != nullptr) {
    delete _impl_.obspos_;
  }
  _impl_.obspos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posconfid_ != nullptr) {
    delete _impl_.posconfid_;
  }
  _impl_.posconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maplocation_ != nullptr) {
    delete _impl_.maplocation_;
  }
  _impl_.maplocation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.motionconfid_ != nullptr) {
    delete _impl_.motionconfid_;
  }
  _impl_.motionconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.obssizeconfid_ != nullptr) {
    delete _impl_.obssizeconfid_;
  }
  _impl_.obssizeconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.polygon_ != nullptr) {
    delete _impl_.polygon_;
  }
  _impl_.polygon_ = nullptr;
  ::memset(&_impl_.obsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tracking_) -
      reinterpret_cast<char*>(&_impl_.obsid_)) + sizeof(_impl_.tracking_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 obsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.obsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ObstaclesType obsType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_obstype(static_cast<::cn::seisys::v2x::pb::ObstaclesType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 obstypeCfd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.obstypecfd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DataSource obsSource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_obssource(static_cast<::cn::seisys::v2x::pb::DataSource>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceIdList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_deviceidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.ObstacleData.deviceIdList"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D obsPos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_obspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_posconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MapLocation mapLocation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_maplocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heading = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_motionconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 verSpeed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.verspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SpeedConfidence verSpeedConfid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_verspeedconfid(static_cast<::cn::seisys::v2x::pb::SpeedConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantSize size = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParticipantSizeConfidence obsSizeConfid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_obssizeconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tracking = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Polygon polygon = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ObstacleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 obsId = 1;
  if (this->_internal_obsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_obsid(), target);
  }

  // .cn.seisys.v2x.pb.ObstaclesType obsType = 2;
  if (this->_internal_obstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_obstype(), target);
  }

  // uint32 obstypeCfd = 3;
  if (this->_internal_obstypecfd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_obstypecfd(), target);
  }

  // .cn.seisys.v2x.pb.DataSource obsSource = 4;
  if (this->_internal_obssource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_obssource(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // string deviceIdList = 6;
  if (!this->_internal_deviceidlist().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceidlist().data(), static_cast<int>(this->_internal_deviceidlist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.ObstacleData.deviceIdList");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_deviceidlist(), target);
  }

  // .cn.seisys.v2x.pb.Position3D obsPos = 7;
  if (this->_internal_has_obspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::obspos(this),
        _Internal::obspos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 8;
  if (this->_internal_has_posconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::posconfid(this),
        _Internal::posconfid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.MapLocation mapLocation = 9;
  if (this->_internal_has_maplocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::maplocation(this),
        _Internal::maplocation(this).GetCachedSize(), target, stream);
  }

  // uint32 speed = 10;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_speed(), target);
  }

  // uint32 heading = 11;
  if (this->_internal_heading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_heading(), target);
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
  if (this->_internal_has_motionconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::motionconfid(this),
        _Internal::motionconfid(this).GetCachedSize(), target, stream);
  }

  // uint32 verSpeed = 13;
  if (this->_internal_verspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_verspeed(), target);
  }

  // .cn.seisys.v2x.pb.SpeedConfidence verSpeedConfid = 14;
  if (this->_internal_verspeedconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_verspeedconfid(), target);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 15;
  if (this->_internal_has_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ParticipantSize size = 16;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence obsSizeConfid = 17;
  if (this->_internal_has_obssizeconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::obssizeconfid(this),
        _Internal::obssizeconfid(this).GetCachedSize(), target, stream);
  }

  // uint32 tracking = 18;
  if (this->_internal_tracking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tracking(), target);
  }

  // .cn.seisys.v2x.pb.Polygon polygon = 19;
  if (this->_internal_has_polygon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::polygon(this),
        _Internal::polygon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ObstacleData)
  return target;
}

size_t ObstacleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ObstacleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceIdList = 6;
  if (!this->_internal_deviceidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceidlist());
  }

  // .cn.seisys.v2x.pb.Position3D obsPos = 7;
  if (this->_internal_has_obspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.obspos_);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 8;
  if (this->_internal_has_posconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posconfid_);
  }

  // .cn.seisys.v2x.pb.MapLocation mapLocation = 9;
  if (this->_internal_has_maplocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maplocation_);
  }

  // .cn.seisys.v2x.pb.MotionConfidenceSet motionConfid = 12;
  if (this->_internal_has_motionconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motionconfid_);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 15;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acceleration_);
  }

  // .cn.seisys.v2x.pb.ParticipantSize size = 16;
  if (this->_internal_has_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  // .cn.seisys.v2x.pb.ParticipantSizeConfidence obsSizeConfid = 17;
  if (this->_internal_has_obssizeconfid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.obssizeconfid_);
  }

  // .cn.seisys.v2x.pb.Polygon polygon = 19;
  if (this->_internal_has_polygon()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.polygon_);
  }

  // uint64 obsId = 1;
  if (this->_internal_obsid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_obsid());
  }

  // .cn.seisys.v2x.pb.ObstaclesType obsType = 2;
  if (this->_internal_obstype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_obstype());
  }

  // uint32 obstypeCfd = 3;
  if (this->_internal_obstypecfd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_obstypecfd());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .cn.seisys.v2x.pb.DataSource obsSource = 4;
  if (this->_internal_obssource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_obssource());
  }

  // uint32 speed = 10;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint32 heading = 11;
  if (this->_internal_heading() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heading());
  }

  // uint32 verSpeed = 13;
  if (this->_internal_verspeed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_verspeed());
  }

  // .cn.seisys.v2x.pb.SpeedConfidence verSpeedConfid = 14;
  if (this->_internal_verspeedconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_verspeedconfid());
  }

  // uint32 tracking = 18;
  if (this->_internal_tracking() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tracking());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObstacleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleData::GetClassData() const { return &_class_data_; }


void ObstacleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObstacleData*>(&to_msg);
  auto& from = static_cast<const ObstacleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ObstacleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceidlist().empty()) {
    _this->_internal_set_deviceidlist(from._internal_deviceidlist());
  }
  if (from._internal_has_obspos()) {
    _this->_internal_mutable_obspos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_obspos());
  }
  if (from._internal_has_posconfid()) {
    _this->_internal_mutable_posconfid()->::cn::seisys::v2x::pb::PositionConfidenceSet::MergeFrom(
        from._internal_posconfid());
  }
  if (from._internal_has_maplocation()) {
    _this->_internal_mutable_maplocation()->::cn::seisys::v2x::pb::MapLocation::MergeFrom(
        from._internal_maplocation());
  }
  if (from._internal_has_motionconfid()) {
    _this->_internal_mutable_motionconfid()->::cn::seisys::v2x::pb::MotionConfidenceSet::MergeFrom(
        from._internal_motionconfid());
  }
  if (from._internal_has_acceleration()) {
    _this->_internal_mutable_acceleration()->::cn::seisys::v2x::pb::AccelerationSet4Way::MergeFrom(
        from._internal_acceleration());
  }
  if (from._internal_has_size()) {
    _this->_internal_mutable_size()->::cn::seisys::v2x::pb::ParticipantSize::MergeFrom(
        from._internal_size());
  }
  if (from._internal_has_obssizeconfid()) {
    _this->_internal_mutable_obssizeconfid()->::cn::seisys::v2x::pb::ParticipantSizeConfidence::MergeFrom(
        from._internal_obssizeconfid());
  }
  if (from._internal_has_polygon()) {
    _this->_internal_mutable_polygon()->::cn::seisys::v2x::pb::Polygon::MergeFrom(
        from._internal_polygon());
  }
  if (from._internal_obsid() != 0) {
    _this->_internal_set_obsid(from._internal_obsid());
  }
  if (from._internal_obstype() != 0) {
    _this->_internal_set_obstype(from._internal_obstype());
  }
  if (from._internal_obstypecfd() != 0) {
    _this->_internal_set_obstypecfd(from._internal_obstypecfd());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_obssource() != 0) {
    _this->_internal_set_obssource(from._internal_obssource());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_heading() != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  if (from._internal_verspeed() != 0) {
    _this->_internal_set_verspeed(from._internal_verspeed());
  }
  if (from._internal_verspeedconfid() != 0) {
    _this->_internal_set_verspeedconfid(from._internal_verspeedconfid());
  }
  if (from._internal_tracking() != 0) {
    _this->_internal_set_tracking(from._internal_tracking());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleData::CopyFrom(const ObstacleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ObstacleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleData::IsInitialized() const {
  return true;
}

void ObstacleData::InternalSwap(ObstacleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceidlist_, lhs_arena,
      &other->_impl_.deviceidlist_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleData, _impl_.tracking_)
      + sizeof(ObstacleData::_impl_.tracking_)
      - PROTOBUF_FIELD_OFFSET(ObstacleData, _impl_.obspos_)>(
          reinterpret_cast<char*>(&_impl_.obspos_),
          reinterpret_cast<char*>(&other->_impl_.obspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[55]);
}

// ===================================================================

class ObjIdValue::_Internal {
 public:
};

ObjIdValue::ObjIdValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ObjIdValue)
}
ObjIdValue::ObjIdValue(const ObjIdValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjIdValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ptcid_){}
    , decltype(_impl_.obsid_){}
    , decltype(_impl_.role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ptcid_, &from._impl_.ptcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.role_) -
    reinterpret_cast<char*>(&_impl_.ptcid_)) + sizeof(_impl_.role_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ObjIdValue)
}

inline void ObjIdValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ptcid_){uint64_t{0u}}
    , decltype(_impl_.obsid_){uint64_t{0u}}
    , decltype(_impl_.role_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjIdValue::~ObjIdValue() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ObjIdValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjIdValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjIdValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjIdValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ObjIdValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ptcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.role_) -
      reinterpret_cast<char*>(&_impl_.ptcid_)) + sizeof(_impl_.role_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjIdValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ptcId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ptcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 obsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.obsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ObjIdValue.Role role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::cn::seisys::v2x::pb::ObjIdValue_Role>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjIdValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ObjIdValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ptcId = 1;
  if (this->_internal_ptcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ptcid(), target);
  }

  // uint64 obsId = 2;
  if (this->_internal_obsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_obsid(), target);
  }

  // .cn.seisys.v2x.pb.ObjIdValue.Role role = 3;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ObjIdValue)
  return target;
}

size_t ObjIdValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ObjIdValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ptcId = 1;
  if (this->_internal_ptcid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ptcid());
  }

  // uint64 obsId = 2;
  if (this->_internal_obsid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_obsid());
  }

  // .cn.seisys.v2x.pb.ObjIdValue.Role role = 3;
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjIdValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjIdValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjIdValue::GetClassData() const { return &_class_data_; }


void ObjIdValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjIdValue*>(&to_msg);
  auto& from = static_cast<const ObjIdValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ObjIdValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ptcid() != 0) {
    _this->_internal_set_ptcid(from._internal_ptcid());
  }
  if (from._internal_obsid() != 0) {
    _this->_internal_set_obsid(from._internal_obsid());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjIdValue::CopyFrom(const ObjIdValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ObjIdValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjIdValue::IsInitialized() const {
  return true;
}

void ObjIdValue::InternalSwap(ObjIdValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjIdValue, _impl_.role_)
      + sizeof(ObjIdValue::_impl_.role_)
      - PROTOBUF_FIELD_OFFSET(ObjIdValue, _impl_.ptcid_)>(
          reinterpret_cast<char*>(&_impl_.ptcid_),
          reinterpret_cast<char*>(&other->_impl_.ptcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjIdValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[56]);
}

// ===================================================================

class RteData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& rtepos(const RteData* msg);
  static const ::cn::seisys::v2x::pb::MapLocation& maplocation(const RteData* msg);
  static const ::cn::seisys::v2x::pb::RsiTimeDetails& timedetails(const RteData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
RteData::_Internal::rtepos(const RteData* msg) {
  return *msg->_impl_.rtepos_;
}
const ::cn::seisys::v2x::pb::MapLocation&
RteData::_Internal::maplocation(const RteData* msg) {
  return *msg->_impl_.maplocation_;
}
const ::cn::seisys::v2x::pb::RsiTimeDetails&
RteData::_Internal::timedetails(const RteData* msg) {
  return *msg->_impl_.timedetails_;
}
RteData::RteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RteData)
}
RteData::RteData(const RteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RteData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.referencepath_){from._impl_.referencepath_}
    , decltype(_impl_.referencelinks_){from._impl_.referencelinks_}
    , decltype(_impl_.eventobjid_){from._impl_.eventobjid_}
    , decltype(_impl_.description_){}
    , decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.eventimages_){}
    , decltype(_impl_.eventvideos_){}
    , decltype(_impl_.rtepos_){nullptr}
    , decltype(_impl_.maplocation_){nullptr}
    , decltype(_impl_.timedetails_){nullptr}
    , decltype(_impl_.rteid_){}
    , decltype(_impl_.rtetype_){}
    , decltype(_impl_.eventsource_){}
    , decltype(_impl_.datasource_){}
    , decltype(_impl_.eventradius_){}
    , decltype(_impl_.eventconfid_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceidlist().empty()) {
    _this->_impl_.deviceidlist_.Set(from._internal_deviceidlist(), 
      _this->GetArenaForAllocation());
  }
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_priority().empty()) {
    _this->_impl_.priority_.Set(from._internal_priority(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eventimages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventimages_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventimages().empty()) {
    _this->_impl_.eventimages_.Set(from._internal_eventimages(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eventvideos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventvideos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventvideos().empty()) {
    _this->_impl_.eventvideos_.Set(from._internal_eventvideos(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rtepos()) {
    _this->_impl_.rtepos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.rtepos_);
  }
  if (from._internal_has_maplocation()) {
    _this->_impl_.maplocation_ = new ::cn::seisys::v2x::pb::MapLocation(*from._impl_.maplocation_);
  }
  if (from._internal_has_timedetails()) {
    _this->_impl_.timedetails_ = new ::cn::seisys::v2x::pb::RsiTimeDetails(*from._impl_.timedetails_);
  }
  ::memcpy(&_impl_.rteid_, &from._impl_.rteid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.rteid_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RteData)
}

inline void RteData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.referencepath_){arena}
    , decltype(_impl_.referencelinks_){arena}
    , decltype(_impl_.eventobjid_){arena}
    , decltype(_impl_.description_){}
    , decltype(_impl_.deviceidlist_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.eventimages_){}
    , decltype(_impl_.eventvideos_){}
    , decltype(_impl_.rtepos_){nullptr}
    , decltype(_impl_.maplocation_){nullptr}
    , decltype(_impl_.timedetails_){nullptr}
    , decltype(_impl_.rteid_){0u}
    , decltype(_impl_.rtetype_){0u}
    , decltype(_impl_.eventsource_){0}
    , decltype(_impl_.datasource_){0}
    , decltype(_impl_.eventradius_){0u}
    , decltype(_impl_.eventconfid_){0}
    , decltype(_impl_.sessionid_){uint64_t{0u}}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eventimages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventimages_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eventvideos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventvideos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RteData::~RteData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RteData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.referencepath_.~RepeatedPtrField();
  _impl_.referencelinks_.~RepeatedPtrField();
  _impl_.eventobjid_.~RepeatedPtrField();
  _impl_.description_.Destroy();
  _impl_.deviceidlist_.Destroy();
  _impl_.priority_.Destroy();
  _impl_.eventimages_.Destroy();
  _impl_.eventvideos_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rtepos_;
  if (this != internal_default_instance()) delete _impl_.maplocation_;
  if (this != internal_default_instance()) delete _impl_.timedetails_;
}

void RteData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RteData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.referencepath_.Clear();
  _impl_.referencelinks_.Clear();
  _impl_.eventobjid_.Clear();
  _impl_.description_.ClearToEmpty();
  _impl_.deviceidlist_.ClearToEmpty();
  _impl_.priority_.ClearToEmpty();
  _impl_.eventimages_.ClearToEmpty();
  _impl_.eventvideos_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rtepos_ != nullptr) {
    delete _impl_.rtepos_;
  }
  _impl_.rtepos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maplocation_ != nullptr) {
    delete _impl_.maplocation_;
  }
  _impl_.maplocation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timedetails_ != nullptr) {
    delete _impl_.timedetails_;
  }
  _impl_.timedetails_ = nullptr;
  ::memset(&_impl_.rteid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.rteid_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RteData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rteId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rteid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rteType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rtetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RteData.description"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.RteData.EventSource eventSource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventsource(static_cast<::cn::seisys::v2x::pb::RteData_EventSource>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DataSource dataSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datasource(static_cast<::cn::seisys::v2x::pb::DataSource>(val));
        } else
          goto handle_unusual;
        continue;
      // string deviceIdList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_deviceidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RteData.deviceIdList"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D rtePos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtepos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MapLocation mapLocation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maplocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 eventRadius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.eventradius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.RsiTimeDetails timeDetails = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_timedetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_priority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RteData.priority"));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ReferencePath referencePath = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referencepath(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ReferenceLink referenceLinks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referencelinks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ObjIdValue eventObjId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eventobjid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 eventConfid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.eventconfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string eventImages = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_eventimages();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RteData.eventImages"));
        } else
          goto handle_unusual;
        continue;
      // string eventVideos = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_eventvideos();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RteData.eventVideos"));
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rteId = 1;
  if (this->_internal_rteid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rteid(), target);
  }

  // uint32 rteType = 2;
  if (this->_internal_rtetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtetype(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RteData.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .cn.seisys.v2x.pb.RteData.EventSource eventSource = 4;
  if (this->_internal_eventsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_eventsource(), target);
  }

  // .cn.seisys.v2x.pb.DataSource dataSource = 5;
  if (this->_internal_datasource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_datasource(), target);
  }

  // string deviceIdList = 6;
  if (!this->_internal_deviceidlist().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceidlist().data(), static_cast<int>(this->_internal_deviceidlist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RteData.deviceIdList");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_deviceidlist(), target);
  }

  // .cn.seisys.v2x.pb.Position3D rtePos = 7;
  if (this->_internal_has_rtepos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::rtepos(this),
        _Internal::rtepos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.MapLocation mapLocation = 8;
  if (this->_internal_has_maplocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::maplocation(this),
        _Internal::maplocation(this).GetCachedSize(), target, stream);
  }

  // uint32 eventRadius = 9;
  if (this->_internal_eventradius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_eventradius(), target);
  }

  // .cn.seisys.v2x.pb.RsiTimeDetails timeDetails = 10;
  if (this->_internal_has_timedetails()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::timedetails(this),
        _Internal::timedetails(this).GetCachedSize(), target, stream);
  }

  // string priority = 11;
  if (!this->_internal_priority().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_priority().data(), static_cast<int>(this->_internal_priority().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RteData.priority");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_priority(), target);
  }

  // repeated .cn.seisys.v2x.pb.ReferencePath referencePath = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referencepath_size()); i < n; i++) {
    const auto& repfield = this->_internal_referencepath(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.ReferenceLink referenceLinks = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referencelinks_size()); i < n; i++) {
    const auto& repfield = this->_internal_referencelinks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.ObjIdValue eventObjId = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_eventobjid_size()); i < n; i++) {
    const auto& repfield = this->_internal_eventobjid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 eventConfid = 15;
  if (this->_internal_eventconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_eventconfid(), target);
  }

  // string eventImages = 16;
  if (!this->_internal_eventimages().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventimages().data(), static_cast<int>(this->_internal_eventimages().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RteData.eventImages");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_eventimages(), target);
  }

  // string eventVideos = 17;
  if (!this->_internal_eventvideos().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventvideos().data(), static_cast<int>(this->_internal_eventvideos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RteData.eventVideos");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_eventvideos(), target);
  }

  // uint64 sessionId = 18;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_sessionid(), target);
  }

  // uint64 id = 19;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RteData)
  return target;
}

size_t RteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.ReferencePath referencePath = 12;
  total_size += 1UL * this->_internal_referencepath_size();
  for (const auto& msg : this->_impl_.referencepath_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.ReferenceLink referenceLinks = 13;
  total_size += 1UL * this->_internal_referencelinks_size();
  for (const auto& msg : this->_impl_.referencelinks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.ObjIdValue eventObjId = 14;
  total_size += 1UL * this->_internal_eventobjid_size();
  for (const auto& msg : this->_impl_.eventobjid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string deviceIdList = 6;
  if (!this->_internal_deviceidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceidlist());
  }

  // string priority = 11;
  if (!this->_internal_priority().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_priority());
  }

  // string eventImages = 16;
  if (!this->_internal_eventimages().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventimages());
  }

  // string eventVideos = 17;
  if (!this->_internal_eventvideos().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventvideos());
  }

  // .cn.seisys.v2x.pb.Position3D rtePos = 7;
  if (this->_internal_has_rtepos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtepos_);
  }

  // .cn.seisys.v2x.pb.MapLocation mapLocation = 8;
  if (this->_internal_has_maplocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maplocation_);
  }

  // .cn.seisys.v2x.pb.RsiTimeDetails timeDetails = 10;
  if (this->_internal_has_timedetails()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timedetails_);
  }

  // uint32 rteId = 1;
  if (this->_internal_rteid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rteid());
  }

  // uint32 rteType = 2;
  if (this->_internal_rtetype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtetype());
  }

  // .cn.seisys.v2x.pb.RteData.EventSource eventSource = 4;
  if (this->_internal_eventsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_eventsource());
  }

  // .cn.seisys.v2x.pb.DataSource dataSource = 5;
  if (this->_internal_datasource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_datasource());
  }

  // uint32 eventRadius = 9;
  if (this->_internal_eventradius() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventradius());
  }

  // int32 eventConfid = 15;
  if (this->_internal_eventconfid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventconfid());
  }

  // uint64 sessionId = 18;
  if (this->_internal_sessionid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sessionid());
  }

  // uint64 id = 19;
  if (this->_internal_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RteData::GetClassData() const { return &_class_data_; }


void RteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RteData*>(&to_msg);
  auto& from = static_cast<const RteData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RteData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.referencepath_.MergeFrom(from._impl_.referencepath_);
  _this->_impl_.referencelinks_.MergeFrom(from._impl_.referencelinks_);
  _this->_impl_.eventobjid_.MergeFrom(from._impl_.eventobjid_);
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_deviceidlist().empty()) {
    _this->_internal_set_deviceidlist(from._internal_deviceidlist());
  }
  if (!from._internal_priority().empty()) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (!from._internal_eventimages().empty()) {
    _this->_internal_set_eventimages(from._internal_eventimages());
  }
  if (!from._internal_eventvideos().empty()) {
    _this->_internal_set_eventvideos(from._internal_eventvideos());
  }
  if (from._internal_has_rtepos()) {
    _this->_internal_mutable_rtepos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_rtepos());
  }
  if (from._internal_has_maplocation()) {
    _this->_internal_mutable_maplocation()->::cn::seisys::v2x::pb::MapLocation::MergeFrom(
        from._internal_maplocation());
  }
  if (from._internal_has_timedetails()) {
    _this->_internal_mutable_timedetails()->::cn::seisys::v2x::pb::RsiTimeDetails::MergeFrom(
        from._internal_timedetails());
  }
  if (from._internal_rteid() != 0) {
    _this->_internal_set_rteid(from._internal_rteid());
  }
  if (from._internal_rtetype() != 0) {
    _this->_internal_set_rtetype(from._internal_rtetype());
  }
  if (from._internal_eventsource() != 0) {
    _this->_internal_set_eventsource(from._internal_eventsource());
  }
  if (from._internal_datasource() != 0) {
    _this->_internal_set_datasource(from._internal_datasource());
  }
  if (from._internal_eventradius() != 0) {
    _this->_internal_set_eventradius(from._internal_eventradius());
  }
  if (from._internal_eventconfid() != 0) {
    _this->_internal_set_eventconfid(from._internal_eventconfid());
  }
  if (from._internal_sessionid() != 0) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RteData::CopyFrom(const RteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RteData::IsInitialized() const {
  return true;
}

void RteData::InternalSwap(RteData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.referencepath_.InternalSwap(&other->_impl_.referencepath_);
  _impl_.referencelinks_.InternalSwap(&other->_impl_.referencelinks_);
  _impl_.eventobjid_.InternalSwap(&other->_impl_.eventobjid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceidlist_, lhs_arena,
      &other->_impl_.deviceidlist_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.priority_, lhs_arena,
      &other->_impl_.priority_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eventimages_, lhs_arena,
      &other->_impl_.eventimages_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eventvideos_, lhs_arena,
      &other->_impl_.eventvideos_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RteData, _impl_.id_)
      + sizeof(RteData::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(RteData, _impl_.rtepos_)>(
          reinterpret_cast<char*>(&_impl_.rtepos_),
          reinterpret_cast<char*>(&other->_impl_.rtepos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RteData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[57]);
}

// ===================================================================

class RtsData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& rtspos(const RtsData* msg);
  static const ::cn::seisys::v2x::pb::RsiTimeDetails& timedetails(const RtsData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
RtsData::_Internal::rtspos(const RtsData* msg) {
  return *msg->_impl_.rtspos_;
}
const ::cn::seisys::v2x::pb::RsiTimeDetails&
RtsData::_Internal::timedetails(const RtsData* msg) {
  return *msg->_impl_.timedetails_;
}
RtsData::RtsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RtsData)
}
RtsData::RtsData(const RtsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refpathlist_){from._impl_.refpathlist_}
    , decltype(_impl_.reflinklist_){from._impl_.reflinklist_}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rtspos_){nullptr}
    , decltype(_impl_.timedetails_){nullptr}
    , decltype(_impl_.rtsid_){}
    , decltype(_impl_.rtstype_){}
    , decltype(_impl_.datasource_){}
    , decltype(_impl_.pathradius_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_priority().empty()) {
    _this->_impl_.priority_.Set(from._internal_priority(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rtspos()) {
    _this->_impl_.rtspos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.rtspos_);
  }
  if (from._internal_has_timedetails()) {
    _this->_impl_.timedetails_ = new ::cn::seisys::v2x::pb::RsiTimeDetails(*from._impl_.timedetails_);
  }
  ::memcpy(&_impl_.rtsid_, &from._impl_.rtsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.rtsid_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RtsData)
}

inline void RtsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refpathlist_){arena}
    , decltype(_impl_.reflinklist_){arena}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rtspos_){nullptr}
    , decltype(_impl_.timedetails_){nullptr}
    , decltype(_impl_.rtsid_){0}
    , decltype(_impl_.rtstype_){0}
    , decltype(_impl_.datasource_){0}
    , decltype(_impl_.pathradius_){0u}
    , decltype(_impl_.sessionid_){uint64_t{0u}}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtsData::~RtsData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RtsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refpathlist_.~RepeatedPtrField();
  _impl_.reflinklist_.~RepeatedPtrField();
  _impl_.priority_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rtspos_;
  if (this != internal_default_instance()) delete _impl_.timedetails_;
}

void RtsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtsData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RtsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refpathlist_.Clear();
  _impl_.reflinklist_.Clear();
  _impl_.priority_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rtspos_ != nullptr) {
    delete _impl_.rtspos_;
  }
  _impl_.rtspos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timedetails_ != nullptr) {
    delete _impl_.timedetails_;
  }
  _impl_.timedetails_ = nullptr;
  ::memset(&_impl_.rtsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.rtsid_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rtsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rtsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rtsType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rtstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DataSource dataSource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datasource(static_cast<::cn::seisys::v2x::pb::DataSource>(val));
        } else
          goto handle_unusual;
        continue;
      // string priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_priority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RtsData.priority"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D rtsPos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.RsiTimeDetails timeDetails = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timedetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RtsData.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ReferencePath refPathList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refpathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ReferenceLink refLinkList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reflinklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 pathRadius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.pathradius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sessionId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RtsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rtsId = 1;
  if (this->_internal_rtsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rtsid(), target);
  }

  // int32 rtsType = 2;
  if (this->_internal_rtstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rtstype(), target);
  }

  // .cn.seisys.v2x.pb.DataSource dataSource = 3;
  if (this->_internal_datasource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_datasource(), target);
  }

  // string priority = 4;
  if (!this->_internal_priority().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_priority().data(), static_cast<int>(this->_internal_priority().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RtsData.priority");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_priority(), target);
  }

  // .cn.seisys.v2x.pb.Position3D rtsPos = 5;
  if (this->_internal_has_rtspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rtspos(this),
        _Internal::rtspos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.RsiTimeDetails timeDetails = 6;
  if (this->_internal_has_timedetails()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timedetails(this),
        _Internal::timedetails(this).GetCachedSize(), target, stream);
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RtsData.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  // repeated .cn.seisys.v2x.pb.ReferencePath refPathList = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refpathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_refpathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.ReferenceLink refLinkList = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reflinklist_size()); i < n; i++) {
    const auto& repfield = this->_internal_reflinklist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 pathRadius = 10;
  if (this->_internal_pathradius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pathradius(), target);
  }

  // uint64 sessionId = 11;
  if (this->_internal_sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_sessionid(), target);
  }

  // uint64 id = 12;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RtsData)
  return target;
}

size_t RtsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RtsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.ReferencePath refPathList = 8;
  total_size += 1UL * this->_internal_refpathlist_size();
  for (const auto& msg : this->_impl_.refpathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.ReferenceLink refLinkList = 9;
  total_size += 1UL * this->_internal_reflinklist_size();
  for (const auto& msg : this->_impl_.reflinklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string priority = 4;
  if (!this->_internal_priority().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_priority());
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .cn.seisys.v2x.pb.Position3D rtsPos = 5;
  if (this->_internal_has_rtspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rtspos_);
  }

  // .cn.seisys.v2x.pb.RsiTimeDetails timeDetails = 6;
  if (this->_internal_has_timedetails()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timedetails_);
  }

  // int32 rtsId = 1;
  if (this->_internal_rtsid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rtsid());
  }

  // int32 rtsType = 2;
  if (this->_internal_rtstype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rtstype());
  }

  // .cn.seisys.v2x.pb.DataSource dataSource = 3;
  if (this->_internal_datasource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_datasource());
  }

  // uint32 pathRadius = 10;
  if (this->_internal_pathradius() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pathradius());
  }

  // uint64 sessionId = 11;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
  }

  // uint64 id = 12;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtsData::GetClassData() const { return &_class_data_; }


void RtsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtsData*>(&to_msg);
  auto& from = static_cast<const RtsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RtsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refpathlist_.MergeFrom(from._impl_.refpathlist_);
  _this->_impl_.reflinklist_.MergeFrom(from._impl_.reflinklist_);
  if (!from._internal_priority().empty()) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_rtspos()) {
    _this->_internal_mutable_rtspos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_rtspos());
  }
  if (from._internal_has_timedetails()) {
    _this->_internal_mutable_timedetails()->::cn::seisys::v2x::pb::RsiTimeDetails::MergeFrom(
        from._internal_timedetails());
  }
  if (from._internal_rtsid() != 0) {
    _this->_internal_set_rtsid(from._internal_rtsid());
  }
  if (from._internal_rtstype() != 0) {
    _this->_internal_set_rtstype(from._internal_rtstype());
  }
  if (from._internal_datasource() != 0) {
    _this->_internal_set_datasource(from._internal_datasource());
  }
  if (from._internal_pathradius() != 0) {
    _this->_internal_set_pathradius(from._internal_pathradius());
  }
  if (from._internal_sessionid() != 0) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtsData::CopyFrom(const RtsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RtsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtsData::IsInitialized() const {
  return true;
}

void RtsData::InternalSwap(RtsData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.refpathlist_.InternalSwap(&other->_impl_.refpathlist_);
  _impl_.reflinklist_.InternalSwap(&other->_impl_.reflinklist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.priority_, lhs_arena,
      &other->_impl_.priority_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtsData, _impl_.id_)
      + sizeof(RtsData::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(RtsData, _impl_.rtspos_)>(
          reinterpret_cast<char*>(&_impl_.rtspos_),
          reinterpret_cast<char*>(&other->_impl_.rtspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[58]);
}

// ===================================================================

class ConnectingLane::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::AllowedManeuvers& maneuvers(const ConnectingLane* msg);
};

const ::cn::seisys::v2x::pb::AllowedManeuvers&
ConnectingLane::_Internal::maneuvers(const ConnectingLane* msg) {
  return *msg->_impl_.maneuvers_;
}
ConnectingLane::ConnectingLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ConnectingLane)
}
ConnectingLane::ConnectingLane(const ConnectingLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectingLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maneuvers_){nullptr}
    , decltype(_impl_.lane_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_maneuvers()) {
    _this->_impl_.maneuvers_ = new ::cn::seisys::v2x::pb::AllowedManeuvers(*from._impl_.maneuvers_);
  }
  _this->_impl_.lane_ = from._impl_.lane_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ConnectingLane)
}

inline void ConnectingLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maneuvers_){nullptr}
    , decltype(_impl_.lane_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectingLane::~ConnectingLane() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ConnectingLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectingLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.maneuvers_;
}

void ConnectingLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectingLane::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ConnectingLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.maneuvers_ != nullptr) {
    delete _impl_.maneuvers_;
  }
  _impl_.maneuvers_ = nullptr;
  _impl_.lane_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectingLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maneuvers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectingLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ConnectingLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lane = 1;
  if (this->_internal_lane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane(), target);
  }

  // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 2;
  if (this->_internal_has_maneuvers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::maneuvers(this),
        _Internal::maneuvers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ConnectingLane)
  return target;
}

size_t ConnectingLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ConnectingLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 2;
  if (this->_internal_has_maneuvers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maneuvers_);
  }

  // uint32 lane = 1;
  if (this->_internal_lane() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectingLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectingLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectingLane::GetClassData() const { return &_class_data_; }


void ConnectingLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectingLane*>(&to_msg);
  auto& from = static_cast<const ConnectingLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ConnectingLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_maneuvers()) {
    _this->_internal_mutable_maneuvers()->::cn::seisys::v2x::pb::AllowedManeuvers::MergeFrom(
        from._internal_maneuvers());
  }
  if (from._internal_lane() != 0) {
    _this->_internal_set_lane(from._internal_lane());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectingLane::CopyFrom(const ConnectingLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ConnectingLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectingLane::IsInitialized() const {
  return true;
}

void ConnectingLane::InternalSwap(ConnectingLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectingLane, _impl_.lane_)
      + sizeof(ConnectingLane::_impl_.lane_)
      - PROTOBUF_FIELD_OFFSET(ConnectingLane, _impl_.maneuvers_)>(
          reinterpret_cast<char*>(&_impl_.maneuvers_),
          reinterpret_cast<char*>(&other->_impl_.maneuvers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectingLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[59]);
}

// ===================================================================

class Connection::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& remoteintersection(const Connection* msg);
  static const ::cn::seisys::v2x::pb::ConnectingLane& connectinglane(const Connection* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
Connection::_Internal::remoteintersection(const Connection* msg) {
  return *msg->_impl_.remoteintersection_;
}
const ::cn::seisys::v2x::pb::ConnectingLane&
Connection::_Internal::connectinglane(const Connection* msg) {
  return *msg->_impl_.connectinglane_;
}
Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Connection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.connectinglane_){nullptr}
    , decltype(_impl_.phaseid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_remoteintersection()) {
    _this->_impl_.remoteintersection_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.remoteintersection_);
  }
  if (from._internal_has_connectinglane()) {
    _this->_impl_.connectinglane_ = new ::cn::seisys::v2x::pb::ConnectingLane(*from._impl_.connectinglane_);
  }
  _this->_impl_.phaseid_ = from._impl_.phaseid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Connection)
}

inline void Connection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.connectinglane_){nullptr}
    , decltype(_impl_.phaseid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Connection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.remoteintersection_;
  if (this != internal_default_instance()) delete _impl_.connectinglane_;
}

void Connection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Connection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.remoteintersection_ != nullptr) {
    delete _impl_.remoteintersection_;
  }
  _impl_.remoteintersection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.connectinglane_ != nullptr) {
    delete _impl_.connectinglane_;
  }
  _impl_.connectinglane_ = nullptr;
  _impl_.phaseid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_remoteintersection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ConnectingLane connectingLane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connectinglane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phaseId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Connection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::remoteintersection(this),
        _Internal::remoteintersection(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ConnectingLane connectingLane = 2;
  if (this->_internal_has_connectinglane()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::connectinglane(this),
        _Internal::connectinglane(this).GetCachedSize(), target, stream);
  }

  // uint32 phaseId = 3;
  if (this->_internal_phaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_phaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Connection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remoteintersection_);
  }

  // .cn.seisys.v2x.pb.ConnectingLane connectingLane = 2;
  if (this->_internal_has_connectinglane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connectinglane_);
  }

  // uint32 phaseId = 3;
  if (this->_internal_phaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Connection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connection::GetClassData() const { return &_class_data_; }


void Connection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Connection*>(&to_msg);
  auto& from = static_cast<const Connection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Connection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_remoteintersection()) {
    _this->_internal_mutable_remoteintersection()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_remoteintersection());
  }
  if (from._internal_has_connectinglane()) {
    _this->_internal_mutable_connectinglane()->::cn::seisys::v2x::pb::ConnectingLane::MergeFrom(
        from._internal_connectinglane());
  }
  if (from._internal_phaseid() != 0) {
    _this->_internal_set_phaseid(from._internal_phaseid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, _impl_.phaseid_)
      + sizeof(Connection::_impl_.phaseid_)
      - PROTOBUF_FIELD_OFFSET(Connection, _impl_.remoteintersection_)>(
          reinterpret_cast<char*>(&_impl_.remoteintersection_),
          reinterpret_cast<char*>(&other->_impl_.remoteintersection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[60]);
}

// ===================================================================

class LaneAttributesParking::_Internal {
 public:
};

LaneAttributesParking::LaneAttributesParking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesParking)
}
LaneAttributesParking::LaneAttributesParking(const LaneAttributesParking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesParking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parkingandstoppinglanes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parkingandstoppinglanes_ = from._impl_.parkingandstoppinglanes_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesParking)
}

inline void LaneAttributesParking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parkingandstoppinglanes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesParking::~LaneAttributesParking() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesParking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesParking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesParking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesParking::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesParking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parkingandstoppinglanes_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesParking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 parkingAndStoppingLanes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.parkingandstoppinglanes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesParking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesParking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 parkingAndStoppingLanes = 1;
  if (this->_internal_parkingandstoppinglanes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_parkingandstoppinglanes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesParking)
  return target;
}

size_t LaneAttributesParking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesParking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 parkingAndStoppingLanes = 1;
  if (this->_internal_parkingandstoppinglanes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parkingandstoppinglanes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesParking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesParking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesParking::GetClassData() const { return &_class_data_; }


void LaneAttributesParking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesParking*>(&to_msg);
  auto& from = static_cast<const LaneAttributesParking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesParking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_parkingandstoppinglanes() != 0) {
    _this->_internal_set_parkingandstoppinglanes(from._internal_parkingandstoppinglanes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesParking::CopyFrom(const LaneAttributesParking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesParking::IsInitialized() const {
  return true;
}

void LaneAttributesParking::InternalSwap(LaneAttributesParking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.parkingandstoppinglanes_, other->_impl_.parkingandstoppinglanes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesParking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[61]);
}

// ===================================================================

class LaneAttributesCrosswalk::_Internal {
 public:
};

LaneAttributesCrosswalk::LaneAttributesCrosswalk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
}
LaneAttributesCrosswalk::LaneAttributesCrosswalk(const LaneAttributesCrosswalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesCrosswalk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pedestriancrosswalks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pedestriancrosswalks_ = from._impl_.pedestriancrosswalks_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
}

inline void LaneAttributesCrosswalk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pedestriancrosswalks_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesCrosswalk::~LaneAttributesCrosswalk() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesCrosswalk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesCrosswalk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesCrosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pedestriancrosswalks_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesCrosswalk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pedestrianCrosswalks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pedestriancrosswalks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesCrosswalk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pedestrianCrosswalks = 1;
  if (this->_internal_pedestriancrosswalks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pedestriancrosswalks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
  return target;
}

size_t LaneAttributesCrosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pedestrianCrosswalks = 1;
  if (this->_internal_pedestriancrosswalks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pedestriancrosswalks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesCrosswalk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesCrosswalk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesCrosswalk::GetClassData() const { return &_class_data_; }


void LaneAttributesCrosswalk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesCrosswalk*>(&to_msg);
  auto& from = static_cast<const LaneAttributesCrosswalk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pedestriancrosswalks() != 0) {
    _this->_internal_set_pedestriancrosswalks(from._internal_pedestriancrosswalks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesCrosswalk::CopyFrom(const LaneAttributesCrosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesCrosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesCrosswalk::IsInitialized() const {
  return true;
}

void LaneAttributesCrosswalk::InternalSwap(LaneAttributesCrosswalk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pedestriancrosswalks_, other->_impl_.pedestriancrosswalks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesCrosswalk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[62]);
}

// ===================================================================

class LaneAttributesBike::_Internal {
 public:
};

LaneAttributesBike::LaneAttributesBike(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesBike)
}
LaneAttributesBike::LaneAttributesBike(const LaneAttributesBike& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesBike* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bikelanes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bikelanes_ = from._impl_.bikelanes_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesBike)
}

inline void LaneAttributesBike::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bikelanes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesBike::~LaneAttributesBike() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesBike)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesBike::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesBike::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesBike::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesBike)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bikelanes_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesBike::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bikeLanes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bikelanes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesBike::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesBike)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bikeLanes = 1;
  if (this->_internal_bikelanes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bikelanes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesBike)
  return target;
}

size_t LaneAttributesBike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesBike)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bikeLanes = 1;
  if (this->_internal_bikelanes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bikelanes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesBike::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesBike::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesBike::GetClassData() const { return &_class_data_; }


void LaneAttributesBike::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesBike*>(&to_msg);
  auto& from = static_cast<const LaneAttributesBike&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesBike)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bikelanes() != 0) {
    _this->_internal_set_bikelanes(from._internal_bikelanes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesBike::CopyFrom(const LaneAttributesBike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesBike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesBike::IsInitialized() const {
  return true;
}

void LaneAttributesBike::InternalSwap(LaneAttributesBike* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bikelanes_, other->_impl_.bikelanes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesBike::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[63]);
}

// ===================================================================

class LaneAttributesSidewalk::_Internal {
 public:
};

LaneAttributesSidewalk::LaneAttributesSidewalk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesSidewalk)
}
LaneAttributesSidewalk::LaneAttributesSidewalk(const LaneAttributesSidewalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesSidewalk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pedestriansidewalkpaths_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pedestriansidewalkpaths_ = from._impl_.pedestriansidewalkpaths_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesSidewalk)
}

inline void LaneAttributesSidewalk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pedestriansidewalkpaths_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesSidewalk::~LaneAttributesSidewalk() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesSidewalk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesSidewalk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesSidewalk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesSidewalk::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesSidewalk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pedestriansidewalkpaths_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesSidewalk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pedestrianSidewalkPaths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pedestriansidewalkpaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesSidewalk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesSidewalk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pedestrianSidewalkPaths = 1;
  if (this->_internal_pedestriansidewalkpaths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pedestriansidewalkpaths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesSidewalk)
  return target;
}

size_t LaneAttributesSidewalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesSidewalk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pedestrianSidewalkPaths = 1;
  if (this->_internal_pedestriansidewalkpaths() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pedestriansidewalkpaths());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesSidewalk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesSidewalk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesSidewalk::GetClassData() const { return &_class_data_; }


void LaneAttributesSidewalk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesSidewalk*>(&to_msg);
  auto& from = static_cast<const LaneAttributesSidewalk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesSidewalk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pedestriansidewalkpaths() != 0) {
    _this->_internal_set_pedestriansidewalkpaths(from._internal_pedestriansidewalkpaths());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesSidewalk::CopyFrom(const LaneAttributesSidewalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesSidewalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesSidewalk::IsInitialized() const {
  return true;
}

void LaneAttributesSidewalk::InternalSwap(LaneAttributesSidewalk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pedestriansidewalkpaths_, other->_impl_.pedestriansidewalkpaths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesSidewalk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[64]);
}

// ===================================================================

class LaneAttributesBarrier::_Internal {
 public:
};

LaneAttributesBarrier::LaneAttributesBarrier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesBarrier)
}
LaneAttributesBarrier::LaneAttributesBarrier(const LaneAttributesBarrier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesBarrier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.medianschannelization_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.medianschannelization_ = from._impl_.medianschannelization_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesBarrier)
}

inline void LaneAttributesBarrier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.medianschannelization_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesBarrier::~LaneAttributesBarrier() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesBarrier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesBarrier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesBarrier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesBarrier::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesBarrier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.medianschannelization_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesBarrier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mediansChannelization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.medianschannelization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesBarrier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesBarrier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mediansChannelization = 1;
  if (this->_internal_medianschannelization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_medianschannelization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesBarrier)
  return target;
}

size_t LaneAttributesBarrier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesBarrier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mediansChannelization = 1;
  if (this->_internal_medianschannelization() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_medianschannelization());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesBarrier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesBarrier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesBarrier::GetClassData() const { return &_class_data_; }


void LaneAttributesBarrier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesBarrier*>(&to_msg);
  auto& from = static_cast<const LaneAttributesBarrier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesBarrier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_medianschannelization() != 0) {
    _this->_internal_set_medianschannelization(from._internal_medianschannelization());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesBarrier::CopyFrom(const LaneAttributesBarrier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesBarrier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesBarrier::IsInitialized() const {
  return true;
}

void LaneAttributesBarrier::InternalSwap(LaneAttributesBarrier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.medianschannelization_, other->_impl_.medianschannelization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesBarrier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[65]);
}

// ===================================================================

class LaneAttributesStriping::_Internal {
 public:
};

LaneAttributesStriping::LaneAttributesStriping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesStriping)
}
LaneAttributesStriping::LaneAttributesStriping(const LaneAttributesStriping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesStriping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roadwaymarkings_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roadwaymarkings_ = from._impl_.roadwaymarkings_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesStriping)
}

inline void LaneAttributesStriping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roadwaymarkings_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesStriping::~LaneAttributesStriping() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesStriping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesStriping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesStriping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesStriping::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesStriping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roadwaymarkings_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesStriping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 roadwayMarkings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roadwaymarkings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesStriping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesStriping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roadwayMarkings = 1;
  if (this->_internal_roadwaymarkings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_roadwaymarkings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesStriping)
  return target;
}

size_t LaneAttributesStriping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesStriping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 roadwayMarkings = 1;
  if (this->_internal_roadwaymarkings() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roadwaymarkings());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesStriping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesStriping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesStriping::GetClassData() const { return &_class_data_; }


void LaneAttributesStriping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesStriping*>(&to_msg);
  auto& from = static_cast<const LaneAttributesStriping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesStriping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roadwaymarkings() != 0) {
    _this->_internal_set_roadwaymarkings(from._internal_roadwaymarkings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesStriping::CopyFrom(const LaneAttributesStriping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesStriping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesStriping::IsInitialized() const {
  return true;
}

void LaneAttributesStriping::InternalSwap(LaneAttributesStriping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roadwaymarkings_, other->_impl_.roadwaymarkings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesStriping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[66]);
}

// ===================================================================

class LaneAttributesTrackedVehicle::_Internal {
 public:
};

LaneAttributesTrackedVehicle::LaneAttributesTrackedVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
}
LaneAttributesTrackedVehicle::LaneAttributesTrackedVehicle(const LaneAttributesTrackedVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesTrackedVehicle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trainsandtrolleys_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.trainsandtrolleys_ = from._impl_.trainsandtrolleys_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
}

inline void LaneAttributesTrackedVehicle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trainsandtrolleys_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesTrackedVehicle::~LaneAttributesTrackedVehicle() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesTrackedVehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesTrackedVehicle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesTrackedVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trainsandtrolleys_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesTrackedVehicle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 trainsAndTrolleys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.trainsandtrolleys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesTrackedVehicle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 trainsAndTrolleys = 1;
  if (this->_internal_trainsandtrolleys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trainsandtrolleys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
  return target;
}

size_t LaneAttributesTrackedVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 trainsAndTrolleys = 1;
  if (this->_internal_trainsandtrolleys() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trainsandtrolleys());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesTrackedVehicle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesTrackedVehicle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesTrackedVehicle::GetClassData() const { return &_class_data_; }


void LaneAttributesTrackedVehicle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesTrackedVehicle*>(&to_msg);
  auto& from = static_cast<const LaneAttributesTrackedVehicle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trainsandtrolleys() != 0) {
    _this->_internal_set_trainsandtrolleys(from._internal_trainsandtrolleys());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesTrackedVehicle::CopyFrom(const LaneAttributesTrackedVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesTrackedVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesTrackedVehicle::IsInitialized() const {
  return true;
}

void LaneAttributesTrackedVehicle::InternalSwap(LaneAttributesTrackedVehicle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.trainsandtrolleys_, other->_impl_.trainsandtrolleys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesTrackedVehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[67]);
}

// ===================================================================

class LaneAttributesVehicle::_Internal {
 public:
};

LaneAttributesVehicle::LaneAttributesVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributesVehicle)
}
LaneAttributesVehicle::LaneAttributesVehicle(const LaneAttributesVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributesVehicle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.motorvehiclelanes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.motorvehiclelanes_ = from._impl_.motorvehiclelanes_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributesVehicle)
}

inline void LaneAttributesVehicle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.motorvehiclelanes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributesVehicle::~LaneAttributesVehicle() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributesVehicle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributesVehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAttributesVehicle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributesVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributesVehicle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.motorvehiclelanes_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributesVehicle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 motorVehicleLanes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.motorvehiclelanes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributesVehicle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributesVehicle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 motorVehicleLanes = 1;
  if (this->_internal_motorvehiclelanes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_motorvehiclelanes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributesVehicle)
  return target;
}

size_t LaneAttributesVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributesVehicle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 motorVehicleLanes = 1;
  if (this->_internal_motorvehiclelanes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motorvehiclelanes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributesVehicle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributesVehicle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributesVehicle::GetClassData() const { return &_class_data_; }


void LaneAttributesVehicle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributesVehicle*>(&to_msg);
  auto& from = static_cast<const LaneAttributesVehicle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributesVehicle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_motorvehiclelanes() != 0) {
    _this->_internal_set_motorvehiclelanes(from._internal_motorvehiclelanes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributesVehicle::CopyFrom(const LaneAttributesVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributesVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributesVehicle::IsInitialized() const {
  return true;
}

void LaneAttributesVehicle::InternalSwap(LaneAttributesVehicle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.motorvehiclelanes_, other->_impl_.motorvehiclelanes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributesVehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[68]);
}

// ===================================================================

class LaneTypeAttributes::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LaneAttributesVehicle& motorvehiclelanes(const LaneTypeAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneAttributesCrosswalk& pedestriancrosswalks(const LaneTypeAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneAttributesBike& bikelanes(const LaneTypeAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneAttributesSidewalk& pedestriansidewalkpaths(const LaneTypeAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneAttributesBarrier& medianschannelization(const LaneTypeAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneAttributesStriping& roadwaymarkings(const LaneTypeAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle& trainsandtrolleys(const LaneTypeAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneAttributesParking& parkingandstoppinglanes(const LaneTypeAttributes* msg);
};

const ::cn::seisys::v2x::pb::LaneAttributesVehicle&
LaneTypeAttributes::_Internal::motorvehiclelanes(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.motorvehiclelanes_;
}
const ::cn::seisys::v2x::pb::LaneAttributesCrosswalk&
LaneTypeAttributes::_Internal::pedestriancrosswalks(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.pedestriancrosswalks_;
}
const ::cn::seisys::v2x::pb::LaneAttributesBike&
LaneTypeAttributes::_Internal::bikelanes(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.bikelanes_;
}
const ::cn::seisys::v2x::pb::LaneAttributesSidewalk&
LaneTypeAttributes::_Internal::pedestriansidewalkpaths(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.pedestriansidewalkpaths_;
}
const ::cn::seisys::v2x::pb::LaneAttributesBarrier&
LaneTypeAttributes::_Internal::medianschannelization(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.medianschannelization_;
}
const ::cn::seisys::v2x::pb::LaneAttributesStriping&
LaneTypeAttributes::_Internal::roadwaymarkings(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.roadwaymarkings_;
}
const ::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle&
LaneTypeAttributes::_Internal::trainsandtrolleys(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.trainsandtrolleys_;
}
const ::cn::seisys::v2x::pb::LaneAttributesParking&
LaneTypeAttributes::_Internal::parkingandstoppinglanes(const LaneTypeAttributes* msg) {
  return *msg->_impl_.LaneTypeAttributesOneOf_.parkingandstoppinglanes_;
}
void LaneTypeAttributes::set_allocated_motorvehiclelanes(::cn::seisys::v2x::pb::LaneAttributesVehicle* motorvehiclelanes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (motorvehiclelanes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(motorvehiclelanes);
    if (message_arena != submessage_arena) {
      motorvehiclelanes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motorvehiclelanes, submessage_arena);
    }
    set_has_motorvehiclelanes();
    _impl_.LaneTypeAttributesOneOf_.motorvehiclelanes_ = motorvehiclelanes;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.motorVehicleLanes)
}
void LaneTypeAttributes::set_allocated_pedestriancrosswalks(::cn::seisys::v2x::pb::LaneAttributesCrosswalk* pedestriancrosswalks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (pedestriancrosswalks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pedestriancrosswalks);
    if (message_arena != submessage_arena) {
      pedestriancrosswalks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pedestriancrosswalks, submessage_arena);
    }
    set_has_pedestriancrosswalks();
    _impl_.LaneTypeAttributesOneOf_.pedestriancrosswalks_ = pedestriancrosswalks;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.pedestrianCrosswalks)
}
void LaneTypeAttributes::set_allocated_bikelanes(::cn::seisys::v2x::pb::LaneAttributesBike* bikelanes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (bikelanes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bikelanes);
    if (message_arena != submessage_arena) {
      bikelanes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bikelanes, submessage_arena);
    }
    set_has_bikelanes();
    _impl_.LaneTypeAttributesOneOf_.bikelanes_ = bikelanes;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.bikeLanes)
}
void LaneTypeAttributes::set_allocated_pedestriansidewalkpaths(::cn::seisys::v2x::pb::LaneAttributesSidewalk* pedestriansidewalkpaths) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (pedestriansidewalkpaths) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pedestriansidewalkpaths);
    if (message_arena != submessage_arena) {
      pedestriansidewalkpaths = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pedestriansidewalkpaths, submessage_arena);
    }
    set_has_pedestriansidewalkpaths();
    _impl_.LaneTypeAttributesOneOf_.pedestriansidewalkpaths_ = pedestriansidewalkpaths;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.pedestrianSidewalkPaths)
}
void LaneTypeAttributes::set_allocated_medianschannelization(::cn::seisys::v2x::pb::LaneAttributesBarrier* medianschannelization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (medianschannelization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(medianschannelization);
    if (message_arena != submessage_arena) {
      medianschannelization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medianschannelization, submessage_arena);
    }
    set_has_medianschannelization();
    _impl_.LaneTypeAttributesOneOf_.medianschannelization_ = medianschannelization;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.mediansChannelization)
}
void LaneTypeAttributes::set_allocated_roadwaymarkings(::cn::seisys::v2x::pb::LaneAttributesStriping* roadwaymarkings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (roadwaymarkings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roadwaymarkings);
    if (message_arena != submessage_arena) {
      roadwaymarkings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roadwaymarkings, submessage_arena);
    }
    set_has_roadwaymarkings();
    _impl_.LaneTypeAttributesOneOf_.roadwaymarkings_ = roadwaymarkings;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.roadwayMarkings)
}
void LaneTypeAttributes::set_allocated_trainsandtrolleys(::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle* trainsandtrolleys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (trainsandtrolleys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trainsandtrolleys);
    if (message_arena != submessage_arena) {
      trainsandtrolleys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trainsandtrolleys, submessage_arena);
    }
    set_has_trainsandtrolleys();
    _impl_.LaneTypeAttributesOneOf_.trainsandtrolleys_ = trainsandtrolleys;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.trainsAndTrolleys)
}
void LaneTypeAttributes::set_allocated_parkingandstoppinglanes(::cn::seisys::v2x::pb::LaneAttributesParking* parkingandstoppinglanes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_LaneTypeAttributesOneOf();
  if (parkingandstoppinglanes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parkingandstoppinglanes);
    if (message_arena != submessage_arena) {
      parkingandstoppinglanes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parkingandstoppinglanes, submessage_arena);
    }
    set_has_parkingandstoppinglanes();
    _impl_.LaneTypeAttributesOneOf_.parkingandstoppinglanes_ = parkingandstoppinglanes;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.LaneTypeAttributes.parkingAndStoppingLanes)
}
LaneTypeAttributes::LaneTypeAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneTypeAttributes)
}
LaneTypeAttributes::LaneTypeAttributes(const LaneTypeAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneTypeAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.LaneTypeAttributesOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_LaneTypeAttributesOneOf();
  switch (from.LaneTypeAttributesOneOf_case()) {
    case kMotorVehicleLanes: {
      _this->_internal_mutable_motorvehiclelanes()->::cn::seisys::v2x::pb::LaneAttributesVehicle::MergeFrom(
          from._internal_motorvehiclelanes());
      break;
    }
    case kPedestrianCrosswalks: {
      _this->_internal_mutable_pedestriancrosswalks()->::cn::seisys::v2x::pb::LaneAttributesCrosswalk::MergeFrom(
          from._internal_pedestriancrosswalks());
      break;
    }
    case kBikeLanes: {
      _this->_internal_mutable_bikelanes()->::cn::seisys::v2x::pb::LaneAttributesBike::MergeFrom(
          from._internal_bikelanes());
      break;
    }
    case kPedestrianSidewalkPaths: {
      _this->_internal_mutable_pedestriansidewalkpaths()->::cn::seisys::v2x::pb::LaneAttributesSidewalk::MergeFrom(
          from._internal_pedestriansidewalkpaths());
      break;
    }
    case kMediansChannelization: {
      _this->_internal_mutable_medianschannelization()->::cn::seisys::v2x::pb::LaneAttributesBarrier::MergeFrom(
          from._internal_medianschannelization());
      break;
    }
    case kRoadwayMarkings: {
      _this->_internal_mutable_roadwaymarkings()->::cn::seisys::v2x::pb::LaneAttributesStriping::MergeFrom(
          from._internal_roadwaymarkings());
      break;
    }
    case kTrainsAndTrolleys: {
      _this->_internal_mutable_trainsandtrolleys()->::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle::MergeFrom(
          from._internal_trainsandtrolleys());
      break;
    }
    case kParkingAndStoppingLanes: {
      _this->_internal_mutable_parkingandstoppinglanes()->::cn::seisys::v2x::pb::LaneAttributesParking::MergeFrom(
          from._internal_parkingandstoppinglanes());
      break;
    }
    case LANETYPEATTRIBUTESONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneTypeAttributes)
}

inline void LaneTypeAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.LaneTypeAttributesOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_LaneTypeAttributesOneOf();
}

LaneTypeAttributes::~LaneTypeAttributes() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneTypeAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneTypeAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_LaneTypeAttributesOneOf()) {
    clear_LaneTypeAttributesOneOf();
  }
}

void LaneTypeAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneTypeAttributes::clear_LaneTypeAttributesOneOf() {
// @@protoc_insertion_point(one_of_clear_start:cn.seisys.v2x.pb.LaneTypeAttributes)
  switch (LaneTypeAttributesOneOf_case()) {
    case kMotorVehicleLanes: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.motorvehiclelanes_;
      }
      break;
    }
    case kPedestrianCrosswalks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.pedestriancrosswalks_;
      }
      break;
    }
    case kBikeLanes: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.bikelanes_;
      }
      break;
    }
    case kPedestrianSidewalkPaths: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.pedestriansidewalkpaths_;
      }
      break;
    }
    case kMediansChannelization: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.medianschannelization_;
      }
      break;
    }
    case kRoadwayMarkings: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.roadwaymarkings_;
      }
      break;
    }
    case kTrainsAndTrolleys: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.trainsandtrolleys_;
      }
      break;
    }
    case kParkingAndStoppingLanes: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.LaneTypeAttributesOneOf_.parkingandstoppinglanes_;
      }
      break;
    }
    case LANETYPEATTRIBUTESONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LANETYPEATTRIBUTESONEOF_NOT_SET;
}


void LaneTypeAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneTypeAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_LaneTypeAttributesOneOf();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneTypeAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.LaneAttributesVehicle motorVehicleLanes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_motorvehiclelanes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributesCrosswalk pedestrianCrosswalks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pedestriancrosswalks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributesBike bikeLanes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bikelanes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributesSidewalk pedestrianSidewalkPaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pedestriansidewalkpaths(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributesBarrier mediansChannelization = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_medianschannelization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributesStriping roadwayMarkings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_roadwaymarkings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributesTrackedVehicle trainsAndTrolleys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_trainsandtrolleys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributesParking parkingAndStoppingLanes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_parkingandstoppinglanes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneTypeAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneTypeAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.LaneAttributesVehicle motorVehicleLanes = 1;
  if (_internal_has_motorvehiclelanes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::motorvehiclelanes(this),
        _Internal::motorvehiclelanes(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneAttributesCrosswalk pedestrianCrosswalks = 2;
  if (_internal_has_pedestriancrosswalks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pedestriancrosswalks(this),
        _Internal::pedestriancrosswalks(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneAttributesBike bikeLanes = 3;
  if (_internal_has_bikelanes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::bikelanes(this),
        _Internal::bikelanes(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneAttributesSidewalk pedestrianSidewalkPaths = 4;
  if (_internal_has_pedestriansidewalkpaths()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pedestriansidewalkpaths(this),
        _Internal::pedestriansidewalkpaths(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneAttributesBarrier mediansChannelization = 5;
  if (_internal_has_medianschannelization()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::medianschannelization(this),
        _Internal::medianschannelization(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneAttributesStriping roadwayMarkings = 6;
  if (_internal_has_roadwaymarkings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::roadwaymarkings(this),
        _Internal::roadwaymarkings(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneAttributesTrackedVehicle trainsAndTrolleys = 7;
  if (_internal_has_trainsandtrolleys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::trainsandtrolleys(this),
        _Internal::trainsandtrolleys(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneAttributesParking parkingAndStoppingLanes = 8;
  if (_internal_has_parkingandstoppinglanes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::parkingandstoppinglanes(this),
        _Internal::parkingandstoppinglanes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneTypeAttributes)
  return target;
}

size_t LaneTypeAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneTypeAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (LaneTypeAttributesOneOf_case()) {
    // .cn.seisys.v2x.pb.LaneAttributesVehicle motorVehicleLanes = 1;
    case kMotorVehicleLanes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.motorvehiclelanes_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneAttributesCrosswalk pedestrianCrosswalks = 2;
    case kPedestrianCrosswalks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.pedestriancrosswalks_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneAttributesBike bikeLanes = 3;
    case kBikeLanes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.bikelanes_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneAttributesSidewalk pedestrianSidewalkPaths = 4;
    case kPedestrianSidewalkPaths: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.pedestriansidewalkpaths_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneAttributesBarrier mediansChannelization = 5;
    case kMediansChannelization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.medianschannelization_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneAttributesStriping roadwayMarkings = 6;
    case kRoadwayMarkings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.roadwaymarkings_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneAttributesTrackedVehicle trainsAndTrolleys = 7;
    case kTrainsAndTrolleys: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.trainsandtrolleys_);
      break;
    }
    // .cn.seisys.v2x.pb.LaneAttributesParking parkingAndStoppingLanes = 8;
    case kParkingAndStoppingLanes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.LaneTypeAttributesOneOf_.parkingandstoppinglanes_);
      break;
    }
    case LANETYPEATTRIBUTESONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneTypeAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneTypeAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneTypeAttributes::GetClassData() const { return &_class_data_; }


void LaneTypeAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneTypeAttributes*>(&to_msg);
  auto& from = static_cast<const LaneTypeAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneTypeAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.LaneTypeAttributesOneOf_case()) {
    case kMotorVehicleLanes: {
      _this->_internal_mutable_motorvehiclelanes()->::cn::seisys::v2x::pb::LaneAttributesVehicle::MergeFrom(
          from._internal_motorvehiclelanes());
      break;
    }
    case kPedestrianCrosswalks: {
      _this->_internal_mutable_pedestriancrosswalks()->::cn::seisys::v2x::pb::LaneAttributesCrosswalk::MergeFrom(
          from._internal_pedestriancrosswalks());
      break;
    }
    case kBikeLanes: {
      _this->_internal_mutable_bikelanes()->::cn::seisys::v2x::pb::LaneAttributesBike::MergeFrom(
          from._internal_bikelanes());
      break;
    }
    case kPedestrianSidewalkPaths: {
      _this->_internal_mutable_pedestriansidewalkpaths()->::cn::seisys::v2x::pb::LaneAttributesSidewalk::MergeFrom(
          from._internal_pedestriansidewalkpaths());
      break;
    }
    case kMediansChannelization: {
      _this->_internal_mutable_medianschannelization()->::cn::seisys::v2x::pb::LaneAttributesBarrier::MergeFrom(
          from._internal_medianschannelization());
      break;
    }
    case kRoadwayMarkings: {
      _this->_internal_mutable_roadwaymarkings()->::cn::seisys::v2x::pb::LaneAttributesStriping::MergeFrom(
          from._internal_roadwaymarkings());
      break;
    }
    case kTrainsAndTrolleys: {
      _this->_internal_mutable_trainsandtrolleys()->::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle::MergeFrom(
          from._internal_trainsandtrolleys());
      break;
    }
    case kParkingAndStoppingLanes: {
      _this->_internal_mutable_parkingandstoppinglanes()->::cn::seisys::v2x::pb::LaneAttributesParking::MergeFrom(
          from._internal_parkingandstoppinglanes());
      break;
    }
    case LANETYPEATTRIBUTESONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneTypeAttributes::CopyFrom(const LaneTypeAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneTypeAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneTypeAttributes::IsInitialized() const {
  return true;
}

void LaneTypeAttributes::InternalSwap(LaneTypeAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.LaneTypeAttributesOneOf_, other->_impl_.LaneTypeAttributesOneOf_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneTypeAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[69]);
}

// ===================================================================

class LaneSharing::_Internal {
 public:
};

LaneSharing::LaneSharing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneSharing)
}
LaneSharing::LaneSharing(const LaneSharing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneSharing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sharewith_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sharewith_ = from._impl_.sharewith_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneSharing)
}

inline void LaneSharing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sharewith_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneSharing::~LaneSharing() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneSharing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneSharing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneSharing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneSharing::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneSharing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sharewith_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSharing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 shareWith = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sharewith_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneSharing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneSharing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 shareWith = 1;
  if (this->_internal_sharewith() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sharewith(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneSharing)
  return target;
}

size_t LaneSharing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneSharing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 shareWith = 1;
  if (this->_internal_sharewith() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sharewith());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSharing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneSharing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSharing::GetClassData() const { return &_class_data_; }


void LaneSharing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneSharing*>(&to_msg);
  auto& from = static_cast<const LaneSharing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneSharing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sharewith() != 0) {
    _this->_internal_set_sharewith(from._internal_sharewith());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSharing::CopyFrom(const LaneSharing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneSharing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSharing::IsInitialized() const {
  return true;
}

void LaneSharing::InternalSwap(LaneSharing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sharewith_, other->_impl_.sharewith_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSharing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[70]);
}

// ===================================================================

class LaneType::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LaneTypeAttributes& value(const LaneType* msg);
};

const ::cn::seisys::v2x::pb::LaneTypeAttributes&
LaneType::_Internal::value(const LaneType* msg) {
  return *msg->_impl_.value_;
}
LaneType::LaneType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneType)
}
LaneType::LaneType(const LaneType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.choiceid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::cn::seisys::v2x::pb::LaneTypeAttributes(*from._impl_.value_);
  }
  _this->_impl_.choiceid_ = from._impl_.choiceid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneType)
}

inline void LaneType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.choiceid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneType::~LaneType() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
}

void LaneType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneType::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _impl_.choiceid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 choiceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.choiceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneTypeAttributes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 choiceId = 1;
  if (this->_internal_choiceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_choiceid(), target);
  }

  // .cn.seisys.v2x.pb.LaneTypeAttributes value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneType)
  return target;
}

size_t LaneType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.LaneTypeAttributes value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // uint32 choiceId = 1;
  if (this->_internal_choiceid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_choiceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneType::GetClassData() const { return &_class_data_; }


void LaneType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneType*>(&to_msg);
  auto& from = static_cast<const LaneType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::cn::seisys::v2x::pb::LaneTypeAttributes::MergeFrom(
        from._internal_value());
  }
  if (from._internal_choiceid() != 0) {
    _this->_internal_set_choiceid(from._internal_choiceid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneType::CopyFrom(const LaneType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneType::IsInitialized() const {
  return true;
}

void LaneType::InternalSwap(LaneType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneType, _impl_.choiceid_)
      + sizeof(LaneType::_impl_.choiceid_)
      - PROTOBUF_FIELD_OFFSET(LaneType, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[71]);
}

// ===================================================================

class LaneAttributes::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LaneSharing& sharewith(const LaneAttributes* msg);
  static const ::cn::seisys::v2x::pb::LaneType& lanetype(const LaneAttributes* msg);
};

const ::cn::seisys::v2x::pb::LaneSharing&
LaneAttributes::_Internal::sharewith(const LaneAttributes* msg) {
  return *msg->_impl_.sharewith_;
}
const ::cn::seisys::v2x::pb::LaneType&
LaneAttributes::_Internal::lanetype(const LaneAttributes* msg) {
  return *msg->_impl_.lanetype_;
}
LaneAttributes::LaneAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneAttributes)
}
LaneAttributes::LaneAttributes(const LaneAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sharewith_){nullptr}
    , decltype(_impl_.lanetype_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sharewith()) {
    _this->_impl_.sharewith_ = new ::cn::seisys::v2x::pb::LaneSharing(*from._impl_.sharewith_);
  }
  if (from._internal_has_lanetype()) {
    _this->_impl_.lanetype_ = new ::cn::seisys::v2x::pb::LaneType(*from._impl_.lanetype_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneAttributes)
}

inline void LaneAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sharewith_){nullptr}
    , decltype(_impl_.lanetype_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAttributes::~LaneAttributes() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sharewith_;
  if (this != internal_default_instance()) delete _impl_.lanetype_;
}

void LaneAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.sharewith_ != nullptr) {
    delete _impl_.sharewith_;
  }
  _impl_.sharewith_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lanetype_ != nullptr) {
    delete _impl_.lanetype_;
  }
  _impl_.lanetype_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.LaneSharing shareWith = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharewith(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneType laneType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lanetype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.LaneSharing shareWith = 1;
  if (this->_internal_has_sharewith()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sharewith(this),
        _Internal::sharewith(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneType laneType = 2;
  if (this->_internal_has_lanetype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lanetype(this),
        _Internal::lanetype(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneAttributes)
  return target;
}

size_t LaneAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.LaneSharing shareWith = 1;
  if (this->_internal_has_sharewith()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sharewith_);
  }

  // .cn.seisys.v2x.pb.LaneType laneType = 2;
  if (this->_internal_has_lanetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lanetype_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAttributes::GetClassData() const { return &_class_data_; }


void LaneAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAttributes*>(&to_msg);
  auto& from = static_cast<const LaneAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sharewith()) {
    _this->_internal_mutable_sharewith()->::cn::seisys::v2x::pb::LaneSharing::MergeFrom(
        from._internal_sharewith());
  }
  if (from._internal_has_lanetype()) {
    _this->_internal_mutable_lanetype()->::cn::seisys::v2x::pb::LaneType::MergeFrom(
        from._internal_lanetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAttributes::CopyFrom(const LaneAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAttributes::IsInitialized() const {
  return true;
}

void LaneAttributes::InternalSwap(LaneAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneAttributes, _impl_.lanetype_)
      + sizeof(LaneAttributes::_impl_.lanetype_)
      - PROTOBUF_FIELD_OFFSET(LaneAttributes, _impl_.sharewith_)>(
          reinterpret_cast<char*>(&_impl_.sharewith_),
          reinterpret_cast<char*>(&other->_impl_.sharewith_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[72]);
}

// ===================================================================

class LaneBoundary::_Internal {
 public:
};

LaneBoundary::LaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneBoundary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.laneboundarypoints_){from._impl_.laneboundarypoints_}
    , decltype(_impl_.laneboundarytype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.laneboundarytype_ = from._impl_.laneboundarytype_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneBoundary)
}

inline void LaneBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.laneboundarypoints_){arena}
    , decltype(_impl_.laneboundarytype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.laneboundarypoints_.~RepeatedPtrField();
}

void LaneBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.laneboundarypoints_.Clear();
  _impl_.laneboundarytype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 laneBoundaryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.laneboundarytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Position3D laneBoundaryPoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_laneboundarypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 laneBoundaryType = 1;
  if (this->_internal_laneboundarytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_laneboundarytype(), target);
  }

  // repeated .cn.seisys.v2x.pb.Position3D laneBoundaryPoints = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_laneboundarypoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_laneboundarypoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Position3D laneBoundaryPoints = 2;
  total_size += 1UL * this->_internal_laneboundarypoints_size();
  for (const auto& msg : this->_impl_.laneboundarypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 laneBoundaryType = 1;
  if (this->_internal_laneboundarytype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_laneboundarytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneBoundary::GetClassData() const { return &_class_data_; }


void LaneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneBoundary*>(&to_msg);
  auto& from = static_cast<const LaneBoundary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.laneboundarypoints_.MergeFrom(from._impl_.laneboundarypoints_);
  if (from._internal_laneboundarytype() != 0) {
    _this->_internal_set_laneboundarytype(from._internal_laneboundarytype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.laneboundarypoints_.InternalSwap(&other->_impl_.laneboundarypoints_);
  swap(_impl_.laneboundarytype_, other->_impl_.laneboundarytype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[73]);
}

// ===================================================================

class Lane::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LaneAttributes& laneattributes(const Lane* msg);
  static const ::cn::seisys::v2x::pb::AllowedManeuvers& maneuvers(const Lane* msg);
};

const ::cn::seisys::v2x::pb::LaneAttributes&
Lane::_Internal::laneattributes(const Lane* msg) {
  return *msg->_impl_.laneattributes_;
}
const ::cn::seisys::v2x::pb::AllowedManeuvers&
Lane::_Internal::maneuvers(const Lane* msg) {
  return *msg->_impl_.maneuvers_;
}
Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Lane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connectsto_){from._impl_.connectsto_}
    , decltype(_impl_.speedlimits_){from._impl_.speedlimits_}
    , decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.leftboundary_){from._impl_.leftboundary_}
    , decltype(_impl_.rightboundary_){from._impl_.rightboundary_}
    , decltype(_impl_.laneattributes_){nullptr}
    , decltype(_impl_.maneuvers_){nullptr}
    , decltype(_impl_.laneid_){}
    , decltype(_impl_.lanewidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_laneattributes()) {
    _this->_impl_.laneattributes_ = new ::cn::seisys::v2x::pb::LaneAttributes(*from._impl_.laneattributes_);
  }
  if (from._internal_has_maneuvers()) {
    _this->_impl_.maneuvers_ = new ::cn::seisys::v2x::pb::AllowedManeuvers(*from._impl_.maneuvers_);
  }
  ::memcpy(&_impl_.laneid_, &from._impl_.laneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lanewidth_) -
    reinterpret_cast<char*>(&_impl_.laneid_)) + sizeof(_impl_.lanewidth_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Lane)
}

inline void Lane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connectsto_){arena}
    , decltype(_impl_.speedlimits_){arena}
    , decltype(_impl_.points_){arena}
    , decltype(_impl_.leftboundary_){arena}
    , decltype(_impl_.rightboundary_){arena}
    , decltype(_impl_.laneattributes_){nullptr}
    , decltype(_impl_.maneuvers_){nullptr}
    , decltype(_impl_.laneid_){0u}
    , decltype(_impl_.lanewidth_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Lane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connectsto_.~RepeatedPtrField();
  _impl_.speedlimits_.~RepeatedPtrField();
  _impl_.points_.~RepeatedPtrField();
  _impl_.leftboundary_.~RepeatedPtrField();
  _impl_.rightboundary_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.laneattributes_;
  if (this != internal_default_instance()) delete _impl_.maneuvers_;
}

void Lane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Lane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connectsto_.Clear();
  _impl_.speedlimits_.Clear();
  _impl_.points_.Clear();
  _impl_.leftboundary_.Clear();
  _impl_.rightboundary_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.laneattributes_ != nullptr) {
    delete _impl_.laneattributes_;
  }
  _impl_.laneattributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maneuvers_ != nullptr) {
    delete _impl_.maneuvers_;
  }
  _impl_.maneuvers_ = nullptr;
  ::memset(&_impl_.laneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lanewidth_) -
      reinterpret_cast<char*>(&_impl_.laneid_)) + sizeof(_impl_.lanewidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 laneId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneWidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lanewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributes laneAttributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_laneattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maneuvers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Connection connectsTo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connectsto(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speedlimits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Position3D points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.LaneBoundary leftBoundary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leftboundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.LaneBoundary rightBoundary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rightboundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Lane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 laneId = 1;
  if (this->_internal_laneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_laneid(), target);
  }

  // uint32 laneWidth = 2;
  if (this->_internal_lanewidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lanewidth(), target);
  }

  // .cn.seisys.v2x.pb.LaneAttributes laneAttributes = 3;
  if (this->_internal_has_laneattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::laneattributes(this),
        _Internal::laneattributes(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 4;
  if (this->_internal_has_maneuvers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::maneuvers(this),
        _Internal::maneuvers(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Connection connectsTo = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connectsto_size()); i < n; i++) {
    const auto& repfield = this->_internal_connectsto(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speedlimits_size()); i < n; i++) {
    const auto& repfield = this->_internal_speedlimits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Position3D points = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary leftBoundary = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leftboundary_size()); i < n; i++) {
    const auto& repfield = this->_internal_leftboundary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary rightBoundary = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rightboundary_size()); i < n; i++) {
    const auto& repfield = this->_internal_rightboundary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Lane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Connection connectsTo = 5;
  total_size += 1UL * this->_internal_connectsto_size();
  for (const auto& msg : this->_impl_.connectsto_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 6;
  total_size += 1UL * this->_internal_speedlimits_size();
  for (const auto& msg : this->_impl_.speedlimits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Position3D points = 7;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary leftBoundary = 8;
  total_size += 1UL * this->_internal_leftboundary_size();
  for (const auto& msg : this->_impl_.leftboundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary rightBoundary = 9;
  total_size += 1UL * this->_internal_rightboundary_size();
  for (const auto& msg : this->_impl_.rightboundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.LaneAttributes laneAttributes = 3;
  if (this->_internal_has_laneattributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.laneattributes_);
  }

  // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 4;
  if (this->_internal_has_maneuvers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maneuvers_);
  }

  // uint32 laneId = 1;
  if (this->_internal_laneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_laneid());
  }

  // uint32 laneWidth = 2;
  if (this->_internal_lanewidth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lanewidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Lane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane::GetClassData() const { return &_class_data_; }


void Lane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Lane*>(&to_msg);
  auto& from = static_cast<const Lane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Lane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connectsto_.MergeFrom(from._impl_.connectsto_);
  _this->_impl_.speedlimits_.MergeFrom(from._impl_.speedlimits_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.leftboundary_.MergeFrom(from._impl_.leftboundary_);
  _this->_impl_.rightboundary_.MergeFrom(from._impl_.rightboundary_);
  if (from._internal_has_laneattributes()) {
    _this->_internal_mutable_laneattributes()->::cn::seisys::v2x::pb::LaneAttributes::MergeFrom(
        from._internal_laneattributes());
  }
  if (from._internal_has_maneuvers()) {
    _this->_internal_mutable_maneuvers()->::cn::seisys::v2x::pb::AllowedManeuvers::MergeFrom(
        from._internal_maneuvers());
  }
  if (from._internal_laneid() != 0) {
    _this->_internal_set_laneid(from._internal_laneid());
  }
  if (from._internal_lanewidth() != 0) {
    _this->_internal_set_lanewidth(from._internal_lanewidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connectsto_.InternalSwap(&other->_impl_.connectsto_);
  _impl_.speedlimits_.InternalSwap(&other->_impl_.speedlimits_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.leftboundary_.InternalSwap(&other->_impl_.leftboundary_);
  _impl_.rightboundary_.InternalSwap(&other->_impl_.rightboundary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, _impl_.lanewidth_)
      + sizeof(Lane::_impl_.lanewidth_)
      - PROTOBUF_FIELD_OFFSET(Lane, _impl_.laneattributes_)>(
          reinterpret_cast<char*>(&_impl_.laneattributes_),
          reinterpret_cast<char*>(&other->_impl_.laneattributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[74]);
}

// ===================================================================

class SignalWaitingLane::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& points(const SignalWaitingLane* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
SignalWaitingLane::_Internal::points(const SignalWaitingLane* msg) {
  return *msg->_impl_.points_;
}
SignalWaitingLane::SignalWaitingLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.SignalWaitingLane)
}
SignalWaitingLane::SignalWaitingLane(const SignalWaitingLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalWaitingLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allowedphaseids_){from._impl_.allowedphaseids_}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.lanewidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_points()) {
    _this->_impl_.points_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.points_);
  }
  _this->_impl_.lanewidth_ = from._impl_.lanewidth_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.SignalWaitingLane)
}

inline void SignalWaitingLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allowedphaseids_){arena}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.lanewidth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalWaitingLane::~SignalWaitingLane() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.SignalWaitingLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalWaitingLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allowedphaseids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.points_;
}

void SignalWaitingLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalWaitingLane::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.SignalWaitingLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allowedphaseids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.points_ != nullptr) {
    delete _impl_.points_;
  }
  _impl_.points_ = nullptr;
  _impl_.lanewidth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalWaitingLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 laneWidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lanewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.PhaseId allowedPhaseIds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allowedphaseids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalWaitingLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.SignalWaitingLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 laneWidth = 1;
  if (this->_internal_lanewidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lanewidth(), target);
  }

  // .cn.seisys.v2x.pb.Position3D points = 2;
  if (this->_internal_has_points()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::points(this),
        _Internal::points(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.PhaseId allowedPhaseIds = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allowedphaseids_size()); i < n; i++) {
    const auto& repfield = this->_internal_allowedphaseids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.SignalWaitingLane)
  return target;
}

size_t SignalWaitingLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.SignalWaitingLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.PhaseId allowedPhaseIds = 3;
  total_size += 1UL * this->_internal_allowedphaseids_size();
  for (const auto& msg : this->_impl_.allowedphaseids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.Position3D points = 2;
  if (this->_internal_has_points()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.points_);
  }

  // int32 laneWidth = 1;
  if (this->_internal_lanewidth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lanewidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalWaitingLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalWaitingLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalWaitingLane::GetClassData() const { return &_class_data_; }


void SignalWaitingLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalWaitingLane*>(&to_msg);
  auto& from = static_cast<const SignalWaitingLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.SignalWaitingLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allowedphaseids_.MergeFrom(from._impl_.allowedphaseids_);
  if (from._internal_has_points()) {
    _this->_internal_mutable_points()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_points());
  }
  if (from._internal_lanewidth() != 0) {
    _this->_internal_set_lanewidth(from._internal_lanewidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalWaitingLane::CopyFrom(const SignalWaitingLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.SignalWaitingLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalWaitingLane::IsInitialized() const {
  return true;
}

void SignalWaitingLane::InternalSwap(SignalWaitingLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.allowedphaseids_.InternalSwap(&other->_impl_.allowedphaseids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalWaitingLane, _impl_.lanewidth_)
      + sizeof(SignalWaitingLane::_impl_.lanewidth_)
      - PROTOBUF_FIELD_OFFSET(SignalWaitingLane, _impl_.points_)>(
          reinterpret_cast<char*>(&_impl_.points_),
          reinterpret_cast<char*>(&other->_impl_.points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalWaitingLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[75]);
}

// ===================================================================

class ConnectingLaneEx::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& connectinglanepoints(const ConnectingLaneEx* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
ConnectingLaneEx::_Internal::connectinglanepoints(const ConnectingLaneEx* msg) {
  return *msg->_impl_.connectinglanepoints_;
}
ConnectingLaneEx::ConnectingLaneEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ConnectingLaneEx)
}
ConnectingLaneEx::ConnectingLaneEx(const ConnectingLaneEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectingLaneEx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connectinglanepoints_){nullptr}
    , decltype(_impl_.targetsection_){}
    , decltype(_impl_.targetlane_){}
    , decltype(_impl_.connectinglanewidth_){}
    , decltype(_impl_.isolatedconnectinglane_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connectinglanepoints()) {
    _this->_impl_.connectinglanepoints_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.connectinglanepoints_);
  }
  ::memcpy(&_impl_.targetsection_, &from._impl_.targetsection_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isolatedconnectinglane_) -
    reinterpret_cast<char*>(&_impl_.targetsection_)) + sizeof(_impl_.isolatedconnectinglane_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ConnectingLaneEx)
}

inline void ConnectingLaneEx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connectinglanepoints_){nullptr}
    , decltype(_impl_.targetsection_){0}
    , decltype(_impl_.targetlane_){0}
    , decltype(_impl_.connectinglanewidth_){0}
    , decltype(_impl_.isolatedconnectinglane_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectingLaneEx::~ConnectingLaneEx() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ConnectingLaneEx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectingLaneEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connectinglanepoints_;
}

void ConnectingLaneEx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectingLaneEx::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ConnectingLaneEx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.connectinglanepoints_ != nullptr) {
    delete _impl_.connectinglanepoints_;
  }
  _impl_.connectinglanepoints_ = nullptr;
  ::memset(&_impl_.targetsection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isolatedconnectinglane_) -
      reinterpret_cast<char*>(&_impl_.targetsection_)) + sizeof(_impl_.isolatedconnectinglane_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectingLaneEx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 targetSection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.targetsection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 targetLane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetlane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 connectingLaneWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.connectinglanewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D connectingLanePoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connectinglanepoints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isolatedConnectingLane = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isolatedconnectinglane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectingLaneEx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ConnectingLaneEx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 targetSection = 1;
  if (this->_internal_targetsection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_targetsection(), target);
  }

  // int32 targetLane = 2;
  if (this->_internal_targetlane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetlane(), target);
  }

  // int32 connectingLaneWidth = 3;
  if (this->_internal_connectinglanewidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_connectinglanewidth(), target);
  }

  // .cn.seisys.v2x.pb.Position3D connectingLanePoints = 4;
  if (this->_internal_has_connectinglanepoints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::connectinglanepoints(this),
        _Internal::connectinglanepoints(this).GetCachedSize(), target, stream);
  }

  // bool isolatedConnectingLane = 5;
  if (this->_internal_isolatedconnectinglane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isolatedconnectinglane(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ConnectingLaneEx)
  return target;
}

size_t ConnectingLaneEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ConnectingLaneEx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.Position3D connectingLanePoints = 4;
  if (this->_internal_has_connectinglanepoints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connectinglanepoints_);
  }

  // int32 targetSection = 1;
  if (this->_internal_targetsection() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetsection());
  }

  // int32 targetLane = 2;
  if (this->_internal_targetlane() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetlane());
  }

  // int32 connectingLaneWidth = 3;
  if (this->_internal_connectinglanewidth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_connectinglanewidth());
  }

  // bool isolatedConnectingLane = 5;
  if (this->_internal_isolatedconnectinglane() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectingLaneEx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectingLaneEx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectingLaneEx::GetClassData() const { return &_class_data_; }


void ConnectingLaneEx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectingLaneEx*>(&to_msg);
  auto& from = static_cast<const ConnectingLaneEx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ConnectingLaneEx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connectinglanepoints()) {
    _this->_internal_mutable_connectinglanepoints()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_connectinglanepoints());
  }
  if (from._internal_targetsection() != 0) {
    _this->_internal_set_targetsection(from._internal_targetsection());
  }
  if (from._internal_targetlane() != 0) {
    _this->_internal_set_targetlane(from._internal_targetlane());
  }
  if (from._internal_connectinglanewidth() != 0) {
    _this->_internal_set_connectinglanewidth(from._internal_connectinglanewidth());
  }
  if (from._internal_isolatedconnectinglane() != 0) {
    _this->_internal_set_isolatedconnectinglane(from._internal_isolatedconnectinglane());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectingLaneEx::CopyFrom(const ConnectingLaneEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ConnectingLaneEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectingLaneEx::IsInitialized() const {
  return true;
}

void ConnectingLaneEx::InternalSwap(ConnectingLaneEx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectingLaneEx, _impl_.isolatedconnectinglane_)
      + sizeof(ConnectingLaneEx::_impl_.isolatedconnectinglane_)
      - PROTOBUF_FIELD_OFFSET(ConnectingLaneEx, _impl_.connectinglanepoints_)>(
          reinterpret_cast<char*>(&_impl_.connectinglanepoints_),
          reinterpret_cast<char*>(&other->_impl_.connectinglanepoints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectingLaneEx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[76]);
}

// ===================================================================

class ConnectionEx::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& remoteintersection(const ConnectionEx* msg);
  static const ::cn::seisys::v2x::pb::SignalWaitingLane& swl(const ConnectionEx* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
ConnectionEx::_Internal::remoteintersection(const ConnectionEx* msg) {
  return *msg->_impl_.remoteintersection_;
}
const ::cn::seisys::v2x::pb::SignalWaitingLane&
ConnectionEx::_Internal::swl(const ConnectionEx* msg) {
  return *msg->_impl_.swl_;
}
ConnectionEx::ConnectionEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ConnectionEx)
}
ConnectionEx::ConnectionEx(const ConnectionEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionEx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connectionlane_){from._impl_.connectionlane_}
    , decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.swl_){nullptr}
    , decltype(_impl_.phaseid_){}
    , decltype(_impl_.turndirection_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_remoteintersection()) {
    _this->_impl_.remoteintersection_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.remoteintersection_);
  }
  if (from._internal_has_swl()) {
    _this->_impl_.swl_ = new ::cn::seisys::v2x::pb::SignalWaitingLane(*from._impl_.swl_);
  }
  ::memcpy(&_impl_.phaseid_, &from._impl_.phaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.turndirection_) -
    reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.turndirection_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ConnectionEx)
}

inline void ConnectionEx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connectionlane_){arena}
    , decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.swl_){nullptr}
    , decltype(_impl_.phaseid_){0u}
    , decltype(_impl_.turndirection_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectionEx::~ConnectionEx() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ConnectionEx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connectionlane_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.remoteintersection_;
  if (this != internal_default_instance()) delete _impl_.swl_;
}

void ConnectionEx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionEx::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ConnectionEx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connectionlane_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.remoteintersection_ != nullptr) {
    delete _impl_.remoteintersection_;
  }
  _impl_.remoteintersection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.swl_ != nullptr) {
    delete _impl_.swl_;
  }
  _impl_.swl_ = nullptr;
  ::memset(&_impl_.phaseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.turndirection_) -
      reinterpret_cast<char*>(&_impl_.phaseid_)) + sizeof(_impl_.turndirection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionEx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_remoteintersection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SignalWaitingLane swl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_swl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ConnectingLaneEx connectionLane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connectionlane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 phaseId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Maneuver turnDirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turndirection(static_cast<::cn::seisys::v2x::pb::Maneuver>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionEx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ConnectionEx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::remoteintersection(this),
        _Internal::remoteintersection(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.SignalWaitingLane swl = 2;
  if (this->_internal_has_swl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::swl(this),
        _Internal::swl(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.ConnectingLaneEx connectionLane = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connectionlane_size()); i < n; i++) {
    const auto& repfield = this->_internal_connectionlane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 phaseId = 4;
  if (this->_internal_phaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_phaseid(), target);
  }

  // .cn.seisys.v2x.pb.Maneuver turnDirection = 5;
  if (this->_internal_turndirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_turndirection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ConnectionEx)
  return target;
}

size_t ConnectionEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ConnectionEx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.ConnectingLaneEx connectionLane = 3;
  total_size += 1UL * this->_internal_connectionlane_size();
  for (const auto& msg : this->_impl_.connectionlane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remoteintersection_);
  }

  // .cn.seisys.v2x.pb.SignalWaitingLane swl = 2;
  if (this->_internal_has_swl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.swl_);
  }

  // uint32 phaseId = 4;
  if (this->_internal_phaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseid());
  }

  // .cn.seisys.v2x.pb.Maneuver turnDirection = 5;
  if (this->_internal_turndirection() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turndirection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionEx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionEx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionEx::GetClassData() const { return &_class_data_; }


void ConnectionEx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionEx*>(&to_msg);
  auto& from = static_cast<const ConnectionEx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ConnectionEx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connectionlane_.MergeFrom(from._impl_.connectionlane_);
  if (from._internal_has_remoteintersection()) {
    _this->_internal_mutable_remoteintersection()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_remoteintersection());
  }
  if (from._internal_has_swl()) {
    _this->_internal_mutable_swl()->::cn::seisys::v2x::pb::SignalWaitingLane::MergeFrom(
        from._internal_swl());
  }
  if (from._internal_phaseid() != 0) {
    _this->_internal_set_phaseid(from._internal_phaseid());
  }
  if (from._internal_turndirection() != 0) {
    _this->_internal_set_turndirection(from._internal_turndirection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionEx::CopyFrom(const ConnectionEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ConnectionEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionEx::IsInitialized() const {
  return true;
}

void ConnectionEx::InternalSwap(ConnectionEx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connectionlane_.InternalSwap(&other->_impl_.connectionlane_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionEx, _impl_.turndirection_)
      + sizeof(ConnectionEx::_impl_.turndirection_)
      - PROTOBUF_FIELD_OFFSET(ConnectionEx, _impl_.remoteintersection_)>(
          reinterpret_cast<char*>(&_impl_.remoteintersection_),
          reinterpret_cast<char*>(&other->_impl_.remoteintersection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionEx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[77]);
}

// ===================================================================

class STPoint::_Internal {
 public:
};

STPoint::STPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.STPoint)
}
STPoint::STPoint(const STPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  STPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.saxis_){}
    , decltype(_impl_.taxis_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.saxis_, &from._impl_.saxis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.taxis_) -
    reinterpret_cast<char*>(&_impl_.saxis_)) + sizeof(_impl_.taxis_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.STPoint)
}

inline void STPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.saxis_){0}
    , decltype(_impl_.taxis_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

STPoint::~STPoint() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.STPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.STPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.saxis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.taxis_) -
      reinterpret_cast<char*>(&_impl_.saxis_)) + sizeof(_impl_.taxis_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sAxis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.saxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tAxis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.taxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.STPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sAxis = 1;
  if (this->_internal_saxis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_saxis(), target);
  }

  // int32 tAxis = 2;
  if (this->_internal_taxis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_taxis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.STPoint)
  return target;
}

size_t STPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.STPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sAxis = 1;
  if (this->_internal_saxis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_saxis());
  }

  // int32 tAxis = 2;
  if (this->_internal_taxis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taxis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    STPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STPoint::GetClassData() const { return &_class_data_; }


void STPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<STPoint*>(&to_msg);
  auto& from = static_cast<const STPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.STPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_saxis() != 0) {
    _this->_internal_set_saxis(from._internal_saxis());
  }
  if (from._internal_taxis() != 0) {
    _this->_internal_set_taxis(from._internal_taxis());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STPoint::CopyFrom(const STPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.STPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STPoint::IsInitialized() const {
  return true;
}

void STPoint::InternalSwap(STPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STPoint, _impl_.taxis_)
      + sizeof(STPoint::_impl_.taxis_)
      - PROTOBUF_FIELD_OFFSET(STPoint, _impl_.saxis_)>(
          reinterpret_cast<char*>(&_impl_.saxis_),
          reinterpret_cast<char*>(&other->_impl_.saxis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[78]);
}

// ===================================================================

class LaneEx::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::LaneAttributes& laneattributes(const LaneEx* msg);
  static const ::cn::seisys::v2x::pb::AllowedManeuvers& maneuvers(const LaneEx* msg);
};

const ::cn::seisys::v2x::pb::LaneAttributes&
LaneEx::_Internal::laneattributes(const LaneEx* msg) {
  return *msg->_impl_.laneattributes_;
}
const ::cn::seisys::v2x::pb::AllowedManeuvers&
LaneEx::_Internal::maneuvers(const LaneEx* msg) {
  return *msg->_impl_.maneuvers_;
}
LaneEx::LaneEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneEx)
}
LaneEx::LaneEx(const LaneEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneEx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connectstoex_){from._impl_.connectstoex_}
    , decltype(_impl_.speedlimits_){from._impl_.speedlimits_}
    , decltype(_impl_.stpoints_){from._impl_.stpoints_}
    , decltype(_impl_.leftboundary_){from._impl_.leftboundary_}
    , decltype(_impl_.rightboundary_){from._impl_.rightboundary_}
    , decltype(_impl_.laneattributes_){nullptr}
    , decltype(_impl_.maneuvers_){nullptr}
    , decltype(_impl_.lanerefid_){}
    , decltype(_impl_.lanewidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_laneattributes()) {
    _this->_impl_.laneattributes_ = new ::cn::seisys::v2x::pb::LaneAttributes(*from._impl_.laneattributes_);
  }
  if (from._internal_has_maneuvers()) {
    _this->_impl_.maneuvers_ = new ::cn::seisys::v2x::pb::AllowedManeuvers(*from._impl_.maneuvers_);
  }
  ::memcpy(&_impl_.lanerefid_, &from._impl_.lanerefid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lanewidth_) -
    reinterpret_cast<char*>(&_impl_.lanerefid_)) + sizeof(_impl_.lanewidth_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneEx)
}

inline void LaneEx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connectstoex_){arena}
    , decltype(_impl_.speedlimits_){arena}
    , decltype(_impl_.stpoints_){arena}
    , decltype(_impl_.leftboundary_){arena}
    , decltype(_impl_.rightboundary_){arena}
    , decltype(_impl_.laneattributes_){nullptr}
    , decltype(_impl_.maneuvers_){nullptr}
    , decltype(_impl_.lanerefid_){0}
    , decltype(_impl_.lanewidth_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneEx::~LaneEx() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneEx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connectstoex_.~RepeatedPtrField();
  _impl_.speedlimits_.~RepeatedPtrField();
  _impl_.stpoints_.~RepeatedPtrField();
  _impl_.leftboundary_.~RepeatedPtrField();
  _impl_.rightboundary_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.laneattributes_;
  if (this != internal_default_instance()) delete _impl_.maneuvers_;
}

void LaneEx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneEx::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneEx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connectstoex_.Clear();
  _impl_.speedlimits_.Clear();
  _impl_.stpoints_.Clear();
  _impl_.leftboundary_.Clear();
  _impl_.rightboundary_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.laneattributes_ != nullptr) {
    delete _impl_.laneattributes_;
  }
  _impl_.laneattributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maneuvers_ != nullptr) {
    delete _impl_.maneuvers_;
  }
  _impl_.maneuvers_ = nullptr;
  ::memset(&_impl_.lanerefid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lanewidth_) -
      reinterpret_cast<char*>(&_impl_.lanerefid_)) + sizeof(_impl_.lanewidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneEx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 laneRefId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lanerefid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 laneWidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lanewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneAttributes laneAttributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_laneattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maneuvers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ConnectionEx connectsToEx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connectstoex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speedlimits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.STPoint stPoints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.LaneBoundary leftBoundary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leftboundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.LaneBoundary rightBoundary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rightboundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneEx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneEx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 laneRefId = 1;
  if (this->_internal_lanerefid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lanerefid(), target);
  }

  // uint32 laneWidth = 2;
  if (this->_internal_lanewidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lanewidth(), target);
  }

  // .cn.seisys.v2x.pb.LaneAttributes laneAttributes = 3;
  if (this->_internal_has_laneattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::laneattributes(this),
        _Internal::laneattributes(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 4;
  if (this->_internal_has_maneuvers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::maneuvers(this),
        _Internal::maneuvers(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.ConnectionEx connectsToEx = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connectstoex_size()); i < n; i++) {
    const auto& repfield = this->_internal_connectstoex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speedlimits_size()); i < n; i++) {
    const auto& repfield = this->_internal_speedlimits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.STPoint stPoints = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stpoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_stpoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary leftBoundary = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leftboundary_size()); i < n; i++) {
    const auto& repfield = this->_internal_leftboundary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary rightBoundary = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rightboundary_size()); i < n; i++) {
    const auto& repfield = this->_internal_rightboundary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneEx)
  return target;
}

size_t LaneEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneEx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.ConnectionEx connectsToEx = 5;
  total_size += 1UL * this->_internal_connectstoex_size();
  for (const auto& msg : this->_impl_.connectstoex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 6;
  total_size += 1UL * this->_internal_speedlimits_size();
  for (const auto& msg : this->_impl_.speedlimits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.STPoint stPoints = 7;
  total_size += 1UL * this->_internal_stpoints_size();
  for (const auto& msg : this->_impl_.stpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary leftBoundary = 8;
  total_size += 1UL * this->_internal_leftboundary_size();
  for (const auto& msg : this->_impl_.leftboundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.LaneBoundary rightBoundary = 9;
  total_size += 1UL * this->_internal_rightboundary_size();
  for (const auto& msg : this->_impl_.rightboundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.LaneAttributes laneAttributes = 3;
  if (this->_internal_has_laneattributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.laneattributes_);
  }

  // .cn.seisys.v2x.pb.AllowedManeuvers maneuvers = 4;
  if (this->_internal_has_maneuvers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maneuvers_);
  }

  // int32 laneRefId = 1;
  if (this->_internal_lanerefid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lanerefid());
  }

  // uint32 laneWidth = 2;
  if (this->_internal_lanewidth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lanewidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneEx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneEx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneEx::GetClassData() const { return &_class_data_; }


void LaneEx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneEx*>(&to_msg);
  auto& from = static_cast<const LaneEx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneEx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connectstoex_.MergeFrom(from._impl_.connectstoex_);
  _this->_impl_.speedlimits_.MergeFrom(from._impl_.speedlimits_);
  _this->_impl_.stpoints_.MergeFrom(from._impl_.stpoints_);
  _this->_impl_.leftboundary_.MergeFrom(from._impl_.leftboundary_);
  _this->_impl_.rightboundary_.MergeFrom(from._impl_.rightboundary_);
  if (from._internal_has_laneattributes()) {
    _this->_internal_mutable_laneattributes()->::cn::seisys::v2x::pb::LaneAttributes::MergeFrom(
        from._internal_laneattributes());
  }
  if (from._internal_has_maneuvers()) {
    _this->_internal_mutable_maneuvers()->::cn::seisys::v2x::pb::AllowedManeuvers::MergeFrom(
        from._internal_maneuvers());
  }
  if (from._internal_lanerefid() != 0) {
    _this->_internal_set_lanerefid(from._internal_lanerefid());
  }
  if (from._internal_lanewidth() != 0) {
    _this->_internal_set_lanewidth(from._internal_lanewidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneEx::CopyFrom(const LaneEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneEx::IsInitialized() const {
  return true;
}

void LaneEx::InternalSwap(LaneEx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connectstoex_.InternalSwap(&other->_impl_.connectstoex_);
  _impl_.speedlimits_.InternalSwap(&other->_impl_.speedlimits_);
  _impl_.stpoints_.InternalSwap(&other->_impl_.stpoints_);
  _impl_.leftboundary_.InternalSwap(&other->_impl_.leftboundary_);
  _impl_.rightboundary_.InternalSwap(&other->_impl_.rightboundary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneEx, _impl_.lanewidth_)
      + sizeof(LaneEx::_impl_.lanewidth_)
      - PROTOBUF_FIELD_OFFSET(LaneEx, _impl_.laneattributes_)>(
          reinterpret_cast<char*>(&_impl_.laneattributes_),
          reinterpret_cast<char*>(&other->_impl_.laneattributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneEx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[79]);
}

// ===================================================================

class Movement::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& remoteintersection(const Movement* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
Movement::_Internal::remoteintersection(const Movement* msg) {
  return *msg->_impl_.remoteintersection_;
}
Movement::Movement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Movement)
}
Movement::Movement(const Movement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Movement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.phaseid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_remoteintersection()) {
    _this->_impl_.remoteintersection_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.remoteintersection_);
  }
  _this->_impl_.phaseid_ = from._impl_.phaseid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Movement)
}

inline void Movement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remoteintersection_){nullptr}
    , decltype(_impl_.phaseid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Movement::~Movement() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Movement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Movement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.remoteintersection_;
}

void Movement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Movement::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Movement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.remoteintersection_ != nullptr) {
    delete _impl_.remoteintersection_;
  }
  _impl_.remoteintersection_ = nullptr;
  _impl_.phaseid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Movement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_remoteintersection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phaseId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Movement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Movement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::remoteintersection(this),
        _Internal::remoteintersection(this).GetCachedSize(), target, stream);
  }

  // uint32 phaseId = 2;
  if (this->_internal_phaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_phaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Movement)
  return target;
}

size_t Movement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Movement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId remoteIntersection = 1;
  if (this->_internal_has_remoteintersection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remoteintersection_);
  }

  // uint32 phaseId = 2;
  if (this->_internal_phaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Movement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Movement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Movement::GetClassData() const { return &_class_data_; }


void Movement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Movement*>(&to_msg);
  auto& from = static_cast<const Movement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Movement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_remoteintersection()) {
    _this->_internal_mutable_remoteintersection()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_remoteintersection());
  }
  if (from._internal_phaseid() != 0) {
    _this->_internal_set_phaseid(from._internal_phaseid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Movement::CopyFrom(const Movement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Movement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Movement::IsInitialized() const {
  return true;
}

void Movement::InternalSwap(Movement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Movement, _impl_.phaseid_)
      + sizeof(Movement::_impl_.phaseid_)
      - PROTOBUF_FIELD_OFFSET(Movement, _impl_.remoteintersection_)>(
          reinterpret_cast<char*>(&_impl_.remoteintersection_),
          reinterpret_cast<char*>(&other->_impl_.remoteintersection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Movement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[80]);
}

// ===================================================================

class Section::_Internal {
 public:
};

Section::Section(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Section)
}
Section::Section(const Section& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Section* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lanes_){from._impl_.lanes_}
    , decltype(_impl_.secid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.secid_ = from._impl_.secid_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Section)
}

inline void Section::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lanes_){arena}
    , decltype(_impl_.secid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Section::~Section() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Section)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Section::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lanes_.~RepeatedPtrField();
}

void Section::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Section::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Section)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lanes_.Clear();
  _impl_.secid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Section::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SecId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.secid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.LaneEx lanes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Section::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Section)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SecId = 1;
  if (this->_internal_secid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secid(), target);
  }

  // repeated .cn.seisys.v2x.pb.LaneEx lanes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Section)
  return target;
}

size_t Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Section)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.LaneEx lanes = 2;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->_impl_.lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 SecId = 1;
  if (this->_internal_secid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_secid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Section::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Section::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Section::GetClassData() const { return &_class_data_; }


void Section::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Section*>(&to_msg);
  auto& from = static_cast<const Section&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Section)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lanes_.MergeFrom(from._impl_.lanes_);
  if (from._internal_secid() != 0) {
    _this->_internal_set_secid(from._internal_secid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Section::CopyFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Section::IsInitialized() const {
  return true;
}

void Section::InternalSwap(Section* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lanes_.InternalSwap(&other->_impl_.lanes_);
  swap(_impl_.secid_, other->_impl_.secid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Section::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[81]);
}

// ===================================================================

class LinkEx::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& upstreamnodeid(const LinkEx* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
LinkEx::_Internal::upstreamnodeid(const LinkEx* msg) {
  return *msg->_impl_.upstreamnodeid_;
}
LinkEx::LinkEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LinkEx)
}
LinkEx::LinkEx(const LinkEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinkEx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speedlimits_){from._impl_.speedlimits_}
    , decltype(_impl_.refline_){from._impl_.refline_}
    , decltype(_impl_.movementsex_){from._impl_.movementsex_}
    , decltype(_impl_.sections_){from._impl_.sections_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.linkwidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_impl_.upstreamnodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.upstreamnodeid_);
  }
  _this->_impl_.linkwidth_ = from._impl_.linkwidth_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LinkEx)
}

inline void LinkEx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speedlimits_){arena}
    , decltype(_impl_.refline_){arena}
    , decltype(_impl_.movementsex_){arena}
    , decltype(_impl_.sections_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.linkwidth_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkEx::~LinkEx() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LinkEx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speedlimits_.~RepeatedPtrField();
  _impl_.refline_.~RepeatedPtrField();
  _impl_.movementsex_.~RepeatedPtrField();
  _impl_.sections_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.upstreamnodeid_;
}

void LinkEx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkEx::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LinkEx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speedlimits_.Clear();
  _impl_.refline_.Clear();
  _impl_.movementsex_.Clear();
  _impl_.sections_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.upstreamnodeid_ != nullptr) {
    delete _impl_.upstreamnodeid_;
  }
  _impl_.upstreamnodeid_ = nullptr;
  _impl_.linkwidth_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkEx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.LinkEx.name"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_upstreamnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speedlimits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 linkWidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.linkwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Position3D refLine = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.MovementEx movementsEx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movementsex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Section sections = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkEx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LinkEx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.LinkEx.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 2;
  if (this->_internal_has_upstreamnodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::upstreamnodeid(this),
        _Internal::upstreamnodeid(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speedlimits_size()); i < n; i++) {
    const auto& repfield = this->_internal_speedlimits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 linkWidth = 4;
  if (this->_internal_linkwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_linkwidth(), target);
  }

  // repeated .cn.seisys.v2x.pb.Position3D refLine = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refline_size()); i < n; i++) {
    const auto& repfield = this->_internal_refline(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.MovementEx movementsEx = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movementsex_size()); i < n; i++) {
    const auto& repfield = this->_internal_movementsex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Section sections = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LinkEx)
  return target;
}

size_t LinkEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LinkEx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 3;
  total_size += 1UL * this->_internal_speedlimits_size();
  for (const auto& msg : this->_impl_.speedlimits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Position3D refLine = 5;
  total_size += 1UL * this->_internal_refline_size();
  for (const auto& msg : this->_impl_.refline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.MovementEx movementsEx = 6;
  total_size += 1UL * this->_internal_movementsex_size();
  for (const auto& msg : this->_impl_.movementsex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Section sections = 7;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_impl_.sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 2;
  if (this->_internal_has_upstreamnodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upstreamnodeid_);
  }

  // uint32 linkWidth = 4;
  if (this->_internal_linkwidth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linkwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkEx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinkEx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkEx::GetClassData() const { return &_class_data_; }


void LinkEx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinkEx*>(&to_msg);
  auto& from = static_cast<const LinkEx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LinkEx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.speedlimits_.MergeFrom(from._impl_.speedlimits_);
  _this->_impl_.refline_.MergeFrom(from._impl_.refline_);
  _this->_impl_.movementsex_.MergeFrom(from._impl_.movementsex_);
  _this->_impl_.sections_.MergeFrom(from._impl_.sections_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_internal_mutable_upstreamnodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_upstreamnodeid());
  }
  if (from._internal_linkwidth() != 0) {
    _this->_internal_set_linkwidth(from._internal_linkwidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkEx::CopyFrom(const LinkEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LinkEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkEx::IsInitialized() const {
  return true;
}

void LinkEx::InternalSwap(LinkEx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speedlimits_.InternalSwap(&other->_impl_.speedlimits_);
  _impl_.refline_.InternalSwap(&other->_impl_.refline_);
  _impl_.movementsex_.InternalSwap(&other->_impl_.movementsex_);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkEx, _impl_.linkwidth_)
      + sizeof(LinkEx::_impl_.linkwidth_)
      - PROTOBUF_FIELD_OFFSET(LinkEx, _impl_.upstreamnodeid_)>(
          reinterpret_cast<char*>(&_impl_.upstreamnodeid_),
          reinterpret_cast<char*>(&other->_impl_.upstreamnodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkEx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[82]);
}

// ===================================================================

class Link::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& upstreamnodeid(const Link* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
Link::_Internal::upstreamnodeid(const Link* msg) {
  return *msg->_impl_.upstreamnodeid_;
}
Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speedlimits_){from._impl_.speedlimits_}
    , decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.movements_){from._impl_.movements_}
    , decltype(_impl_.lanes_){from._impl_.lanes_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.linkwidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_impl_.upstreamnodeid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.upstreamnodeid_);
  }
  _this->_impl_.linkwidth_ = from._impl_.linkwidth_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Link)
}

inline void Link::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speedlimits_){arena}
    , decltype(_impl_.points_){arena}
    , decltype(_impl_.movements_){arena}
    , decltype(_impl_.lanes_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.upstreamnodeid_){nullptr}
    , decltype(_impl_.linkwidth_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speedlimits_.~RepeatedPtrField();
  _impl_.points_.~RepeatedPtrField();
  _impl_.movements_.~RepeatedPtrField();
  _impl_.lanes_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.upstreamnodeid_;
}

void Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Link)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speedlimits_.Clear();
  _impl_.points_.Clear();
  _impl_.movements_.Clear();
  _impl_.lanes_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.upstreamnodeid_ != nullptr) {
    delete _impl_.upstreamnodeid_;
  }
  _impl_.upstreamnodeid_ = nullptr;
  _impl_.linkwidth_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.Link.name"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_upstreamnodeid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speedlimits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 linkWidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.linkwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Position3D points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Movement movements = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Lane lanes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Link::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Link)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.Link.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 2;
  if (this->_internal_has_upstreamnodeid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::upstreamnodeid(this),
        _Internal::upstreamnodeid(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speedlimits_size()); i < n; i++) {
    const auto& repfield = this->_internal_speedlimits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 linkWidth = 4;
  if (this->_internal_linkwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_linkwidth(), target);
  }

  // repeated .cn.seisys.v2x.pb.Position3D points = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Movement movements = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movements_size()); i < n; i++) {
    const auto& repfield = this->_internal_movements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Lane lanes = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Link)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.RegulatorySpeedLimit speedLimits = 3;
  total_size += 1UL * this->_internal_speedlimits_size();
  for (const auto& msg : this->_impl_.speedlimits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Position3D points = 5;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Movement movements = 6;
  total_size += 1UL * this->_internal_movements_size();
  for (const auto& msg : this->_impl_.movements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Lane lanes = 7;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->_impl_.lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .cn.seisys.v2x.pb.NodeReferenceId upstreamNodeId = 2;
  if (this->_internal_has_upstreamnodeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upstreamnodeid_);
  }

  // uint32 linkWidth = 4;
  if (this->_internal_linkwidth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_linkwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }


void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Link*>(&to_msg);
  auto& from = static_cast<const Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Link)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.speedlimits_.MergeFrom(from._impl_.speedlimits_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.movements_.MergeFrom(from._impl_.movements_);
  _this->_impl_.lanes_.MergeFrom(from._impl_.lanes_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_upstreamnodeid()) {
    _this->_internal_mutable_upstreamnodeid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_upstreamnodeid());
  }
  if (from._internal_linkwidth() != 0) {
    _this->_internal_set_linkwidth(from._internal_linkwidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speedlimits_.InternalSwap(&other->_impl_.speedlimits_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.movements_.InternalSwap(&other->_impl_.movements_);
  _impl_.lanes_.InternalSwap(&other->_impl_.lanes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Link, _impl_.linkwidth_)
      + sizeof(Link::_impl_.linkwidth_)
      - PROTOBUF_FIELD_OFFSET(Link, _impl_.upstreamnodeid_)>(
          reinterpret_cast<char*>(&_impl_.upstreamnodeid_),
          reinterpret_cast<char*>(&other->_impl_.upstreamnodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[83]);
}

// ===================================================================

class ProhibitedZone::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Polygon& centralcircleprohibitedzone(const ProhibitedZone* msg);
};

const ::cn::seisys::v2x::pb::Polygon&
ProhibitedZone::_Internal::centralcircleprohibitedzone(const ProhibitedZone* msg) {
  return *msg->_impl_.centralcircleprohibitedzone_;
}
ProhibitedZone::ProhibitedZone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ProhibitedZone)
}
ProhibitedZone::ProhibitedZone(const ProhibitedZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProhibitedZone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nonmotorvehicleprohibitedzones_){from._impl_.nonmotorvehicleprohibitedzones_}
    , decltype(_impl_.gridlinemarkingprohibitedzones_){from._impl_.gridlinemarkingprohibitedzones_}
    , decltype(_impl_.centralcircleprohibitedzone_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_centralcircleprohibitedzone()) {
    _this->_impl_.centralcircleprohibitedzone_ = new ::cn::seisys::v2x::pb::Polygon(*from._impl_.centralcircleprohibitedzone_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ProhibitedZone)
}

inline void ProhibitedZone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nonmotorvehicleprohibitedzones_){arena}
    , decltype(_impl_.gridlinemarkingprohibitedzones_){arena}
    , decltype(_impl_.centralcircleprohibitedzone_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProhibitedZone::~ProhibitedZone() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ProhibitedZone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProhibitedZone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nonmotorvehicleprohibitedzones_.~RepeatedPtrField();
  _impl_.gridlinemarkingprohibitedzones_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.centralcircleprohibitedzone_;
}

void ProhibitedZone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProhibitedZone::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ProhibitedZone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nonmotorvehicleprohibitedzones_.Clear();
  _impl_.gridlinemarkingprohibitedzones_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.centralcircleprohibitedzone_ != nullptr) {
    delete _impl_.centralcircleprohibitedzone_;
  }
  _impl_.centralcircleprohibitedzone_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProhibitedZone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.Polygon centralCircleProhibitedZone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_centralcircleprohibitedzone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Polygon nonMotorVehicleProhibitedZones = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nonmotorvehicleprohibitedzones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Polygon gridLineMarkingProhibitedZones = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gridlinemarkingprohibitedzones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProhibitedZone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ProhibitedZone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.Polygon centralCircleProhibitedZone = 1;
  if (this->_internal_has_centralcircleprohibitedzone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::centralcircleprohibitedzone(this),
        _Internal::centralcircleprohibitedzone(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Polygon nonMotorVehicleProhibitedZones = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nonmotorvehicleprohibitedzones_size()); i < n; i++) {
    const auto& repfield = this->_internal_nonmotorvehicleprohibitedzones(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Polygon gridLineMarkingProhibitedZones = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gridlinemarkingprohibitedzones_size()); i < n; i++) {
    const auto& repfield = this->_internal_gridlinemarkingprohibitedzones(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ProhibitedZone)
  return target;
}

size_t ProhibitedZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ProhibitedZone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Polygon nonMotorVehicleProhibitedZones = 2;
  total_size += 1UL * this->_internal_nonmotorvehicleprohibitedzones_size();
  for (const auto& msg : this->_impl_.nonmotorvehicleprohibitedzones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Polygon gridLineMarkingProhibitedZones = 3;
  total_size += 1UL * this->_internal_gridlinemarkingprohibitedzones_size();
  for (const auto& msg : this->_impl_.gridlinemarkingprohibitedzones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.Polygon centralCircleProhibitedZone = 1;
  if (this->_internal_has_centralcircleprohibitedzone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.centralcircleprohibitedzone_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProhibitedZone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProhibitedZone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProhibitedZone::GetClassData() const { return &_class_data_; }


void ProhibitedZone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProhibitedZone*>(&to_msg);
  auto& from = static_cast<const ProhibitedZone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ProhibitedZone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nonmotorvehicleprohibitedzones_.MergeFrom(from._impl_.nonmotorvehicleprohibitedzones_);
  _this->_impl_.gridlinemarkingprohibitedzones_.MergeFrom(from._impl_.gridlinemarkingprohibitedzones_);
  if (from._internal_has_centralcircleprohibitedzone()) {
    _this->_internal_mutable_centralcircleprohibitedzone()->::cn::seisys::v2x::pb::Polygon::MergeFrom(
        from._internal_centralcircleprohibitedzone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProhibitedZone::CopyFrom(const ProhibitedZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ProhibitedZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProhibitedZone::IsInitialized() const {
  return true;
}

void ProhibitedZone::InternalSwap(ProhibitedZone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nonmotorvehicleprohibitedzones_.InternalSwap(&other->_impl_.nonmotorvehicleprohibitedzones_);
  _impl_.gridlinemarkingprohibitedzones_.InternalSwap(&other->_impl_.gridlinemarkingprohibitedzones_);
  swap(_impl_.centralcircleprohibitedzone_, other->_impl_.centralcircleprohibitedzone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProhibitedZone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[84]);
}

// ===================================================================

class Node::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& id(const Node* msg);
  static const ::cn::seisys::v2x::pb::Position3D& refpos(const Node* msg);
  static const ::cn::seisys::v2x::pb::ProhibitedZone& prohibitedzone(const Node* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
Node::_Internal::id(const Node* msg) {
  return *msg->_impl_.id_;
}
const ::cn::seisys::v2x::pb::Position3D&
Node::_Internal::refpos(const Node* msg) {
  return *msg->_impl_.refpos_;
}
const ::cn::seisys::v2x::pb::ProhibitedZone&
Node::_Internal::prohibitedzone(const Node* msg) {
  return *msg->_impl_.prohibitedzone_;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inlinks_){from._impl_.inlinks_}
    , decltype(_impl_.inlinksex_){from._impl_.inlinksex_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.refpos_){nullptr}
    , decltype(_impl_.prohibitedzone_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.id_);
  }
  if (from._internal_has_refpos()) {
    _this->_impl_.refpos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.refpos_);
  }
  if (from._internal_has_prohibitedzone()) {
    _this->_impl_.prohibitedzone_ = new ::cn::seisys::v2x::pb::ProhibitedZone(*from._impl_.prohibitedzone_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inlinks_){arena}
    , decltype(_impl_.inlinksex_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.refpos_){nullptr}
    , decltype(_impl_.prohibitedzone_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inlinks_.~RepeatedPtrField();
  _impl_.inlinksex_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.refpos_;
  if (this != internal_default_instance()) delete _impl_.prohibitedzone_;
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inlinks_.Clear();
  _impl_.inlinksex_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.refpos_ != nullptr) {
    delete _impl_.refpos_;
  }
  _impl_.refpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prohibitedzone_ != nullptr) {
    delete _impl_.prohibitedzone_;
  }
  _impl_.prohibitedzone_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.Node.name"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D refPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_refpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Link inLinks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inlinks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.LinkEx inLinksEx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inlinksex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ProhibitedZone prohibitedZone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_prohibitedzone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.Node.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId id = 2;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.Position3D refPos = 3;
  if (this->_internal_has_refpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::refpos(this),
        _Internal::refpos(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Link inLinks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inlinks_size()); i < n; i++) {
    const auto& repfield = this->_internal_inlinks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.LinkEx inLinksEx = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inlinksex_size()); i < n; i++) {
    const auto& repfield = this->_internal_inlinksex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ProhibitedZone prohibitedZone = 6;
  if (this->_internal_has_prohibitedzone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::prohibitedzone(this),
        _Internal::prohibitedzone(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Link inLinks = 4;
  total_size += 1UL * this->_internal_inlinks_size();
  for (const auto& msg : this->_impl_.inlinks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.LinkEx inLinksEx = 5;
  total_size += 1UL * this->_internal_inlinksex_size();
  for (const auto& msg : this->_impl_.inlinksex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .cn.seisys.v2x.pb.NodeReferenceId id = 2;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  // .cn.seisys.v2x.pb.Position3D refPos = 3;
  if (this->_internal_has_refpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refpos_);
  }

  // .cn.seisys.v2x.pb.ProhibitedZone prohibitedZone = 6;
  if (this->_internal_has_prohibitedzone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prohibitedzone_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inlinks_.MergeFrom(from._impl_.inlinks_);
  _this->_impl_.inlinksex_.MergeFrom(from._impl_.inlinksex_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_id());
  }
  if (from._internal_has_refpos()) {
    _this->_internal_mutable_refpos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_refpos());
  }
  if (from._internal_has_prohibitedzone()) {
    _this->_internal_mutable_prohibitedzone()->::cn::seisys::v2x::pb::ProhibitedZone::MergeFrom(
        from._internal_prohibitedzone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inlinks_.InternalSwap(&other->_impl_.inlinks_);
  _impl_.inlinksex_.InternalSwap(&other->_impl_.inlinksex_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.prohibitedzone_)
      + sizeof(Node::_impl_.prohibitedzone_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[85]);
}

// ===================================================================

class MAP::_Internal {
 public:
};

MAP::MAP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MAP)
}
MAP::MAP(const MAP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MAP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.msgcnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msgcnt_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MAP)
}

inline void MAP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.msgcnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MAP::~MAP() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MAP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MAP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
}

void MAP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MAP::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MAP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msgcnt_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MAP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Node nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 msgCnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.msgcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MAP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MAP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated .cn.seisys.v2x.pb.Node nodes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 msgCnt = 3;
  if (this->_internal_msgcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msgcnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MAP)
  return target;
}

size_t MAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MAP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.Node nodes = 2;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  // uint32 msgCnt = 3;
  if (this->_internal_msgcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgcnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MAP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MAP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MAP::GetClassData() const { return &_class_data_; }


void MAP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MAP*>(&to_msg);
  auto& from = static_cast<const MAP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MAP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_msgcnt() != 0) {
    _this->_internal_set_msgcnt(from._internal_msgcnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MAP::CopyFrom(const MAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAP::IsInitialized() const {
  return true;
}

void MAP::InternalSwap(MAP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MAP, _impl_.msgcnt_)
      + sizeof(MAP::_impl_.msgcnt_)
      - PROTOBUF_FIELD_OFFSET(MAP, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MAP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[86]);
}

// ===================================================================

class MapData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::MAP& map(const MapData* msg);
};

const ::cn::seisys::v2x::pb::MAP&
MapData::_Internal::map(const MapData* msg) {
  return *msg->_impl_.map_;
}
MapData::MapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MapData)
}
MapData::MapData(const MapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapslice_){}
    , decltype(_impl_.etag_){}
    , decltype(_impl_.seqnum_){}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.ack_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapslice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapslice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapslice().empty()) {
    _this->_impl_.mapslice_.Set(from._internal_mapslice(), 
      _this->GetArenaForAllocation());
  }
  _impl_.etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_etag().empty()) {
    _this->_impl_.etag_.Set(from._internal_etag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.seqnum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seqnum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seqnum().empty()) {
    _this->_impl_.seqnum_.Set(from._internal_seqnum(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_map()) {
    _this->_impl_.map_ = new ::cn::seisys::v2x::pb::MAP(*from._impl_.map_);
  }
  _this->_impl_.ack_ = from._impl_.ack_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MapData)
}

inline void MapData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapslice_){}
    , decltype(_impl_.etag_){}
    , decltype(_impl_.seqnum_){}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.ack_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapslice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapslice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.seqnum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seqnum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapData::~MapData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MapData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapslice_.Destroy();
  _impl_.etag_.Destroy();
  _impl_.seqnum_.Destroy();
  if (this != internal_default_instance()) delete _impl_.map_;
}

void MapData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MapData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapslice_.ClearToEmpty();
  _impl_.etag_.ClearToEmpty();
  _impl_.seqnum_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.map_ != nullptr) {
    delete _impl_.map_;
  }
  _impl_.map_ = nullptr;
  _impl_.ack_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mapSlice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapslice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.MapData.mapSlice"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MAP map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string eTag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_etag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.MapData.eTag"));
        } else
          goto handle_unusual;
        continue;
      // bool ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string seqNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_seqnum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.MapData.seqNum"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MapData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mapSlice = 1;
  if (!this->_internal_mapslice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapslice().data(), static_cast<int>(this->_internal_mapslice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.MapData.mapSlice");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapslice(), target);
  }

  // .cn.seisys.v2x.pb.MAP map = 2;
  if (this->_internal_has_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  // string eTag = 3;
  if (!this->_internal_etag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.MapData.eTag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_etag(), target);
  }

  // bool ack = 4;
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ack(), target);
  }

  // string seqNum = 5;
  if (!this->_internal_seqnum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seqnum().data(), static_cast<int>(this->_internal_seqnum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.MapData.seqNum");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MapData)
  return target;
}

size_t MapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MapData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mapSlice = 1;
  if (!this->_internal_mapslice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapslice());
  }

  // string eTag = 3;
  if (!this->_internal_etag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // string seqNum = 5;
  if (!this->_internal_seqnum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seqnum());
  }

  // .cn.seisys.v2x.pb.MAP map = 2;
  if (this->_internal_has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_);
  }

  // bool ack = 4;
  if (this->_internal_ack() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapData::GetClassData() const { return &_class_data_; }


void MapData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapData*>(&to_msg);
  auto& from = static_cast<const MapData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MapData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapslice().empty()) {
    _this->_internal_set_mapslice(from._internal_mapslice());
  }
  if (!from._internal_etag().empty()) {
    _this->_internal_set_etag(from._internal_etag());
  }
  if (!from._internal_seqnum().empty()) {
    _this->_internal_set_seqnum(from._internal_seqnum());
  }
  if (from._internal_has_map()) {
    _this->_internal_mutable_map()->::cn::seisys::v2x::pb::MAP::MergeFrom(
        from._internal_map());
  }
  if (from._internal_ack() != 0) {
    _this->_internal_set_ack(from._internal_ack());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapData::CopyFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  return true;
}

void MapData::InternalSwap(MapData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapslice_, lhs_arena,
      &other->_impl_.mapslice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.etag_, lhs_arena,
      &other->_impl_.etag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seqnum_, lhs_arena,
      &other->_impl_.seqnum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapData, _impl_.ack_)
      + sizeof(MapData::_impl_.ack_)
      - PROTOBUF_FIELD_OFFSET(MapData, _impl_.map_)>(
          reinterpret_cast<char*>(&_impl_.map_),
          reinterpret_cast<char*>(&other->_impl_.map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[87]);
}

// ===================================================================

class ReqLaneChange::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& upstreamnode(const ReqLaneChange* msg);
  static const ::cn::seisys::v2x::pb::NodeReferenceId& downstreamnode(const ReqLaneChange* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
ReqLaneChange::_Internal::upstreamnode(const ReqLaneChange* msg) {
  return *msg->_impl_.upstreamnode_;
}
const ::cn::seisys::v2x::pb::NodeReferenceId&
ReqLaneChange::_Internal::downstreamnode(const ReqLaneChange* msg) {
  return *msg->_impl_.downstreamnode_;
}
ReqLaneChange::ReqLaneChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReqLaneChange)
}
ReqLaneChange::ReqLaneChange(const ReqLaneChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqLaneChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upstreamnode_){nullptr}
    , decltype(_impl_.downstreamnode_){nullptr}
    , decltype(_impl_.targetlane_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upstreamnode()) {
    _this->_impl_.upstreamnode_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.upstreamnode_);
  }
  if (from._internal_has_downstreamnode()) {
    _this->_impl_.downstreamnode_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.downstreamnode_);
  }
  _this->_impl_.targetlane_ = from._impl_.targetlane_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReqLaneChange)
}

inline void ReqLaneChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upstreamnode_){nullptr}
    , decltype(_impl_.downstreamnode_){nullptr}
    , decltype(_impl_.targetlane_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReqLaneChange::~ReqLaneChange() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReqLaneChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqLaneChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.upstreamnode_;
  if (this != internal_default_instance()) delete _impl_.downstreamnode_;
}

void ReqLaneChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqLaneChange::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReqLaneChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.upstreamnode_ != nullptr) {
    delete _impl_.upstreamnode_;
  }
  _impl_.upstreamnode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.downstreamnode_ != nullptr) {
    delete _impl_.downstreamnode_;
  }
  _impl_.downstreamnode_ = nullptr;
  _impl_.targetlane_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLaneChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId upStreamNode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_upstreamnode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId downStreamNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_downstreamnode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 targetLane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.targetlane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqLaneChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReqLaneChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId upStreamNode = 1;
  if (this->_internal_has_upstreamnode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::upstreamnode(this),
        _Internal::upstreamnode(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId downStreamNode = 2;
  if (this->_internal_has_downstreamnode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::downstreamnode(this),
        _Internal::downstreamnode(this).GetCachedSize(), target, stream);
  }

  // uint32 targetLane = 3;
  if (this->_internal_targetlane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_targetlane(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReqLaneChange)
  return target;
}

size_t ReqLaneChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReqLaneChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId upStreamNode = 1;
  if (this->_internal_has_upstreamnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upstreamnode_);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId downStreamNode = 2;
  if (this->_internal_has_downstreamnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.downstreamnode_);
  }

  // uint32 targetLane = 3;
  if (this->_internal_targetlane() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetlane());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqLaneChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqLaneChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqLaneChange::GetClassData() const { return &_class_data_; }


void ReqLaneChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqLaneChange*>(&to_msg);
  auto& from = static_cast<const ReqLaneChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReqLaneChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_upstreamnode()) {
    _this->_internal_mutable_upstreamnode()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_upstreamnode());
  }
  if (from._internal_has_downstreamnode()) {
    _this->_internal_mutable_downstreamnode()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_downstreamnode());
  }
  if (from._internal_targetlane() != 0) {
    _this->_internal_set_targetlane(from._internal_targetlane());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqLaneChange::CopyFrom(const ReqLaneChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReqLaneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLaneChange::IsInitialized() const {
  return true;
}

void ReqLaneChange::InternalSwap(ReqLaneChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqLaneChange, _impl_.targetlane_)
      + sizeof(ReqLaneChange::_impl_.targetlane_)
      - PROTOBUF_FIELD_OFFSET(ReqLaneChange, _impl_.upstreamnode_)>(
          reinterpret_cast<char*>(&_impl_.upstreamnode_),
          reinterpret_cast<char*>(&other->_impl_.upstreamnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLaneChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[88]);
}

// ===================================================================

class ReqClearTheWay::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& upstreamnode(const ReqClearTheWay* msg);
  static const ::cn::seisys::v2x::pb::NodeReferenceId& downstreamnode(const ReqClearTheWay* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
ReqClearTheWay::_Internal::upstreamnode(const ReqClearTheWay* msg) {
  return *msg->_impl_.upstreamnode_;
}
const ::cn::seisys::v2x::pb::NodeReferenceId&
ReqClearTheWay::_Internal::downstreamnode(const ReqClearTheWay* msg) {
  return *msg->_impl_.downstreamnode_;
}
ReqClearTheWay::ReqClearTheWay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReqClearTheWay)
}
ReqClearTheWay::ReqClearTheWay(const ReqClearTheWay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqClearTheWay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upstreamnode_){nullptr}
    , decltype(_impl_.downstreamnode_){nullptr}
    , decltype(_impl_.targetlane_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upstreamnode()) {
    _this->_impl_.upstreamnode_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.upstreamnode_);
  }
  if (from._internal_has_downstreamnode()) {
    _this->_impl_.downstreamnode_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.downstreamnode_);
  }
  _this->_impl_.targetlane_ = from._impl_.targetlane_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReqClearTheWay)
}

inline void ReqClearTheWay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upstreamnode_){nullptr}
    , decltype(_impl_.downstreamnode_){nullptr}
    , decltype(_impl_.targetlane_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReqClearTheWay::~ReqClearTheWay() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReqClearTheWay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqClearTheWay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.upstreamnode_;
  if (this != internal_default_instance()) delete _impl_.downstreamnode_;
}

void ReqClearTheWay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqClearTheWay::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReqClearTheWay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.upstreamnode_ != nullptr) {
    delete _impl_.upstreamnode_;
  }
  _impl_.upstreamnode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.downstreamnode_ != nullptr) {
    delete _impl_.downstreamnode_;
  }
  _impl_.downstreamnode_ = nullptr;
  _impl_.targetlane_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqClearTheWay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId upStreamNode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_upstreamnode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.NodeReferenceId downStreamNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_downstreamnode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 targetLane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.targetlane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqClearTheWay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReqClearTheWay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId upStreamNode = 1;
  if (this->_internal_has_upstreamnode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::upstreamnode(this),
        _Internal::upstreamnode(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId downStreamNode = 2;
  if (this->_internal_has_downstreamnode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::downstreamnode(this),
        _Internal::downstreamnode(this).GetCachedSize(), target, stream);
  }

  // uint32 targetLane = 3;
  if (this->_internal_targetlane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_targetlane(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReqClearTheWay)
  return target;
}

size_t ReqClearTheWay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReqClearTheWay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId upStreamNode = 1;
  if (this->_internal_has_upstreamnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upstreamnode_);
  }

  // .cn.seisys.v2x.pb.NodeReferenceId downStreamNode = 2;
  if (this->_internal_has_downstreamnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.downstreamnode_);
  }

  // uint32 targetLane = 3;
  if (this->_internal_targetlane() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetlane());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqClearTheWay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqClearTheWay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqClearTheWay::GetClassData() const { return &_class_data_; }


void ReqClearTheWay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqClearTheWay*>(&to_msg);
  auto& from = static_cast<const ReqClearTheWay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReqClearTheWay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_upstreamnode()) {
    _this->_internal_mutable_upstreamnode()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_upstreamnode());
  }
  if (from._internal_has_downstreamnode()) {
    _this->_internal_mutable_downstreamnode()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_downstreamnode());
  }
  if (from._internal_targetlane() != 0) {
    _this->_internal_set_targetlane(from._internal_targetlane());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqClearTheWay::CopyFrom(const ReqClearTheWay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReqClearTheWay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClearTheWay::IsInitialized() const {
  return true;
}

void ReqClearTheWay::InternalSwap(ReqClearTheWay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqClearTheWay, _impl_.targetlane_)
      + sizeof(ReqClearTheWay::_impl_.targetlane_)
      - PROTOBUF_FIELD_OFFSET(ReqClearTheWay, _impl_.upstreamnode_)>(
          reinterpret_cast<char*>(&_impl_.upstreamnode_),
          reinterpret_cast<char*>(&other->_impl_.upstreamnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqClearTheWay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[89]);
}

// ===================================================================

class ReqSignalPriority::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::NodeReferenceId& intersectionid(const ReqSignalPriority* msg);
  static const ::cn::seisys::v2x::pb::MovementStatInfo& requiredmove(const ReqSignalPriority* msg);
};

const ::cn::seisys::v2x::pb::NodeReferenceId&
ReqSignalPriority::_Internal::intersectionid(const ReqSignalPriority* msg) {
  return *msg->_impl_.intersectionid_;
}
const ::cn::seisys::v2x::pb::MovementStatInfo&
ReqSignalPriority::_Internal::requiredmove(const ReqSignalPriority* msg) {
  return *msg->_impl_.requiredmove_;
}
ReqSignalPriority::ReqSignalPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReqSignalPriority)
}
ReqSignalPriority::ReqSignalPriority(const ReqSignalPriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqSignalPriority* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.intersectionid_){nullptr}
    , decltype(_impl_.requiredmove_){nullptr}
    , decltype(_impl_.estimatedarrivaltime_){}
    , decltype(_impl_.distance2intersection_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_intersectionid()) {
    _this->_impl_.intersectionid_ = new ::cn::seisys::v2x::pb::NodeReferenceId(*from._impl_.intersectionid_);
  }
  if (from._internal_has_requiredmove()) {
    _this->_impl_.requiredmove_ = new ::cn::seisys::v2x::pb::MovementStatInfo(*from._impl_.requiredmove_);
  }
  ::memcpy(&_impl_.estimatedarrivaltime_, &from._impl_.estimatedarrivaltime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance2intersection_) -
    reinterpret_cast<char*>(&_impl_.estimatedarrivaltime_)) + sizeof(_impl_.distance2intersection_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReqSignalPriority)
}

inline void ReqSignalPriority::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.intersectionid_){nullptr}
    , decltype(_impl_.requiredmove_){nullptr}
    , decltype(_impl_.estimatedarrivaltime_){0u}
    , decltype(_impl_.distance2intersection_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReqSignalPriority::~ReqSignalPriority() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReqSignalPriority)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSignalPriority::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.intersectionid_;
  if (this != internal_default_instance()) delete _impl_.requiredmove_;
}

void ReqSignalPriority::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqSignalPriority::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReqSignalPriority)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.intersectionid_ != nullptr) {
    delete _impl_.intersectionid_;
  }
  _impl_.intersectionid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.requiredmove_ != nullptr) {
    delete _impl_.requiredmove_;
  }
  _impl_.requiredmove_ = nullptr;
  ::memset(&_impl_.estimatedarrivaltime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distance2intersection_) -
      reinterpret_cast<char*>(&_impl_.estimatedarrivaltime_)) + sizeof(_impl_.distance2intersection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSignalPriority::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.NodeReferenceId intersectionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersectionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.MovementStatInfo requiredMove = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requiredmove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 estimatedArrivalTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.estimatedarrivaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 distance2Intersection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.distance2intersection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSignalPriority::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReqSignalPriority)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId intersectionId = 1;
  if (this->_internal_has_intersectionid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::intersectionid(this),
        _Internal::intersectionid(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.MovementStatInfo requiredMove = 2;
  if (this->_internal_has_requiredmove()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::requiredmove(this),
        _Internal::requiredmove(this).GetCachedSize(), target, stream);
  }

  // uint32 estimatedArrivalTime = 3;
  if (this->_internal_estimatedarrivaltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_estimatedarrivaltime(), target);
  }

  // uint32 distance2Intersection = 4;
  if (this->_internal_distance2intersection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_distance2intersection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReqSignalPriority)
  return target;
}

size_t ReqSignalPriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReqSignalPriority)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.NodeReferenceId intersectionId = 1;
  if (this->_internal_has_intersectionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.intersectionid_);
  }

  // .cn.seisys.v2x.pb.MovementStatInfo requiredMove = 2;
  if (this->_internal_has_requiredmove()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requiredmove_);
  }

  // uint32 estimatedArrivalTime = 3;
  if (this->_internal_estimatedarrivaltime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_estimatedarrivaltime());
  }

  // uint32 distance2Intersection = 4;
  if (this->_internal_distance2intersection() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distance2intersection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSignalPriority::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqSignalPriority::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSignalPriority::GetClassData() const { return &_class_data_; }


void ReqSignalPriority::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqSignalPriority*>(&to_msg);
  auto& from = static_cast<const ReqSignalPriority&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReqSignalPriority)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_intersectionid()) {
    _this->_internal_mutable_intersectionid()->::cn::seisys::v2x::pb::NodeReferenceId::MergeFrom(
        from._internal_intersectionid());
  }
  if (from._internal_has_requiredmove()) {
    _this->_internal_mutable_requiredmove()->::cn::seisys::v2x::pb::MovementStatInfo::MergeFrom(
        from._internal_requiredmove());
  }
  if (from._internal_estimatedarrivaltime() != 0) {
    _this->_internal_set_estimatedarrivaltime(from._internal_estimatedarrivaltime());
  }
  if (from._internal_distance2intersection() != 0) {
    _this->_internal_set_distance2intersection(from._internal_distance2intersection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSignalPriority::CopyFrom(const ReqSignalPriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReqSignalPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSignalPriority::IsInitialized() const {
  return true;
}

void ReqSignalPriority::InternalSwap(ReqSignalPriority* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSignalPriority, _impl_.distance2intersection_)
      + sizeof(ReqSignalPriority::_impl_.distance2intersection_)
      - PROTOBUF_FIELD_OFFSET(ReqSignalPriority, _impl_.intersectionid_)>(
          reinterpret_cast<char*>(&_impl_.intersectionid_),
          reinterpret_cast<char*>(&other->_impl_.intersectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSignalPriority::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[90]);
}

// ===================================================================

class ReqSensorSharing::_Internal {
 public:
};

ReqSensorSharing::ReqSensorSharing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReqSensorSharing)
}
ReqSensorSharing::ReqSensorSharing(const ReqSensorSharing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqSensorSharing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detectorarea_){from._impl_.detectorarea_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReqSensorSharing)
}

inline void ReqSensorSharing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detectorarea_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReqSensorSharing::~ReqSensorSharing() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReqSensorSharing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqSensorSharing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detectorarea_.~RepeatedPtrField();
}

void ReqSensorSharing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqSensorSharing::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReqSensorSharing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detectorarea_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSensorSharing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.seisys.v2x.pb.ReferencePath detectorArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detectorarea(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqSensorSharing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReqSensorSharing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.ReferencePath detectorArea = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detectorarea_size()); i < n; i++) {
    const auto& repfield = this->_internal_detectorarea(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReqSensorSharing)
  return target;
}

size_t ReqSensorSharing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReqSensorSharing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.ReferencePath detectorArea = 1;
  total_size += 1UL * this->_internal_detectorarea_size();
  for (const auto& msg : this->_impl_.detectorarea_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqSensorSharing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqSensorSharing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqSensorSharing::GetClassData() const { return &_class_data_; }


void ReqSensorSharing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqSensorSharing*>(&to_msg);
  auto& from = static_cast<const ReqSensorSharing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReqSensorSharing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.detectorarea_.MergeFrom(from._impl_.detectorarea_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSensorSharing::CopyFrom(const ReqSensorSharing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReqSensorSharing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSensorSharing::IsInitialized() const {
  return true;
}

void ReqSensorSharing::InternalSwap(ReqSensorSharing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.detectorarea_.InternalSwap(&other->_impl_.detectorarea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSensorSharing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[91]);
}

// ===================================================================

class ParkingRequest::_Internal {
 public:
};

ParkingRequest::ParkingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ParkingRequest)
}
ParkingRequest::ParkingRequest(const ParkingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParkingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.req_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.req_ = from._impl_.req_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ParkingRequest)
}

inline void ParkingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.req_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParkingRequest::~ParkingRequest() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ParkingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParkingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParkingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParkingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ParkingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.req_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParkingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ParkingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 req = 1;
  if (this->_internal_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_req(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ParkingRequest)
  return target;
}

size_t ParkingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ParkingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 req = 1;
  if (this->_internal_req() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_req());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParkingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParkingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParkingRequest::GetClassData() const { return &_class_data_; }


void ParkingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParkingRequest*>(&to_msg);
  auto& from = static_cast<const ParkingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ParkingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_req() != 0) {
    _this->_internal_set_req(from._internal_req());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParkingRequest::CopyFrom(const ParkingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ParkingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingRequest::IsInitialized() const {
  return true;
}

void ParkingRequest::InternalSwap(ParkingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.req_, other->_impl_.req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[92]);
}

// ===================================================================

class ParkingType::_Internal {
 public:
};

ParkingType::ParkingType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ParkingType)
}
ParkingType::ParkingType(const ParkingType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParkingType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parkingtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parkingtype_ = from._impl_.parkingtype_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ParkingType)
}

inline void ParkingType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parkingtype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParkingType::~ParkingType() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ParkingType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParkingType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParkingType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParkingType::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ParkingType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parkingtype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 parkingType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.parkingtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParkingType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ParkingType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 parkingType = 1;
  if (this->_internal_parkingtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_parkingtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ParkingType)
  return target;
}

size_t ParkingType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ParkingType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 parkingType = 1;
  if (this->_internal_parkingtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parkingtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParkingType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParkingType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParkingType::GetClassData() const { return &_class_data_; }


void ParkingType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParkingType*>(&to_msg);
  auto& from = static_cast<const ParkingType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ParkingType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_parkingtype() != 0) {
    _this->_internal_set_parkingtype(from._internal_parkingtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParkingType::CopyFrom(const ParkingType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ParkingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingType::IsInitialized() const {
  return true;
}

void ParkingType::InternalSwap(ParkingType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.parkingtype_, other->_impl_.parkingtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[93]);
}

// ===================================================================

class ReqParkingArea::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::ParkingRequest& req(const ReqParkingArea* msg);
  static const ::cn::seisys::v2x::pb::ParkingType& parkingtype(const ReqParkingArea* msg);
};

const ::cn::seisys::v2x::pb::ParkingRequest&
ReqParkingArea::_Internal::req(const ReqParkingArea* msg) {
  return *msg->_impl_.req_;
}
const ::cn::seisys::v2x::pb::ParkingType&
ReqParkingArea::_Internal::parkingtype(const ReqParkingArea* msg) {
  return *msg->_impl_.parkingtype_;
}
ReqParkingArea::ReqParkingArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReqParkingArea)
}
ReqParkingArea::ReqParkingArea(const ReqParkingArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqParkingArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.req_){nullptr}
    , decltype(_impl_.parkingtype_){nullptr}
    , decltype(_impl_.vehicletype_){}
    , decltype(_impl_.expectedparkingslotid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    _this->_impl_.req_ = new ::cn::seisys::v2x::pb::ParkingRequest(*from._impl_.req_);
  }
  if (from._internal_has_parkingtype()) {
    _this->_impl_.parkingtype_ = new ::cn::seisys::v2x::pb::ParkingType(*from._impl_.parkingtype_);
  }
  ::memcpy(&_impl_.vehicletype_, &from._impl_.vehicletype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expectedparkingslotid_) -
    reinterpret_cast<char*>(&_impl_.vehicletype_)) + sizeof(_impl_.expectedparkingslotid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReqParkingArea)
}

inline void ReqParkingArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.req_){nullptr}
    , decltype(_impl_.parkingtype_){nullptr}
    , decltype(_impl_.vehicletype_){0}
    , decltype(_impl_.expectedparkingslotid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReqParkingArea::~ReqParkingArea() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReqParkingArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqParkingArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.req_;
  if (this != internal_default_instance()) delete _impl_.parkingtype_;
}

void ReqParkingArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqParkingArea::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReqParkingArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.req_ != nullptr) {
    delete _impl_.req_;
  }
  _impl_.req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.parkingtype_ != nullptr) {
    delete _impl_.parkingtype_;
  }
  _impl_.parkingtype_ = nullptr;
  ::memset(&_impl_.vehicletype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.expectedparkingslotid_) -
      reinterpret_cast<char*>(&_impl_.vehicletype_)) + sizeof(_impl_.expectedparkingslotid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqParkingArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.VehicleType vehicleType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehicletype(static_cast<::cn::seisys::v2x::pb::VehicleType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParkingRequest req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ParkingType parkingType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parkingtype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expectedParkingSlotId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.expectedparkingslotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqParkingArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReqParkingArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 1;
  if (this->_internal_vehicletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_vehicletype(), target);
  }

  // .cn.seisys.v2x.pb.ParkingRequest req = 2;
  if (this->_internal_has_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::req(this),
        _Internal::req(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ParkingType parkingType = 3;
  if (this->_internal_has_parkingtype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::parkingtype(this),
        _Internal::parkingtype(this).GetCachedSize(), target, stream);
  }

  // uint32 expectedParkingSlotId = 4;
  if (this->_internal_expectedparkingslotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_expectedparkingslotid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReqParkingArea)
  return target;
}

size_t ReqParkingArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReqParkingArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.ParkingRequest req = 2;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.req_);
  }

  // .cn.seisys.v2x.pb.ParkingType parkingType = 3;
  if (this->_internal_has_parkingtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parkingtype_);
  }

  // .cn.seisys.v2x.pb.VehicleType vehicleType = 1;
  if (this->_internal_vehicletype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicletype());
  }

  // uint32 expectedParkingSlotId = 4;
  if (this->_internal_expectedparkingslotid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expectedparkingslotid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqParkingArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqParkingArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqParkingArea::GetClassData() const { return &_class_data_; }


void ReqParkingArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqParkingArea*>(&to_msg);
  auto& from = static_cast<const ReqParkingArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReqParkingArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_req()) {
    _this->_internal_mutable_req()->::cn::seisys::v2x::pb::ParkingRequest::MergeFrom(
        from._internal_req());
  }
  if (from._internal_has_parkingtype()) {
    _this->_internal_mutable_parkingtype()->::cn::seisys::v2x::pb::ParkingType::MergeFrom(
        from._internal_parkingtype());
  }
  if (from._internal_vehicletype() != 0) {
    _this->_internal_set_vehicletype(from._internal_vehicletype());
  }
  if (from._internal_expectedparkingslotid() != 0) {
    _this->_internal_set_expectedparkingslotid(from._internal_expectedparkingslotid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqParkingArea::CopyFrom(const ReqParkingArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReqParkingArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqParkingArea::IsInitialized() const {
  return true;
}

void ReqParkingArea::InternalSwap(ReqParkingArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqParkingArea, _impl_.expectedparkingslotid_)
      + sizeof(ReqParkingArea::_impl_.expectedparkingslotid_)
      - PROTOBUF_FIELD_OFFSET(ReqParkingArea, _impl_.req_)>(
          reinterpret_cast<char*>(&_impl_.req_),
          reinterpret_cast<char*>(&other->_impl_.req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqParkingArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[94]);
}

// ===================================================================

class ReqInfo::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::ReqLaneChange& lanechange(const ReqInfo* msg);
  static const ::cn::seisys::v2x::pb::ReqClearTheWay& cleartheway(const ReqInfo* msg);
  static const ::cn::seisys::v2x::pb::ReqSignalPriority& signalpriority(const ReqInfo* msg);
  static const ::cn::seisys::v2x::pb::ReqSensorSharing& sensorsharing(const ReqInfo* msg);
  static const ::cn::seisys::v2x::pb::ReqParkingArea& parking(const ReqInfo* msg);
};

const ::cn::seisys::v2x::pb::ReqLaneChange&
ReqInfo::_Internal::lanechange(const ReqInfo* msg) {
  return *msg->_impl_.ReqInfoOneOf_.lanechange_;
}
const ::cn::seisys::v2x::pb::ReqClearTheWay&
ReqInfo::_Internal::cleartheway(const ReqInfo* msg) {
  return *msg->_impl_.ReqInfoOneOf_.cleartheway_;
}
const ::cn::seisys::v2x::pb::ReqSignalPriority&
ReqInfo::_Internal::signalpriority(const ReqInfo* msg) {
  return *msg->_impl_.ReqInfoOneOf_.signalpriority_;
}
const ::cn::seisys::v2x::pb::ReqSensorSharing&
ReqInfo::_Internal::sensorsharing(const ReqInfo* msg) {
  return *msg->_impl_.ReqInfoOneOf_.sensorsharing_;
}
const ::cn::seisys::v2x::pb::ReqParkingArea&
ReqInfo::_Internal::parking(const ReqInfo* msg) {
  return *msg->_impl_.ReqInfoOneOf_.parking_;
}
void ReqInfo::set_allocated_lanechange(::cn::seisys::v2x::pb::ReqLaneChange* lanechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ReqInfoOneOf();
  if (lanechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lanechange);
    if (message_arena != submessage_arena) {
      lanechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lanechange, submessage_arena);
    }
    set_has_lanechange();
    _impl_.ReqInfoOneOf_.lanechange_ = lanechange;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.ReqInfo.laneChange)
}
void ReqInfo::set_allocated_cleartheway(::cn::seisys::v2x::pb::ReqClearTheWay* cleartheway) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ReqInfoOneOf();
  if (cleartheway) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cleartheway);
    if (message_arena != submessage_arena) {
      cleartheway = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleartheway, submessage_arena);
    }
    set_has_cleartheway();
    _impl_.ReqInfoOneOf_.cleartheway_ = cleartheway;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.ReqInfo.clearTheWay)
}
void ReqInfo::set_allocated_signalpriority(::cn::seisys::v2x::pb::ReqSignalPriority* signalpriority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ReqInfoOneOf();
  if (signalpriority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signalpriority);
    if (message_arena != submessage_arena) {
      signalpriority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signalpriority, submessage_arena);
    }
    set_has_signalpriority();
    _impl_.ReqInfoOneOf_.signalpriority_ = signalpriority;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.ReqInfo.signalPriority)
}
void ReqInfo::set_allocated_sensorsharing(::cn::seisys::v2x::pb::ReqSensorSharing* sensorsharing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ReqInfoOneOf();
  if (sensorsharing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sensorsharing);
    if (message_arena != submessage_arena) {
      sensorsharing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensorsharing, submessage_arena);
    }
    set_has_sensorsharing();
    _impl_.ReqInfoOneOf_.sensorsharing_ = sensorsharing;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.ReqInfo.sensorSharing)
}
void ReqInfo::set_allocated_parking(::cn::seisys::v2x::pb::ReqParkingArea* parking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ReqInfoOneOf();
  if (parking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parking);
    if (message_arena != submessage_arena) {
      parking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking, submessage_arena);
    }
    set_has_parking();
    _impl_.ReqInfoOneOf_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.v2x.pb.ReqInfo.parking)
}
ReqInfo::ReqInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.ReqInfo)
}
ReqInfo::ReqInfo(const ReqInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReqInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ReqInfoOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ReqInfoOneOf();
  switch (from.ReqInfoOneOf_case()) {
    case kLaneChange: {
      _this->_internal_mutable_lanechange()->::cn::seisys::v2x::pb::ReqLaneChange::MergeFrom(
          from._internal_lanechange());
      break;
    }
    case kClearTheWay: {
      _this->_internal_mutable_cleartheway()->::cn::seisys::v2x::pb::ReqClearTheWay::MergeFrom(
          from._internal_cleartheway());
      break;
    }
    case kSignalPriority: {
      _this->_internal_mutable_signalpriority()->::cn::seisys::v2x::pb::ReqSignalPriority::MergeFrom(
          from._internal_signalpriority());
      break;
    }
    case kSensorSharing: {
      _this->_internal_mutable_sensorsharing()->::cn::seisys::v2x::pb::ReqSensorSharing::MergeFrom(
          from._internal_sensorsharing());
      break;
    }
    case kParking: {
      _this->_internal_mutable_parking()->::cn::seisys::v2x::pb::ReqParkingArea::MergeFrom(
          from._internal_parking());
      break;
    }
    case REQINFOONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.ReqInfo)
}

inline void ReqInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ReqInfoOneOf_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ReqInfoOneOf();
}

ReqInfo::~ReqInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.ReqInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReqInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ReqInfoOneOf()) {
    clear_ReqInfoOneOf();
  }
}

void ReqInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReqInfo::clear_ReqInfoOneOf() {
// @@protoc_insertion_point(one_of_clear_start:cn.seisys.v2x.pb.ReqInfo)
  switch (ReqInfoOneOf_case()) {
    case kLaneChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ReqInfoOneOf_.lanechange_;
      }
      break;
    }
    case kClearTheWay: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ReqInfoOneOf_.cleartheway_;
      }
      break;
    }
    case kSignalPriority: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ReqInfoOneOf_.signalpriority_;
      }
      break;
    }
    case kSensorSharing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ReqInfoOneOf_.sensorsharing_;
      }
      break;
    }
    case kParking: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ReqInfoOneOf_.parking_;
      }
      break;
    }
    case REQINFOONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQINFOONEOF_NOT_SET;
}


void ReqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.ReqInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ReqInfoOneOf();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.ReqLaneChange laneChange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lanechange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReqClearTheWay clearTheWay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleartheway(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReqSignalPriority signalPriority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_signalpriority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReqSensorSharing sensorSharing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensorsharing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReqParkingArea parking = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.ReqInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.ReqLaneChange laneChange = 1;
  if (_internal_has_lanechange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lanechange(this),
        _Internal::lanechange(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ReqClearTheWay clearTheWay = 2;
  if (_internal_has_cleartheway()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cleartheway(this),
        _Internal::cleartheway(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ReqSignalPriority signalPriority = 3;
  if (_internal_has_signalpriority()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::signalpriority(this),
        _Internal::signalpriority(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ReqSensorSharing sensorSharing = 4;
  if (_internal_has_sensorsharing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sensorsharing(this),
        _Internal::sensorsharing(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ReqParkingArea parking = 5;
  if (_internal_has_parking()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::parking(this),
        _Internal::parking(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.ReqInfo)
  return target;
}

size_t ReqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.ReqInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ReqInfoOneOf_case()) {
    // .cn.seisys.v2x.pb.ReqLaneChange laneChange = 1;
    case kLaneChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ReqInfoOneOf_.lanechange_);
      break;
    }
    // .cn.seisys.v2x.pb.ReqClearTheWay clearTheWay = 2;
    case kClearTheWay: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ReqInfoOneOf_.cleartheway_);
      break;
    }
    // .cn.seisys.v2x.pb.ReqSignalPriority signalPriority = 3;
    case kSignalPriority: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ReqInfoOneOf_.signalpriority_);
      break;
    }
    // .cn.seisys.v2x.pb.ReqSensorSharing sensorSharing = 4;
    case kSensorSharing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ReqInfoOneOf_.sensorsharing_);
      break;
    }
    // .cn.seisys.v2x.pb.ReqParkingArea parking = 5;
    case kParking: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ReqInfoOneOf_.parking_);
      break;
    }
    case REQINFOONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReqInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqInfo::GetClassData() const { return &_class_data_; }


void ReqInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReqInfo*>(&to_msg);
  auto& from = static_cast<const ReqInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.ReqInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ReqInfoOneOf_case()) {
    case kLaneChange: {
      _this->_internal_mutable_lanechange()->::cn::seisys::v2x::pb::ReqLaneChange::MergeFrom(
          from._internal_lanechange());
      break;
    }
    case kClearTheWay: {
      _this->_internal_mutable_cleartheway()->::cn::seisys::v2x::pb::ReqClearTheWay::MergeFrom(
          from._internal_cleartheway());
      break;
    }
    case kSignalPriority: {
      _this->_internal_mutable_signalpriority()->::cn::seisys::v2x::pb::ReqSignalPriority::MergeFrom(
          from._internal_signalpriority());
      break;
    }
    case kSensorSharing: {
      _this->_internal_mutable_sensorsharing()->::cn::seisys::v2x::pb::ReqSensorSharing::MergeFrom(
          from._internal_sensorsharing());
      break;
    }
    case kParking: {
      _this->_internal_mutable_parking()->::cn::seisys::v2x::pb::ReqParkingArea::MergeFrom(
          from._internal_parking());
      break;
    }
    case REQINFOONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqInfo::CopyFrom(const ReqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.ReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInfo::IsInitialized() const {
  return true;
}

void ReqInfo::InternalSwap(ReqInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ReqInfoOneOf_, other->_impl_.ReqInfoOneOf_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[95]);
}

// ===================================================================

class DriveRequest::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::ReqInfo& info(const DriveRequest* msg);
};

const ::cn::seisys::v2x::pb::ReqInfo&
DriveRequest::_Internal::info(const DriveRequest* msg) {
  return *msg->_impl_.info_;
}
DriveRequest::DriveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.DriveRequest)
}
DriveRequest::DriveRequest(const DriveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DriveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reqpriority_){}
    , decltype(_impl_.targetveh_){}
    , decltype(_impl_.targetrsu_){}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.reqid_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.lifetime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reqpriority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqpriority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reqpriority().empty()) {
    _this->_impl_.reqpriority_.Set(from._internal_reqpriority(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetveh_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetveh_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetveh().empty()) {
    _this->_impl_.targetveh_.Set(from._internal_targetveh(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetrsu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetrsu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetrsu().empty()) {
    _this->_impl_.targetrsu_.Set(from._internal_targetrsu(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::cn::seisys::v2x::pb::ReqInfo(*from._impl_.info_);
  }
  ::memcpy(&_impl_.reqid_, &from._impl_.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lifetime_) -
    reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.lifetime_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.DriveRequest)
}

inline void DriveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reqpriority_){}
    , decltype(_impl_.targetveh_){}
    , decltype(_impl_.targetrsu_){}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.reqid_){0u}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.lifetime_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reqpriority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reqpriority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetveh_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetveh_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetrsu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetrsu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DriveRequest::~DriveRequest() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.DriveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DriveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reqpriority_.Destroy();
  _impl_.targetveh_.Destroy();
  _impl_.targetrsu_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void DriveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DriveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.DriveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reqpriority_.ClearToEmpty();
  _impl_.targetveh_.ClearToEmpty();
  _impl_.targetrsu_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  ::memset(&_impl_.reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lifetime_) -
      reinterpret_cast<char*>(&_impl_.reqid_)) + sizeof(_impl_.lifetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DriveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DriveRequest.ReqStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::cn::seisys::v2x::pb::DriveRequest_ReqStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string reqPriority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reqpriority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.DriveRequest.reqPriority"));
        } else
          goto handle_unusual;
        continue;
      // string targetVeh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_targetveh();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.DriveRequest.targetVeh"));
        } else
          goto handle_unusual;
        continue;
      // string targetRsu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_targetrsu();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.DriveRequest.targetRsu"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReqInfo info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lifeTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DriveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.DriveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reqId = 1;
  if (this->_internal_reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reqid(), target);
  }

  // .cn.seisys.v2x.pb.DriveRequest.ReqStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string reqPriority = 3;
  if (!this->_internal_reqpriority().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reqpriority().data(), static_cast<int>(this->_internal_reqpriority().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.DriveRequest.reqPriority");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reqpriority(), target);
  }

  // string targetVeh = 4;
  if (!this->_internal_targetveh().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetveh().data(), static_cast<int>(this->_internal_targetveh().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.DriveRequest.targetVeh");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_targetveh(), target);
  }

  // string targetRsu = 5;
  if (!this->_internal_targetrsu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetrsu().data(), static_cast<int>(this->_internal_targetrsu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.DriveRequest.targetRsu");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_targetrsu(), target);
  }

  // .cn.seisys.v2x.pb.ReqInfo info = 6;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // uint32 lifeTime = 7;
  if (this->_internal_lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lifetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.DriveRequest)
  return target;
}

size_t DriveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.DriveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reqPriority = 3;
  if (!this->_internal_reqpriority().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reqpriority());
  }

  // string targetVeh = 4;
  if (!this->_internal_targetveh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetveh());
  }

  // string targetRsu = 5;
  if (!this->_internal_targetrsu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetrsu());
  }

  // .cn.seisys.v2x.pb.ReqInfo info = 6;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // uint32 reqId = 1;
  if (this->_internal_reqid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reqid());
  }

  // .cn.seisys.v2x.pb.DriveRequest.ReqStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 lifeTime = 7;
  if (this->_internal_lifetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lifetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DriveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DriveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DriveRequest::GetClassData() const { return &_class_data_; }


void DriveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DriveRequest*>(&to_msg);
  auto& from = static_cast<const DriveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.DriveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reqpriority().empty()) {
    _this->_internal_set_reqpriority(from._internal_reqpriority());
  }
  if (!from._internal_targetveh().empty()) {
    _this->_internal_set_targetveh(from._internal_targetveh());
  }
  if (!from._internal_targetrsu().empty()) {
    _this->_internal_set_targetrsu(from._internal_targetrsu());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::cn::seisys::v2x::pb::ReqInfo::MergeFrom(
        from._internal_info());
  }
  if (from._internal_reqid() != 0) {
    _this->_internal_set_reqid(from._internal_reqid());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_lifetime() != 0) {
    _this->_internal_set_lifetime(from._internal_lifetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DriveRequest::CopyFrom(const DriveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.DriveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveRequest::IsInitialized() const {
  return true;
}

void DriveRequest::InternalSwap(DriveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reqpriority_, lhs_arena,
      &other->_impl_.reqpriority_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetveh_, lhs_arena,
      &other->_impl_.targetveh_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetrsu_, lhs_arena,
      &other->_impl_.targetrsu_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DriveRequest, _impl_.lifetime_)
      + sizeof(DriveRequest::_impl_.lifetime_)
      - PROTOBUF_FIELD_OFFSET(DriveRequest, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DriveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[96]);
}

// ===================================================================

class DriveBehavior::_Internal {
 public:
};

DriveBehavior::DriveBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.DriveBehavior)
}
DriveBehavior::DriveBehavior(const DriveBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DriveBehavior* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drivebehavior_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.drivebehavior_ = from._impl_.drivebehavior_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.DriveBehavior)
}

inline void DriveBehavior::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drivebehavior_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DriveBehavior::~DriveBehavior() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.DriveBehavior)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DriveBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DriveBehavior::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DriveBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.DriveBehavior)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drivebehavior_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DriveBehavior::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 driveBehavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.drivebehavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DriveBehavior::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.DriveBehavior)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 driveBehavior = 1;
  if (this->_internal_drivebehavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_drivebehavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.DriveBehavior)
  return target;
}

size_t DriveBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.DriveBehavior)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 driveBehavior = 1;
  if (this->_internal_drivebehavior() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_drivebehavior());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DriveBehavior::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DriveBehavior::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DriveBehavior::GetClassData() const { return &_class_data_; }


void DriveBehavior::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DriveBehavior*>(&to_msg);
  auto& from = static_cast<const DriveBehavior&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.DriveBehavior)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_drivebehavior() != 0) {
    _this->_internal_set_drivebehavior(from._internal_drivebehavior());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DriveBehavior::CopyFrom(const DriveBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.DriveBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveBehavior::IsInitialized() const {
  return true;
}

void DriveBehavior::InternalSwap(DriveBehavior* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.drivebehavior_, other->_impl_.drivebehavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DriveBehavior::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[97]);
}

// ===================================================================

class PathPlanningPoint::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& pos(const PathPlanningPoint* msg);
  static const ::cn::seisys::v2x::pb::PositionConfidenceSet& posconfid(const PathPlanningPoint* msg);
  static const ::cn::seisys::v2x::pb::AccelerationSet4Way& acceleration(const PathPlanningPoint* msg);
  static const ::cn::seisys::v2x::pb::AccelerationConfidence& accelerationconfid(const PathPlanningPoint* msg);
  static const ::cn::seisys::v2x::pb::ReferenceLink& posinmap(const PathPlanningPoint* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
PathPlanningPoint::_Internal::pos(const PathPlanningPoint* msg) {
  return *msg->_impl_.pos_;
}
const ::cn::seisys::v2x::pb::PositionConfidenceSet&
PathPlanningPoint::_Internal::posconfid(const PathPlanningPoint* msg) {
  return *msg->_impl_.posconfid_;
}
const ::cn::seisys::v2x::pb::AccelerationSet4Way&
PathPlanningPoint::_Internal::acceleration(const PathPlanningPoint* msg) {
  return *msg->_impl_.acceleration_;
}
const ::cn::seisys::v2x::pb::AccelerationConfidence&
PathPlanningPoint::_Internal::accelerationconfid(const PathPlanningPoint* msg) {
  return *msg->_impl_.accelerationconfid_;
}
const ::cn::seisys::v2x::pb::ReferenceLink&
PathPlanningPoint::_Internal::posinmap(const PathPlanningPoint* msg) {
  return *msg->_impl_.posinmap_;
}
PathPlanningPoint::PathPlanningPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PathPlanningPoint)
}
PathPlanningPoint::PathPlanningPoint(const PathPlanningPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathPlanningPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.accelerationconfid_){nullptr}
    , decltype(_impl_.posinmap_){nullptr}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.speedconfid_){}
    , decltype(_impl_.headingconfid_){}
    , decltype(_impl_.estimatedtime_){}
    , decltype(_impl_.timeconfidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.pos_);
  }
  if (from._internal_has_posconfid()) {
    _this->_impl_.posconfid_ = new ::cn::seisys::v2x::pb::PositionConfidenceSet(*from._impl_.posconfid_);
  }
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::cn::seisys::v2x::pb::AccelerationSet4Way(*from._impl_.acceleration_);
  }
  if (from._internal_has_accelerationconfid()) {
    _this->_impl_.accelerationconfid_ = new ::cn::seisys::v2x::pb::AccelerationConfidence(*from._impl_.accelerationconfid_);
  }
  if (from._internal_has_posinmap()) {
    _this->_impl_.posinmap_ = new ::cn::seisys::v2x::pb::ReferenceLink(*from._impl_.posinmap_);
  }
  ::memcpy(&_impl_.speed_, &from._impl_.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeconfidence_) -
    reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.timeconfidence_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PathPlanningPoint)
}

inline void PathPlanningPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.posconfid_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.accelerationconfid_){nullptr}
    , decltype(_impl_.posinmap_){nullptr}
    , decltype(_impl_.speed_){0u}
    , decltype(_impl_.heading_){0u}
    , decltype(_impl_.speedconfid_){0}
    , decltype(_impl_.headingconfid_){0}
    , decltype(_impl_.estimatedtime_){0u}
    , decltype(_impl_.timeconfidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PathPlanningPoint::~PathPlanningPoint() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PathPlanningPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPlanningPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.posconfid_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.accelerationconfid_;
  if (this != internal_default_instance()) delete _impl_.posinmap_;
}

void PathPlanningPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPlanningPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PathPlanningPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posconfid_ != nullptr) {
    delete _impl_.posconfid_;
  }
  _impl_.posconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accelerationconfid_ != nullptr) {
    delete _impl_.accelerationconfid_;
  }
  _impl_.accelerationconfid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posinmap_ != nullptr) {
    delete _impl_.posinmap_;
  }
  _impl_.posinmap_ = nullptr;
  ::memset(&_impl_.speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeconfidence_) -
      reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.timeconfidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPlanningPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.Position3D pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_posconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SpeedConfidence speedConfid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speedconfid(static_cast<::cn::seisys::v2x::pb::SpeedConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.HeadingConfidence headingConfid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_headingconfid(static_cast<::cn::seisys::v2x::pb::HeadingConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.AccelerationConfidence accelerationConfid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_accelerationconfid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 estimatedTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.estimatedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeconfidence(static_cast<::cn::seisys::v2x::pb::TimeConfidence>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReferenceLink posInMap = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPlanningPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PathPlanningPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.Position3D pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 2;
  if (this->_internal_has_posconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::posconfid(this),
        _Internal::posconfid(this).GetCachedSize(), target, stream);
  }

  // uint32 speed = 3;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_speed(), target);
  }

  // uint32 heading = 4;
  if (this->_internal_heading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_heading(), target);
  }

  // .cn.seisys.v2x.pb.SpeedConfidence speedConfid = 5;
  if (this->_internal_speedconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_speedconfid(), target);
  }

  // .cn.seisys.v2x.pb.HeadingConfidence headingConfid = 6;
  if (this->_internal_headingconfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_headingconfid(), target);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 7;
  if (this->_internal_has_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence accelerationConfid = 8;
  if (this->_internal_has_accelerationconfid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::accelerationconfid(this),
        _Internal::accelerationconfid(this).GetCachedSize(), target, stream);
  }

  // uint32 estimatedTime = 9;
  if (this->_internal_estimatedtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_estimatedtime(), target);
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 10;
  if (this->_internal_timeconfidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_timeconfidence(), target);
  }

  // .cn.seisys.v2x.pb.ReferenceLink posInMap = 11;
  if (this->_internal_has_posinmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::posinmap(this),
        _Internal::posinmap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PathPlanningPoint)
  return target;
}

size_t PathPlanningPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PathPlanningPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.Position3D pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .cn.seisys.v2x.pb.PositionConfidenceSet posConfid = 2;
  if (this->_internal_has_posconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posconfid_);
  }

  // .cn.seisys.v2x.pb.AccelerationSet4Way acceleration = 7;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acceleration_);
  }

  // .cn.seisys.v2x.pb.AccelerationConfidence accelerationConfid = 8;
  if (this->_internal_has_accelerationconfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accelerationconfid_);
  }

  // .cn.seisys.v2x.pb.ReferenceLink posInMap = 11;
  if (this->_internal_has_posinmap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posinmap_);
  }

  // uint32 speed = 3;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint32 heading = 4;
  if (this->_internal_heading() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heading());
  }

  // .cn.seisys.v2x.pb.SpeedConfidence speedConfid = 5;
  if (this->_internal_speedconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_speedconfid());
  }

  // .cn.seisys.v2x.pb.HeadingConfidence headingConfid = 6;
  if (this->_internal_headingconfid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_headingconfid());
  }

  // uint32 estimatedTime = 9;
  if (this->_internal_estimatedtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_estimatedtime());
  }

  // .cn.seisys.v2x.pb.TimeConfidence timeConfidence = 10;
  if (this->_internal_timeconfidence() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_timeconfidence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPlanningPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathPlanningPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPlanningPoint::GetClassData() const { return &_class_data_; }


void PathPlanningPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathPlanningPoint*>(&to_msg);
  auto& from = static_cast<const PathPlanningPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PathPlanningPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_posconfid()) {
    _this->_internal_mutable_posconfid()->::cn::seisys::v2x::pb::PositionConfidenceSet::MergeFrom(
        from._internal_posconfid());
  }
  if (from._internal_has_acceleration()) {
    _this->_internal_mutable_acceleration()->::cn::seisys::v2x::pb::AccelerationSet4Way::MergeFrom(
        from._internal_acceleration());
  }
  if (from._internal_has_accelerationconfid()) {
    _this->_internal_mutable_accelerationconfid()->::cn::seisys::v2x::pb::AccelerationConfidence::MergeFrom(
        from._internal_accelerationconfid());
  }
  if (from._internal_has_posinmap()) {
    _this->_internal_mutable_posinmap()->::cn::seisys::v2x::pb::ReferenceLink::MergeFrom(
        from._internal_posinmap());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_heading() != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  if (from._internal_speedconfid() != 0) {
    _this->_internal_set_speedconfid(from._internal_speedconfid());
  }
  if (from._internal_headingconfid() != 0) {
    _this->_internal_set_headingconfid(from._internal_headingconfid());
  }
  if (from._internal_estimatedtime() != 0) {
    _this->_internal_set_estimatedtime(from._internal_estimatedtime());
  }
  if (from._internal_timeconfidence() != 0) {
    _this->_internal_set_timeconfidence(from._internal_timeconfidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPlanningPoint::CopyFrom(const PathPlanningPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PathPlanningPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanningPoint::IsInitialized() const {
  return true;
}

void PathPlanningPoint::InternalSwap(PathPlanningPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathPlanningPoint, _impl_.timeconfidence_)
      + sizeof(PathPlanningPoint::_impl_.timeconfidence_)
      - PROTOBUF_FIELD_OFFSET(PathPlanningPoint, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPlanningPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[98]);
}

// ===================================================================

class PathPlanning::_Internal {
 public:
};

PathPlanning::PathPlanning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.PathPlanning)
}
PathPlanning::PathPlanning(const PathPlanning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathPlanning* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathplanning_){from._impl_.pathplanning_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.PathPlanning)
}

inline void PathPlanning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathplanning_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PathPlanning::~PathPlanning() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.PathPlanning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPlanning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathplanning_.~RepeatedPtrField();
}

void PathPlanning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPlanning::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.PathPlanning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathplanning_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPlanning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.seisys.v2x.pb.PathPlanningPoint pathPlanning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathplanning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPlanning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.PathPlanning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.PathPlanningPoint pathPlanning = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pathplanning_size()); i < n; i++) {
    const auto& repfield = this->_internal_pathplanning(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.PathPlanning)
  return target;
}

size_t PathPlanning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.PathPlanning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.PathPlanningPoint pathPlanning = 1;
  total_size += 1UL * this->_internal_pathplanning_size();
  for (const auto& msg : this->_impl_.pathplanning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPlanning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathPlanning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPlanning::GetClassData() const { return &_class_data_; }


void PathPlanning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathPlanning*>(&to_msg);
  auto& from = static_cast<const PathPlanning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.PathPlanning)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pathplanning_.MergeFrom(from._impl_.pathplanning_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPlanning::CopyFrom(const PathPlanning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.PathPlanning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanning::IsInitialized() const {
  return true;
}

void PathPlanning::InternalSwap(PathPlanning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pathplanning_.InternalSwap(&other->_impl_.pathplanning_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPlanning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[99]);
}

// ===================================================================

class IarData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::PathPlanningPoint& currentpos(const IarData* msg);
  static const ::cn::seisys::v2x::pb::PathPlanning& pathplanning(const IarData* msg);
  static const ::cn::seisys::v2x::pb::DriveBehavior& currentbehavior(const IarData* msg);
};

const ::cn::seisys::v2x::pb::PathPlanningPoint&
IarData::_Internal::currentpos(const IarData* msg) {
  return *msg->_impl_.currentpos_;
}
const ::cn::seisys::v2x::pb::PathPlanning&
IarData::_Internal::pathplanning(const IarData* msg) {
  return *msg->_impl_.pathplanning_;
}
const ::cn::seisys::v2x::pb::DriveBehavior&
IarData::_Internal::currentbehavior(const IarData* msg) {
  return *msg->_impl_.currentbehavior_;
}
IarData::IarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.IarData)
}
IarData::IarData(const IarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IarData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reqs_){from._impl_.reqs_}
    , decltype(_impl_.currentpos_){nullptr}
    , decltype(_impl_.pathplanning_){nullptr}
    , decltype(_impl_.currentbehavior_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currentpos()) {
    _this->_impl_.currentpos_ = new ::cn::seisys::v2x::pb::PathPlanningPoint(*from._impl_.currentpos_);
  }
  if (from._internal_has_pathplanning()) {
    _this->_impl_.pathplanning_ = new ::cn::seisys::v2x::pb::PathPlanning(*from._impl_.pathplanning_);
  }
  if (from._internal_has_currentbehavior()) {
    _this->_impl_.currentbehavior_ = new ::cn::seisys::v2x::pb::DriveBehavior(*from._impl_.currentbehavior_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.IarData)
}

inline void IarData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reqs_){arena}
    , decltype(_impl_.currentpos_){nullptr}
    , decltype(_impl_.pathplanning_){nullptr}
    , decltype(_impl_.currentbehavior_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IarData::~IarData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.IarData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IarData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reqs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.currentpos_;
  if (this != internal_default_instance()) delete _impl_.pathplanning_;
  if (this != internal_default_instance()) delete _impl_.currentbehavior_;
}

void IarData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IarData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.IarData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reqs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.currentpos_ != nullptr) {
    delete _impl_.currentpos_;
  }
  _impl_.currentpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pathplanning_ != nullptr) {
    delete _impl_.pathplanning_;
  }
  _impl_.pathplanning_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.currentbehavior_ != nullptr) {
    delete _impl_.currentbehavior_;
  }
  _impl_.currentbehavior_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IarData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.PathPlanningPoint currentPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PathPlanning pathPlanning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathplanning(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DriveBehavior currentBehavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentbehavior(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.DriveRequest reqs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reqs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IarData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.IarData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.PathPlanningPoint currentPos = 1;
  if (this->_internal_has_currentpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::currentpos(this),
        _Internal::currentpos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PathPlanning pathPlanning = 2;
  if (this->_internal_has_pathplanning()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pathplanning(this),
        _Internal::pathplanning(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.DriveBehavior currentBehavior = 3;
  if (this->_internal_has_currentbehavior()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::currentbehavior(this),
        _Internal::currentbehavior(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.DriveRequest reqs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reqs_size()); i < n; i++) {
    const auto& repfield = this->_internal_reqs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.IarData)
  return target;
}

size_t IarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.IarData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.DriveRequest reqs = 4;
  total_size += 1UL * this->_internal_reqs_size();
  for (const auto& msg : this->_impl_.reqs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cn.seisys.v2x.pb.PathPlanningPoint currentPos = 1;
  if (this->_internal_has_currentpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentpos_);
  }

  // .cn.seisys.v2x.pb.PathPlanning pathPlanning = 2;
  if (this->_internal_has_pathplanning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pathplanning_);
  }

  // .cn.seisys.v2x.pb.DriveBehavior currentBehavior = 3;
  if (this->_internal_has_currentbehavior()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentbehavior_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IarData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IarData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IarData::GetClassData() const { return &_class_data_; }


void IarData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IarData*>(&to_msg);
  auto& from = static_cast<const IarData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.IarData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reqs_.MergeFrom(from._impl_.reqs_);
  if (from._internal_has_currentpos()) {
    _this->_internal_mutable_currentpos()->::cn::seisys::v2x::pb::PathPlanningPoint::MergeFrom(
        from._internal_currentpos());
  }
  if (from._internal_has_pathplanning()) {
    _this->_internal_mutable_pathplanning()->::cn::seisys::v2x::pb::PathPlanning::MergeFrom(
        from._internal_pathplanning());
  }
  if (from._internal_has_currentbehavior()) {
    _this->_internal_mutable_currentbehavior()->::cn::seisys::v2x::pb::DriveBehavior::MergeFrom(
        from._internal_currentbehavior());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IarData::CopyFrom(const IarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.IarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IarData::IsInitialized() const {
  return true;
}

void IarData::InternalSwap(IarData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reqs_.InternalSwap(&other->_impl_.reqs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IarData, _impl_.currentbehavior_)
      + sizeof(IarData::_impl_.currentbehavior_)
      - PROTOBUF_FIELD_OFFSET(IarData, _impl_.currentpos_)>(
          reinterpret_cast<char*>(&_impl_.currentpos_),
          reinterpret_cast<char*>(&other->_impl_.currentpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IarData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[100]);
}

// ===================================================================

class VirData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& pos(const VirData* msg);
  static const ::cn::seisys::v2x::pb::IarData& intandreq(const VirData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
VirData::_Internal::pos(const VirData* msg) {
  return *msg->_impl_.pos_;
}
const ::cn::seisys::v2x::pb::IarData&
VirData::_Internal::intandreq(const VirData* msg) {
  return *msg->_impl_.intandreq_;
}
VirData::VirData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.VirData)
}
VirData::VirData(const VirData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VirData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicleid_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.intandreq_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.msgcnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vehicleid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicleid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vehicleid().empty()) {
    _this->_impl_.vehicleid_.Set(from._internal_vehicleid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.pos_);
  }
  if (from._internal_has_intandreq()) {
    _this->_impl_.intandreq_ = new ::cn::seisys::v2x::pb::IarData(*from._impl_.intandreq_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msgcnt_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.VirData)
}

inline void VirData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicleid_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.intandreq_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.msgcnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vehicleid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehicleid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VirData::~VirData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.VirData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vehicleid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.intandreq_;
}

void VirData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.VirData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicleid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.intandreq_ != nullptr) {
    delete _impl_.intandreq_;
  }
  _impl_.intandreq_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msgcnt_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msgCnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vehicleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vehicleid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.VirData.vehicleId"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.IarData intAndReq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intandreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.VirData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msgCnt = 1;
  if (this->_internal_msgcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgcnt(), target);
  }

  // string vehicleId = 2;
  if (!this->_internal_vehicleid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicleid().data(), static_cast<int>(this->_internal_vehicleid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.VirData.vehicleId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vehicleid(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .cn.seisys.v2x.pb.Position3D pos = 4;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.IarData intAndReq = 5;
  if (this->_internal_has_intandreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::intandreq(this),
        _Internal::intandreq(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.VirData)
  return target;
}

size_t VirData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.VirData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vehicleId = 2;
  if (!this->_internal_vehicleid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicleid());
  }

  // .cn.seisys.v2x.pb.Position3D pos = 4;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .cn.seisys.v2x.pb.IarData intAndReq = 5;
  if (this->_internal_has_intandreq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.intandreq_);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 msgCnt = 1;
  if (this->_internal_msgcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgcnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirData::GetClassData() const { return &_class_data_; }


void VirData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirData*>(&to_msg);
  auto& from = static_cast<const VirData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.VirData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vehicleid().empty()) {
    _this->_internal_set_vehicleid(from._internal_vehicleid());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_intandreq()) {
    _this->_internal_mutable_intandreq()->::cn::seisys::v2x::pb::IarData::MergeFrom(
        from._internal_intandreq());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_msgcnt() != 0) {
    _this->_internal_set_msgcnt(from._internal_msgcnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirData::CopyFrom(const VirData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.VirData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirData::IsInitialized() const {
  return true;
}

void VirData::InternalSwap(VirData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vehicleid_, lhs_arena,
      &other->_impl_.vehicleid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirData, _impl_.msgcnt_)
      + sizeof(VirData::_impl_.msgcnt_)
      - PROTOBUF_FIELD_OFFSET(VirData, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[101]);
}

// ===================================================================

class DriveSuggestion::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::DriveBehavior& suggestion(const DriveSuggestion* msg);
  static const ::cn::seisys::v2x::pb::ReferenceLink& relatedlink(const DriveSuggestion* msg);
  static const ::cn::seisys::v2x::pb::ReferencePath& relatedpath(const DriveSuggestion* msg);
};

const ::cn::seisys::v2x::pb::DriveBehavior&
DriveSuggestion::_Internal::suggestion(const DriveSuggestion* msg) {
  return *msg->_impl_.suggestion_;
}
const ::cn::seisys::v2x::pb::ReferenceLink&
DriveSuggestion::_Internal::relatedlink(const DriveSuggestion* msg) {
  return *msg->_impl_.relatedlink_;
}
const ::cn::seisys::v2x::pb::ReferencePath&
DriveSuggestion::_Internal::relatedpath(const DriveSuggestion* msg) {
  return *msg->_impl_.relatedpath_;
}
DriveSuggestion::DriveSuggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.DriveSuggestion)
}
DriveSuggestion::DriveSuggestion(const DriveSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DriveSuggestion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.suggestion_){nullptr}
    , decltype(_impl_.relatedlink_){nullptr}
    , decltype(_impl_.relatedpath_){nullptr}
    , decltype(_impl_.timeoffset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_suggestion()) {
    _this->_impl_.suggestion_ = new ::cn::seisys::v2x::pb::DriveBehavior(*from._impl_.suggestion_);
  }
  if (from._internal_has_relatedlink()) {
    _this->_impl_.relatedlink_ = new ::cn::seisys::v2x::pb::ReferenceLink(*from._impl_.relatedlink_);
  }
  if (from._internal_has_relatedpath()) {
    _this->_impl_.relatedpath_ = new ::cn::seisys::v2x::pb::ReferencePath(*from._impl_.relatedpath_);
  }
  _this->_impl_.timeoffset_ = from._impl_.timeoffset_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.DriveSuggestion)
}

inline void DriveSuggestion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.suggestion_){nullptr}
    , decltype(_impl_.relatedlink_){nullptr}
    , decltype(_impl_.relatedpath_){nullptr}
    , decltype(_impl_.timeoffset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DriveSuggestion::~DriveSuggestion() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.DriveSuggestion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DriveSuggestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.suggestion_;
  if (this != internal_default_instance()) delete _impl_.relatedlink_;
  if (this != internal_default_instance()) delete _impl_.relatedpath_;
}

void DriveSuggestion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DriveSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.DriveSuggestion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.suggestion_ != nullptr) {
    delete _impl_.suggestion_;
  }
  _impl_.suggestion_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relatedlink_ != nullptr) {
    delete _impl_.relatedlink_;
  }
  _impl_.relatedlink_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relatedpath_ != nullptr) {
    delete _impl_.relatedpath_;
  }
  _impl_.relatedpath_ = nullptr;
  _impl_.timeoffset_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DriveSuggestion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.DriveBehavior suggestion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timeOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReferenceLink relatedLink = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relatedlink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReferencePath relatedPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_relatedpath(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DriveSuggestion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.DriveSuggestion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.DriveBehavior suggestion = 1;
  if (this->_internal_has_suggestion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::suggestion(this),
        _Internal::suggestion(this).GetCachedSize(), target, stream);
  }

  // uint32 timeOffset = 2;
  if (this->_internal_timeoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeoffset(), target);
  }

  // .cn.seisys.v2x.pb.ReferenceLink relatedLink = 3;
  if (this->_internal_has_relatedlink()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::relatedlink(this),
        _Internal::relatedlink(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ReferencePath relatedPath = 4;
  if (this->_internal_has_relatedpath()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::relatedpath(this),
        _Internal::relatedpath(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.DriveSuggestion)
  return target;
}

size_t DriveSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.DriveSuggestion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.DriveBehavior suggestion = 1;
  if (this->_internal_has_suggestion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.suggestion_);
  }

  // .cn.seisys.v2x.pb.ReferenceLink relatedLink = 3;
  if (this->_internal_has_relatedlink()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relatedlink_);
  }

  // .cn.seisys.v2x.pb.ReferencePath relatedPath = 4;
  if (this->_internal_has_relatedpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relatedpath_);
  }

  // uint32 timeOffset = 2;
  if (this->_internal_timeoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeoffset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DriveSuggestion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DriveSuggestion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DriveSuggestion::GetClassData() const { return &_class_data_; }


void DriveSuggestion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DriveSuggestion*>(&to_msg);
  auto& from = static_cast<const DriveSuggestion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.DriveSuggestion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_suggestion()) {
    _this->_internal_mutable_suggestion()->::cn::seisys::v2x::pb::DriveBehavior::MergeFrom(
        from._internal_suggestion());
  }
  if (from._internal_has_relatedlink()) {
    _this->_internal_mutable_relatedlink()->::cn::seisys::v2x::pb::ReferenceLink::MergeFrom(
        from._internal_relatedlink());
  }
  if (from._internal_has_relatedpath()) {
    _this->_internal_mutable_relatedpath()->::cn::seisys::v2x::pb::ReferencePath::MergeFrom(
        from._internal_relatedpath());
  }
  if (from._internal_timeoffset() != 0) {
    _this->_internal_set_timeoffset(from._internal_timeoffset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DriveSuggestion::CopyFrom(const DriveSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.DriveSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveSuggestion::IsInitialized() const {
  return true;
}

void DriveSuggestion::InternalSwap(DriveSuggestion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DriveSuggestion, _impl_.timeoffset_)
      + sizeof(DriveSuggestion::_impl_.timeoffset_)
      - PROTOBUF_FIELD_OFFSET(DriveSuggestion, _impl_.suggestion_)>(
          reinterpret_cast<char*>(&_impl_.suggestion_),
          reinterpret_cast<char*>(&other->_impl_.suggestion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DriveSuggestion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[102]);
}

// ===================================================================

class CoordinationInfo::_Internal {
 public:
};

CoordinationInfo::CoordinationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.CoordinationInfo)
}
CoordinationInfo::CoordinationInfo(const CoordinationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinationinfo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.coordinationinfo_ = from._impl_.coordinationinfo_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.CoordinationInfo)
}

inline void CoordinationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinationinfo_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CoordinationInfo::~CoordinationInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.CoordinationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoordinationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.CoordinationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coordinationinfo_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 coordinationInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.coordinationinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.CoordinationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 coordinationInfo = 1;
  if (this->_internal_coordinationinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_coordinationinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.CoordinationInfo)
  return target;
}

size_t CoordinationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.CoordinationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 coordinationInfo = 1;
  if (this->_internal_coordinationinfo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_coordinationinfo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinationInfo::GetClassData() const { return &_class_data_; }


void CoordinationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinationInfo*>(&to_msg);
  auto& from = static_cast<const CoordinationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.CoordinationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_coordinationinfo() != 0) {
    _this->_internal_set_coordinationinfo(from._internal_coordinationinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinationInfo::CopyFrom(const CoordinationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.CoordinationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinationInfo::IsInitialized() const {
  return true;
}

void CoordinationInfo::InternalSwap(CoordinationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.coordinationinfo_, other->_impl_.coordinationinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[103]);
}

// ===================================================================

class VehicleCoordination::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::DriveSuggestion& drivesuggestion(const VehicleCoordination* msg);
  static const ::cn::seisys::v2x::pb::PathPlanning& pathguidance(const VehicleCoordination* msg);
  static const ::cn::seisys::v2x::pb::CoordinationInfo& info(const VehicleCoordination* msg);
};

const ::cn::seisys::v2x::pb::DriveSuggestion&
VehicleCoordination::_Internal::drivesuggestion(const VehicleCoordination* msg) {
  return *msg->_impl_.drivesuggestion_;
}
const ::cn::seisys::v2x::pb::PathPlanning&
VehicleCoordination::_Internal::pathguidance(const VehicleCoordination* msg) {
  return *msg->_impl_.pathguidance_;
}
const ::cn::seisys::v2x::pb::CoordinationInfo&
VehicleCoordination::_Internal::info(const VehicleCoordination* msg) {
  return *msg->_impl_.info_;
}
VehicleCoordination::VehicleCoordination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.VehicleCoordination)
}
VehicleCoordination::VehicleCoordination(const VehicleCoordination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleCoordination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vehid_){}
    , decltype(_impl_.drivesuggestion_){nullptr}
    , decltype(_impl_.pathguidance_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vehid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vehid().empty()) {
    _this->_impl_.vehid_.Set(from._internal_vehid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_drivesuggestion()) {
    _this->_impl_.drivesuggestion_ = new ::cn::seisys::v2x::pb::DriveSuggestion(*from._impl_.drivesuggestion_);
  }
  if (from._internal_has_pathguidance()) {
    _this->_impl_.pathguidance_ = new ::cn::seisys::v2x::pb::PathPlanning(*from._impl_.pathguidance_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::cn::seisys::v2x::pb::CoordinationInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.VehicleCoordination)
}

inline void VehicleCoordination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vehid_){}
    , decltype(_impl_.drivesuggestion_){nullptr}
    , decltype(_impl_.pathguidance_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vehid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleCoordination::~VehicleCoordination() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.VehicleCoordination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleCoordination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vehid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.drivesuggestion_;
  if (this != internal_default_instance()) delete _impl_.pathguidance_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void VehicleCoordination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleCoordination::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.VehicleCoordination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.drivesuggestion_ != nullptr) {
    delete _impl_.drivesuggestion_;
  }
  _impl_.drivesuggestion_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pathguidance_ != nullptr) {
    delete _impl_.pathguidance_;
  }
  _impl_.pathguidance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleCoordination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vehId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vehid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.VehicleCoordination.vehId"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DriveSuggestion driveSuggestion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drivesuggestion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.PathPlanning pathGuidance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathguidance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.CoordinationInfo info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleCoordination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.VehicleCoordination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vehId = 1;
  if (!this->_internal_vehid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehid().data(), static_cast<int>(this->_internal_vehid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.VehicleCoordination.vehId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vehid(), target);
  }

  // .cn.seisys.v2x.pb.DriveSuggestion driveSuggestion = 2;
  if (this->_internal_has_drivesuggestion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::drivesuggestion(this),
        _Internal::drivesuggestion(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.PathPlanning pathGuidance = 3;
  if (this->_internal_has_pathguidance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pathguidance(this),
        _Internal::pathguidance(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.CoordinationInfo info = 4;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.VehicleCoordination)
  return target;
}

size_t VehicleCoordination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.VehicleCoordination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vehId = 1;
  if (!this->_internal_vehid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehid());
  }

  // .cn.seisys.v2x.pb.DriveSuggestion driveSuggestion = 2;
  if (this->_internal_has_drivesuggestion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drivesuggestion_);
  }

  // .cn.seisys.v2x.pb.PathPlanning pathGuidance = 3;
  if (this->_internal_has_pathguidance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pathguidance_);
  }

  // .cn.seisys.v2x.pb.CoordinationInfo info = 4;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleCoordination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleCoordination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleCoordination::GetClassData() const { return &_class_data_; }


void VehicleCoordination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleCoordination*>(&to_msg);
  auto& from = static_cast<const VehicleCoordination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.VehicleCoordination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vehid().empty()) {
    _this->_internal_set_vehid(from._internal_vehid());
  }
  if (from._internal_has_drivesuggestion()) {
    _this->_internal_mutable_drivesuggestion()->::cn::seisys::v2x::pb::DriveSuggestion::MergeFrom(
        from._internal_drivesuggestion());
  }
  if (from._internal_has_pathguidance()) {
    _this->_internal_mutable_pathguidance()->::cn::seisys::v2x::pb::PathPlanning::MergeFrom(
        from._internal_pathguidance());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::cn::seisys::v2x::pb::CoordinationInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleCoordination::CopyFrom(const VehicleCoordination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.VehicleCoordination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCoordination::IsInitialized() const {
  return true;
}

void VehicleCoordination::InternalSwap(VehicleCoordination* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vehid_, lhs_arena,
      &other->_impl_.vehid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleCoordination, _impl_.info_)
      + sizeof(VehicleCoordination::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(VehicleCoordination, _impl_.drivesuggestion_)>(
          reinterpret_cast<char*>(&_impl_.drivesuggestion_),
          reinterpret_cast<char*>(&other->_impl_.drivesuggestion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleCoordination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[104]);
}

// ===================================================================

class LaneCoordination::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::ReferenceLink& targetlane(const LaneCoordination* msg);
  static const ::cn::seisys::v2x::pb::ReferencePath& relatedpath(const LaneCoordination* msg);
  static const ::cn::seisys::v2x::pb::DriveBehavior& recommendedbehavior(const LaneCoordination* msg);
  static const ::cn::seisys::v2x::pb::CoordinationInfo& info(const LaneCoordination* msg);
};

const ::cn::seisys::v2x::pb::ReferenceLink&
LaneCoordination::_Internal::targetlane(const LaneCoordination* msg) {
  return *msg->_impl_.targetlane_;
}
const ::cn::seisys::v2x::pb::ReferencePath&
LaneCoordination::_Internal::relatedpath(const LaneCoordination* msg) {
  return *msg->_impl_.relatedpath_;
}
const ::cn::seisys::v2x::pb::DriveBehavior&
LaneCoordination::_Internal::recommendedbehavior(const LaneCoordination* msg) {
  return *msg->_impl_.recommendedbehavior_;
}
const ::cn::seisys::v2x::pb::CoordinationInfo&
LaneCoordination::_Internal::info(const LaneCoordination* msg) {
  return *msg->_impl_.info_;
}
LaneCoordination::LaneCoordination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.LaneCoordination)
}
LaneCoordination::LaneCoordination(const LaneCoordination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneCoordination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.targetlane_){nullptr}
    , decltype(_impl_.relatedpath_){nullptr}
    , decltype(_impl_.recommendedbehavior_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.tbegin_){}
    , decltype(_impl_.tend_){}
    , decltype(_impl_.recommendedspeed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_targetlane()) {
    _this->_impl_.targetlane_ = new ::cn::seisys::v2x::pb::ReferenceLink(*from._impl_.targetlane_);
  }
  if (from._internal_has_relatedpath()) {
    _this->_impl_.relatedpath_ = new ::cn::seisys::v2x::pb::ReferencePath(*from._impl_.relatedpath_);
  }
  if (from._internal_has_recommendedbehavior()) {
    _this->_impl_.recommendedbehavior_ = new ::cn::seisys::v2x::pb::DriveBehavior(*from._impl_.recommendedbehavior_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::cn::seisys::v2x::pb::CoordinationInfo(*from._impl_.info_);
  }
  ::memcpy(&_impl_.tbegin_, &from._impl_.tbegin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recommendedspeed_) -
    reinterpret_cast<char*>(&_impl_.tbegin_)) + sizeof(_impl_.recommendedspeed_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.LaneCoordination)
}

inline void LaneCoordination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.targetlane_){nullptr}
    , decltype(_impl_.relatedpath_){nullptr}
    , decltype(_impl_.recommendedbehavior_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.tbegin_){uint64_t{0u}}
    , decltype(_impl_.tend_){uint64_t{0u}}
    , decltype(_impl_.recommendedspeed_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaneCoordination::~LaneCoordination() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.LaneCoordination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneCoordination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.targetlane_;
  if (this != internal_default_instance()) delete _impl_.relatedpath_;
  if (this != internal_default_instance()) delete _impl_.recommendedbehavior_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void LaneCoordination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneCoordination::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.LaneCoordination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.targetlane_ != nullptr) {
    delete _impl_.targetlane_;
  }
  _impl_.targetlane_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relatedpath_ != nullptr) {
    delete _impl_.relatedpath_;
  }
  _impl_.relatedpath_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendedbehavior_ != nullptr) {
    delete _impl_.recommendedbehavior_;
  }
  _impl_.recommendedbehavior_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  ::memset(&_impl_.tbegin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recommendedspeed_) -
      reinterpret_cast<char*>(&_impl_.tbegin_)) + sizeof(_impl_.recommendedspeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneCoordination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cn.seisys.v2x.pb.ReferenceLink targetLane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetlane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.ReferencePath relatedPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relatedpath(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tBegin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tbegin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tEnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 recommendedSpeed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.recommendedspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DriveBehavior recommendedBehavior = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendedbehavior(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.CoordinationInfo info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.LaneCoordination.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneCoordination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.LaneCoordination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cn.seisys.v2x.pb.ReferenceLink targetLane = 1;
  if (this->_internal_has_targetlane()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::targetlane(this),
        _Internal::targetlane(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.ReferencePath relatedPath = 2;
  if (this->_internal_has_relatedpath()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::relatedpath(this),
        _Internal::relatedpath(this).GetCachedSize(), target, stream);
  }

  // uint64 tBegin = 3;
  if (this->_internal_tbegin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tbegin(), target);
  }

  // uint64 tEnd = 4;
  if (this->_internal_tend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tend(), target);
  }

  // uint32 recommendedSpeed = 5;
  if (this->_internal_recommendedspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_recommendedspeed(), target);
  }

  // .cn.seisys.v2x.pb.DriveBehavior recommendedBehavior = 6;
  if (this->_internal_has_recommendedbehavior()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::recommendedbehavior(this),
        _Internal::recommendedbehavior(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.CoordinationInfo info = 7;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // string description = 8;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.LaneCoordination.description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.LaneCoordination)
  return target;
}

size_t LaneCoordination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.LaneCoordination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 8;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .cn.seisys.v2x.pb.ReferenceLink targetLane = 1;
  if (this->_internal_has_targetlane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetlane_);
  }

  // .cn.seisys.v2x.pb.ReferencePath relatedPath = 2;
  if (this->_internal_has_relatedpath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relatedpath_);
  }

  // .cn.seisys.v2x.pb.DriveBehavior recommendedBehavior = 6;
  if (this->_internal_has_recommendedbehavior()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendedbehavior_);
  }

  // .cn.seisys.v2x.pb.CoordinationInfo info = 7;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // uint64 tBegin = 3;
  if (this->_internal_tbegin() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tbegin());
  }

  // uint64 tEnd = 4;
  if (this->_internal_tend() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tend());
  }

  // uint32 recommendedSpeed = 5;
  if (this->_internal_recommendedspeed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recommendedspeed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneCoordination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneCoordination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneCoordination::GetClassData() const { return &_class_data_; }


void LaneCoordination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneCoordination*>(&to_msg);
  auto& from = static_cast<const LaneCoordination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.LaneCoordination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_targetlane()) {
    _this->_internal_mutable_targetlane()->::cn::seisys::v2x::pb::ReferenceLink::MergeFrom(
        from._internal_targetlane());
  }
  if (from._internal_has_relatedpath()) {
    _this->_internal_mutable_relatedpath()->::cn::seisys::v2x::pb::ReferencePath::MergeFrom(
        from._internal_relatedpath());
  }
  if (from._internal_has_recommendedbehavior()) {
    _this->_internal_mutable_recommendedbehavior()->::cn::seisys::v2x::pb::DriveBehavior::MergeFrom(
        from._internal_recommendedbehavior());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::cn::seisys::v2x::pb::CoordinationInfo::MergeFrom(
        from._internal_info());
  }
  if (from._internal_tbegin() != 0) {
    _this->_internal_set_tbegin(from._internal_tbegin());
  }
  if (from._internal_tend() != 0) {
    _this->_internal_set_tend(from._internal_tend());
  }
  if (from._internal_recommendedspeed() != 0) {
    _this->_internal_set_recommendedspeed(from._internal_recommendedspeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneCoordination::CopyFrom(const LaneCoordination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.LaneCoordination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneCoordination::IsInitialized() const {
  return true;
}

void LaneCoordination::InternalSwap(LaneCoordination* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneCoordination, _impl_.recommendedspeed_)
      + sizeof(LaneCoordination::_impl_.recommendedspeed_)
      - PROTOBUF_FIELD_OFFSET(LaneCoordination, _impl_.targetlane_)>(
          reinterpret_cast<char*>(&_impl_.targetlane_),
          reinterpret_cast<char*>(&other->_impl_.targetlane_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneCoordination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[105]);
}

// ===================================================================

class RscData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& pos(const RscData* msg);
  static const ::cn::seisys::v2x::pb::VehicleCoordination& coordinates(const RscData* msg);
  static const ::cn::seisys::v2x::pb::LaneCoordination& lanecoordinates(const RscData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
RscData::_Internal::pos(const RscData* msg) {
  return *msg->_impl_.pos_;
}
const ::cn::seisys::v2x::pb::VehicleCoordination&
RscData::_Internal::coordinates(const RscData* msg) {
  return *msg->_impl_.coordinates_;
}
const ::cn::seisys::v2x::pb::LaneCoordination&
RscData::_Internal::lanecoordinates(const RscData* msg) {
  return *msg->_impl_.lanecoordinates_;
}
RscData::RscData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RscData)
}
RscData::RscData(const RscData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RscData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rsuid_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.lanecoordinates_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.msgcnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rsuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rsuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rsuid().empty()) {
    _this->_impl_.rsuid_.Set(from._internal_rsuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.pos_);
  }
  if (from._internal_has_coordinates()) {
    _this->_impl_.coordinates_ = new ::cn::seisys::v2x::pb::VehicleCoordination(*from._impl_.coordinates_);
  }
  if (from._internal_has_lanecoordinates()) {
    _this->_impl_.lanecoordinates_ = new ::cn::seisys::v2x::pb::LaneCoordination(*from._impl_.lanecoordinates_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msgcnt_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RscData)
}

inline void RscData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rsuid_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.lanecoordinates_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.msgcnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rsuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rsuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RscData::~RscData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RscData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RscData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rsuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.coordinates_;
  if (this != internal_default_instance()) delete _impl_.lanecoordinates_;
}

void RscData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RscData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RscData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rsuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lanecoordinates_ != nullptr) {
    delete _impl_.lanecoordinates_;
  }
  _impl_.lanecoordinates_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msgcnt_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.msgcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RscData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msgCnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rsuId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rsuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RscData.rsuId"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.VehicleCoordination coordinates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.LaneCoordination laneCoordinates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lanecoordinates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RscData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RscData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msgCnt = 1;
  if (this->_internal_msgcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgcnt(), target);
  }

  // string rsuId = 2;
  if (!this->_internal_rsuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rsuid().data(), static_cast<int>(this->_internal_rsuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RscData.rsuId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rsuid(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .cn.seisys.v2x.pb.Position3D pos = 4;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.VehicleCoordination coordinates = 5;
  if (this->_internal_has_coordinates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::coordinates(this),
        _Internal::coordinates(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.LaneCoordination laneCoordinates = 6;
  if (this->_internal_has_lanecoordinates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::lanecoordinates(this),
        _Internal::lanecoordinates(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RscData)
  return target;
}

size_t RscData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RscData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rsuId = 2;
  if (!this->_internal_rsuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rsuid());
  }

  // .cn.seisys.v2x.pb.Position3D pos = 4;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .cn.seisys.v2x.pb.VehicleCoordination coordinates = 5;
  if (this->_internal_has_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinates_);
  }

  // .cn.seisys.v2x.pb.LaneCoordination laneCoordinates = 6;
  if (this->_internal_has_lanecoordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lanecoordinates_);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 msgCnt = 1;
  if (this->_internal_msgcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgcnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RscData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RscData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RscData::GetClassData() const { return &_class_data_; }


void RscData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RscData*>(&to_msg);
  auto& from = static_cast<const RscData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RscData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rsuid().empty()) {
    _this->_internal_set_rsuid(from._internal_rsuid());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_coordinates()) {
    _this->_internal_mutable_coordinates()->::cn::seisys::v2x::pb::VehicleCoordination::MergeFrom(
        from._internal_coordinates());
  }
  if (from._internal_has_lanecoordinates()) {
    _this->_internal_mutable_lanecoordinates()->::cn::seisys::v2x::pb::LaneCoordination::MergeFrom(
        from._internal_lanecoordinates());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_msgcnt() != 0) {
    _this->_internal_set_msgcnt(from._internal_msgcnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RscData::CopyFrom(const RscData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RscData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RscData::IsInitialized() const {
  return true;
}

void RscData::InternalSwap(RscData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rsuid_, lhs_arena,
      &other->_impl_.rsuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RscData, _impl_.msgcnt_)
      + sizeof(RscData::_impl_.msgcnt_)
      - PROTOBUF_FIELD_OFFSET(RscData, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RscData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[106]);
}

// ===================================================================

class CamData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& refpos(const CamData* msg);
  static const ::cn::seisys::v2x::pb::SpatData& roadsignalstate(const CamData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
CamData::_Internal::refpos(const CamData* msg) {
  return *msg->_impl_.refpos_;
}
const ::cn::seisys::v2x::pb::SpatData&
CamData::_Internal::roadsignalstate(const CamData* msg) {
  return *msg->_impl_.roadsignalstate_;
}
CamData::CamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.CamData)
}
CamData::CamData(const CamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ptclist_){from._impl_.ptclist_}
    , decltype(_impl_.obstaclelist_){from._impl_.obstaclelist_}
    , decltype(_impl_.rtelist_){from._impl_.rtelist_}
    , decltype(_impl_.rtslist_){from._impl_.rtslist_}
    , decltype(_impl_.bsmlist_){from._impl_.bsmlist_}
    , decltype(_impl_.virlist_){from._impl_.virlist_}
    , decltype(_impl_.rsclist_){from._impl_.rsclist_}
    , decltype(_impl_.trafficflow_){from._impl_.trafficflow_}
    , decltype(_impl_.signalschemelist_){from._impl_.signalschemelist_}
    , decltype(_impl_.detectedregion_){from._impl_.detectedregion_}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.mapdeviceid_){}
    , decltype(_impl_.refpos_){nullptr}
    , decltype(_impl_.roadsignalstate_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.msgcnt_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.toalgorithmtime_){}
    , decltype(_impl_.todatabustime_){}
    , decltype(_impl_.tocloudtime_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.scenetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ver().empty()) {
    _this->_impl_.ver_.Set(from._internal_ver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapdeviceid().empty()) {
    _this->_impl_.mapdeviceid_.Set(from._internal_mapdeviceid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_refpos()) {
    _this->_impl_.refpos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.refpos_);
  }
  if (from._internal_has_roadsignalstate()) {
    _this->_impl_.roadsignalstate_ = new ::cn::seisys::v2x::pb::SpatData(*from._impl_.roadsignalstate_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scenetype_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.scenetype_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.CamData)
}

inline void CamData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ptclist_){arena}
    , decltype(_impl_.obstaclelist_){arena}
    , decltype(_impl_.rtelist_){arena}
    , decltype(_impl_.rtslist_){arena}
    , decltype(_impl_.bsmlist_){arena}
    , decltype(_impl_.virlist_){arena}
    , decltype(_impl_.rsclist_){arena}
    , decltype(_impl_.trafficflow_){arena}
    , decltype(_impl_.signalschemelist_){arena}
    , decltype(_impl_.detectedregion_){arena}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.mapdeviceid_){}
    , decltype(_impl_.refpos_){nullptr}
    , decltype(_impl_.roadsignalstate_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.msgcnt_){0u}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.toalgorithmtime_){uint64_t{0u}}
    , decltype(_impl_.todatabustime_){uint64_t{0u}}
    , decltype(_impl_.tocloudtime_){uint64_t{0u}}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.scenetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CamData::~CamData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.CamData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ptclist_.~RepeatedPtrField();
  _impl_.obstaclelist_.~RepeatedPtrField();
  _impl_.rtelist_.~RepeatedPtrField();
  _impl_.rtslist_.~RepeatedPtrField();
  _impl_.bsmlist_.~RepeatedPtrField();
  _impl_.virlist_.~RepeatedPtrField();
  _impl_.rsclist_.~RepeatedPtrField();
  _impl_.trafficflow_.~RepeatedPtrField();
  _impl_.signalschemelist_.~RepeatedPtrField();
  _impl_.detectedregion_.~RepeatedPtrField();
  _impl_.ver_.Destroy();
  _impl_.deviceid_.Destroy();
  _impl_.mapdeviceid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.refpos_;
  if (this != internal_default_instance()) delete _impl_.roadsignalstate_;
}

void CamData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.CamData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ptclist_.Clear();
  _impl_.obstaclelist_.Clear();
  _impl_.rtelist_.Clear();
  _impl_.rtslist_.Clear();
  _impl_.bsmlist_.Clear();
  _impl_.virlist_.Clear();
  _impl_.rsclist_.Clear();
  _impl_.trafficflow_.Clear();
  _impl_.signalschemelist_.Clear();
  _impl_.detectedregion_.Clear();
  _impl_.ver_.ClearToEmpty();
  _impl_.deviceid_.ClearToEmpty();
  _impl_.mapdeviceid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.refpos_ != nullptr) {
    delete _impl_.refpos_;
  }
  _impl_.refpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.roadsignalstate_ != nullptr) {
    delete _impl_.roadsignalstate_;
  }
  _impl_.roadsignalstate_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scenetype_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.scenetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.CamData.ver"));
        } else
          goto handle_unusual;
        continue;
      // uint32 msgCnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.msgcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.CamData.deviceId"));
        } else
          goto handle_unusual;
        continue;
      // string mapDeviceId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mapdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.CamData.mapDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D refPos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_refpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SceneType sceneType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scenetype(static_cast<::cn::seisys::v2x::pb::SceneType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ParticipantData ptcList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ptclist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.ObstacleData obstacleList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstaclelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RteData rteList = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rtelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RtsData rtsList = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rtslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.BsmData bsmList = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bsmlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.VirData virList = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RscData rscList = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsclist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SpatData roadSignalState = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_roadsignalstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.TrafficFlow trafficFlow = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_trafficflow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.SignalScheme signalSchemeList = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_signalschemelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.Polygon detectedRegion = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_detectedregion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 toAlgorithmTime = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.toalgorithmtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 toDatabusTime = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.todatabustime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 toCloudTime = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.tocloudtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.CamData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string ver = 2;
  if (!this->_internal_ver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ver().data(), static_cast<int>(this->_internal_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.CamData.ver");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ver(), target);
  }

  // uint32 msgCnt = 3;
  if (this->_internal_msgcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msgcnt(), target);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // string deviceId = 5;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.CamData.deviceId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_deviceid(), target);
  }

  // string mapDeviceId = 6;
  if (!this->_internal_mapdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapdeviceid().data(), static_cast<int>(this->_internal_mapdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.CamData.mapDeviceId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mapdeviceid(), target);
  }

  // .cn.seisys.v2x.pb.Position3D refPos = 7;
  if (this->_internal_has_refpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::refpos(this),
        _Internal::refpos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.SceneType sceneType = 8;
  if (this->_internal_scenetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_scenetype(), target);
  }

  // repeated .cn.seisys.v2x.pb.ParticipantData ptcList = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ptclist_size()); i < n; i++) {
    const auto& repfield = this->_internal_ptclist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.ObstacleData obstacleList = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstaclelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstaclelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.RteData rteList = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rtelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_rtelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.RtsData rtsList = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rtslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_rtslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.BsmData bsmList = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bsmlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_bsmlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.VirData virList = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_virlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_virlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.RscData rscList = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rsclist_size()); i < n; i++) {
    const auto& repfield = this->_internal_rsclist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.SpatData roadSignalState = 16;
  if (this->_internal_has_roadsignalstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::roadsignalstate(this),
        _Internal::roadsignalstate(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.TrafficFlow trafficFlow = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trafficflow_size()); i < n; i++) {
    const auto& repfield = this->_internal_trafficflow(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.SignalScheme signalSchemeList = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signalschemelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_signalschemelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.v2x.pb.Polygon detectedRegion = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detectedregion_size()); i < n; i++) {
    const auto& repfield = this->_internal_detectedregion(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 toAlgorithmTime = 20;
  if (this->_internal_toalgorithmtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_toalgorithmtime(), target);
  }

  // uint64 toDatabusTime = 21;
  if (this->_internal_todatabustime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_todatabustime(), target);
  }

  // uint64 toCloudTime = 22;
  if (this->_internal_tocloudtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_tocloudtime(), target);
  }

  // uint64 id = 23;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.CamData)
  return target;
}

size_t CamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.CamData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.ParticipantData ptcList = 9;
  total_size += 1UL * this->_internal_ptclist_size();
  for (const auto& msg : this->_impl_.ptclist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.ObstacleData obstacleList = 10;
  total_size += 1UL * this->_internal_obstaclelist_size();
  for (const auto& msg : this->_impl_.obstaclelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.RteData rteList = 11;
  total_size += 1UL * this->_internal_rtelist_size();
  for (const auto& msg : this->_impl_.rtelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.RtsData rtsList = 12;
  total_size += 1UL * this->_internal_rtslist_size();
  for (const auto& msg : this->_impl_.rtslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.BsmData bsmList = 13;
  total_size += 1UL * this->_internal_bsmlist_size();
  for (const auto& msg : this->_impl_.bsmlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.VirData virList = 14;
  total_size += 1UL * this->_internal_virlist_size();
  for (const auto& msg : this->_impl_.virlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.RscData rscList = 15;
  total_size += 1UL * this->_internal_rsclist_size();
  for (const auto& msg : this->_impl_.rsclist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.TrafficFlow trafficFlow = 17;
  total_size += 2UL * this->_internal_trafficflow_size();
  for (const auto& msg : this->_impl_.trafficflow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.SignalScheme signalSchemeList = 18;
  total_size += 2UL * this->_internal_signalschemelist_size();
  for (const auto& msg : this->_impl_.signalschemelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.v2x.pb.Polygon detectedRegion = 19;
  total_size += 2UL * this->_internal_detectedregion_size();
  for (const auto& msg : this->_impl_.detectedregion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ver = 2;
  if (!this->_internal_ver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ver());
  }

  // string deviceId = 5;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string mapDeviceId = 6;
  if (!this->_internal_mapdeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapdeviceid());
  }

  // .cn.seisys.v2x.pb.Position3D refPos = 7;
  if (this->_internal_has_refpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refpos_);
  }

  // .cn.seisys.v2x.pb.SpatData roadSignalState = 16;
  if (this->_internal_has_roadsignalstate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roadsignalstate_);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 msgCnt = 3;
  if (this->_internal_msgcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgcnt());
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 toAlgorithmTime = 20;
  if (this->_internal_toalgorithmtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_toalgorithmtime());
  }

  // uint64 toDatabusTime = 21;
  if (this->_internal_todatabustime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_todatabustime());
  }

  // uint64 toCloudTime = 22;
  if (this->_internal_tocloudtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_tocloudtime());
  }

  // uint64 id = 23;
  if (this->_internal_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // .cn.seisys.v2x.pb.SceneType sceneType = 8;
  if (this->_internal_scenetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scenetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamData::GetClassData() const { return &_class_data_; }


void CamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamData*>(&to_msg);
  auto& from = static_cast<const CamData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.CamData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ptclist_.MergeFrom(from._impl_.ptclist_);
  _this->_impl_.obstaclelist_.MergeFrom(from._impl_.obstaclelist_);
  _this->_impl_.rtelist_.MergeFrom(from._impl_.rtelist_);
  _this->_impl_.rtslist_.MergeFrom(from._impl_.rtslist_);
  _this->_impl_.bsmlist_.MergeFrom(from._impl_.bsmlist_);
  _this->_impl_.virlist_.MergeFrom(from._impl_.virlist_);
  _this->_impl_.rsclist_.MergeFrom(from._impl_.rsclist_);
  _this->_impl_.trafficflow_.MergeFrom(from._impl_.trafficflow_);
  _this->_impl_.signalschemelist_.MergeFrom(from._impl_.signalschemelist_);
  _this->_impl_.detectedregion_.MergeFrom(from._impl_.detectedregion_);
  if (!from._internal_ver().empty()) {
    _this->_internal_set_ver(from._internal_ver());
  }
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_mapdeviceid().empty()) {
    _this->_internal_set_mapdeviceid(from._internal_mapdeviceid());
  }
  if (from._internal_has_refpos()) {
    _this->_internal_mutable_refpos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_refpos());
  }
  if (from._internal_has_roadsignalstate()) {
    _this->_internal_mutable_roadsignalstate()->::cn::seisys::v2x::pb::SpatData::MergeFrom(
        from._internal_roadsignalstate());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_msgcnt() != 0) {
    _this->_internal_set_msgcnt(from._internal_msgcnt());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_toalgorithmtime() != 0) {
    _this->_internal_set_toalgorithmtime(from._internal_toalgorithmtime());
  }
  if (from._internal_todatabustime() != 0) {
    _this->_internal_set_todatabustime(from._internal_todatabustime());
  }
  if (from._internal_tocloudtime() != 0) {
    _this->_internal_set_tocloudtime(from._internal_tocloudtime());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_scenetype() != 0) {
    _this->_internal_set_scenetype(from._internal_scenetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamData::CopyFrom(const CamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.CamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamData::IsInitialized() const {
  return true;
}

void CamData::InternalSwap(CamData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ptclist_.InternalSwap(&other->_impl_.ptclist_);
  _impl_.obstaclelist_.InternalSwap(&other->_impl_.obstaclelist_);
  _impl_.rtelist_.InternalSwap(&other->_impl_.rtelist_);
  _impl_.rtslist_.InternalSwap(&other->_impl_.rtslist_);
  _impl_.bsmlist_.InternalSwap(&other->_impl_.bsmlist_);
  _impl_.virlist_.InternalSwap(&other->_impl_.virlist_);
  _impl_.rsclist_.InternalSwap(&other->_impl_.rsclist_);
  _impl_.trafficflow_.InternalSwap(&other->_impl_.trafficflow_);
  _impl_.signalschemelist_.InternalSwap(&other->_impl_.signalschemelist_);
  _impl_.detectedregion_.InternalSwap(&other->_impl_.detectedregion_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ver_, lhs_arena,
      &other->_impl_.ver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapdeviceid_, lhs_arena,
      &other->_impl_.mapdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamData, _impl_.scenetype_)
      + sizeof(CamData::_impl_.scenetype_)
      - PROTOBUF_FIELD_OFFSET(CamData, _impl_.refpos_)>(
          reinterpret_cast<char*>(&_impl_.refpos_),
          reinterpret_cast<char*>(&other->_impl_.refpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[107]);
}

// ===================================================================

class StatusData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& posdevice(const StatusData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
StatusData::_Internal::posdevice(const StatusData* msg) {
  return *msg->_impl_.posdevice_;
}
StatusData::StatusData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.StatusData)
}
StatusData::StatusData(const StatusData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , decltype(_impl_.mapdeviceid_){}
    , decltype(_impl_.posdevice_){nullptr}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.statustype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapdeviceid().empty()) {
    _this->_impl_.mapdeviceid_.Set(from._internal_mapdeviceid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_posdevice()) {
    _this->_impl_.posdevice_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.posdevice_);
  }
  ::memcpy(&_impl_.devicetype_, &from._impl_.devicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.statustype_) -
    reinterpret_cast<char*>(&_impl_.devicetype_)) + sizeof(_impl_.statustype_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.StatusData)
}

inline void StatusData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , decltype(_impl_.mapdeviceid_){}
    , decltype(_impl_.posdevice_){nullptr}
    , decltype(_impl_.devicetype_){0}
    , decltype(_impl_.statustype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusData::~StatusData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.StatusData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.mapdeviceid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.posdevice_;
}

void StatusData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.StatusData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceid_.ClearToEmpty();
  _impl_.mapdeviceid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.posdevice_ != nullptr) {
    delete _impl_.posdevice_;
  }
  _impl_.posdevice_ = nullptr;
  ::memset(&_impl_.devicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.statustype_) -
      reinterpret_cast<char*>(&_impl_.devicetype_)) + sizeof(_impl_.statustype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.StatusData.deviceId"));
        } else
          goto handle_unusual;
        continue;
      // string mapDeviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mapdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.StatusData.mapDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.DeviceType deviceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::cn::seisys::v2x::pb::DeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.StatusData.StatusType statusType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statustype(static_cast<::cn::seisys::v2x::pb::StatusData_StatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D posDevice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_posdevice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.StatusData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.StatusData.deviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // string mapDeviceId = 2;
  if (!this->_internal_mapdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapdeviceid().data(), static_cast<int>(this->_internal_mapdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.StatusData.mapDeviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapdeviceid(), target);
  }

  // .cn.seisys.v2x.pb.DeviceType deviceType = 3;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_devicetype(), target);
  }

  // .cn.seisys.v2x.pb.StatusData.StatusType statusType = 4;
  if (this->_internal_statustype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_statustype(), target);
  }

  // .cn.seisys.v2x.pb.Position3D posDevice = 5;
  if (this->_internal_has_posdevice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::posdevice(this),
        _Internal::posdevice(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.StatusData)
  return target;
}

size_t StatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.StatusData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string mapDeviceId = 2;
  if (!this->_internal_mapdeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapdeviceid());
  }

  // .cn.seisys.v2x.pb.Position3D posDevice = 5;
  if (this->_internal_has_posdevice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posdevice_);
  }

  // .cn.seisys.v2x.pb.DeviceType deviceType = 3;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  // .cn.seisys.v2x.pb.StatusData.StatusType statusType = 4;
  if (this->_internal_statustype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_statustype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusData::GetClassData() const { return &_class_data_; }


void StatusData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusData*>(&to_msg);
  auto& from = static_cast<const StatusData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.StatusData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_mapdeviceid().empty()) {
    _this->_internal_set_mapdeviceid(from._internal_mapdeviceid());
  }
  if (from._internal_has_posdevice()) {
    _this->_internal_mutable_posdevice()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_posdevice());
  }
  if (from._internal_devicetype() != 0) {
    _this->_internal_set_devicetype(from._internal_devicetype());
  }
  if (from._internal_statustype() != 0) {
    _this->_internal_set_statustype(from._internal_statustype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusData::CopyFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.StatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusData::IsInitialized() const {
  return true;
}

void StatusData::InternalSwap(StatusData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapdeviceid_, lhs_arena,
      &other->_impl_.mapdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusData, _impl_.statustype_)
      + sizeof(StatusData::_impl_.statustype_)
      - PROTOBUF_FIELD_OFFSET(StatusData, _impl_.posdevice_)>(
          reinterpret_cast<char*>(&_impl_.posdevice_),
          reinterpret_cast<char*>(&other->_impl_.posdevice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[108]);
}

// ===================================================================

class DenmData::_Internal {
 public:
  static const ::cn::seisys::v2x::pb::Position3D& refpos(const DenmData* msg);
};

const ::cn::seisys::v2x::pb::Position3D&
DenmData::_Internal::refpos(const DenmData* msg) {
  return *msg->_impl_.refpos_;
}
DenmData::DenmData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.DenmData)
}
DenmData::DenmData(const DenmData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DenmData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statuslist_){from._impl_.statuslist_}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.refpos_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.msgcnt_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.scenetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ver().empty()) {
    _this->_impl_.ver_.Set(from._internal_ver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_refpos()) {
    _this->_impl_.refpos_ = new ::cn::seisys::v2x::pb::Position3D(*from._impl_.refpos_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scenetype_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.scenetype_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.DenmData)
}

inline void DenmData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statuslist_){arena}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.refpos_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.msgcnt_){0u}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.scenetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenmData::~DenmData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.DenmData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenmData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.statuslist_.~RepeatedPtrField();
  _impl_.ver_.Destroy();
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.refpos_;
}

void DenmData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenmData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.DenmData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.statuslist_.Clear();
  _impl_.ver_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.refpos_ != nullptr) {
    delete _impl_.refpos_;
  }
  _impl_.refpos_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scenetype_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.scenetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenmData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.DenmData.ver"));
        } else
          goto handle_unusual;
        continue;
      // uint32 msgCnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.msgcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.DenmData.address"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.Position3D refPos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_refpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.v2x.pb.SceneType sceneType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scenetype(static_cast<::cn::seisys::v2x::pb::SceneType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.StatusData statusList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DenmData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.DenmData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string ver = 2;
  if (!this->_internal_ver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ver().data(), static_cast<int>(this->_internal_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.DenmData.ver");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ver(), target);
  }

  // uint32 msgCnt = 3;
  if (this->_internal_msgcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msgcnt(), target);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // string address = 5;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.DenmData.address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_address(), target);
  }

  // .cn.seisys.v2x.pb.Position3D refPos = 6;
  if (this->_internal_has_refpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::refpos(this),
        _Internal::refpos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.v2x.pb.SceneType sceneType = 7;
  if (this->_internal_scenetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_scenetype(), target);
  }

  // repeated .cn.seisys.v2x.pb.StatusData statusList = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statuslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_statuslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.DenmData)
  return target;
}

size_t DenmData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.DenmData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.StatusData statusList = 8;
  total_size += 1UL * this->_internal_statuslist_size();
  for (const auto& msg : this->_impl_.statuslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ver = 2;
  if (!this->_internal_ver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ver());
  }

  // string address = 5;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .cn.seisys.v2x.pb.Position3D refPos = 6;
  if (this->_internal_has_refpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refpos_);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 msgCnt = 3;
  if (this->_internal_msgcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgcnt());
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .cn.seisys.v2x.pb.SceneType sceneType = 7;
  if (this->_internal_scenetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scenetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenmData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DenmData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenmData::GetClassData() const { return &_class_data_; }


void DenmData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DenmData*>(&to_msg);
  auto& from = static_cast<const DenmData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.DenmData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.statuslist_.MergeFrom(from._impl_.statuslist_);
  if (!from._internal_ver().empty()) {
    _this->_internal_set_ver(from._internal_ver());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_has_refpos()) {
    _this->_internal_mutable_refpos()->::cn::seisys::v2x::pb::Position3D::MergeFrom(
        from._internal_refpos());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_msgcnt() != 0) {
    _this->_internal_set_msgcnt(from._internal_msgcnt());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_scenetype() != 0) {
    _this->_internal_set_scenetype(from._internal_scenetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenmData::CopyFrom(const DenmData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.DenmData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenmData::IsInitialized() const {
  return true;
}

void DenmData::InternalSwap(DenmData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.statuslist_.InternalSwap(&other->_impl_.statuslist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ver_, lhs_arena,
      &other->_impl_.ver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DenmData, _impl_.scenetype_)
      + sizeof(DenmData::_impl_.scenetype_)
      - PROTOBUF_FIELD_OFFSET(DenmData, _impl_.refpos_)>(
          reinterpret_cast<char*>(&_impl_.refpos_),
          reinterpret_cast<char*>(&other->_impl_.refpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DenmData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[109]);
}

// ===================================================================

class RsiReply::_Internal {
 public:
};

RsiReply::RsiReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RsiReply)
}
RsiReply::RsiReply(const RsiReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RsiReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sourcedeviceid_){}
    , decltype(_impl_.targetdeviceid_){}
    , decltype(_impl_.creattime_){}
    , decltype(_impl_.distributiontime_){}
    , decltype(_impl_.completiontime_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.sourcetopic_){}
    , decltype(_impl_.targettopic_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.eventtype_){}
    , decltype(_impl_.operationtype_){}
    , decltype(_impl_.camdataid_){}
    , decltype(_impl_.dataid_){}
    , decltype(_impl_.eventsourceid_){}
    , decltype(_impl_.distributionstatusid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sourcedeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcedeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcedeviceid().empty()) {
    _this->_impl_.sourcedeviceid_.Set(from._internal_sourcedeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetdeviceid().empty()) {
    _this->_impl_.targetdeviceid_.Set(from._internal_targetdeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creattime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creattime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creattime().empty()) {
    _this->_impl_.creattime_.Set(from._internal_creattime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.distributiontime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distributiontime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_distributiontime().empty()) {
    _this->_impl_.distributiontime_.Set(from._internal_distributiontime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.completiontime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completiontime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_completiontime().empty()) {
    _this->_impl_.completiontime_.Set(from._internal_completiontime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.updatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updatetime().empty()) {
    _this->_impl_.updatetime_.Set(from._internal_updatetime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourcetopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetopic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcetopic().empty()) {
    _this->_impl_.sourcetopic_.Set(from._internal_sourcetopic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targettopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targettopic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targettopic().empty()) {
    _this->_impl_.targettopic_.Set(from._internal_targettopic(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distributionstatusid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.distributionstatusid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RsiReply)
}

inline void RsiReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sourcedeviceid_){}
    , decltype(_impl_.targetdeviceid_){}
    , decltype(_impl_.creattime_){}
    , decltype(_impl_.distributiontime_){}
    , decltype(_impl_.completiontime_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.sourcetopic_){}
    , decltype(_impl_.targettopic_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.eventtype_){0u}
    , decltype(_impl_.operationtype_){0u}
    , decltype(_impl_.camdataid_){uint64_t{0u}}
    , decltype(_impl_.dataid_){uint64_t{0u}}
    , decltype(_impl_.eventsourceid_){uint64_t{0u}}
    , decltype(_impl_.distributionstatusid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sourcedeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcedeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creattime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creattime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.distributiontime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.distributiontime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.completiontime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completiontime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.updatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourcetopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetopic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targettopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targettopic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RsiReply::~RsiReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RsiReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RsiReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sourcedeviceid_.Destroy();
  _impl_.targetdeviceid_.Destroy();
  _impl_.creattime_.Destroy();
  _impl_.distributiontime_.Destroy();
  _impl_.completiontime_.Destroy();
  _impl_.updatetime_.Destroy();
  _impl_.description_.Destroy();
  _impl_.sourcetopic_.Destroy();
  _impl_.targettopic_.Destroy();
}

void RsiReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RsiReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RsiReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sourcedeviceid_.ClearToEmpty();
  _impl_.targetdeviceid_.ClearToEmpty();
  _impl_.creattime_.ClearToEmpty();
  _impl_.distributiontime_.ClearToEmpty();
  _impl_.completiontime_.ClearToEmpty();
  _impl_.updatetime_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.sourcetopic_.ClearToEmpty();
  _impl_.targettopic_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distributionstatusid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.distributionstatusid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RsiReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 eventType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.eventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sourceDeviceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sourcedeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.sourceDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // string targetDeviceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_targetdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.targetDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // string creatTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_creattime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.creatTime"));
        } else
          goto handle_unusual;
        continue;
      // string distributionTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_distributiontime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.distributionTime"));
        } else
          goto handle_unusual;
        continue;
      // string completionTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_completiontime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.completionTime"));
        } else
          goto handle_unusual;
        continue;
      // string updateTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_updatetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.updateTime"));
        } else
          goto handle_unusual;
        continue;
      // uint32 operationType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.operationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 camDataId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.camdataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dataId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.dataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 eventSourceId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.eventsourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 distributionStatusId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.distributionstatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.description"));
        } else
          goto handle_unusual;
        continue;
      // string sourceTopic = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_sourcetopic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.sourceTopic"));
        } else
          goto handle_unusual;
        continue;
      // string targetTopic = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_targettopic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsiReply.targetTopic"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RsiReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RsiReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 eventType = 2;
  if (this->_internal_eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eventtype(), target);
  }

  // string sourceDeviceId = 3;
  if (!this->_internal_sourcedeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcedeviceid().data(), static_cast<int>(this->_internal_sourcedeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.sourceDeviceId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sourcedeviceid(), target);
  }

  // string targetDeviceId = 4;
  if (!this->_internal_targetdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetdeviceid().data(), static_cast<int>(this->_internal_targetdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.targetDeviceId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_targetdeviceid(), target);
  }

  // string creatTime = 5;
  if (!this->_internal_creattime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creattime().data(), static_cast<int>(this->_internal_creattime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.creatTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_creattime(), target);
  }

  // string distributionTime = 6;
  if (!this->_internal_distributiontime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distributiontime().data(), static_cast<int>(this->_internal_distributiontime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.distributionTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_distributiontime(), target);
  }

  // string completionTime = 7;
  if (!this->_internal_completiontime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_completiontime().data(), static_cast<int>(this->_internal_completiontime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.completionTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_completiontime(), target);
  }

  // string updateTime = 8;
  if (!this->_internal_updatetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatetime().data(), static_cast<int>(this->_internal_updatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.updateTime");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_updatetime(), target);
  }

  // uint32 operationType = 9;
  if (this->_internal_operationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_operationtype(), target);
  }

  // uint64 camDataId = 10;
  if (this->_internal_camdataid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_camdataid(), target);
  }

  // uint64 dataId = 11;
  if (this->_internal_dataid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_dataid(), target);
  }

  // uint64 eventSourceId = 12;
  if (this->_internal_eventsourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_eventsourceid(), target);
  }

  // uint32 distributionStatusId = 13;
  if (this->_internal_distributionstatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_distributionstatusid(), target);
  }

  // string description = 14;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.description");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_description(), target);
  }

  // string sourceTopic = 15;
  if (!this->_internal_sourcetopic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcetopic().data(), static_cast<int>(this->_internal_sourcetopic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.sourceTopic");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_sourcetopic(), target);
  }

  // string targetTopic = 16;
  if (!this->_internal_targettopic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targettopic().data(), static_cast<int>(this->_internal_targettopic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsiReply.targetTopic");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_targettopic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RsiReply)
  return target;
}

size_t RsiReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RsiReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceDeviceId = 3;
  if (!this->_internal_sourcedeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcedeviceid());
  }

  // string targetDeviceId = 4;
  if (!this->_internal_targetdeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetdeviceid());
  }

  // string creatTime = 5;
  if (!this->_internal_creattime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creattime());
  }

  // string distributionTime = 6;
  if (!this->_internal_distributiontime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distributiontime());
  }

  // string completionTime = 7;
  if (!this->_internal_completiontime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completiontime());
  }

  // string updateTime = 8;
  if (!this->_internal_updatetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatetime());
  }

  // string description = 14;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string sourceTopic = 15;
  if (!this->_internal_sourcetopic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcetopic());
  }

  // string targetTopic = 16;
  if (!this->_internal_targettopic().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targettopic());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint32 eventType = 2;
  if (this->_internal_eventtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventtype());
  }

  // uint32 operationType = 9;
  if (this->_internal_operationtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operationtype());
  }

  // uint64 camDataId = 10;
  if (this->_internal_camdataid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camdataid());
  }

  // uint64 dataId = 11;
  if (this->_internal_dataid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dataid());
  }

  // uint64 eventSourceId = 12;
  if (this->_internal_eventsourceid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_eventsourceid());
  }

  // uint32 distributionStatusId = 13;
  if (this->_internal_distributionstatusid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distributionstatusid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RsiReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RsiReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RsiReply::GetClassData() const { return &_class_data_; }


void RsiReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RsiReply*>(&to_msg);
  auto& from = static_cast<const RsiReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RsiReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sourcedeviceid().empty()) {
    _this->_internal_set_sourcedeviceid(from._internal_sourcedeviceid());
  }
  if (!from._internal_targetdeviceid().empty()) {
    _this->_internal_set_targetdeviceid(from._internal_targetdeviceid());
  }
  if (!from._internal_creattime().empty()) {
    _this->_internal_set_creattime(from._internal_creattime());
  }
  if (!from._internal_distributiontime().empty()) {
    _this->_internal_set_distributiontime(from._internal_distributiontime());
  }
  if (!from._internal_completiontime().empty()) {
    _this->_internal_set_completiontime(from._internal_completiontime());
  }
  if (!from._internal_updatetime().empty()) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_sourcetopic().empty()) {
    _this->_internal_set_sourcetopic(from._internal_sourcetopic());
  }
  if (!from._internal_targettopic().empty()) {
    _this->_internal_set_targettopic(from._internal_targettopic());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_eventtype() != 0) {
    _this->_internal_set_eventtype(from._internal_eventtype());
  }
  if (from._internal_operationtype() != 0) {
    _this->_internal_set_operationtype(from._internal_operationtype());
  }
  if (from._internal_camdataid() != 0) {
    _this->_internal_set_camdataid(from._internal_camdataid());
  }
  if (from._internal_dataid() != 0) {
    _this->_internal_set_dataid(from._internal_dataid());
  }
  if (from._internal_eventsourceid() != 0) {
    _this->_internal_set_eventsourceid(from._internal_eventsourceid());
  }
  if (from._internal_distributionstatusid() != 0) {
    _this->_internal_set_distributionstatusid(from._internal_distributionstatusid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RsiReply::CopyFrom(const RsiReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RsiReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsiReply::IsInitialized() const {
  return true;
}

void RsiReply::InternalSwap(RsiReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcedeviceid_, lhs_arena,
      &other->_impl_.sourcedeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetdeviceid_, lhs_arena,
      &other->_impl_.targetdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creattime_, lhs_arena,
      &other->_impl_.creattime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.distributiontime_, lhs_arena,
      &other->_impl_.distributiontime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.completiontime_, lhs_arena,
      &other->_impl_.completiontime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.updatetime_, lhs_arena,
      &other->_impl_.updatetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcetopic_, lhs_arena,
      &other->_impl_.sourcetopic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targettopic_, lhs_arena,
      &other->_impl_.targettopic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RsiReply, _impl_.distributionstatusid_)
      + sizeof(RsiReply::_impl_.distributionstatusid_)
      - PROTOBUF_FIELD_OFFSET(RsiReply, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RsiReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[110]);
}

// ===================================================================

class RsuRsmReply::_Internal {
 public:
};

RsuRsmReply::RsuRsmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RsuRsmReply)
}
RsuRsmReply::RsuRsmReply(const RsuRsmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RsuRsmReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rsmreplylist_){from._impl_.rsmreplylist_}
    , decltype(_impl_.sourcedeviceid_){}
    , decltype(_impl_.targetdeviceid_){}
    , decltype(_impl_.targettopic_){}
    , decltype(_impl_.camdataid_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sourcedeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcedeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcedeviceid().empty()) {
    _this->_impl_.sourcedeviceid_.Set(from._internal_sourcedeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetdeviceid().empty()) {
    _this->_impl_.targetdeviceid_.Set(from._internal_targetdeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targettopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targettopic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targettopic().empty()) {
    _this->_impl_.targettopic_.Set(from._internal_targettopic(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.camdataid_, &from._impl_.camdataid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.camdataid_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RsuRsmReply)
}

inline void RsuRsmReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rsmreplylist_){arena}
    , decltype(_impl_.sourcedeviceid_){}
    , decltype(_impl_.targetdeviceid_){}
    , decltype(_impl_.targettopic_){}
    , decltype(_impl_.camdataid_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sourcedeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcedeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targettopic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targettopic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RsuRsmReply::~RsuRsmReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RsuRsmReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RsuRsmReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rsmreplylist_.~RepeatedPtrField();
  _impl_.sourcedeviceid_.Destroy();
  _impl_.targetdeviceid_.Destroy();
  _impl_.targettopic_.Destroy();
}

void RsuRsmReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RsuRsmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RsuRsmReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rsmreplylist_.Clear();
  _impl_.sourcedeviceid_.ClearToEmpty();
  _impl_.targetdeviceid_.ClearToEmpty();
  _impl_.targettopic_.ClearToEmpty();
  ::memset(&_impl_.camdataid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.camdataid_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RsuRsmReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceDeviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourcedeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsuRsmReply.sourceDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // string targetDeviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_targetdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsuRsmReply.targetDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // uint64 camDataId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.camdataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.v2x.pb.RsmReply rsmReplyList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsmreplylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string targetTopic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_targettopic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsuRsmReply.targetTopic"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RsuRsmReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RsuRsmReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceDeviceId = 1;
  if (!this->_internal_sourcedeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcedeviceid().data(), static_cast<int>(this->_internal_sourcedeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsuRsmReply.sourceDeviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcedeviceid(), target);
  }

  // string targetDeviceId = 2;
  if (!this->_internal_targetdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetdeviceid().data(), static_cast<int>(this->_internal_targetdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsuRsmReply.targetDeviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_targetdeviceid(), target);
  }

  // uint64 camDataId = 3;
  if (this->_internal_camdataid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_camdataid(), target);
  }

  // repeated .cn.seisys.v2x.pb.RsmReply rsmReplyList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rsmreplylist_size()); i < n; i++) {
    const auto& repfield = this->_internal_rsmreplylist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string targetTopic = 5;
  if (!this->_internal_targettopic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targettopic().data(), static_cast<int>(this->_internal_targettopic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsuRsmReply.targetTopic");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_targettopic(), target);
  }

  // uint64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RsuRsmReply)
  return target;
}

size_t RsuRsmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RsuRsmReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.v2x.pb.RsmReply rsmReplyList = 4;
  total_size += 1UL * this->_internal_rsmreplylist_size();
  for (const auto& msg : this->_impl_.rsmreplylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sourceDeviceId = 1;
  if (!this->_internal_sourcedeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcedeviceid());
  }

  // string targetDeviceId = 2;
  if (!this->_internal_targetdeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetdeviceid());
  }

  // string targetTopic = 5;
  if (!this->_internal_targettopic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targettopic());
  }

  // uint64 camDataId = 3;
  if (this->_internal_camdataid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camdataid());
  }

  // uint64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RsuRsmReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RsuRsmReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RsuRsmReply::GetClassData() const { return &_class_data_; }


void RsuRsmReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RsuRsmReply*>(&to_msg);
  auto& from = static_cast<const RsuRsmReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RsuRsmReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rsmreplylist_.MergeFrom(from._impl_.rsmreplylist_);
  if (!from._internal_sourcedeviceid().empty()) {
    _this->_internal_set_sourcedeviceid(from._internal_sourcedeviceid());
  }
  if (!from._internal_targetdeviceid().empty()) {
    _this->_internal_set_targetdeviceid(from._internal_targetdeviceid());
  }
  if (!from._internal_targettopic().empty()) {
    _this->_internal_set_targettopic(from._internal_targettopic());
  }
  if (from._internal_camdataid() != 0) {
    _this->_internal_set_camdataid(from._internal_camdataid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RsuRsmReply::CopyFrom(const RsuRsmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RsuRsmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsuRsmReply::IsInitialized() const {
  return true;
}

void RsuRsmReply::InternalSwap(RsuRsmReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rsmreplylist_.InternalSwap(&other->_impl_.rsmreplylist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcedeviceid_, lhs_arena,
      &other->_impl_.sourcedeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetdeviceid_, lhs_arena,
      &other->_impl_.targetdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targettopic_, lhs_arena,
      &other->_impl_.targettopic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RsuRsmReply, _impl_.timestamp_)
      + sizeof(RsuRsmReply::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(RsuRsmReply, _impl_.camdataid_)>(
          reinterpret_cast<char*>(&_impl_.camdataid_),
          reinterpret_cast<char*>(&other->_impl_.camdataid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RsuRsmReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[111]);
}

// ===================================================================

class RsmReply::_Internal {
 public:
};

RsmReply::RsmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.RsmReply)
}
RsmReply::RsmReply(const RsmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RsmReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.dataid_){}
    , decltype(_impl_.distributionstatusid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dataid_, &from._impl_.dataid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distributionstatusid_) -
    reinterpret_cast<char*>(&_impl_.dataid_)) + sizeof(_impl_.distributionstatusid_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.RsmReply)
}

inline void RsmReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.dataid_){uint64_t{0u}}
    , decltype(_impl_.distributionstatusid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RsmReply::~RsmReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.RsmReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RsmReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
}

void RsmReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RsmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.RsmReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.dataid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distributionstatusid_) -
      reinterpret_cast<char*>(&_impl_.dataid_)) + sizeof(_impl_.distributionstatusid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RsmReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 dataId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 distributionStatusId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.distributionstatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.RsmReply.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RsmReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.RsmReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dataId = 1;
  if (this->_internal_dataid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dataid(), target);
  }

  // uint32 distributionStatusId = 2;
  if (this->_internal_distributionstatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_distributionstatusid(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.RsmReply.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.RsmReply)
  return target;
}

size_t RsmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.RsmReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint64 dataId = 1;
  if (this->_internal_dataid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dataid());
  }

  // uint32 distributionStatusId = 2;
  if (this->_internal_distributionstatusid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distributionstatusid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RsmReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RsmReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RsmReply::GetClassData() const { return &_class_data_; }


void RsmReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RsmReply*>(&to_msg);
  auto& from = static_cast<const RsmReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.RsmReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_dataid() != 0) {
    _this->_internal_set_dataid(from._internal_dataid());
  }
  if (from._internal_distributionstatusid() != 0) {
    _this->_internal_set_distributionstatusid(from._internal_distributionstatusid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RsmReply::CopyFrom(const RsmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.RsmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsmReply::IsInitialized() const {
  return true;
}

void RsmReply::InternalSwap(RsmReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RsmReply, _impl_.distributionstatusid_)
      + sizeof(RsmReply::_impl_.distributionstatusid_)
      - PROTOBUF_FIELD_OFFSET(RsmReply, _impl_.dataid_)>(
          reinterpret_cast<char*>(&_impl_.dataid_),
          reinterpret_cast<char*>(&other->_impl_.dataid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RsmReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[112]);
}

// ===================================================================

class MonitorStatsData::_Internal {
 public:
};

MonitorStatsData::MonitorStatsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.v2x.pb.MonitorStatsData)
}
MonitorStatsData::MonitorStatsData(const MonitorStatsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonitorStatsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.camnums_){}
    , decltype(_impl_.participantnums_){}
    , decltype(_impl_.rtenums_){}
    , decltype(_impl_.trafficflownums_){}
    , decltype(_impl_.trafficflowstatnums_){}
    , decltype(_impl_.intersectionstatnums_){}
    , decltype(_impl_.phasestatnums_){}
    , decltype(_impl_.rtsnums_){}
    , decltype(_impl_.camerapathlistnums_){}
    , decltype(_impl_.camerapathnums_){}
    , decltype(_impl_.radarpathlistnums_){}
    , decltype(_impl_.radarpathnums_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radarpathnums_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.radarpathnums_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.v2x.pb.MonitorStatsData)
}

inline void MonitorStatsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.camnums_){uint64_t{0u}}
    , decltype(_impl_.participantnums_){uint64_t{0u}}
    , decltype(_impl_.rtenums_){uint64_t{0u}}
    , decltype(_impl_.trafficflownums_){uint64_t{0u}}
    , decltype(_impl_.trafficflowstatnums_){uint64_t{0u}}
    , decltype(_impl_.intersectionstatnums_){uint64_t{0u}}
    , decltype(_impl_.phasestatnums_){uint64_t{0u}}
    , decltype(_impl_.rtsnums_){uint64_t{0u}}
    , decltype(_impl_.camerapathlistnums_){uint64_t{0u}}
    , decltype(_impl_.camerapathnums_){uint64_t{0u}}
    , decltype(_impl_.radarpathlistnums_){uint64_t{0u}}
    , decltype(_impl_.radarpathnums_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MonitorStatsData::~MonitorStatsData() {
  // @@protoc_insertion_point(destructor:cn.seisys.v2x.pb.MonitorStatsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorStatsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void MonitorStatsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonitorStatsData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.v2x.pb.MonitorStatsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceid_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.radarpathnums_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.radarpathnums_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorStatsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.v2x.pb.MonitorStatsData.deviceId"));
        } else
          goto handle_unusual;
        continue;
      // uint64 camNums = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.camnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 participantNums = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.participantnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rteNums = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rtenums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 trafficflowNums = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.trafficflownums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 trafficflowStatNums = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.trafficflowstatnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 intersectionStatNums = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.intersectionstatnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 phaseStatNums = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.phasestatnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rtsNums = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.rtsnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cameraPathListNums = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.camerapathlistnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cameraPathNums = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.camerapathnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 radarPathListNums = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.radarpathlistnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 radarPathNums = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.radarpathnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorStatsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.v2x.pb.MonitorStatsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.v2x.pb.MonitorStatsData.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // uint64 camNums = 3;
  if (this->_internal_camnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_camnums(), target);
  }

  // uint64 participantNums = 4;
  if (this->_internal_participantnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_participantnums(), target);
  }

  // uint64 rteNums = 5;
  if (this->_internal_rtenums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rtenums(), target);
  }

  // uint64 trafficflowNums = 6;
  if (this->_internal_trafficflownums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_trafficflownums(), target);
  }

  // uint64 trafficflowStatNums = 7;
  if (this->_internal_trafficflowstatnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_trafficflowstatnums(), target);
  }

  // uint64 intersectionStatNums = 8;
  if (this->_internal_intersectionstatnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_intersectionstatnums(), target);
  }

  // uint64 phaseStatNums = 9;
  if (this->_internal_phasestatnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_phasestatnums(), target);
  }

  // uint64 rtsNums = 10;
  if (this->_internal_rtsnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_rtsnums(), target);
  }

  // uint64 cameraPathListNums = 11;
  if (this->_internal_camerapathlistnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_camerapathlistnums(), target);
  }

  // uint64 cameraPathNums = 12;
  if (this->_internal_camerapathnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_camerapathnums(), target);
  }

  // uint64 radarPathListNums = 13;
  if (this->_internal_radarpathlistnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_radarpathlistnums(), target);
  }

  // uint64 radarPathNums = 14;
  if (this->_internal_radarpathnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_radarpathnums(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.v2x.pb.MonitorStatsData)
  return target;
}

size_t MonitorStatsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.v2x.pb.MonitorStatsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 camNums = 3;
  if (this->_internal_camnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camnums());
  }

  // uint64 participantNums = 4;
  if (this->_internal_participantnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_participantnums());
  }

  // uint64 rteNums = 5;
  if (this->_internal_rtenums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rtenums());
  }

  // uint64 trafficflowNums = 6;
  if (this->_internal_trafficflownums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trafficflownums());
  }

  // uint64 trafficflowStatNums = 7;
  if (this->_internal_trafficflowstatnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trafficflowstatnums());
  }

  // uint64 intersectionStatNums = 8;
  if (this->_internal_intersectionstatnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_intersectionstatnums());
  }

  // uint64 phaseStatNums = 9;
  if (this->_internal_phasestatnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_phasestatnums());
  }

  // uint64 rtsNums = 10;
  if (this->_internal_rtsnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rtsnums());
  }

  // uint64 cameraPathListNums = 11;
  if (this->_internal_camerapathlistnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camerapathlistnums());
  }

  // uint64 cameraPathNums = 12;
  if (this->_internal_camerapathnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camerapathnums());
  }

  // uint64 radarPathListNums = 13;
  if (this->_internal_radarpathlistnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_radarpathlistnums());
  }

  // uint64 radarPathNums = 14;
  if (this->_internal_radarpathnums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_radarpathnums());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorStatsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonitorStatsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorStatsData::GetClassData() const { return &_class_data_; }


void MonitorStatsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonitorStatsData*>(&to_msg);
  auto& from = static_cast<const MonitorStatsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.v2x.pb.MonitorStatsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_camnums() != 0) {
    _this->_internal_set_camnums(from._internal_camnums());
  }
  if (from._internal_participantnums() != 0) {
    _this->_internal_set_participantnums(from._internal_participantnums());
  }
  if (from._internal_rtenums() != 0) {
    _this->_internal_set_rtenums(from._internal_rtenums());
  }
  if (from._internal_trafficflownums() != 0) {
    _this->_internal_set_trafficflownums(from._internal_trafficflownums());
  }
  if (from._internal_trafficflowstatnums() != 0) {
    _this->_internal_set_trafficflowstatnums(from._internal_trafficflowstatnums());
  }
  if (from._internal_intersectionstatnums() != 0) {
    _this->_internal_set_intersectionstatnums(from._internal_intersectionstatnums());
  }
  if (from._internal_phasestatnums() != 0) {
    _this->_internal_set_phasestatnums(from._internal_phasestatnums());
  }
  if (from._internal_rtsnums() != 0) {
    _this->_internal_set_rtsnums(from._internal_rtsnums());
  }
  if (from._internal_camerapathlistnums() != 0) {
    _this->_internal_set_camerapathlistnums(from._internal_camerapathlistnums());
  }
  if (from._internal_camerapathnums() != 0) {
    _this->_internal_set_camerapathnums(from._internal_camerapathnums());
  }
  if (from._internal_radarpathlistnums() != 0) {
    _this->_internal_set_radarpathlistnums(from._internal_radarpathlistnums());
  }
  if (from._internal_radarpathnums() != 0) {
    _this->_internal_set_radarpathnums(from._internal_radarpathnums());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorStatsData::CopyFrom(const MonitorStatsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.v2x.pb.MonitorStatsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorStatsData::IsInitialized() const {
  return true;
}

void MonitorStatsData::InternalSwap(MonitorStatsData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorStatsData, _impl_.radarpathnums_)
      + sizeof(MonitorStatsData::_impl_.radarpathnums_)
      - PROTOBUF_FIELD_OFFSET(MonitorStatsData, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorStatsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v2x_2eproto_getter, &descriptor_table_v2x_2eproto_once,
      file_level_metadata_v2x_2eproto[113]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace v2x
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RsiTimeDetails*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RsiTimeDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RsiTimeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Position3D*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Position3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Position3D >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PositionConfidenceSet*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PositionConfidenceSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PositionConfidenceSet >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ParticipantSize*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ParticipantSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ParticipantSize >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ParticipantSizeConfidence*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ParticipantSizeConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ParticipantSizeConfidence >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Polygon*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::DetectorArea*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::DetectorArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::DetectorArea >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RegulatorySpeedLimit*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RegulatorySpeedLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RegulatorySpeedLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::AccelerationSet4Way*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::AccelerationSet4Way >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::AccelerationSet4Way >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::AccelerationConfidence*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::AccelerationConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::AccelerationConfidence >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MotionConfidenceSet*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MotionConfidenceSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MotionConfidenceSet >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::VehicleSize*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::VehicleSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::VehicleSize >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::NodeReferenceId*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::NodeReferenceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::NodeReferenceId >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MapLocation*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MapLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MapLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PhaseId*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PhaseId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PhaseId >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReferenceLanes*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReferenceLanes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReferenceLanes >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReferencePath*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReferencePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReferencePath >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReferenceLink*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReferenceLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReferenceLink >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::AllowedManeuvers*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::AllowedManeuvers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::AllowedManeuvers >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneStatInfo*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneStatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneStatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::SectionStatInfo*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::SectionStatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::SectionStatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LinkStatInfo*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LinkStatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LinkStatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::NodeStatInfo*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::NodeStatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::NodeStatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MovementStatInfo*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MovementStatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MovementStatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TrafficFlowStatByInterval*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TrafficFlowStatByInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TrafficFlowStatByInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TrafficFlowStatBySignalCycle >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TrafficFlowStatType*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TrafficFlowStatType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TrafficFlowStatType >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TrafficFlowStatMapElement*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TrafficFlowStatMapElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TrafficFlowStatMapElement >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneIndexAdded*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneIndexAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneIndexAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LinkIndexAdded*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LinkIndexAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LinkIndexAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MovementIndexAdded*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MovementIndexAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MovementIndexAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::NodeIndexAdded*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::NodeIndexAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::NodeIndexAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::SignalControlIndexAdded*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::SignalControlIndexAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::SignalControlIndexAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TrafficFlowExtension*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TrafficFlowExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TrafficFlowExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TrafficFlowStat*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TrafficFlowStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TrafficFlowStat >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TrafficFlow*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TrafficFlow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TrafficFlow >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::TimeCountingDown*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::TimeCountingDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::TimeCountingDown >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PhaseState*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PhaseState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PhaseState >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Phase*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Phase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Phase >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::IntersectionState*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::IntersectionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::IntersectionState >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::SpatData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::SpatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::SpatData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LocalTimePoint*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LocalTimePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LocalTimePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PeriodictimeSpan*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PeriodictimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PeriodictimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::SingleTimeSpan*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::SingleTimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::SingleTimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::OptimTimeType*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::OptimTimeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::OptimTimeType >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MovementEx*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MovementEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MovementEx >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::OptimPhase*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::OptimPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::OptimPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::OptimData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::OptimData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::OptimData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::SignalScheme*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::SignalScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::SignalScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::BrakeSystemStatus*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::BrakeSystemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::BrakeSystemStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PositionAccuracy*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PositionAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PositionAccuracy >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ThrottleSystemStatus*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ThrottleSystemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ThrottleSystemStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::BsmData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::BsmData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::BsmData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PathHistoryPoint*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PathHistoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PathHistoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ParticipantData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ParticipantData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ParticipantData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ObstacleData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ObstacleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ObstacleData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ObjIdValue*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ObjIdValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ObjIdValue >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RteData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RteData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RtsData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RtsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RtsData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ConnectingLane*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ConnectingLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ConnectingLane >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Connection*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesParking*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesParking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesParking >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesCrosswalk*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesCrosswalk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesCrosswalk >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesBike*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesBike >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesBike >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesSidewalk*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesSidewalk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesSidewalk >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesBarrier*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesBarrier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesBarrier >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesStriping*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesStriping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesStriping >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesTrackedVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributesVehicle*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributesVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributesVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneTypeAttributes*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneTypeAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneTypeAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneSharing*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneSharing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneSharing >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneType*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneType >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneAttributes*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneBoundary*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Lane*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::SignalWaitingLane*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::SignalWaitingLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::SignalWaitingLane >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ConnectingLaneEx*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ConnectingLaneEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ConnectingLaneEx >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ConnectionEx*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ConnectionEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ConnectionEx >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::STPoint*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::STPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::STPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneEx*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneEx >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Movement*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Movement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Movement >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Section*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Section >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Section >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LinkEx*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LinkEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LinkEx >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Link*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ProhibitedZone*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ProhibitedZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ProhibitedZone >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::Node*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MAP*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MAP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MAP >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MapData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MapData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReqLaneChange*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReqLaneChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReqLaneChange >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReqClearTheWay*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReqClearTheWay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReqClearTheWay >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReqSignalPriority*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReqSignalPriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReqSignalPriority >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReqSensorSharing*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReqSensorSharing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReqSensorSharing >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ParkingRequest*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ParkingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ParkingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ParkingType*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ParkingType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ParkingType >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReqParkingArea*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReqParkingArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReqParkingArea >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::ReqInfo*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::ReqInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::ReqInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::DriveRequest*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::DriveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::DriveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::DriveBehavior*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::DriveBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::DriveBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PathPlanningPoint*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PathPlanningPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PathPlanningPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::PathPlanning*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::PathPlanning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::PathPlanning >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::IarData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::IarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::IarData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::VirData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::VirData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::VirData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::DriveSuggestion*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::DriveSuggestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::DriveSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::CoordinationInfo*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::CoordinationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::CoordinationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::VehicleCoordination*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::VehicleCoordination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::VehicleCoordination >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::LaneCoordination*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::LaneCoordination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::LaneCoordination >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RscData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RscData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RscData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::CamData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::CamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::CamData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::StatusData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::StatusData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::StatusData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::DenmData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::DenmData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::DenmData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RsiReply*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RsiReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RsiReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RsuRsmReply*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RsuRsmReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RsuRsmReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::RsmReply*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::RsmReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::RsmReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::v2x::pb::MonitorStatsData*
Arena::CreateMaybeMessage< ::cn::seisys::v2x::pb::MonitorStatsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::v2x::pb::MonitorStatsData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
