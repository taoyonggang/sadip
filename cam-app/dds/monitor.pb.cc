// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

#include "monitor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace seisys {
namespace dds {
PROTOBUF_CONSTEXPR TopicMonInfo::TopicMonInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcnodename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tonodename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topicname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.progarmname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/0
  , /*decltype(_impl_.srctype_)*/0
  , /*decltype(_impl_.cycle_)*/int64_t{0}
  , /*decltype(_impl_.updatetime_)*/int64_t{0}
  , /*decltype(_impl_.ncount_)*/int64_t{0}
  , /*decltype(_impl_.nsize_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopicMonInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicMonInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicMonInfoDefaultTypeInternal() {}
  union {
    TopicMonInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicMonInfoDefaultTypeInternal _TopicMonInfo_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
static ::_pb::Metadata file_level_metadata_monitor_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_monitor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_monitor_2eproto = nullptr;

const uint32_t TableStruct_monitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.srcnodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.srcnodename_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.tonodeid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.tonodename_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.topicname_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.cycle_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.updatetime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.ncount_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.nsize_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.srctype_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::TopicMonInfo, _impl_.progarmname_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cn::seisys::dds::TopicMonInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::seisys::dds::_TopicMonInfo_default_instance_._instance,
};

const char descriptor_table_protodef_monitor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmonitor.proto\022\rcn.seisys.dds\"\365\001\n\014Topic"
  "MonInfo\022\014\n\004uuid\030\001 \001(\t\022\016\n\006domain\030\002 \001(\005\022\021\n"
  "\tsrcNodeId\030\003 \001(\t\022\023\n\013srcNodeName\030\004 \001(\t\022\020\n"
  "\010toNodeId\030\005 \001(\t\022\022\n\ntoNodeName\030\006 \001(\t\022\021\n\tt"
  "opicName\030\007 \001(\t\022\r\n\005cycle\030\010 \001(\003\022\022\n\nupdateT"
  "ime\030\t \001(\003\022\016\n\006nCount\030\n \001(\003\022\r\n\005nSize\030\013 \001(\003"
  "\022\017\n\007srcType\030\014 \001(\005\022\023\n\013progarmName\030\r \001(\tb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_monitor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_monitor_2eproto = {
    false, false, 286, descriptor_table_protodef_monitor_2eproto,
    "monitor.proto",
    &descriptor_table_monitor_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_monitor_2eproto::offsets,
    file_level_metadata_monitor_2eproto, file_level_enum_descriptors_monitor_2eproto,
    file_level_service_descriptors_monitor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_monitor_2eproto_getter() {
  return &descriptor_table_monitor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_monitor_2eproto(&descriptor_table_monitor_2eproto);
namespace cn {
namespace seisys {
namespace dds {

// ===================================================================

class TopicMonInfo::_Internal {
 public:
};

TopicMonInfo::TopicMonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.TopicMonInfo)
}
TopicMonInfo::TopicMonInfo(const TopicMonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopicMonInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.srcnodename_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.tonodename_){}
    , decltype(_impl_.topicname_){}
    , decltype(_impl_.progarmname_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.srctype_){}
    , decltype(_impl_.cycle_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.ncount_){}
    , decltype(_impl_.nsize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodeid().empty()) {
    _this->_impl_.srcnodeid_.Set(from._internal_srcnodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.srcnodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcnodename().empty()) {
    _this->_impl_.srcnodename_.Set(from._internal_srcnodename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodeid().empty()) {
    _this->_impl_.tonodeid_.Set(from._internal_tonodeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tonodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tonodename().empty()) {
    _this->_impl_.tonodename_.Set(from._internal_tonodename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topicname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topicname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topicname().empty()) {
    _this->_impl_.topicname_.Set(from._internal_topicname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.progarmname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.progarmname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_progarmname().empty()) {
    _this->_impl_.progarmname_.Set(from._internal_progarmname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.domain_, &from._impl_.domain_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nsize_) -
    reinterpret_cast<char*>(&_impl_.domain_)) + sizeof(_impl_.nsize_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.TopicMonInfo)
}

inline void TopicMonInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.srcnodeid_){}
    , decltype(_impl_.srcnodename_){}
    , decltype(_impl_.tonodeid_){}
    , decltype(_impl_.tonodename_){}
    , decltype(_impl_.topicname_){}
    , decltype(_impl_.progarmname_){}
    , decltype(_impl_.domain_){0}
    , decltype(_impl_.srctype_){0}
    , decltype(_impl_.cycle_){int64_t{0}}
    , decltype(_impl_.updatetime_){int64_t{0}}
    , decltype(_impl_.ncount_){int64_t{0}}
    , decltype(_impl_.nsize_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srcnodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcnodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tonodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tonodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topicname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topicname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.progarmname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.progarmname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TopicMonInfo::~TopicMonInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.TopicMonInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicMonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.srcnodeid_.Destroy();
  _impl_.srcnodename_.Destroy();
  _impl_.tonodeid_.Destroy();
  _impl_.tonodename_.Destroy();
  _impl_.topicname_.Destroy();
  _impl_.progarmname_.Destroy();
}

void TopicMonInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicMonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.TopicMonInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.srcnodeid_.ClearToEmpty();
  _impl_.srcnodename_.ClearToEmpty();
  _impl_.tonodeid_.ClearToEmpty();
  _impl_.tonodename_.ClearToEmpty();
  _impl_.topicname_.ClearToEmpty();
  _impl_.progarmname_.ClearToEmpty();
  ::memset(&_impl_.domain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nsize_) -
      reinterpret_cast<char*>(&_impl_.domain_)) + sizeof(_impl_.nsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicMonInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.TopicMonInfo.uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string srcNodeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srcnodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.TopicMonInfo.srcNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string srcNodeName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_srcnodename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.TopicMonInfo.srcNodeName"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tonodeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.TopicMonInfo.toNodeId"));
        } else
          goto handle_unusual;
        continue;
      // string toNodeName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_tonodename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.TopicMonInfo.toNodeName"));
        } else
          goto handle_unusual;
        continue;
      // string topicName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_topicname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.TopicMonInfo.topicName"));
        } else
          goto handle_unusual;
        continue;
      // int64 cycle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updateTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.updatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.nsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 srcType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.srctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string progarmName = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_progarmname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.TopicMonInfo.progarmName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicMonInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.TopicMonInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.TopicMonInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // int32 domain = 2;
  if (this->_internal_domain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_domain(), target);
  }

  // string srcNodeId = 3;
  if (!this->_internal_srcnodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodeid().data(), static_cast<int>(this->_internal_srcnodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.TopicMonInfo.srcNodeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_srcnodeid(), target);
  }

  // string srcNodeName = 4;
  if (!this->_internal_srcnodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcnodename().data(), static_cast<int>(this->_internal_srcnodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.TopicMonInfo.srcNodeName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_srcnodename(), target);
  }

  // string toNodeId = 5;
  if (!this->_internal_tonodeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodeid().data(), static_cast<int>(this->_internal_tonodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.TopicMonInfo.toNodeId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tonodeid(), target);
  }

  // string toNodeName = 6;
  if (!this->_internal_tonodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tonodename().data(), static_cast<int>(this->_internal_tonodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.TopicMonInfo.toNodeName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tonodename(), target);
  }

  // string topicName = 7;
  if (!this->_internal_topicname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topicname().data(), static_cast<int>(this->_internal_topicname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.TopicMonInfo.topicName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_topicname(), target);
  }

  // int64 cycle = 8;
  if (this->_internal_cycle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_cycle(), target);
  }

  // int64 updateTime = 9;
  if (this->_internal_updatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_updatetime(), target);
  }

  // int64 nCount = 10;
  if (this->_internal_ncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_ncount(), target);
  }

  // int64 nSize = 11;
  if (this->_internal_nsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_nsize(), target);
  }

  // int32 srcType = 12;
  if (this->_internal_srctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_srctype(), target);
  }

  // string progarmName = 13;
  if (!this->_internal_progarmname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_progarmname().data(), static_cast<int>(this->_internal_progarmname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.TopicMonInfo.progarmName");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_progarmname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.TopicMonInfo)
  return target;
}

size_t TopicMonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.TopicMonInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string srcNodeId = 3;
  if (!this->_internal_srcnodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodeid());
  }

  // string srcNodeName = 4;
  if (!this->_internal_srcnodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcnodename());
  }

  // string toNodeId = 5;
  if (!this->_internal_tonodeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodeid());
  }

  // string toNodeName = 6;
  if (!this->_internal_tonodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tonodename());
  }

  // string topicName = 7;
  if (!this->_internal_topicname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topicname());
  }

  // string progarmName = 13;
  if (!this->_internal_progarmname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_progarmname());
  }

  // int32 domain = 2;
  if (this->_internal_domain() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_domain());
  }

  // int32 srcType = 12;
  if (this->_internal_srctype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srctype());
  }

  // int64 cycle = 8;
  if (this->_internal_cycle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cycle());
  }

  // int64 updateTime = 9;
  if (this->_internal_updatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updatetime());
  }

  // int64 nCount = 10;
  if (this->_internal_ncount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ncount());
  }

  // int64 nSize = 11;
  if (this->_internal_nsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicMonInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopicMonInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicMonInfo::GetClassData() const { return &_class_data_; }


void TopicMonInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopicMonInfo*>(&to_msg);
  auto& from = static_cast<const TopicMonInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.TopicMonInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_srcnodeid().empty()) {
    _this->_internal_set_srcnodeid(from._internal_srcnodeid());
  }
  if (!from._internal_srcnodename().empty()) {
    _this->_internal_set_srcnodename(from._internal_srcnodename());
  }
  if (!from._internal_tonodeid().empty()) {
    _this->_internal_set_tonodeid(from._internal_tonodeid());
  }
  if (!from._internal_tonodename().empty()) {
    _this->_internal_set_tonodename(from._internal_tonodename());
  }
  if (!from._internal_topicname().empty()) {
    _this->_internal_set_topicname(from._internal_topicname());
  }
  if (!from._internal_progarmname().empty()) {
    _this->_internal_set_progarmname(from._internal_progarmname());
  }
  if (from._internal_domain() != 0) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (from._internal_srctype() != 0) {
    _this->_internal_set_srctype(from._internal_srctype());
  }
  if (from._internal_cycle() != 0) {
    _this->_internal_set_cycle(from._internal_cycle());
  }
  if (from._internal_updatetime() != 0) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (from._internal_ncount() != 0) {
    _this->_internal_set_ncount(from._internal_ncount());
  }
  if (from._internal_nsize() != 0) {
    _this->_internal_set_nsize(from._internal_nsize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicMonInfo::CopyFrom(const TopicMonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.TopicMonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMonInfo::IsInitialized() const {
  return true;
}

void TopicMonInfo::InternalSwap(TopicMonInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodeid_, lhs_arena,
      &other->_impl_.srcnodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcnodename_, lhs_arena,
      &other->_impl_.srcnodename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodeid_, lhs_arena,
      &other->_impl_.tonodeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tonodename_, lhs_arena,
      &other->_impl_.tonodename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topicname_, lhs_arena,
      &other->_impl_.topicname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.progarmname_, lhs_arena,
      &other->_impl_.progarmname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopicMonInfo, _impl_.nsize_)
      + sizeof(TopicMonInfo::_impl_.nsize_)
      - PROTOBUF_FIELD_OFFSET(TopicMonInfo, _impl_.domain_)>(
          reinterpret_cast<char*>(&_impl_.domain_),
          reinterpret_cast<char*>(&other->_impl_.domain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicMonInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_monitor_2eproto_getter, &descriptor_table_monitor_2eproto_once,
      file_level_metadata_monitor_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::TopicMonInfo*
Arena::CreateMaybeMessage< ::cn::seisys::dds::TopicMonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::TopicMonInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
