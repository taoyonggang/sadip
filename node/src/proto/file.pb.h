// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto;
namespace cn {
namespace seisys {
namespace dds {
class FileData;
struct FileDataDefaultTypeInternal;
extern FileDataDefaultTypeInternal _FileData_default_instance_;
class FileDataReply;
struct FileDataReplyDefaultTypeInternal;
extern FileDataReplyDefaultTypeInternal _FileDataReply_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> ::cn::seisys::dds::FileData* Arena::CreateMaybeMessage<::cn::seisys::dds::FileData>(Arena*);
template<> ::cn::seisys::dds::FileDataReply* Arena::CreateMaybeMessage<::cn::seisys::dds::FileDataReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cn {
namespace seisys {
namespace dds {

// ===================================================================

class FileData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.FileData) */ {
 public:
  inline FileData() : FileData(nullptr) {}
  ~FileData() override;
  explicit PROTOBUF_CONSTEXPR FileData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileData(const FileData& from);
  FileData(FileData&& from) noexcept
    : FileData() {
    *this = ::std::move(from);
  }

  inline FileData& operator=(const FileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileData& operator=(FileData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileData* internal_default_instance() {
    return reinterpret_cast<const FileData*>(
               &_FileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileData& a, FileData& b) {
    a.Swap(&b);
  }
  inline void Swap(FileData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileData& from) {
    FileData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.FileData";
  }
  protected:
  explicit FileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kFileNameFieldNumber = 4,
    kSaveFileNameFieldNumber = 5,
    kSubDirFieldNumber = 6,
    kBlockContentFieldNumber = 12,
    kTransferIdFieldNumber = 14,
    kMd5FieldNumber = 15,
    kFileTotalSizeFieldNumber = 8,
    kFModifyTimeFieldNumber = 9,
    kBlockSeqFieldNumber = 10,
    kTotalBlockNumFieldNumber = 11,
    kBlockContentLenFieldNumber = 13,
    kIsEndFieldNumber = 7,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string src_node_id = 2;
  void clear_src_node_id();
  const std::string& src_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_node_id();
  PROTOBUF_NODISCARD std::string* release_src_node_id();
  void set_allocated_src_node_id(std::string* src_node_id);
  private:
  const std::string& _internal_src_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_node_id(const std::string& value);
  std::string* _internal_mutable_src_node_id();
  public:

  // string to_node_id = 3;
  void clear_to_node_id();
  const std::string& to_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_node_id();
  PROTOBUF_NODISCARD std::string* release_to_node_id();
  void set_allocated_to_node_id(std::string* to_node_id);
  private:
  const std::string& _internal_to_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_node_id(const std::string& value);
  std::string* _internal_mutable_to_node_id();
  public:

  // bytes file_name = 4;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // bytes save_file_name = 5;
  void clear_save_file_name();
  const std::string& save_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_file_name();
  PROTOBUF_NODISCARD std::string* release_save_file_name();
  void set_allocated_save_file_name(std::string* save_file_name);
  private:
  const std::string& _internal_save_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_file_name(const std::string& value);
  std::string* _internal_mutable_save_file_name();
  public:

  // bytes sub_dir = 6;
  void clear_sub_dir();
  const std::string& sub_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_dir();
  PROTOBUF_NODISCARD std::string* release_sub_dir();
  void set_allocated_sub_dir(std::string* sub_dir);
  private:
  const std::string& _internal_sub_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_dir(const std::string& value);
  std::string* _internal_mutable_sub_dir();
  public:

  // bytes block_content = 12;
  void clear_block_content();
  const std::string& block_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_content();
  PROTOBUF_NODISCARD std::string* release_block_content();
  void set_allocated_block_content(std::string* block_content);
  private:
  const std::string& _internal_block_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_content(const std::string& value);
  std::string* _internal_mutable_block_content();
  public:

  // string transfer_id = 14;
  void clear_transfer_id();
  const std::string& transfer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transfer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transfer_id();
  PROTOBUF_NODISCARD std::string* release_transfer_id();
  void set_allocated_transfer_id(std::string* transfer_id);
  private:
  const std::string& _internal_transfer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transfer_id(const std::string& value);
  std::string* _internal_mutable_transfer_id();
  public:

  // string md5 = 15;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // uint64 file_total_size = 8;
  void clear_file_total_size();
  uint64_t file_total_size() const;
  void set_file_total_size(uint64_t value);
  private:
  uint64_t _internal_file_total_size() const;
  void _internal_set_file_total_size(uint64_t value);
  public:

  // int64 f_modify_time = 9;
  void clear_f_modify_time();
  int64_t f_modify_time() const;
  void set_f_modify_time(int64_t value);
  private:
  int64_t _internal_f_modify_time() const;
  void _internal_set_f_modify_time(int64_t value);
  public:

  // uint64 block_seq = 10;
  void clear_block_seq();
  uint64_t block_seq() const;
  void set_block_seq(uint64_t value);
  private:
  uint64_t _internal_block_seq() const;
  void _internal_set_block_seq(uint64_t value);
  public:

  // uint64 total_block_num = 11;
  void clear_total_block_num();
  uint64_t total_block_num() const;
  void set_total_block_num(uint64_t value);
  private:
  uint64_t _internal_total_block_num() const;
  void _internal_set_total_block_num(uint64_t value);
  public:

  // uint64 block_content_len = 13;
  void clear_block_content_len();
  uint64_t block_content_len() const;
  void set_block_content_len(uint64_t value);
  private:
  uint64_t _internal_block_content_len() const;
  void _internal_set_block_content_len(uint64_t value);
  public:

  // bool is_end = 7;
  void clear_is_end();
  bool is_end() const;
  void set_is_end(bool value);
  private:
  bool _internal_is_end() const;
  void _internal_set_is_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.FileData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_dir_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transfer_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
    uint64_t file_total_size_;
    int64_t f_modify_time_;
    uint64_t block_seq_;
    uint64_t total_block_num_;
    uint64_t block_content_len_;
    bool is_end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileDataReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.FileDataReply) */ {
 public:
  inline FileDataReply() : FileDataReply(nullptr) {}
  ~FileDataReply() override;
  explicit PROTOBUF_CONSTEXPR FileDataReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDataReply(const FileDataReply& from);
  FileDataReply(FileDataReply&& from) noexcept
    : FileDataReply() {
    *this = ::std::move(from);
  }

  inline FileDataReply& operator=(const FileDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDataReply& operator=(FileDataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDataReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDataReply* internal_default_instance() {
    return reinterpret_cast<const FileDataReply*>(
               &_FileDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileDataReply& a, FileDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDataReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDataReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDataReply& from) {
    FileDataReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDataReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.FileDataReply";
  }
  protected:
  explicit FileDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockLostsFieldNumber = 11,
    kUuidFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kFileNameFieldNumber = 4,
    kReplyUuidFieldNumber = 5,
    kSubDirFieldNumber = 6,
    kBlockSeqFieldNumber = 8,
    kTotalBlockNumFieldNumber = 9,
    kFileTotalSizeFieldNumber = 10,
    kStateFieldNumber = 12,
    kIsEndFieldNumber = 7,
  };
  // repeated uint64 block_losts = 11;
  int block_losts_size() const;
  private:
  int _internal_block_losts_size() const;
  public:
  void clear_block_losts();
  private:
  uint64_t _internal_block_losts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_block_losts() const;
  void _internal_add_block_losts(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_block_losts();
  public:
  uint64_t block_losts(int index) const;
  void set_block_losts(int index, uint64_t value);
  void add_block_losts(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      block_losts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_block_losts();

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string src_node_id = 2;
  void clear_src_node_id();
  const std::string& src_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_node_id();
  PROTOBUF_NODISCARD std::string* release_src_node_id();
  void set_allocated_src_node_id(std::string* src_node_id);
  private:
  const std::string& _internal_src_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_node_id(const std::string& value);
  std::string* _internal_mutable_src_node_id();
  public:

  // string to_node_id = 3;
  void clear_to_node_id();
  const std::string& to_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_node_id();
  PROTOBUF_NODISCARD std::string* release_to_node_id();
  void set_allocated_to_node_id(std::string* to_node_id);
  private:
  const std::string& _internal_to_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_node_id(const std::string& value);
  std::string* _internal_mutable_to_node_id();
  public:

  // bytes file_name = 4;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string reply_uuid = 5;
  void clear_reply_uuid();
  const std::string& reply_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_uuid();
  PROTOBUF_NODISCARD std::string* release_reply_uuid();
  void set_allocated_reply_uuid(std::string* reply_uuid);
  private:
  const std::string& _internal_reply_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_uuid(const std::string& value);
  std::string* _internal_mutable_reply_uuid();
  public:

  // bytes sub_dir = 6;
  void clear_sub_dir();
  const std::string& sub_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_dir();
  PROTOBUF_NODISCARD std::string* release_sub_dir();
  void set_allocated_sub_dir(std::string* sub_dir);
  private:
  const std::string& _internal_sub_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_dir(const std::string& value);
  std::string* _internal_mutable_sub_dir();
  public:

  // uint64 block_seq = 8;
  void clear_block_seq();
  uint64_t block_seq() const;
  void set_block_seq(uint64_t value);
  private:
  uint64_t _internal_block_seq() const;
  void _internal_set_block_seq(uint64_t value);
  public:

  // uint64 total_block_num = 9;
  void clear_total_block_num();
  uint64_t total_block_num() const;
  void set_total_block_num(uint64_t value);
  private:
  uint64_t _internal_total_block_num() const;
  void _internal_set_total_block_num(uint64_t value);
  public:

  // uint64 file_total_size = 10;
  void clear_file_total_size();
  uint64_t file_total_size() const;
  void set_file_total_size(uint64_t value);
  private:
  uint64_t _internal_file_total_size() const;
  void _internal_set_file_total_size(uint64_t value);
  public:

  // int64 state = 12;
  void clear_state();
  int64_t state() const;
  void set_state(int64_t value);
  private:
  int64_t _internal_state() const;
  void _internal_set_state(int64_t value);
  public:

  // bool is_end = 7;
  void clear_is_end();
  bool is_end() const;
  void set_is_end(bool value);
  private:
  bool _internal_is_end() const;
  void _internal_set_is_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.FileDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > block_losts_;
    mutable std::atomic<int> _block_losts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_dir_;
    uint64_t block_seq_;
    uint64_t total_block_num_;
    uint64_t file_total_size_;
    int64_t state_;
    bool is_end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileData

// string uuid = 1;
inline void FileData::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& FileData::uuid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.uuid)
}
inline std::string* FileData::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.uuid)
  return _s;
}
inline const std::string& FileData::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void FileData::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_uuid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.uuid)
  return _impl_.uuid_.Release();
}
inline void FileData::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.uuid)
}

// string src_node_id = 2;
inline void FileData::clear_src_node_id() {
  _impl_.src_node_id_.ClearToEmpty();
}
inline const std::string& FileData::src_node_id() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.src_node_id)
  return _internal_src_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_src_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.src_node_id)
}
inline std::string* FileData::mutable_src_node_id() {
  std::string* _s = _internal_mutable_src_node_id();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.src_node_id)
  return _s;
}
inline const std::string& FileData::_internal_src_node_id() const {
  return _impl_.src_node_id_.Get();
}
inline void FileData::_internal_set_src_node_id(const std::string& value) {
  
  _impl_.src_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_src_node_id() {
  
  return _impl_.src_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_src_node_id() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.src_node_id)
  return _impl_.src_node_id_.Release();
}
inline void FileData::set_allocated_src_node_id(std::string* src_node_id) {
  if (src_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.src_node_id_.SetAllocated(src_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_node_id_.IsDefault()) {
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.src_node_id)
}

// string to_node_id = 3;
inline void FileData::clear_to_node_id() {
  _impl_.to_node_id_.ClearToEmpty();
}
inline const std::string& FileData::to_node_id() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.to_node_id)
  return _internal_to_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_to_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.to_node_id)
}
inline std::string* FileData::mutable_to_node_id() {
  std::string* _s = _internal_mutable_to_node_id();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.to_node_id)
  return _s;
}
inline const std::string& FileData::_internal_to_node_id() const {
  return _impl_.to_node_id_.Get();
}
inline void FileData::_internal_set_to_node_id(const std::string& value) {
  
  _impl_.to_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_to_node_id() {
  
  return _impl_.to_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_to_node_id() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.to_node_id)
  return _impl_.to_node_id_.Release();
}
inline void FileData::set_allocated_to_node_id(std::string* to_node_id) {
  if (to_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.to_node_id_.SetAllocated(to_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_node_id_.IsDefault()) {
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.to_node_id)
}

// bytes file_name = 4;
inline void FileData::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileData::file_name() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.file_name)
}
inline std::string* FileData::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.file_name)
  return _s;
}
inline const std::string& FileData::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileData::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_file_name() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.file_name)
  return _impl_.file_name_.Release();
}
inline void FileData::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.file_name)
}

// bytes save_file_name = 5;
inline void FileData::clear_save_file_name() {
  _impl_.save_file_name_.ClearToEmpty();
}
inline const std::string& FileData::save_file_name() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.save_file_name)
  return _internal_save_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_save_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.save_file_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.save_file_name)
}
inline std::string* FileData::mutable_save_file_name() {
  std::string* _s = _internal_mutable_save_file_name();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.save_file_name)
  return _s;
}
inline const std::string& FileData::_internal_save_file_name() const {
  return _impl_.save_file_name_.Get();
}
inline void FileData::_internal_set_save_file_name(const std::string& value) {
  
  _impl_.save_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_save_file_name() {
  
  return _impl_.save_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_save_file_name() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.save_file_name)
  return _impl_.save_file_name_.Release();
}
inline void FileData::set_allocated_save_file_name(std::string* save_file_name) {
  if (save_file_name != nullptr) {
    
  } else {
    
  }
  _impl_.save_file_name_.SetAllocated(save_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_file_name_.IsDefault()) {
    _impl_.save_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.save_file_name)
}

// bytes sub_dir = 6;
inline void FileData::clear_sub_dir() {
  _impl_.sub_dir_.ClearToEmpty();
}
inline const std::string& FileData::sub_dir() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.sub_dir)
  return _internal_sub_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_sub_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_dir_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.sub_dir)
}
inline std::string* FileData::mutable_sub_dir() {
  std::string* _s = _internal_mutable_sub_dir();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.sub_dir)
  return _s;
}
inline const std::string& FileData::_internal_sub_dir() const {
  return _impl_.sub_dir_.Get();
}
inline void FileData::_internal_set_sub_dir(const std::string& value) {
  
  _impl_.sub_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_sub_dir() {
  
  return _impl_.sub_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_sub_dir() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.sub_dir)
  return _impl_.sub_dir_.Release();
}
inline void FileData::set_allocated_sub_dir(std::string* sub_dir) {
  if (sub_dir != nullptr) {
    
  } else {
    
  }
  _impl_.sub_dir_.SetAllocated(sub_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_dir_.IsDefault()) {
    _impl_.sub_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.sub_dir)
}

// bool is_end = 7;
inline void FileData::clear_is_end() {
  _impl_.is_end_ = false;
}
inline bool FileData::_internal_is_end() const {
  return _impl_.is_end_;
}
inline bool FileData::is_end() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.is_end)
  return _internal_is_end();
}
inline void FileData::_internal_set_is_end(bool value) {
  
  _impl_.is_end_ = value;
}
inline void FileData::set_is_end(bool value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.is_end)
}

// uint64 file_total_size = 8;
inline void FileData::clear_file_total_size() {
  _impl_.file_total_size_ = uint64_t{0u};
}
inline uint64_t FileData::_internal_file_total_size() const {
  return _impl_.file_total_size_;
}
inline uint64_t FileData::file_total_size() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.file_total_size)
  return _internal_file_total_size();
}
inline void FileData::_internal_set_file_total_size(uint64_t value) {
  
  _impl_.file_total_size_ = value;
}
inline void FileData::set_file_total_size(uint64_t value) {
  _internal_set_file_total_size(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.file_total_size)
}

// int64 f_modify_time = 9;
inline void FileData::clear_f_modify_time() {
  _impl_.f_modify_time_ = int64_t{0};
}
inline int64_t FileData::_internal_f_modify_time() const {
  return _impl_.f_modify_time_;
}
inline int64_t FileData::f_modify_time() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.f_modify_time)
  return _internal_f_modify_time();
}
inline void FileData::_internal_set_f_modify_time(int64_t value) {
  
  _impl_.f_modify_time_ = value;
}
inline void FileData::set_f_modify_time(int64_t value) {
  _internal_set_f_modify_time(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.f_modify_time)
}

// uint64 block_seq = 10;
inline void FileData::clear_block_seq() {
  _impl_.block_seq_ = uint64_t{0u};
}
inline uint64_t FileData::_internal_block_seq() const {
  return _impl_.block_seq_;
}
inline uint64_t FileData::block_seq() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.block_seq)
  return _internal_block_seq();
}
inline void FileData::_internal_set_block_seq(uint64_t value) {
  
  _impl_.block_seq_ = value;
}
inline void FileData::set_block_seq(uint64_t value) {
  _internal_set_block_seq(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.block_seq)
}

// uint64 total_block_num = 11;
inline void FileData::clear_total_block_num() {
  _impl_.total_block_num_ = uint64_t{0u};
}
inline uint64_t FileData::_internal_total_block_num() const {
  return _impl_.total_block_num_;
}
inline uint64_t FileData::total_block_num() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.total_block_num)
  return _internal_total_block_num();
}
inline void FileData::_internal_set_total_block_num(uint64_t value) {
  
  _impl_.total_block_num_ = value;
}
inline void FileData::set_total_block_num(uint64_t value) {
  _internal_set_total_block_num(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.total_block_num)
}

// bytes block_content = 12;
inline void FileData::clear_block_content() {
  _impl_.block_content_.ClearToEmpty();
}
inline const std::string& FileData::block_content() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.block_content)
  return _internal_block_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_block_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.block_content)
}
inline std::string* FileData::mutable_block_content() {
  std::string* _s = _internal_mutable_block_content();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.block_content)
  return _s;
}
inline const std::string& FileData::_internal_block_content() const {
  return _impl_.block_content_.Get();
}
inline void FileData::_internal_set_block_content(const std::string& value) {
  
  _impl_.block_content_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_block_content() {
  
  return _impl_.block_content_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_block_content() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.block_content)
  return _impl_.block_content_.Release();
}
inline void FileData::set_allocated_block_content(std::string* block_content) {
  if (block_content != nullptr) {
    
  } else {
    
  }
  _impl_.block_content_.SetAllocated(block_content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_content_.IsDefault()) {
    _impl_.block_content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.block_content)
}

// uint64 block_content_len = 13;
inline void FileData::clear_block_content_len() {
  _impl_.block_content_len_ = uint64_t{0u};
}
inline uint64_t FileData::_internal_block_content_len() const {
  return _impl_.block_content_len_;
}
inline uint64_t FileData::block_content_len() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.block_content_len)
  return _internal_block_content_len();
}
inline void FileData::_internal_set_block_content_len(uint64_t value) {
  
  _impl_.block_content_len_ = value;
}
inline void FileData::set_block_content_len(uint64_t value) {
  _internal_set_block_content_len(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.block_content_len)
}

// string transfer_id = 14;
inline void FileData::clear_transfer_id() {
  _impl_.transfer_id_.ClearToEmpty();
}
inline const std::string& FileData::transfer_id() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.transfer_id)
  return _internal_transfer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_transfer_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transfer_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.transfer_id)
}
inline std::string* FileData::mutable_transfer_id() {
  std::string* _s = _internal_mutable_transfer_id();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.transfer_id)
  return _s;
}
inline const std::string& FileData::_internal_transfer_id() const {
  return _impl_.transfer_id_.Get();
}
inline void FileData::_internal_set_transfer_id(const std::string& value) {
  
  _impl_.transfer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_transfer_id() {
  
  return _impl_.transfer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_transfer_id() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.transfer_id)
  return _impl_.transfer_id_.Release();
}
inline void FileData::set_allocated_transfer_id(std::string* transfer_id) {
  if (transfer_id != nullptr) {
    
  } else {
    
  }
  _impl_.transfer_id_.SetAllocated(transfer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transfer_id_.IsDefault()) {
    _impl_.transfer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.transfer_id)
}

// string md5 = 15;
inline void FileData::clear_md5() {
  _impl_.md5_.ClearToEmpty();
}
inline const std::string& FileData::md5() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileData.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileData.md5)
}
inline std::string* FileData::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileData.md5)
  return _s;
}
inline const std::string& FileData::_internal_md5() const {
  return _impl_.md5_.Get();
}
inline void FileData::_internal_set_md5(const std::string& value) {
  
  _impl_.md5_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_md5() {
  
  return _impl_.md5_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_md5() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileData.md5)
  return _impl_.md5_.Release();
}
inline void FileData::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  _impl_.md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileData.md5)
}

// -------------------------------------------------------------------

// FileDataReply

// string uuid = 1;
inline void FileDataReply::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& FileDataReply::uuid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDataReply::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.uuid)
}
inline std::string* FileDataReply::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileDataReply.uuid)
  return _s;
}
inline const std::string& FileDataReply::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void FileDataReply::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDataReply::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDataReply::release_uuid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileDataReply.uuid)
  return _impl_.uuid_.Release();
}
inline void FileDataReply::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileDataReply.uuid)
}

// string src_node_id = 2;
inline void FileDataReply::clear_src_node_id() {
  _impl_.src_node_id_.ClearToEmpty();
}
inline const std::string& FileDataReply::src_node_id() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.src_node_id)
  return _internal_src_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDataReply::set_src_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.src_node_id)
}
inline std::string* FileDataReply::mutable_src_node_id() {
  std::string* _s = _internal_mutable_src_node_id();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileDataReply.src_node_id)
  return _s;
}
inline const std::string& FileDataReply::_internal_src_node_id() const {
  return _impl_.src_node_id_.Get();
}
inline void FileDataReply::_internal_set_src_node_id(const std::string& value) {
  
  _impl_.src_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDataReply::_internal_mutable_src_node_id() {
  
  return _impl_.src_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDataReply::release_src_node_id() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileDataReply.src_node_id)
  return _impl_.src_node_id_.Release();
}
inline void FileDataReply::set_allocated_src_node_id(std::string* src_node_id) {
  if (src_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.src_node_id_.SetAllocated(src_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_node_id_.IsDefault()) {
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileDataReply.src_node_id)
}

// string to_node_id = 3;
inline void FileDataReply::clear_to_node_id() {
  _impl_.to_node_id_.ClearToEmpty();
}
inline const std::string& FileDataReply::to_node_id() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.to_node_id)
  return _internal_to_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDataReply::set_to_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.to_node_id)
}
inline std::string* FileDataReply::mutable_to_node_id() {
  std::string* _s = _internal_mutable_to_node_id();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileDataReply.to_node_id)
  return _s;
}
inline const std::string& FileDataReply::_internal_to_node_id() const {
  return _impl_.to_node_id_.Get();
}
inline void FileDataReply::_internal_set_to_node_id(const std::string& value) {
  
  _impl_.to_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDataReply::_internal_mutable_to_node_id() {
  
  return _impl_.to_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDataReply::release_to_node_id() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileDataReply.to_node_id)
  return _impl_.to_node_id_.Release();
}
inline void FileDataReply::set_allocated_to_node_id(std::string* to_node_id) {
  if (to_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.to_node_id_.SetAllocated(to_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_node_id_.IsDefault()) {
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileDataReply.to_node_id)
}

// bytes file_name = 4;
inline void FileDataReply::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileDataReply::file_name() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDataReply::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.file_name)
}
inline std::string* FileDataReply::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileDataReply.file_name)
  return _s;
}
inline const std::string& FileDataReply::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileDataReply::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDataReply::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDataReply::release_file_name() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileDataReply.file_name)
  return _impl_.file_name_.Release();
}
inline void FileDataReply::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileDataReply.file_name)
}

// string reply_uuid = 5;
inline void FileDataReply::clear_reply_uuid() {
  _impl_.reply_uuid_.ClearToEmpty();
}
inline const std::string& FileDataReply::reply_uuid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.reply_uuid)
  return _internal_reply_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDataReply::set_reply_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.reply_uuid)
}
inline std::string* FileDataReply::mutable_reply_uuid() {
  std::string* _s = _internal_mutable_reply_uuid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileDataReply.reply_uuid)
  return _s;
}
inline const std::string& FileDataReply::_internal_reply_uuid() const {
  return _impl_.reply_uuid_.Get();
}
inline void FileDataReply::_internal_set_reply_uuid(const std::string& value) {
  
  _impl_.reply_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDataReply::_internal_mutable_reply_uuid() {
  
  return _impl_.reply_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDataReply::release_reply_uuid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileDataReply.reply_uuid)
  return _impl_.reply_uuid_.Release();
}
inline void FileDataReply::set_allocated_reply_uuid(std::string* reply_uuid) {
  if (reply_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.reply_uuid_.SetAllocated(reply_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_uuid_.IsDefault()) {
    _impl_.reply_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileDataReply.reply_uuid)
}

// bytes sub_dir = 6;
inline void FileDataReply::clear_sub_dir() {
  _impl_.sub_dir_.ClearToEmpty();
}
inline const std::string& FileDataReply::sub_dir() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.sub_dir)
  return _internal_sub_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDataReply::set_sub_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sub_dir_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.sub_dir)
}
inline std::string* FileDataReply::mutable_sub_dir() {
  std::string* _s = _internal_mutable_sub_dir();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.FileDataReply.sub_dir)
  return _s;
}
inline const std::string& FileDataReply::_internal_sub_dir() const {
  return _impl_.sub_dir_.Get();
}
inline void FileDataReply::_internal_set_sub_dir(const std::string& value) {
  
  _impl_.sub_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDataReply::_internal_mutable_sub_dir() {
  
  return _impl_.sub_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDataReply::release_sub_dir() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.FileDataReply.sub_dir)
  return _impl_.sub_dir_.Release();
}
inline void FileDataReply::set_allocated_sub_dir(std::string* sub_dir) {
  if (sub_dir != nullptr) {
    
  } else {
    
  }
  _impl_.sub_dir_.SetAllocated(sub_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sub_dir_.IsDefault()) {
    _impl_.sub_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.FileDataReply.sub_dir)
}

// bool is_end = 7;
inline void FileDataReply::clear_is_end() {
  _impl_.is_end_ = false;
}
inline bool FileDataReply::_internal_is_end() const {
  return _impl_.is_end_;
}
inline bool FileDataReply::is_end() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.is_end)
  return _internal_is_end();
}
inline void FileDataReply::_internal_set_is_end(bool value) {
  
  _impl_.is_end_ = value;
}
inline void FileDataReply::set_is_end(bool value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.is_end)
}

// uint64 block_seq = 8;
inline void FileDataReply::clear_block_seq() {
  _impl_.block_seq_ = uint64_t{0u};
}
inline uint64_t FileDataReply::_internal_block_seq() const {
  return _impl_.block_seq_;
}
inline uint64_t FileDataReply::block_seq() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.block_seq)
  return _internal_block_seq();
}
inline void FileDataReply::_internal_set_block_seq(uint64_t value) {
  
  _impl_.block_seq_ = value;
}
inline void FileDataReply::set_block_seq(uint64_t value) {
  _internal_set_block_seq(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.block_seq)
}

// uint64 total_block_num = 9;
inline void FileDataReply::clear_total_block_num() {
  _impl_.total_block_num_ = uint64_t{0u};
}
inline uint64_t FileDataReply::_internal_total_block_num() const {
  return _impl_.total_block_num_;
}
inline uint64_t FileDataReply::total_block_num() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.total_block_num)
  return _internal_total_block_num();
}
inline void FileDataReply::_internal_set_total_block_num(uint64_t value) {
  
  _impl_.total_block_num_ = value;
}
inline void FileDataReply::set_total_block_num(uint64_t value) {
  _internal_set_total_block_num(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.total_block_num)
}

// uint64 file_total_size = 10;
inline void FileDataReply::clear_file_total_size() {
  _impl_.file_total_size_ = uint64_t{0u};
}
inline uint64_t FileDataReply::_internal_file_total_size() const {
  return _impl_.file_total_size_;
}
inline uint64_t FileDataReply::file_total_size() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.file_total_size)
  return _internal_file_total_size();
}
inline void FileDataReply::_internal_set_file_total_size(uint64_t value) {
  
  _impl_.file_total_size_ = value;
}
inline void FileDataReply::set_file_total_size(uint64_t value) {
  _internal_set_file_total_size(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.file_total_size)
}

// repeated uint64 block_losts = 11;
inline int FileDataReply::_internal_block_losts_size() const {
  return _impl_.block_losts_.size();
}
inline int FileDataReply::block_losts_size() const {
  return _internal_block_losts_size();
}
inline void FileDataReply::clear_block_losts() {
  _impl_.block_losts_.Clear();
}
inline uint64_t FileDataReply::_internal_block_losts(int index) const {
  return _impl_.block_losts_.Get(index);
}
inline uint64_t FileDataReply::block_losts(int index) const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.block_losts)
  return _internal_block_losts(index);
}
inline void FileDataReply::set_block_losts(int index, uint64_t value) {
  _impl_.block_losts_.Set(index, value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.block_losts)
}
inline void FileDataReply::_internal_add_block_losts(uint64_t value) {
  _impl_.block_losts_.Add(value);
}
inline void FileDataReply::add_block_losts(uint64_t value) {
  _internal_add_block_losts(value);
  // @@protoc_insertion_point(field_add:cn.seisys.dds.FileDataReply.block_losts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FileDataReply::_internal_block_losts() const {
  return _impl_.block_losts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FileDataReply::block_losts() const {
  // @@protoc_insertion_point(field_list:cn.seisys.dds.FileDataReply.block_losts)
  return _internal_block_losts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FileDataReply::_internal_mutable_block_losts() {
  return &_impl_.block_losts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FileDataReply::mutable_block_losts() {
  // @@protoc_insertion_point(field_mutable_list:cn.seisys.dds.FileDataReply.block_losts)
  return _internal_mutable_block_losts();
}

// int64 state = 12;
inline void FileDataReply::clear_state() {
  _impl_.state_ = int64_t{0};
}
inline int64_t FileDataReply::_internal_state() const {
  return _impl_.state_;
}
inline int64_t FileDataReply::state() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.FileDataReply.state)
  return _internal_state();
}
inline void FileDataReply::_internal_set_state(int64_t value) {
  
  _impl_.state_ = value;
}
inline void FileDataReply::set_state(int64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.FileDataReply.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dds
}  // namespace seisys
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_2eproto
