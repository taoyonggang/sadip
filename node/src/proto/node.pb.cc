// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace seisys {
namespace dds {
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_path_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_size_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.is_dir_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR FileInfos::FileInfos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileInfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfosDefaultTypeInternal() {}
  union {
    FileInfos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfosDefaultTypeInternal _FileInfos_default_instance_;
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_app_ver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_cfg_ver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR Cpu::Cpu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_frequency_)*/{}
  , /*decltype(_impl_._current_frequency_cached_byte_size_)*/{0}
  , /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.physical_cores_)*/0
  , /*decltype(_impl_.logical_cores_)*/0
  , /*decltype(_impl_.max_frequency_)*/int64_t{0}
  , /*decltype(_impl_.regular_frequency_)*/int64_t{0}
  , /*decltype(_impl_.min_frequency_)*/int64_t{0}
  , /*decltype(_impl_.cache_size_)*/int64_t{0}
  , /*decltype(_impl_.cpu_usage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuDefaultTypeInternal() {}
  union {
    Cpu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuDefaultTypeInternal _Cpu_default_instance_;
PROTOBUF_CONSTEXPR Gpu::Gpu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.driver_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_)*/0
  , /*decltype(_impl_.frequency_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuDefaultTypeInternal() {}
  union {
    Gpu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuDefaultTypeInternal _Gpu_default_instance_;
PROTOBUF_CONSTEXPR Ram::Ram(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.free_)*/int64_t{0}
  , /*decltype(_impl_.available_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RamDefaultTypeInternal() {}
  union {
    Ram _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RamDefaultTypeInternal _Ram_default_instance_;
PROTOBUF_CONSTEXPR Disk::Disk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DiskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiskDefaultTypeInternal() {}
  union {
    Disk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiskDefaultTypeInternal _Disk_default_instance_;
PROTOBUF_CONSTEXPR MainBoard::MainBoard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MainBoardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainBoardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainBoardDefaultTypeInternal() {}
  union {
    MainBoard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainBoardDefaultTypeInternal _MainBoard_default_instance_;
PROTOBUF_CONSTEXPR ProcessTime::ProcessTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_time_)*/0
  , /*decltype(_impl_.kernel_time_)*/0
  , /*decltype(_impl_.children_usertime_)*/0
  , /*decltype(_impl_.children_kernel_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTimeDefaultTypeInternal() {}
  union {
    ProcessTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTimeDefaultTypeInternal _ProcessTime_default_instance_;
PROTOBUF_CONSTEXPR Process_EnvEntry_DoNotUse::Process_EnvEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Process_EnvEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Process_EnvEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Process_EnvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Process_EnvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Process_EnvEntry_DoNotUseDefaultTypeInternal _Process_EnvEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Process::Process(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.env_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.work_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_usage_)*/0
  , /*decltype(_impl_.mem_usage_)*/0
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.reboot_count_)*/0
  , /*decltype(_impl_.start_time_)*/int64_t{0}
  , /*decltype(_impl_.stop_time_)*/int64_t{0}
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessDefaultTypeInternal() {}
  union {
    Process _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessDefaultTypeInternal _Process_default_instance_;
PROTOBUF_CONSTEXPR Network::Network(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv4s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv6s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadband_)*/int64_t{0}
  , /*decltype(_impl_.broadband_using_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkDefaultTypeInternal() {}
  union {
    Network _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkDefaultTypeInternal _Network_default_instance_;
PROTOBUF_CONSTEXPR OSInfo::OSInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operating_system_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.short_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kernel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.architecture_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endianess_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OSInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OSInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OSInfoDefaultTypeInternal() {}
  union {
    OSInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OSInfoDefaultTypeInternal _OSInfo_default_instance_;
PROTOBUF_CONSTEXPR MachineState::MachineState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpus_)*/{}
  , /*decltype(_impl_.gpus_)*/{}
  , /*decltype(_impl_.disks_)*/{}
  , /*decltype(_impl_.networks_)*/{}
  , /*decltype(_impl_.processes_)*/{}
  , /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rams_)*/nullptr
  , /*decltype(_impl_.main_board_infos_)*/nullptr
  , /*decltype(_impl_.os_infos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MachineStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MachineStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MachineStateDefaultTypeInternal() {}
  union {
    MachineState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MachineStateDefaultTypeInternal _MachineState_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_config_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_config_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arch_)*/0
  , /*decltype(_impl_.os_)*/0
  , /*decltype(_impl_.domain_)*/0u
  , /*decltype(_impl_.config_size_)*/0u
  , /*decltype(_impl_.created_at_)*/int64_t{0}
  , /*decltype(_impl_.updated_at_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR NodeReply::NodeReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/int64_t{0}
  , /*decltype(_impl_.updated_at_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeReplyDefaultTypeInternal() {}
  union {
    NodeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeReplyDefaultTypeInternal _NodeReply_default_instance_;
PROTOBUF_CONSTEXPR NodeCmd::NodeCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paras_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paras_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paras_2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_type_)*/0
  , /*decltype(_impl_.podman_cmd_)*/0
  , /*decltype(_impl_.created_at_)*/int64_t{0}
  , /*decltype(_impl_.updated_at_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeCmdDefaultTypeInternal() {}
  union {
    NodeCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeCmdDefaultTypeInternal _NodeCmd_default_instance_;
PROTOBUF_CONSTEXPR NodeCmdReply::NodeCmdReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_reply_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.created_at_)*/int64_t{0}
  , /*decltype(_impl_.updated_at_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeCmdReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeCmdReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeCmdReplyDefaultTypeInternal() {}
  union {
    NodeCmdReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeCmdReplyDefaultTypeInternal _NodeCmdReply_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
static ::_pb::Metadata file_level_metadata_node_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_node_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_node_2eproto = nullptr;

const uint32_t TableStruct_node_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::File, _impl_.file_path_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::File, _impl_.is_dir_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::File, _impl_.file_size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::File, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileInfos, _impl_.files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _impl_.node_app_ver_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _impl_.node_cfg_ver_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ping, _impl_.desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.physical_cores_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.logical_cores_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.max_frequency_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.regular_frequency_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.min_frequency_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.current_frequency_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.cache_size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Cpu, _impl_.cpu_usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Gpu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Gpu, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Gpu, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Gpu, _impl_.driver_version_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Gpu, _impl_.memory_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Gpu, _impl_.frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _impl_.serial_number_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _impl_.free_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Ram, _impl_.available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Disk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Disk, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Disk, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Disk, _impl_.serial_number_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Disk, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MainBoard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MainBoard, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MainBoard, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MainBoard, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MainBoard, _impl_.serial_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::ProcessTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::ProcessTime, _impl_.user_time_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::ProcessTime, _impl_.kernel_time_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::ProcessTime, _impl_.children_usertime_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::ProcessTime, _impl_.children_kernel_time_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process_EnvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process_EnvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process_EnvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process_EnvEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.work_path_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.cpu_usage_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.mem_usage_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.stop_time_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.reboot_count_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Process, _impl_.env_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Network, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Network, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Network, _impl_.ipv4s_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Network, _impl_.ipv6s_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Network, _impl_.broadband_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Network, _impl_.broadband_using_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::OSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::OSInfo, _impl_.operating_system_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::OSInfo, _impl_.short_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::OSInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::OSInfo, _impl_.kernel_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::OSInfo, _impl_.architecture_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::OSInfo, _impl_.endianess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.cpus_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.gpus_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.rams_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.disks_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.networks_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.main_board_infos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.os_infos_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::MachineState, _impl_.processes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.to_node_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.to_group_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.arch_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.os_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.to_config_path_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.src_config_path_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.config_hash_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.config_size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::Node, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.to_node_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.to_group_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.reply_uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.desc_str_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeReply, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.src_node_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.to_group_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.cmd_type_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.podman_cmd_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.paras_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.paras_1_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.paras_2_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmd, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.src_node_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.to_node_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.cmd_reply_uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.cmd_type_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.desc_str_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::NodeCmdReply, _impl_.updated_at_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cn::seisys::dds::File)},
  { 10, -1, -1, sizeof(::cn::seisys::dds::FileInfos)},
  { 17, -1, -1, sizeof(::cn::seisys::dds::Ping)},
  { 30, -1, -1, sizeof(::cn::seisys::dds::Cpu)},
  { 46, -1, -1, sizeof(::cn::seisys::dds::Gpu)},
  { 57, -1, -1, sizeof(::cn::seisys::dds::Ram)},
  { 70, -1, -1, sizeof(::cn::seisys::dds::Disk)},
  { 80, -1, -1, sizeof(::cn::seisys::dds::MainBoard)},
  { 90, -1, -1, sizeof(::cn::seisys::dds::ProcessTime)},
  { 100, 108, -1, sizeof(::cn::seisys::dds::Process_EnvEntry_DoNotUse)},
  { 110, -1, -1, sizeof(::cn::seisys::dds::Process)},
  { 127, -1, -1, sizeof(::cn::seisys::dds::Network)},
  { 138, -1, -1, sizeof(::cn::seisys::dds::OSInfo)},
  { 150, -1, -1, sizeof(::cn::seisys::dds::MachineState)},
  { 166, -1, -1, sizeof(::cn::seisys::dds::Node)},
  { 189, -1, -1, sizeof(::cn::seisys::dds::NodeReply)},
  { 206, -1, -1, sizeof(::cn::seisys::dds::NodeCmd)},
  { 225, -1, -1, sizeof(::cn::seisys::dds::NodeCmdReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::seisys::dds::_File_default_instance_._instance,
  &::cn::seisys::dds::_FileInfos_default_instance_._instance,
  &::cn::seisys::dds::_Ping_default_instance_._instance,
  &::cn::seisys::dds::_Cpu_default_instance_._instance,
  &::cn::seisys::dds::_Gpu_default_instance_._instance,
  &::cn::seisys::dds::_Ram_default_instance_._instance,
  &::cn::seisys::dds::_Disk_default_instance_._instance,
  &::cn::seisys::dds::_MainBoard_default_instance_._instance,
  &::cn::seisys::dds::_ProcessTime_default_instance_._instance,
  &::cn::seisys::dds::_Process_EnvEntry_DoNotUse_default_instance_._instance,
  &::cn::seisys::dds::_Process_default_instance_._instance,
  &::cn::seisys::dds::_Network_default_instance_._instance,
  &::cn::seisys::dds::_OSInfo_default_instance_._instance,
  &::cn::seisys::dds::_MachineState_default_instance_._instance,
  &::cn::seisys::dds::_Node_default_instance_._instance,
  &::cn::seisys::dds::_NodeReply_default_instance_._instance,
  &::cn::seisys::dds::_NodeCmd_default_instance_._instance,
  &::cn::seisys::dds::_NodeCmdReply_default_instance_._instance,
};

const char descriptor_table_protodef_node_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnode.proto\022\rcn.seisys.dds\"T\n\004File\022\026\n\016f"
  "ile_path_name\030\001 \001(\014\022\016\n\006is_dir\030\002 \001(\010\022\021\n\tf"
  "ile_size\030\003 \001(\003\022\021\n\ttimestamp\030\004 \001(\003\"/\n\tFil"
  "eInfos\022\"\n\005files\030\001 \003(\0132\023.cn.seisys.dds.Fi"
  "le\"\246\001\n\004Ping\022\022\n\nto_node_id\030\001 \001(\t\022\023\n\013src_n"
  "ode_id\030\002 \001(\t\022\024\n\014node_app_ver\030\003 \001(\t\022\024\n\014no"
  "de_cfg_ver\030\004 \001(\t\022\'\n\005state\030\005 \001(\0162\030.cn.sei"
  "sys.dds.NodeState\022\022\n\ncreated_at\030\006 \001(\003\022\014\n"
  "\004desc\030\007 \001(\t\"\336\001\n\003Cpu\022\016\n\006vendor\030\001 \001(\t\022\r\n\005m"
  "odel\030\002 \001(\t\022\026\n\016physical_cores\030\003 \001(\005\022\025\n\rlo"
  "gical_cores\030\004 \001(\005\022\025\n\rmax_frequency\030\005 \001(\003"
  "\022\031\n\021regular_frequency\030\006 \001(\003\022\025\n\rmin_frequ"
  "ency\030\007 \001(\003\022\031\n\021current_frequency\030\010 \003(\003\022\022\n"
  "\ncache_size\030\t \001(\003\022\021\n\tcpu_usage\030\n \001(\001\"_\n\003"
  "Gpu\022\016\n\006vendor\030\001 \001(\t\022\r\n\005model\030\002 \001(\t\022\026\n\016dr"
  "iver_version\030\003 \001(\t\022\016\n\006memory\030\004 \001(\001\022\021\n\tfr"
  "equency\030\005 \001(\003\"x\n\003Ram\022\016\n\006vendor\030\001 \001(\t\022\r\n\005"
  "model\030\002 \001(\t\022\014\n\004name\030\003 \001(\014\022\025\n\rserial_numb"
  "er\030\004 \001(\t\022\014\n\004size\030\005 \001(\003\022\014\n\004free\030\006 \001(\003\022\021\n\t"
  "available\030\007 \001(\003\"J\n\004Disk\022\016\n\006vendor\030\001 \001(\014\022"
  "\r\n\005model\030\002 \001(\t\022\025\n\rserial_number\030\003 \001(\t\022\014\n"
  "\004size\030\004 \001(\003\"Q\n\tMainBoard\022\016\n\006vendor\030\001 \001(\t"
  "\022\014\n\004name\030\002 \001(\014\022\017\n\007version\030\003 \001(\t\022\025\n\rseria"
  "l_number\030\004 \001(\t\"n\n\013ProcessTime\022\021\n\tuser_ti"
  "me\030\001 \001(\002\022\023\n\013kernel_time\030\002 \001(\002\022\031\n\021childre"
  "n_usertime\030\003 \001(\002\022\034\n\024children_kernel_time"
  "\030\004 \001(\002\"\224\002\n\007Process\022\014\n\004name\030\001 \001(\014\022\021\n\twork"
  "_path\030\002 \001(\t\022\013\n\003pid\030\003 \001(\005\022\014\n\004args\030\004 \001(\t\022\021"
  "\n\tcpu_usage\030\005 \001(\001\022\021\n\tmem_usage\030\006 \001(\001\022\022\n\n"
  "start_time\030\007 \001(\003\022\021\n\tstop_time\030\010 \001(\003\022\024\n\014r"
  "eboot_count\030\t \001(\005\022\020\n\010priority\030\n \001(\005\022,\n\003e"
  "nv\030\013 \003(\0132\037.cn.seisys.dds.Process.EnvEntr"
  "y\032*\n\010EnvEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\"a\n\007Network\022\014\n\004name\030\001 \001(\014\022\r\n\005ipv4s\030"
  "\002 \001(\t\022\r\n\005ipv6s\030\003 \001(\t\022\021\n\tbroadband\030\004 \001(\003\022"
  "\027\n\017broadband_using\030\005 \001(\003\"\200\001\n\006OSInfo\022\030\n\020o"
  "perating_system\030\001 \001(\014\022\022\n\nshort_name\030\002 \001("
  "\014\022\017\n\007version\030\003 \001(\t\022\016\n\006kernel\030\004 \001(\t\022\024\n\014ar"
  "chitecture\030\005 \001(\t\022\021\n\tendianess\030\006 \001(\t\"\363\002\n\014"
  "MachineState\022\022\n\nto_node_id\030\001 \001(\t\022\023\n\013src_"
  "node_id\030\002 \001(\t\022 \n\004cpus\030\003 \003(\0132\022.cn.seisys."
  "dds.Cpu\022 \n\004gpus\030\004 \003(\0132\022.cn.seisys.dds.Gp"
  "u\022 \n\004rams\030\005 \001(\0132\022.cn.seisys.dds.Ram\022\"\n\005d"
  "isks\030\006 \003(\0132\023.cn.seisys.dds.Disk\022(\n\010netwo"
  "rks\030\007 \003(\0132\026.cn.seisys.dds.Network\0222\n\020mai"
  "n_board_infos\030\010 \001(\0132\030.cn.seisys.dds.Main"
  "Board\022\'\n\010os_infos\030\t \001(\0132\025.cn.seisys.dds."
  "OSInfo\022)\n\tprocesses\030\n \003(\0132\026.cn.seisys.dd"
  "s.Process\"\211\003\n\004Node\022\014\n\004uuid\030\001 \001(\t\022\022\n\nto_n"
  "ode_id\030\002 \001(\t\022\024\n\014to_node_name\030\003 \001(\014\022\023\n\013sr"
  "c_node_id\030\004 \001(\t\022\020\n\010to_group\030\005 \001(\t\022%\n\004arc"
  "h\030\006 \001(\0162\027.cn.seisys.dds.ArchType\022!\n\002os\030\007"
  " \001(\0162\025.cn.seisys.dds.OSType\022\013\n\003uri\030\010 \001(\t"
  "\022\026\n\016to_config_path\030\t \001(\t\022\027\n\017src_config_p"
  "ath\030\n \001(\t\022\016\n\006domain\030\013 \001(\r\022\016\n\006config\030\014 \001("
  "\014\022\023\n\013config_hash\030\r \001(\t\022\023\n\013config_size\030\016 "
  "\001(\r\022(\n\005state\030\017 \001(\0162\031.cn.seisys.dds.CommS"
  "tatus\022\022\n\ncreated_at\030\020 \001(\003\022\022\n\nupdated_at\030"
  "\021 \001(\003\"\361\001\n\tNodeReply\022\014\n\004uuid\030\001 \001(\t\022\022\n\nto_"
  "node_id\030\002 \001(\t\022\024\n\014to_node_name\030\003 \001(\014\022\023\n\013s"
  "rc_node_id\030\004 \001(\t\022\020\n\010to_group\030\005 \001(\t\022\022\n\nre"
  "ply_uuid\030\006 \001(\t\022)\n\006status\030\007 \001(\0162\031.cn.seis"
  "ys.dds.CommStatus\022\014\n\004desc\030\010 \001(\014\022\020\n\010desc_"
  "str\030\t \001(\014\022\022\n\ncreated_at\030\n \001(\003\022\022\n\nupdated"
  "_at\030\013 \001(\003\"\247\002\n\007NodeCmd\022\014\n\004uuid\030\001 \001(\t\022\023\n\013s"
  "rc_node_id\030\002 \001(\t\022\025\n\rsrc_node_name\030\003 \001(\014\022"
  "\022\n\nto_node_id\030\004 \001(\t\022\020\n\010to_group\030\005 \001(\t\022(\n"
  "\010cmd_type\030\006 \001(\0162\026.cn.seisys.dds.CmdType\022"
  ",\n\npodman_cmd\030\007 \001(\0162\030.cn.seisys.dds.Podm"
  "anCmd\022\013\n\003cmd\030\010 \001(\t\022\r\n\005paras\030\t \001(\t\022\017\n\007par"
  "as_1\030\n \001(\t\022\017\n\007paras_2\030\013 \001(\t\022\022\n\ncreated_a"
  "t\030\014 \001(\003\022\022\n\nupdated_at\030\r \001(\003\"\314\002\n\014NodeCmdR"
  "eply\022\014\n\004uuid\030\001 \001(\t\022\023\n\013src_node_id\030\002 \001(\t\022"
  "\025\n\rsrc_node_name\030\003 \001(\014\022\022\n\nto_node_id\030\004 \001"
  "(\t\022\024\n\014to_node_name\030\005 \001(\014\022\026\n\016cmd_reply_uu"
  "id\030\006 \001(\t\022(\n\010cmd_type\030\007 \001(\0162\026.cn.seisys.d"
  "ds.CmdType\022)\n\006status\030\010 \001(\0162\031.cn.seisys.d"
  "ds.CommStatus\022\014\n\004desc\030\t \001(\014\022\020\n\010desc_str\030"
  "\n \001(\014\022#\n\006result\030\013 \003(\0132\023.cn.seisys.dds.Fi"
  "le\022\022\n\ncreated_at\030\014 \001(\003\022\022\n\nupdated_at\030\r \001"
  "(\003*A\n\010ArchType\022\024\n\020ARCHTYPE_UNKNOWN\020\000\022\t\n\005"
  "AMD64\020\001\022\007\n\003X86\020\002\022\013\n\007ARM64V8\020\003*1\n\006OSType\022"
  "\017\n\013OSTYPE_NOWN\020\000\022\013\n\007WINDOWA\020\001\022\t\n\005LINUX\020\002"
  "*\341\004\n\007CmdType\022\023\n\017CMDTYPE_UNKNOWN\020\000\022\n\n\006REB"
  "OOT\020\001\022\013\n\007RESTART\020\002\022\006\n\002LS\020\003\022\t\n\005MKDIR\020\004\022\007\n"
  "\003DEL\020\005\022\n\n\006DELDIR\020\006\022\014\n\010SENDFILE\020\007\022\n\n\006ADDA"
  "PP\020\010\022\r\n\tREMOVEAPP\020\t\022\014\n\010STARTAPP\020\n\022\013\n\007STO"
  "PAPP\020\013\022\016\n\nRESTARTAPP\020\014\022\t\n\005LSAPP\020\r\022\r\n\tADD"
  "PLUGIN\020\016\022\020\n\014REMOVEPLUGIN\020\017\022\017\n\013STARTPLUGI"
  "N\020\020\022\016\n\nSTOPPLUGIN\020\021\022\021\n\rRESTARTPLUGIN\020\022\022\014"
  "\n\010LSPLUGIN\020\023\022\r\n\tGETS3FILE\020\024\022\r\n\tPUTS3FILE"
  "\020\025\022\013\n\007LSS3DIR\020\026\022\017\n\013LSS3BUCKETS\020\027\022\016\n\nCOPY"
  "S3FILE\020\030\022\r\n\tDELS3FILE\020\031\022\007\n\003ZIP\020\032\022\010\n\004DZIP"
  "\020\033\022\016\n\nADDS3WATCH\020\034\022\r\n\tRMS3WATCH\020\035\022\r\n\tLSS"
  "3WATCH\020\036\022\021\n\rSTARTTRACELOG\020\037\022\020\n\014STOPTRACE"
  "LOG\020 \022\016\n\nLSTRACELOG\020!\022\r\n\tSTARTEXEC\020\"\022\014\n\010"
  "STOPEXEC\020#\022\n\n\006LSEXEC\020$\022\n\n\006RMEXEC\020%\022\021\n\rGE"
  "TEXECRESULT\020&\022\n\n\006MKFILE\020\'\022\n\n\006CPFILE\020(\022\r\n"
  "\tPODMANCMD\020)*J\n\tNodeState\022\026\n\022NODE_STATE_"
  "UNKNOWN\020\000\022\n\n\006ONLINE\020\001\022\013\n\007OFFLINE\020\002\022\014\n\010OV"
  "ERLOAD\020\003*\376\005\n\tPodmanCmd\022\023\n\017LIST_CONTAINER"
  "S\020\000\022\024\n\020CREATE_CONTAINER\020\001\022\023\n\017START_CONTA"
  "INER\020\002\022\022\n\016STOP_CONTAINER\020\003\022\024\n\020REMOVE_CON"
  "TAINER\020\004\022\025\n\021INSPECT_CONTAINER\020\005\022\025\n\021RESTA"
  "RT_CONTAINER\020\006\022\023\n\017PAUSE_CONTAINER\020\007\022\025\n\021U"
  "NPAUSE_CONTAINER\020\010\022\025\n\021EXEC_IN_CONTAINER\020"
  "\t\022\017\n\013LIST_IMAGES\020\n\022\016\n\nPULL_IMAGE\020\013\022\020\n\014RE"
  "MOVE_IMAGE\020\014\022\021\n\rINSPECT_IMAGE\020\r\022\r\n\tTAG_I"
  "MAGE\020\016\022\021\n\rLIST_NETWORKS\020\017\022\022\n\016CREATE_NETW"
  "ORK\020\020\022\022\n\016REMOVE_NETWORK\020\021\022\023\n\017INSPECT_NET"
  "WORK\020\022\022\020\n\014LIST_VOLUMES\020\023\022\021\n\rCREATE_VOLUM"
  "E\020\024\022\021\n\rREMOVE_VOLUME\020\025\022\022\n\016INSPECT_VOLUME"
  "\020\026\022\017\n\013LIST_STACKS\020\027\022\020\n\014DEPLOY_STACK\020\030\022\020\n"
  "\014REMOVE_STACK\020\031\022\021\n\rINSPECT_STACK\020\032\022\020\n\014UP"
  "DATE_STACK\020\033\022\017\n\013START_STACK\020\034\022\016\n\nSTOP_ST"
  "ACK\020\035\022\021\n\rRESTART_STACK\020\036\022\017\n\013PAUSE_STACK\020"
  "\037\022\021\n\rUNPAUSE_STACK\020 \022\017\n\013SCALE_STACK\020!\022\022\n"
  "\016GET_STACK_LOGS\020\"\022\023\n\017LIST_REGISTRIES\020#\022\020"
  "\n\014ADD_REGISTRY\020$\022\023\n\017REMOVE_REGISTRY\020%\022\022\n"
  "\016LOGIN_REGISTRY\020&*P\n\nCommStatus\022\022\n\016STATU"
  "S_UNKNOWN\020\000\022\t\n\005DOING\020\001\022\013\n\007SUCCESS\020\002\022\013\n\007I"
  "NVALID\020\003\022\t\n\005OTHER\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_node_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_node_2eproto = {
    false, false, 4867, descriptor_table_protodef_node_2eproto,
    "node.proto",
    &descriptor_table_node_2eproto_once, nullptr, 0, 18,
    schemas, file_default_instances, TableStruct_node_2eproto::offsets,
    file_level_metadata_node_2eproto, file_level_enum_descriptors_node_2eproto,
    file_level_service_descriptors_node_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_node_2eproto_getter() {
  return &descriptor_table_node_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_node_2eproto(&descriptor_table_node_2eproto);
namespace cn {
namespace seisys {
namespace dds {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[0];
}
bool ArchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OSType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[1];
}
bool OSType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[2];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[3];
}
bool NodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PodmanCmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[4];
}
bool PodmanCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[5];
}
bool CommStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class File::_Internal {
 public:
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_path_name_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.is_dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path_name().empty()) {
    _this->_impl_.file_path_name_.Set(from._internal_file_path_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_size_, &from._impl_.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_dir_) -
    reinterpret_cast<char*>(&_impl_.file_size_)) + sizeof(_impl_.is_dir_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.File)
}

inline void File::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_path_name_){}
    , decltype(_impl_.file_size_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.is_dir_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

File::~File() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_path_name_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_path_name_.ClearToEmpty();
  ::memset(&_impl_.file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_dir_) -
      reinterpret_cast<char*>(&_impl_.file_size_)) + sizeof(_impl_.is_dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes file_path_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file_path_name = 1;
  if (!this->_internal_file_path_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_file_path_name(), target);
  }

  // bool is_dir = 2;
  if (this->_internal_is_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_dir(), target);
  }

  // int64 file_size = 3;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_file_size(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file_path_name = 1;
  if (!this->_internal_file_path_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_path_name());
  }

  // int64 file_size = 3;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // bool is_dir = 2;
  if (this->_internal_is_dir() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }


void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<File*>(&to_msg);
  auto& from = static_cast<const File&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.File)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path_name().empty()) {
    _this->_internal_set_file_path_name(from._internal_file_path_name());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_is_dir() != 0) {
    _this->_internal_set_is_dir(from._internal_is_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_path_name_, lhs_arena,
      &other->_impl_.file_path_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(File, _impl_.is_dir_)
      + sizeof(File::_impl_.is_dir_)
      - PROTOBUF_FIELD_OFFSET(File, _impl_.file_size_)>(
          reinterpret_cast<char*>(&_impl_.file_size_),
          reinterpret_cast<char*>(&other->_impl_.file_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[0]);
}

// ===================================================================

class FileInfos::_Internal {
 public:
};

FileInfos::FileInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.FileInfos)
}
FileInfos::FileInfos(const FileInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileInfos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.FileInfos)
}

inline void FileInfos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileInfos::~FileInfos() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.FileInfos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileInfos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
}

void FileInfos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.FileInfos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cn.seisys.dds.File files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.FileInfos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cn.seisys.dds.File files = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.FileInfos)
  return target;
}

size_t FileInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.FileInfos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.dds.File files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileInfos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileInfos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileInfos::GetClassData() const { return &_class_data_; }


void FileInfos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileInfos*>(&to_msg);
  auto& from = static_cast<const FileInfos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.FileInfos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileInfos::CopyFrom(const FileInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.FileInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfos::IsInitialized() const {
  return true;
}

void FileInfos::InternalSwap(FileInfos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[1]);
}

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_node_id_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.node_app_ver_){}
    , decltype(_impl_.node_cfg_ver_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_app_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_app_ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_app_ver().empty()) {
    _this->_impl_.node_app_ver_.Set(from._internal_node_app_ver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_cfg_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_cfg_ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_cfg_ver().empty()) {
    _this->_impl_.node_cfg_ver_.Set(from._internal_node_cfg_ver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Ping)
}

inline void Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_node_id_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.node_app_ver_){}
    , decltype(_impl_.node_cfg_ver_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.created_at_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_app_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_app_ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_cfg_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_cfg_ver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_node_id_.Destroy();
  _impl_.src_node_id_.Destroy();
  _impl_.node_app_ver_.Destroy();
  _impl_.node_cfg_ver_.Destroy();
  _impl_.desc_.Destroy();
}

void Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_node_id_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  _impl_.node_app_ver_.ClearToEmpty();
  _impl_.node_cfg_ver_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ping.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ping.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string node_app_ver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_node_app_ver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ping.node_app_ver"));
        } else
          goto handle_unusual;
        continue;
      // string node_cfg_ver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_node_cfg_ver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ping.node_cfg_ver"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.NodeState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::cn::seisys::dds::NodeState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ping.desc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_node_id = 1;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ping.to_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_node_id(), target);
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ping.src_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_node_id(), target);
  }

  // string node_app_ver = 3;
  if (!this->_internal_node_app_ver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_app_ver().data(), static_cast<int>(this->_internal_node_app_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ping.node_app_ver");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node_app_ver(), target);
  }

  // string node_cfg_ver = 4;
  if (!this->_internal_node_cfg_ver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_cfg_ver().data(), static_cast<int>(this->_internal_node_cfg_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ping.node_cfg_ver");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node_cfg_ver(), target);
  }

  // .cn.seisys.dds.NodeState state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // int64 created_at = 6;
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_created_at(), target);
  }

  // string desc = 7;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ping.desc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to_node_id = 1;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // string node_app_ver = 3;
  if (!this->_internal_node_app_ver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_app_ver());
  }

  // string node_cfg_ver = 4;
  if (!this->_internal_node_cfg_ver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_cfg_ver());
  }

  // string desc = 7;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int64 created_at = 6;
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // .cn.seisys.dds.NodeState state = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }


void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (!from._internal_node_app_ver().empty()) {
    _this->_internal_set_node_app_ver(from._internal_node_app_ver());
  }
  if (!from._internal_node_cfg_ver().empty()) {
    _this->_internal_set_node_cfg_ver(from._internal_node_cfg_ver());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_app_ver_, lhs_arena,
      &other->_impl_.node_app_ver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_cfg_ver_, lhs_arena,
      &other->_impl_.node_cfg_ver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ping, _impl_.state_)
      + sizeof(Ping::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Ping, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[2]);
}

// ===================================================================

class Cpu::_Internal {
 public:
};

Cpu::Cpu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Cpu)
}
Cpu::Cpu(const Cpu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cpu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_frequency_){from._impl_.current_frequency_}
    , /*decltype(_impl_._current_frequency_cached_byte_size_)*/{0}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.physical_cores_){}
    , decltype(_impl_.logical_cores_){}
    , decltype(_impl_.max_frequency_){}
    , decltype(_impl_.regular_frequency_){}
    , decltype(_impl_.min_frequency_){}
    , decltype(_impl_.cache_size_){}
    , decltype(_impl_.cpu_usage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.physical_cores_, &from._impl_.physical_cores_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpu_usage_) -
    reinterpret_cast<char*>(&_impl_.physical_cores_)) + sizeof(_impl_.cpu_usage_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Cpu)
}

inline void Cpu::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_frequency_){arena}
    , /*decltype(_impl_._current_frequency_cached_byte_size_)*/{0}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.physical_cores_){0}
    , decltype(_impl_.logical_cores_){0}
    , decltype(_impl_.max_frequency_){int64_t{0}}
    , decltype(_impl_.regular_frequency_){int64_t{0}}
    , decltype(_impl_.min_frequency_){int64_t{0}}
    , decltype(_impl_.cache_size_){int64_t{0}}
    , decltype(_impl_.cpu_usage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cpu::~Cpu() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Cpu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cpu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_frequency_.~RepeatedField();
  _impl_.vendor_.Destroy();
  _impl_.model_.Destroy();
}

void Cpu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cpu::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Cpu)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_frequency_.Clear();
  _impl_.vendor_.ClearToEmpty();
  _impl_.model_.ClearToEmpty();
  ::memset(&_impl_.physical_cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cpu_usage_) -
      reinterpret_cast<char*>(&_impl_.physical_cores_)) + sizeof(_impl_.cpu_usage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cpu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Cpu.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Cpu.model"));
        } else
          goto handle_unusual;
        continue;
      // int32 physical_cores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.physical_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logical_cores = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.logical_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_frequency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.max_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 regular_frequency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.regular_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 min_frequency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.min_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 current_frequency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_current_frequency(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_current_frequency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cache_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cpu_usage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cpu::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Cpu)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Cpu.vendor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor(), target);
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Cpu.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // int32 physical_cores = 3;
  if (this->_internal_physical_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_physical_cores(), target);
  }

  // int32 logical_cores = 4;
  if (this->_internal_logical_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_logical_cores(), target);
  }

  // int64 max_frequency = 5;
  if (this->_internal_max_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_max_frequency(), target);
  }

  // int64 regular_frequency = 6;
  if (this->_internal_regular_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_regular_frequency(), target);
  }

  // int64 min_frequency = 7;
  if (this->_internal_min_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_min_frequency(), target);
  }

  // repeated int64 current_frequency = 8;
  {
    int byte_size = _impl_._current_frequency_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_current_frequency(), byte_size, target);
    }
  }

  // int64 cache_size = 9;
  if (this->_internal_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_cache_size(), target);
  }

  // double cpu_usage = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_cpu_usage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Cpu)
  return target;
}

size_t Cpu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Cpu)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 current_frequency = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.current_frequency_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._current_frequency_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // int32 physical_cores = 3;
  if (this->_internal_physical_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_physical_cores());
  }

  // int32 logical_cores = 4;
  if (this->_internal_logical_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logical_cores());
  }

  // int64 max_frequency = 5;
  if (this->_internal_max_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_frequency());
  }

  // int64 regular_frequency = 6;
  if (this->_internal_regular_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_regular_frequency());
  }

  // int64 min_frequency = 7;
  if (this->_internal_min_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min_frequency());
  }

  // int64 cache_size = 9;
  if (this->_internal_cache_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cache_size());
  }

  // double cpu_usage = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cpu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cpu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cpu::GetClassData() const { return &_class_data_; }


void Cpu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cpu*>(&to_msg);
  auto& from = static_cast<const Cpu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Cpu)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.current_frequency_.MergeFrom(from._impl_.current_frequency_);
  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_physical_cores() != 0) {
    _this->_internal_set_physical_cores(from._internal_physical_cores());
  }
  if (from._internal_logical_cores() != 0) {
    _this->_internal_set_logical_cores(from._internal_logical_cores());
  }
  if (from._internal_max_frequency() != 0) {
    _this->_internal_set_max_frequency(from._internal_max_frequency());
  }
  if (from._internal_regular_frequency() != 0) {
    _this->_internal_set_regular_frequency(from._internal_regular_frequency());
  }
  if (from._internal_min_frequency() != 0) {
    _this->_internal_set_min_frequency(from._internal_min_frequency());
  }
  if (from._internal_cache_size() != 0) {
    _this->_internal_set_cache_size(from._internal_cache_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = from._internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _this->_internal_set_cpu_usage(from._internal_cpu_usage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cpu::CopyFrom(const Cpu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Cpu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cpu::IsInitialized() const {
  return true;
}

void Cpu::InternalSwap(Cpu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.current_frequency_.InternalSwap(&other->_impl_.current_frequency_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cpu, _impl_.cpu_usage_)
      + sizeof(Cpu::_impl_.cpu_usage_)
      - PROTOBUF_FIELD_OFFSET(Cpu, _impl_.physical_cores_)>(
          reinterpret_cast<char*>(&_impl_.physical_cores_),
          reinterpret_cast<char*>(&other->_impl_.physical_cores_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cpu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[3]);
}

// ===================================================================

class Gpu::_Internal {
 public:
};

Gpu::Gpu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Gpu)
}
Gpu::Gpu(const Gpu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gpu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.driver_version_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.frequency_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.driver_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_driver_version().empty()) {
    _this->_impl_.driver_version_.Set(from._internal_driver_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.memory_, &from._impl_.memory_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frequency_) -
    reinterpret_cast<char*>(&_impl_.memory_)) + sizeof(_impl_.frequency_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Gpu)
}

inline void Gpu::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.driver_version_){}
    , decltype(_impl_.memory_){0}
    , decltype(_impl_.frequency_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Gpu::~Gpu() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Gpu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gpu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_.Destroy();
  _impl_.model_.Destroy();
  _impl_.driver_version_.Destroy();
}

void Gpu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gpu::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Gpu)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vendor_.ClearToEmpty();
  _impl_.model_.ClearToEmpty();
  _impl_.driver_version_.ClearToEmpty();
  ::memset(&_impl_.memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frequency_) -
      reinterpret_cast<char*>(&_impl_.memory_)) + sizeof(_impl_.frequency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gpu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Gpu.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Gpu.model"));
        } else
          goto handle_unusual;
        continue;
      // string driver_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_driver_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Gpu.driver_version"));
        } else
          goto handle_unusual;
        continue;
      // double memory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.memory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 frequency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gpu::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Gpu)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Gpu.vendor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor(), target);
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Gpu.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // string driver_version = 3;
  if (!this->_internal_driver_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver_version().data(), static_cast<int>(this->_internal_driver_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Gpu.driver_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_driver_version(), target);
  }

  // double memory = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory = this->_internal_memory();
  uint64_t raw_memory;
  memcpy(&raw_memory, &tmp_memory, sizeof(tmp_memory));
  if (raw_memory != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_memory(), target);
  }

  // int64 frequency = 5;
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Gpu)
  return target;
}

size_t Gpu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Gpu)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string driver_version = 3;
  if (!this->_internal_driver_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driver_version());
  }

  // double memory = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory = this->_internal_memory();
  uint64_t raw_memory;
  memcpy(&raw_memory, &tmp_memory, sizeof(tmp_memory));
  if (raw_memory != 0) {
    total_size += 1 + 8;
  }

  // int64 frequency = 5;
  if (this->_internal_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frequency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gpu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gpu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gpu::GetClassData() const { return &_class_data_; }


void Gpu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gpu*>(&to_msg);
  auto& from = static_cast<const Gpu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Gpu)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_driver_version().empty()) {
    _this->_internal_set_driver_version(from._internal_driver_version());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory = from._internal_memory();
  uint64_t raw_memory;
  memcpy(&raw_memory, &tmp_memory, sizeof(tmp_memory));
  if (raw_memory != 0) {
    _this->_internal_set_memory(from._internal_memory());
  }
  if (from._internal_frequency() != 0) {
    _this->_internal_set_frequency(from._internal_frequency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gpu::CopyFrom(const Gpu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Gpu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpu::IsInitialized() const {
  return true;
}

void Gpu::InternalSwap(Gpu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.driver_version_, lhs_arena,
      &other->_impl_.driver_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gpu, _impl_.frequency_)
      + sizeof(Gpu::_impl_.frequency_)
      - PROTOBUF_FIELD_OFFSET(Gpu, _impl_.memory_)>(
          reinterpret_cast<char*>(&_impl_.memory_),
          reinterpret_cast<char*>(&other->_impl_.memory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gpu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[4]);
}

// ===================================================================

class Ram::_Internal {
 public:
};

Ram::Ram(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Ram)
}
Ram::Ram(const Ram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ram* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.free_){}
    , decltype(_impl_.available_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.available_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.available_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Ram)
}

inline void Ram::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.free_){int64_t{0}}
    , decltype(_impl_.available_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ram::~Ram() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Ram)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ram::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_.Destroy();
  _impl_.model_.Destroy();
  _impl_.name_.Destroy();
  _impl_.serial_number_.Destroy();
}

void Ram::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ram::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Ram)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vendor_.ClearToEmpty();
  _impl_.model_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.serial_number_.ClearToEmpty();
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.available_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ram::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ram.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ram.model"));
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Ram.serial_number"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 free = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 available = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ram::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Ram)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ram.vendor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor(), target);
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ram.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string serial_number = 4;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Ram.serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serial_number(), target);
  }

  // int64 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_size(), target);
  }

  // int64 free = 6;
  if (this->_internal_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_free(), target);
  }

  // int64 available = 7;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Ram)
  return target;
}

size_t Ram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Ram)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string serial_number = 4;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // int64 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 free = 6;
  if (this->_internal_free() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_free());
  }

  // int64 available = 7;
  if (this->_internal_available() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_available());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ram::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ram::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ram::GetClassData() const { return &_class_data_; }


void Ram::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ram*>(&to_msg);
  auto& from = static_cast<const Ram&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Ram)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_free() != 0) {
    _this->_internal_set_free(from._internal_free());
  }
  if (from._internal_available() != 0) {
    _this->_internal_set_available(from._internal_available());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ram::CopyFrom(const Ram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Ram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ram::IsInitialized() const {
  return true;
}

void Ram::InternalSwap(Ram* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ram, _impl_.available_)
      + sizeof(Ram::_impl_.available_)
      - PROTOBUF_FIELD_OFFSET(Ram, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ram::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[5]);
}

// ===================================================================

class Disk::_Internal {
 public:
};

Disk::Disk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Disk)
}
Disk::Disk(const Disk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Disk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Disk)
}

inline void Disk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Disk::~Disk() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Disk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Disk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_.Destroy();
  _impl_.model_.Destroy();
  _impl_.serial_number_.Destroy();
}

void Disk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Disk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vendor_.ClearToEmpty();
  _impl_.model_.ClearToEmpty();
  _impl_.serial_number_.ClearToEmpty();
  _impl_.size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Disk.model"));
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Disk.serial_number"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Disk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Disk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vendor = 1;
  if (!this->_internal_vendor().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_vendor(), target);
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Disk.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // string serial_number = 3;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Disk.serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serial_number(), target);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Disk)
  return target;
}

size_t Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Disk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vendor = 1;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vendor());
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string serial_number = 3;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Disk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Disk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Disk::GetClassData() const { return &_class_data_; }


void Disk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Disk*>(&to_msg);
  auto& from = static_cast<const Disk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Disk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Disk::CopyFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disk::IsInitialized() const {
  return true;
}

void Disk::InternalSwap(Disk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Disk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[6]);
}

// ===================================================================

class MainBoard::_Internal {
 public:
};

MainBoard::MainBoard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.MainBoard)
}
MainBoard::MainBoard(const MainBoard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MainBoard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.serial_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.MainBoard)
}

inline void MainBoard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.serial_number_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MainBoard::~MainBoard() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.MainBoard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainBoard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_.Destroy();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.serial_number_.Destroy();
}

void MainBoard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainBoard::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.MainBoard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vendor_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.serial_number_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainBoard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vendor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.MainBoard.vendor"));
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.MainBoard.version"));
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.MainBoard.serial_number"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainBoard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.MainBoard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.MainBoard.vendor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vendor(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.MainBoard.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // string serial_number = 4;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.MainBoard.serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.MainBoard)
  return target;
}

size_t MainBoard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.MainBoard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor = 1;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string serial_number = 4;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainBoard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MainBoard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainBoard::GetClassData() const { return &_class_data_; }


void MainBoard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MainBoard*>(&to_msg);
  auto& from = static_cast<const MainBoard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.MainBoard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainBoard::CopyFrom(const MainBoard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.MainBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainBoard::IsInitialized() const {
  return true;
}

void MainBoard::InternalSwap(MainBoard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_number_, lhs_arena,
      &other->_impl_.serial_number_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MainBoard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[7]);
}

// ===================================================================

class ProcessTime::_Internal {
 public:
};

ProcessTime::ProcessTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.ProcessTime)
}
ProcessTime::ProcessTime(const ProcessTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_time_){}
    , decltype(_impl_.kernel_time_){}
    , decltype(_impl_.children_usertime_){}
    , decltype(_impl_.children_kernel_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_time_, &from._impl_.user_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.children_kernel_time_) -
    reinterpret_cast<char*>(&_impl_.user_time_)) + sizeof(_impl_.children_kernel_time_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.ProcessTime)
}

inline void ProcessTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_time_){0}
    , decltype(_impl_.kernel_time_){0}
    , decltype(_impl_.children_usertime_){0}
    , decltype(_impl_.children_kernel_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessTime::~ProcessTime() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.ProcessTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessTime::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.ProcessTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.children_kernel_time_) -
      reinterpret_cast<char*>(&_impl_.user_time_)) + sizeof(_impl_.children_kernel_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float user_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.user_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float kernel_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.kernel_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float children_usertime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.children_usertime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float children_kernel_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.children_kernel_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.ProcessTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float user_time = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_user_time = this->_internal_user_time();
  uint32_t raw_user_time;
  memcpy(&raw_user_time, &tmp_user_time, sizeof(tmp_user_time));
  if (raw_user_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_user_time(), target);
  }

  // float kernel_time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kernel_time = this->_internal_kernel_time();
  uint32_t raw_kernel_time;
  memcpy(&raw_kernel_time, &tmp_kernel_time, sizeof(tmp_kernel_time));
  if (raw_kernel_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_kernel_time(), target);
  }

  // float children_usertime = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_children_usertime = this->_internal_children_usertime();
  uint32_t raw_children_usertime;
  memcpy(&raw_children_usertime, &tmp_children_usertime, sizeof(tmp_children_usertime));
  if (raw_children_usertime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_children_usertime(), target);
  }

  // float children_kernel_time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_children_kernel_time = this->_internal_children_kernel_time();
  uint32_t raw_children_kernel_time;
  memcpy(&raw_children_kernel_time, &tmp_children_kernel_time, sizeof(tmp_children_kernel_time));
  if (raw_children_kernel_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_children_kernel_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.ProcessTime)
  return target;
}

size_t ProcessTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.ProcessTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float user_time = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_user_time = this->_internal_user_time();
  uint32_t raw_user_time;
  memcpy(&raw_user_time, &tmp_user_time, sizeof(tmp_user_time));
  if (raw_user_time != 0) {
    total_size += 1 + 4;
  }

  // float kernel_time = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kernel_time = this->_internal_kernel_time();
  uint32_t raw_kernel_time;
  memcpy(&raw_kernel_time, &tmp_kernel_time, sizeof(tmp_kernel_time));
  if (raw_kernel_time != 0) {
    total_size += 1 + 4;
  }

  // float children_usertime = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_children_usertime = this->_internal_children_usertime();
  uint32_t raw_children_usertime;
  memcpy(&raw_children_usertime, &tmp_children_usertime, sizeof(tmp_children_usertime));
  if (raw_children_usertime != 0) {
    total_size += 1 + 4;
  }

  // float children_kernel_time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_children_kernel_time = this->_internal_children_kernel_time();
  uint32_t raw_children_kernel_time;
  memcpy(&raw_children_kernel_time, &tmp_children_kernel_time, sizeof(tmp_children_kernel_time));
  if (raw_children_kernel_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessTime::GetClassData() const { return &_class_data_; }


void ProcessTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessTime*>(&to_msg);
  auto& from = static_cast<const ProcessTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.ProcessTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_user_time = from._internal_user_time();
  uint32_t raw_user_time;
  memcpy(&raw_user_time, &tmp_user_time, sizeof(tmp_user_time));
  if (raw_user_time != 0) {
    _this->_internal_set_user_time(from._internal_user_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_kernel_time = from._internal_kernel_time();
  uint32_t raw_kernel_time;
  memcpy(&raw_kernel_time, &tmp_kernel_time, sizeof(tmp_kernel_time));
  if (raw_kernel_time != 0) {
    _this->_internal_set_kernel_time(from._internal_kernel_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_children_usertime = from._internal_children_usertime();
  uint32_t raw_children_usertime;
  memcpy(&raw_children_usertime, &tmp_children_usertime, sizeof(tmp_children_usertime));
  if (raw_children_usertime != 0) {
    _this->_internal_set_children_usertime(from._internal_children_usertime());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_children_kernel_time = from._internal_children_kernel_time();
  uint32_t raw_children_kernel_time;
  memcpy(&raw_children_kernel_time, &tmp_children_kernel_time, sizeof(tmp_children_kernel_time));
  if (raw_children_kernel_time != 0) {
    _this->_internal_set_children_kernel_time(from._internal_children_kernel_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessTime::CopyFrom(const ProcessTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.ProcessTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTime::IsInitialized() const {
  return true;
}

void ProcessTime::InternalSwap(ProcessTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTime, _impl_.children_kernel_time_)
      + sizeof(ProcessTime::_impl_.children_kernel_time_)
      - PROTOBUF_FIELD_OFFSET(ProcessTime, _impl_.user_time_)>(
          reinterpret_cast<char*>(&_impl_.user_time_),
          reinterpret_cast<char*>(&other->_impl_.user_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[8]);
}

// ===================================================================

Process_EnvEntry_DoNotUse::Process_EnvEntry_DoNotUse() {}
Process_EnvEntry_DoNotUse::Process_EnvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Process_EnvEntry_DoNotUse::MergeFrom(const Process_EnvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Process_EnvEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[9]);
}

// ===================================================================

class Process::_Internal {
 public:
};

Process::Process(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Process::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Process)
}
Process::Process(const Process& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Process* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.env_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.work_path_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.cpu_usage_){}
    , decltype(_impl_.mem_usage_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.reboot_count_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.stop_time_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.env_.MergeFrom(from._impl_.env_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.work_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.work_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_work_path().empty()) {
    _this->_impl_.work_path_.Set(from._internal_work_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cpu_usage_, &from._impl_.cpu_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.cpu_usage_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Process)
}

inline void Process::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.env_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.work_path_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.cpu_usage_){0}
    , decltype(_impl_.mem_usage_){0}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.reboot_count_){0}
    , decltype(_impl_.start_time_){int64_t{0}}
    , decltype(_impl_.stop_time_){int64_t{0}}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.work_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.work_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Process::~Process() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Process)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Process::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.env_.Destruct();
  _impl_.env_.~MapField();
  _impl_.name_.Destroy();
  _impl_.work_path_.Destroy();
  _impl_.args_.Destroy();
}

void Process::ArenaDtor(void* object) {
  Process* _this = reinterpret_cast< Process* >(object);
  _this->_impl_.env_.Destruct();
}
void Process::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Process::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Process)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.env_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.work_path_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  ::memset(&_impl_.cpu_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.cpu_usage_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Process::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string work_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_work_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Process.work_path"));
        } else
          goto handle_unusual;
        continue;
      // int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Process.args"));
        } else
          goto handle_unusual;
        continue;
      // double cpu_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mem_usage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.mem_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stop_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.stop_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reboot_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.reboot_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> env = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.env_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Process::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Process)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string work_path = 2;
  if (!this->_internal_work_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_work_path().data(), static_cast<int>(this->_internal_work_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Process.work_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_work_path(), target);
  }

  // int32 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pid(), target);
  }

  // string args = 4;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Process.args");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_args(), target);
  }

  // double cpu_usage = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_cpu_usage(), target);
  }

  // double mem_usage = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mem_usage = this->_internal_mem_usage();
  uint64_t raw_mem_usage;
  memcpy(&raw_mem_usage, &tmp_mem_usage, sizeof(tmp_mem_usage));
  if (raw_mem_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_mem_usage(), target);
  }

  // int64 start_time = 7;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_start_time(), target);
  }

  // int64 stop_time = 8;
  if (this->_internal_stop_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_stop_time(), target);
  }

  // int32 reboot_count = 9;
  if (this->_internal_reboot_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_reboot_count(), target);
  }

  // int32 priority = 10;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_priority(), target);
  }

  // map<string, string> env = 11;
  if (!this->_internal_env().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Process_EnvEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_env();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "cn.seisys.dds.Process.EnvEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "cn.seisys.dds.Process.EnvEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Process)
  return target;
}

size_t Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Process)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> env = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_env_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_env().begin();
      it != this->_internal_env().end(); ++it) {
    total_size += Process_EnvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string work_path = 2;
  if (!this->_internal_work_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_work_path());
  }

  // string args = 4;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  // double cpu_usage = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 8;
  }

  // double mem_usage = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mem_usage = this->_internal_mem_usage();
  uint64_t raw_mem_usage;
  memcpy(&raw_mem_usage, &tmp_mem_usage, sizeof(tmp_mem_usage));
  if (raw_mem_usage != 0) {
    total_size += 1 + 8;
  }

  // int32 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // int32 reboot_count = 9;
  if (this->_internal_reboot_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reboot_count());
  }

  // int64 start_time = 7;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  // int64 stop_time = 8;
  if (this->_internal_stop_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stop_time());
  }

  // int32 priority = 10;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Process::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Process::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Process::GetClassData() const { return &_class_data_; }


void Process::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Process*>(&to_msg);
  auto& from = static_cast<const Process&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Process)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.env_.MergeFrom(from._impl_.env_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_work_path().empty()) {
    _this->_internal_set_work_path(from._internal_work_path());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = from._internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _this->_internal_set_cpu_usage(from._internal_cpu_usage());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mem_usage = from._internal_mem_usage();
  uint64_t raw_mem_usage;
  memcpy(&raw_mem_usage, &tmp_mem_usage, sizeof(tmp_mem_usage));
  if (raw_mem_usage != 0) {
    _this->_internal_set_mem_usage(from._internal_mem_usage());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_reboot_count() != 0) {
    _this->_internal_set_reboot_count(from._internal_reboot_count());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_stop_time() != 0) {
    _this->_internal_set_stop_time(from._internal_stop_time());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Process::CopyFrom(const Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Process::IsInitialized() const {
  return true;
}

void Process::InternalSwap(Process* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.env_.InternalSwap(&other->_impl_.env_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.work_path_, lhs_arena,
      &other->_impl_.work_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Process, _impl_.priority_)
      + sizeof(Process::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(Process, _impl_.cpu_usage_)>(
          reinterpret_cast<char*>(&_impl_.cpu_usage_),
          reinterpret_cast<char*>(&other->_impl_.cpu_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Process::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[10]);
}

// ===================================================================

class Network::_Internal {
 public:
};

Network::Network(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Network)
}
Network::Network(const Network& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Network* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ipv4s_){}
    , decltype(_impl_.ipv6s_){}
    , decltype(_impl_.broadband_){}
    , decltype(_impl_.broadband_using_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ipv4s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv4s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv4s().empty()) {
    _this->_impl_.ipv4s_.Set(from._internal_ipv4s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ipv6s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6s().empty()) {
    _this->_impl_.ipv6s_.Set(from._internal_ipv6s(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.broadband_, &from._impl_.broadband_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.broadband_using_) -
    reinterpret_cast<char*>(&_impl_.broadband_)) + sizeof(_impl_.broadband_using_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Network)
}

inline void Network::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ipv4s_){}
    , decltype(_impl_.ipv6s_){}
    , decltype(_impl_.broadband_){int64_t{0}}
    , decltype(_impl_.broadband_using_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipv4s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv4s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipv6s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Network)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Network::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.ipv4s_.Destroy();
  _impl_.ipv6s_.Destroy();
}

void Network::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Network::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Network)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.ipv4s_.ClearToEmpty();
  _impl_.ipv6s_.ClearToEmpty();
  ::memset(&_impl_.broadband_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.broadband_using_) -
      reinterpret_cast<char*>(&_impl_.broadband_)) + sizeof(_impl_.broadband_using_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Network::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ipv4s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipv4s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Network.ipv4s"));
        } else
          goto handle_unusual;
        continue;
      // string ipv6s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ipv6s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Network.ipv6s"));
        } else
          goto handle_unusual;
        continue;
      // int64 broadband = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.broadband_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 broadband_using = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.broadband_using_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Network::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Network)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string ipv4s = 2;
  if (!this->_internal_ipv4s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv4s().data(), static_cast<int>(this->_internal_ipv4s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Network.ipv4s");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ipv4s(), target);
  }

  // string ipv6s = 3;
  if (!this->_internal_ipv6s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6s().data(), static_cast<int>(this->_internal_ipv6s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Network.ipv6s");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ipv6s(), target);
  }

  // int64 broadband = 4;
  if (this->_internal_broadband() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_broadband(), target);
  }

  // int64 broadband_using = 5;
  if (this->_internal_broadband_using() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_broadband_using(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Network)
  return target;
}

size_t Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Network)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string ipv4s = 2;
  if (!this->_internal_ipv4s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv4s());
  }

  // string ipv6s = 3;
  if (!this->_internal_ipv6s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6s());
  }

  // int64 broadband = 4;
  if (this->_internal_broadband() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_broadband());
  }

  // int64 broadband_using = 5;
  if (this->_internal_broadband_using() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_broadband_using());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Network::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Network::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Network::GetClassData() const { return &_class_data_; }


void Network::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Network*>(&to_msg);
  auto& from = static_cast<const Network&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Network)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_ipv4s().empty()) {
    _this->_internal_set_ipv4s(from._internal_ipv4s());
  }
  if (!from._internal_ipv6s().empty()) {
    _this->_internal_set_ipv6s(from._internal_ipv6s());
  }
  if (from._internal_broadband() != 0) {
    _this->_internal_set_broadband(from._internal_broadband());
  }
  if (from._internal_broadband_using() != 0) {
    _this->_internal_set_broadband_using(from._internal_broadband_using());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Network::CopyFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  return true;
}

void Network::InternalSwap(Network* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipv4s_, lhs_arena,
      &other->_impl_.ipv4s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipv6s_, lhs_arena,
      &other->_impl_.ipv6s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Network, _impl_.broadband_using_)
      + sizeof(Network::_impl_.broadband_using_)
      - PROTOBUF_FIELD_OFFSET(Network, _impl_.broadband_)>(
          reinterpret_cast<char*>(&_impl_.broadband_),
          reinterpret_cast<char*>(&other->_impl_.broadband_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Network::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[11]);
}

// ===================================================================

class OSInfo::_Internal {
 public:
};

OSInfo::OSInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.OSInfo)
}
OSInfo::OSInfo(const OSInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OSInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operating_system_){}
    , decltype(_impl_.short_name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.kernel_){}
    , decltype(_impl_.architecture_){}
    , decltype(_impl_.endianess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operating_system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operating_system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operating_system().empty()) {
    _this->_impl_.operating_system_.Set(from._internal_operating_system(), 
      _this->GetArenaForAllocation());
  }
  _impl_.short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_short_name().empty()) {
    _this->_impl_.short_name_.Set(from._internal_short_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kernel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kernel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kernel().empty()) {
    _this->_impl_.kernel_.Set(from._internal_kernel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.architecture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.architecture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_architecture().empty()) {
    _this->_impl_.architecture_.Set(from._internal_architecture(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endianess_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endianess_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endianess().empty()) {
    _this->_impl_.endianess_.Set(from._internal_endianess(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.OSInfo)
}

inline void OSInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operating_system_){}
    , decltype(_impl_.short_name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.kernel_){}
    , decltype(_impl_.architecture_){}
    , decltype(_impl_.endianess_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.operating_system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operating_system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kernel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kernel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.architecture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.architecture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endianess_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endianess_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OSInfo::~OSInfo() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.OSInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OSInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operating_system_.Destroy();
  _impl_.short_name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.kernel_.Destroy();
  _impl_.architecture_.Destroy();
  _impl_.endianess_.Destroy();
}

void OSInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.OSInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operating_system_.ClearToEmpty();
  _impl_.short_name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.kernel_.ClearToEmpty();
  _impl_.architecture_.ClearToEmpty();
  _impl_.endianess_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OSInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes operating_system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operating_system();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes short_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_short_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.OSInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // string kernel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_kernel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.OSInfo.kernel"));
        } else
          goto handle_unusual;
        continue;
      // string architecture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_architecture();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.OSInfo.architecture"));
        } else
          goto handle_unusual;
        continue;
      // string endianess = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_endianess();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.OSInfo.endianess"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OSInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.OSInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes operating_system = 1;
  if (!this->_internal_operating_system().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_operating_system(), target);
  }

  // bytes short_name = 2;
  if (!this->_internal_short_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_short_name(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.OSInfo.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // string kernel = 4;
  if (!this->_internal_kernel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernel().data(), static_cast<int>(this->_internal_kernel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.OSInfo.kernel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_kernel(), target);
  }

  // string architecture = 5;
  if (!this->_internal_architecture().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_architecture().data(), static_cast<int>(this->_internal_architecture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.OSInfo.architecture");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_architecture(), target);
  }

  // string endianess = 6;
  if (!this->_internal_endianess().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endianess().data(), static_cast<int>(this->_internal_endianess().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.OSInfo.endianess");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_endianess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.OSInfo)
  return target;
}

size_t OSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.OSInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes operating_system = 1;
  if (!this->_internal_operating_system().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operating_system());
  }

  // bytes short_name = 2;
  if (!this->_internal_short_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_short_name());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string kernel = 4;
  if (!this->_internal_kernel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernel());
  }

  // string architecture = 5;
  if (!this->_internal_architecture().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_architecture());
  }

  // string endianess = 6;
  if (!this->_internal_endianess().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endianess());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OSInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OSInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OSInfo::GetClassData() const { return &_class_data_; }


void OSInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OSInfo*>(&to_msg);
  auto& from = static_cast<const OSInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.OSInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operating_system().empty()) {
    _this->_internal_set_operating_system(from._internal_operating_system());
  }
  if (!from._internal_short_name().empty()) {
    _this->_internal_set_short_name(from._internal_short_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_kernel().empty()) {
    _this->_internal_set_kernel(from._internal_kernel());
  }
  if (!from._internal_architecture().empty()) {
    _this->_internal_set_architecture(from._internal_architecture());
  }
  if (!from._internal_endianess().empty()) {
    _this->_internal_set_endianess(from._internal_endianess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OSInfo::CopyFrom(const OSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.OSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSInfo::IsInitialized() const {
  return true;
}

void OSInfo::InternalSwap(OSInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operating_system_, lhs_arena,
      &other->_impl_.operating_system_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.short_name_, lhs_arena,
      &other->_impl_.short_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kernel_, lhs_arena,
      &other->_impl_.kernel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.architecture_, lhs_arena,
      &other->_impl_.architecture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endianess_, lhs_arena,
      &other->_impl_.endianess_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OSInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[12]);
}

// ===================================================================

class MachineState::_Internal {
 public:
  static const ::cn::seisys::dds::Ram& rams(const MachineState* msg);
  static const ::cn::seisys::dds::MainBoard& main_board_infos(const MachineState* msg);
  static const ::cn::seisys::dds::OSInfo& os_infos(const MachineState* msg);
};

const ::cn::seisys::dds::Ram&
MachineState::_Internal::rams(const MachineState* msg) {
  return *msg->_impl_.rams_;
}
const ::cn::seisys::dds::MainBoard&
MachineState::_Internal::main_board_infos(const MachineState* msg) {
  return *msg->_impl_.main_board_infos_;
}
const ::cn::seisys::dds::OSInfo&
MachineState::_Internal::os_infos(const MachineState* msg) {
  return *msg->_impl_.os_infos_;
}
MachineState::MachineState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.MachineState)
}
MachineState::MachineState(const MachineState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MachineState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpus_){from._impl_.cpus_}
    , decltype(_impl_.gpus_){from._impl_.gpus_}
    , decltype(_impl_.disks_){from._impl_.disks_}
    , decltype(_impl_.networks_){from._impl_.networks_}
    , decltype(_impl_.processes_){from._impl_.processes_}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.rams_){nullptr}
    , decltype(_impl_.main_board_infos_){nullptr}
    , decltype(_impl_.os_infos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rams()) {
    _this->_impl_.rams_ = new ::cn::seisys::dds::Ram(*from._impl_.rams_);
  }
  if (from._internal_has_main_board_infos()) {
    _this->_impl_.main_board_infos_ = new ::cn::seisys::dds::MainBoard(*from._impl_.main_board_infos_);
  }
  if (from._internal_has_os_infos()) {
    _this->_impl_.os_infos_ = new ::cn::seisys::dds::OSInfo(*from._impl_.os_infos_);
  }
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.MachineState)
}

inline void MachineState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cpus_){arena}
    , decltype(_impl_.gpus_){arena}
    , decltype(_impl_.disks_){arena}
    , decltype(_impl_.networks_){arena}
    , decltype(_impl_.processes_){arena}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.rams_){nullptr}
    , decltype(_impl_.main_board_infos_){nullptr}
    , decltype(_impl_.os_infos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MachineState::~MachineState() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.MachineState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MachineState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpus_.~RepeatedPtrField();
  _impl_.gpus_.~RepeatedPtrField();
  _impl_.disks_.~RepeatedPtrField();
  _impl_.networks_.~RepeatedPtrField();
  _impl_.processes_.~RepeatedPtrField();
  _impl_.to_node_id_.Destroy();
  _impl_.src_node_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rams_;
  if (this != internal_default_instance()) delete _impl_.main_board_infos_;
  if (this != internal_default_instance()) delete _impl_.os_infos_;
}

void MachineState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MachineState::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.MachineState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpus_.Clear();
  _impl_.gpus_.Clear();
  _impl_.disks_.Clear();
  _impl_.networks_.Clear();
  _impl_.processes_.Clear();
  _impl_.to_node_id_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rams_ != nullptr) {
    delete _impl_.rams_;
  }
  _impl_.rams_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.main_board_infos_ != nullptr) {
    delete _impl_.main_board_infos_;
  }
  _impl_.main_board_infos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.os_infos_ != nullptr) {
    delete _impl_.os_infos_;
  }
  _impl_.os_infos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachineState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.MachineState.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.MachineState.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.dds.Cpu cpus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.dds.Gpu gpus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.Ram rams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rams(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.dds.Disk disks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.dds.Network networks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.MainBoard main_board_infos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_board_infos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.OSInfo os_infos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_os_infos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.dds.Process processes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachineState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.MachineState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to_node_id = 1;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.MachineState.to_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to_node_id(), target);
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.MachineState.src_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_node_id(), target);
  }

  // repeated .cn.seisys.dds.Cpu cpus = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpus_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.dds.Gpu gpus = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gpus_size()); i < n; i++) {
    const auto& repfield = this->_internal_gpus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .cn.seisys.dds.Ram rams = 5;
  if (this->_internal_has_rams()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rams(this),
        _Internal::rams(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.dds.Disk disks = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_disks_size()); i < n; i++) {
    const auto& repfield = this->_internal_disks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.dds.Network networks = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_networks_size()); i < n; i++) {
    const auto& repfield = this->_internal_networks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .cn.seisys.dds.MainBoard main_board_infos = 8;
  if (this->_internal_has_main_board_infos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::main_board_infos(this),
        _Internal::main_board_infos(this).GetCachedSize(), target, stream);
  }

  // .cn.seisys.dds.OSInfo os_infos = 9;
  if (this->_internal_has_os_infos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::os_infos(this),
        _Internal::os_infos(this).GetCachedSize(), target, stream);
  }

  // repeated .cn.seisys.dds.Process processes = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_processes_size()); i < n; i++) {
    const auto& repfield = this->_internal_processes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.MachineState)
  return target;
}

size_t MachineState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.MachineState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.dds.Cpu cpus = 3;
  total_size += 1UL * this->_internal_cpus_size();
  for (const auto& msg : this->_impl_.cpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.dds.Gpu gpus = 4;
  total_size += 1UL * this->_internal_gpus_size();
  for (const auto& msg : this->_impl_.gpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.dds.Disk disks = 6;
  total_size += 1UL * this->_internal_disks_size();
  for (const auto& msg : this->_impl_.disks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.dds.Network networks = 7;
  total_size += 1UL * this->_internal_networks_size();
  for (const auto& msg : this->_impl_.networks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cn.seisys.dds.Process processes = 10;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->_impl_.processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string to_node_id = 1;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // .cn.seisys.dds.Ram rams = 5;
  if (this->_internal_has_rams()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rams_);
  }

  // .cn.seisys.dds.MainBoard main_board_infos = 8;
  if (this->_internal_has_main_board_infos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.main_board_infos_);
  }

  // .cn.seisys.dds.OSInfo os_infos = 9;
  if (this->_internal_has_os_infos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.os_infos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachineState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MachineState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachineState::GetClassData() const { return &_class_data_; }


void MachineState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MachineState*>(&to_msg);
  auto& from = static_cast<const MachineState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.MachineState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cpus_.MergeFrom(from._impl_.cpus_);
  _this->_impl_.gpus_.MergeFrom(from._impl_.gpus_);
  _this->_impl_.disks_.MergeFrom(from._impl_.disks_);
  _this->_impl_.networks_.MergeFrom(from._impl_.networks_);
  _this->_impl_.processes_.MergeFrom(from._impl_.processes_);
  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (from._internal_has_rams()) {
    _this->_internal_mutable_rams()->::cn::seisys::dds::Ram::MergeFrom(
        from._internal_rams());
  }
  if (from._internal_has_main_board_infos()) {
    _this->_internal_mutable_main_board_infos()->::cn::seisys::dds::MainBoard::MergeFrom(
        from._internal_main_board_infos());
  }
  if (from._internal_has_os_infos()) {
    _this->_internal_mutable_os_infos()->::cn::seisys::dds::OSInfo::MergeFrom(
        from._internal_os_infos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachineState::CopyFrom(const MachineState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.MachineState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineState::IsInitialized() const {
  return true;
}

void MachineState::InternalSwap(MachineState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cpus_.InternalSwap(&other->_impl_.cpus_);
  _impl_.gpus_.InternalSwap(&other->_impl_.gpus_);
  _impl_.disks_.InternalSwap(&other->_impl_.disks_);
  _impl_.networks_.InternalSwap(&other->_impl_.networks_);
  _impl_.processes_.InternalSwap(&other->_impl_.processes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MachineState, _impl_.os_infos_)
      + sizeof(MachineState::_impl_.os_infos_)
      - PROTOBUF_FIELD_OFFSET(MachineState, _impl_.rams_)>(
          reinterpret_cast<char*>(&_impl_.rams_),
          reinterpret_cast<char*>(&other->_impl_.rams_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[13]);
}

// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_node_name_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_group_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.to_config_path_){}
    , decltype(_impl_.src_config_path_){}
    , decltype(_impl_.config_){}
    , decltype(_impl_.config_hash_){}
    , decltype(_impl_.arch_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.config_size_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.updated_at_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_name().empty()) {
    _this->_impl_.to_node_name_.Set(from._internal_to_node_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_group().empty()) {
    _this->_impl_.to_group_.Set(from._internal_to_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_config_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_config_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_config_path().empty()) {
    _this->_impl_.to_config_path_.Set(from._internal_to_config_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_config_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_config_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_config_path().empty()) {
    _this->_impl_.src_config_path_.Set(from._internal_src_config_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_config().empty()) {
    _this->_impl_.config_.Set(from._internal_config(), 
      _this->GetArenaForAllocation());
  }
  _impl_.config_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_config_hash().empty()) {
    _this->_impl_.config_hash_.Set(from._internal_config_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.arch_, &from._impl_.arch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.arch_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_node_name_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_group_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.to_config_path_){}
    , decltype(_impl_.src_config_path_){}
    , decltype(_impl_.config_){}
    , decltype(_impl_.config_hash_){}
    , decltype(_impl_.arch_){0}
    , decltype(_impl_.os_){0}
    , decltype(_impl_.domain_){0u}
    , decltype(_impl_.config_size_){0u}
    , decltype(_impl_.created_at_){int64_t{0}}
    , decltype(_impl_.updated_at_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_config_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_config_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_config_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_config_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.config_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.to_node_id_.Destroy();
  _impl_.to_node_name_.Destroy();
  _impl_.src_node_id_.Destroy();
  _impl_.to_group_.Destroy();
  _impl_.uri_.Destroy();
  _impl_.to_config_path_.Destroy();
  _impl_.src_config_path_.Destroy();
  _impl_.config_.Destroy();
  _impl_.config_hash_.Destroy();
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.to_node_id_.ClearToEmpty();
  _impl_.to_node_name_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  _impl_.to_group_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  _impl_.to_config_path_.ClearToEmpty();
  _impl_.src_config_path_.ClearToEmpty();
  _impl_.config_.ClearToEmpty();
  _impl_.config_hash_.ClearToEmpty();
  ::memset(&_impl_.arch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.arch_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string to_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes to_node_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string to_group = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_to_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.to_group"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.ArchType arch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arch(static_cast<::cn::seisys::dds::ArchType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.OSType os = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_os(static_cast<::cn::seisys::dds::OSType>(val));
        } else
          goto handle_unusual;
        continue;
      // string uri = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.uri"));
        } else
          goto handle_unusual;
        continue;
      // string to_config_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_to_config_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.to_config_path"));
        } else
          goto handle_unusual;
        continue;
      // string src_config_path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_src_config_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.src_config_path"));
        } else
          goto handle_unusual;
        continue;
      // uint32 domain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string config_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_config_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.Node.config_hash"));
        } else
          goto handle_unusual;
        continue;
      // uint32 config_size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.config_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.CommStatus state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::cn::seisys::dds::CommStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updated_at = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string to_node_id = 2;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.to_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_node_id(), target);
  }

  // bytes to_node_name = 3;
  if (!this->_internal_to_node_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_to_node_name(), target);
  }

  // string src_node_id = 4;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.src_node_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_src_node_id(), target);
  }

  // string to_group = 5;
  if (!this->_internal_to_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_group().data(), static_cast<int>(this->_internal_to_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.to_group");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_to_group(), target);
  }

  // .cn.seisys.dds.ArchType arch = 6;
  if (this->_internal_arch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_arch(), target);
  }

  // .cn.seisys.dds.OSType os = 7;
  if (this->_internal_os() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_os(), target);
  }

  // string uri = 8;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.uri");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_uri(), target);
  }

  // string to_config_path = 9;
  if (!this->_internal_to_config_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_config_path().data(), static_cast<int>(this->_internal_to_config_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.to_config_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_to_config_path(), target);
  }

  // string src_config_path = 10;
  if (!this->_internal_src_config_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_config_path().data(), static_cast<int>(this->_internal_src_config_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.src_config_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_src_config_path(), target);
  }

  // uint32 domain = 11;
  if (this->_internal_domain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_domain(), target);
  }

  // bytes config = 12;
  if (!this->_internal_config().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_config(), target);
  }

  // string config_hash = 13;
  if (!this->_internal_config_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_hash().data(), static_cast<int>(this->_internal_config_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.Node.config_hash");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_config_hash(), target);
  }

  // uint32 config_size = 14;
  if (this->_internal_config_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_config_size(), target);
  }

  // .cn.seisys.dds.CommStatus state = 15;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_state(), target);
  }

  // int64 created_at = 16;
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_created_at(), target);
  }

  // int64 updated_at = 17;
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string to_node_id = 2;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // bytes to_node_name = 3;
  if (!this->_internal_to_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_node_name());
  }

  // string src_node_id = 4;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // string to_group = 5;
  if (!this->_internal_to_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_group());
  }

  // string uri = 8;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string to_config_path = 9;
  if (!this->_internal_to_config_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_config_path());
  }

  // string src_config_path = 10;
  if (!this->_internal_src_config_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_config_path());
  }

  // bytes config = 12;
  if (!this->_internal_config().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config());
  }

  // string config_hash = 13;
  if (!this->_internal_config_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_hash());
  }

  // .cn.seisys.dds.ArchType arch = 6;
  if (this->_internal_arch() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_arch());
  }

  // .cn.seisys.dds.OSType os = 7;
  if (this->_internal_os() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_os());
  }

  // uint32 domain = 11;
  if (this->_internal_domain() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_domain());
  }

  // uint32 config_size = 14;
  if (this->_internal_config_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_config_size());
  }

  // int64 created_at = 16;
  if (this->_internal_created_at() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // int64 updated_at = 17;
  if (this->_internal_updated_at() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_updated_at());
  }

  // .cn.seisys.dds.CommStatus state = 15;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_to_node_name().empty()) {
    _this->_internal_set_to_node_name(from._internal_to_node_name());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (!from._internal_to_group().empty()) {
    _this->_internal_set_to_group(from._internal_to_group());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_to_config_path().empty()) {
    _this->_internal_set_to_config_path(from._internal_to_config_path());
  }
  if (!from._internal_src_config_path().empty()) {
    _this->_internal_set_src_config_path(from._internal_src_config_path());
  }
  if (!from._internal_config().empty()) {
    _this->_internal_set_config(from._internal_config());
  }
  if (!from._internal_config_hash().empty()) {
    _this->_internal_set_config_hash(from._internal_config_hash());
  }
  if (from._internal_arch() != 0) {
    _this->_internal_set_arch(from._internal_arch());
  }
  if (from._internal_os() != 0) {
    _this->_internal_set_os(from._internal_os());
  }
  if (from._internal_domain() != 0) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (from._internal_config_size() != 0) {
    _this->_internal_set_config_size(from._internal_config_size());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_name_, lhs_arena,
      &other->_impl_.to_node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_group_, lhs_arena,
      &other->_impl_.to_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_config_path_, lhs_arena,
      &other->_impl_.to_config_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_config_path_, lhs_arena,
      &other->_impl_.src_config_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.config_, lhs_arena,
      &other->_impl_.config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.config_hash_, lhs_arena,
      &other->_impl_.config_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.state_)
      + sizeof(Node::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.arch_)>(
          reinterpret_cast<char*>(&_impl_.arch_),
          reinterpret_cast<char*>(&other->_impl_.arch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[14]);
}

// ===================================================================

class NodeReply::_Internal {
 public:
};

NodeReply::NodeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.NodeReply)
}
NodeReply::NodeReply(const NodeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_node_name_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_group_){}
    , decltype(_impl_.reply_uuid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.desc_str_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.updated_at_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_name().empty()) {
    _this->_impl_.to_node_name_.Set(from._internal_to_node_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_group().empty()) {
    _this->_impl_.to_group_.Set(from._internal_to_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_uuid().empty()) {
    _this->_impl_.reply_uuid_.Set(from._internal_reply_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc_str().empty()) {
    _this->_impl_.desc_str_.Set(from._internal_desc_str(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.NodeReply)
}

inline void NodeReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_node_name_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_group_){}
    , decltype(_impl_.reply_uuid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.desc_str_){}
    , decltype(_impl_.created_at_){int64_t{0}}
    , decltype(_impl_.updated_at_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeReply::~NodeReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.NodeReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.to_node_id_.Destroy();
  _impl_.to_node_name_.Destroy();
  _impl_.src_node_id_.Destroy();
  _impl_.to_group_.Destroy();
  _impl_.reply_uuid_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.desc_str_.Destroy();
}

void NodeReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.NodeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.to_node_id_.ClearToEmpty();
  _impl_.to_node_name_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  _impl_.to_group_.ClearToEmpty();
  _impl_.reply_uuid_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.desc_str_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeReply.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string to_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeReply.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes to_node_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeReply.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string to_group = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_to_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeReply.to_group"));
        } else
          goto handle_unusual;
        continue;
      // string reply_uuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_reply_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeReply.reply_uuid"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.CommStatus status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::cn::seisys::dds::CommStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes desc_str = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_desc_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.NodeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeReply.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string to_node_id = 2;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeReply.to_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_node_id(), target);
  }

  // bytes to_node_name = 3;
  if (!this->_internal_to_node_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_to_node_name(), target);
  }

  // string src_node_id = 4;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeReply.src_node_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_src_node_id(), target);
  }

  // string to_group = 5;
  if (!this->_internal_to_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_group().data(), static_cast<int>(this->_internal_to_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeReply.to_group");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_to_group(), target);
  }

  // string reply_uuid = 6;
  if (!this->_internal_reply_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_uuid().data(), static_cast<int>(this->_internal_reply_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeReply.reply_uuid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reply_uuid(), target);
  }

  // .cn.seisys.dds.CommStatus status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // bytes desc_str = 9;
  if (!this->_internal_desc_str().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_desc_str(), target);
  }

  // int64 created_at = 10;
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_created_at(), target);
  }

  // int64 updated_at = 11;
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.NodeReply)
  return target;
}

size_t NodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.NodeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string to_node_id = 2;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // bytes to_node_name = 3;
  if (!this->_internal_to_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_node_name());
  }

  // string src_node_id = 4;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // string to_group = 5;
  if (!this->_internal_to_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_group());
  }

  // string reply_uuid = 6;
  if (!this->_internal_reply_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_uuid());
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // bytes desc_str = 9;
  if (!this->_internal_desc_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc_str());
  }

  // int64 created_at = 10;
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // int64 updated_at = 11;
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updated_at());
  }

  // .cn.seisys.dds.CommStatus status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeReply::GetClassData() const { return &_class_data_; }


void NodeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeReply*>(&to_msg);
  auto& from = static_cast<const NodeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.NodeReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_to_node_name().empty()) {
    _this->_internal_set_to_node_name(from._internal_to_node_name());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (!from._internal_to_group().empty()) {
    _this->_internal_set_to_group(from._internal_to_group());
  }
  if (!from._internal_reply_uuid().empty()) {
    _this->_internal_set_reply_uuid(from._internal_reply_uuid());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_desc_str().empty()) {
    _this->_internal_set_desc_str(from._internal_desc_str());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeReply::CopyFrom(const NodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.NodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReply::IsInitialized() const {
  return true;
}

void NodeReply::InternalSwap(NodeReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_name_, lhs_arena,
      &other->_impl_.to_node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_group_, lhs_arena,
      &other->_impl_.to_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_uuid_, lhs_arena,
      &other->_impl_.reply_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_str_, lhs_arena,
      &other->_impl_.desc_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeReply, _impl_.status_)
      + sizeof(NodeReply::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(NodeReply, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[15]);
}

// ===================================================================

class NodeCmd::_Internal {
 public:
};

NodeCmd::NodeCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.NodeCmd)
}
NodeCmd::NodeCmd(const NodeCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.src_node_name_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_group_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.paras_){}
    , decltype(_impl_.paras_1_){}
    , decltype(_impl_.paras_2_){}
    , decltype(_impl_.cmd_type_){}
    , decltype(_impl_.podman_cmd_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.updated_at_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_name().empty()) {
    _this->_impl_.src_node_name_.Set(from._internal_src_node_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_group().empty()) {
    _this->_impl_.to_group_.Set(from._internal_to_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmd().empty()) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paras_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paras_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paras().empty()) {
    _this->_impl_.paras_.Set(from._internal_paras(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paras_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paras_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paras_1().empty()) {
    _this->_impl_.paras_1_.Set(from._internal_paras_1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paras_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paras_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paras_2().empty()) {
    _this->_impl_.paras_2_.Set(from._internal_paras_2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cmd_type_, &from._impl_.cmd_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updated_at_) -
    reinterpret_cast<char*>(&_impl_.cmd_type_)) + sizeof(_impl_.updated_at_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.NodeCmd)
}

inline void NodeCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.src_node_name_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_group_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.paras_){}
    , decltype(_impl_.paras_1_){}
    , decltype(_impl_.paras_2_){}
    , decltype(_impl_.cmd_type_){0}
    , decltype(_impl_.podman_cmd_){0}
    , decltype(_impl_.created_at_){int64_t{0}}
    , decltype(_impl_.updated_at_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paras_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paras_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paras_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paras_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paras_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paras_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeCmd::~NodeCmd() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.NodeCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.src_node_id_.Destroy();
  _impl_.src_node_name_.Destroy();
  _impl_.to_node_id_.Destroy();
  _impl_.to_group_.Destroy();
  _impl_.cmd_.Destroy();
  _impl_.paras_.Destroy();
  _impl_.paras_1_.Destroy();
  _impl_.paras_2_.Destroy();
}

void NodeCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.NodeCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  _impl_.src_node_name_.ClearToEmpty();
  _impl_.to_node_id_.ClearToEmpty();
  _impl_.to_group_.ClearToEmpty();
  _impl_.cmd_.ClearToEmpty();
  _impl_.paras_.ClearToEmpty();
  _impl_.paras_1_.ClearToEmpty();
  _impl_.paras_2_.ClearToEmpty();
  ::memset(&_impl_.cmd_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updated_at_) -
      reinterpret_cast<char*>(&_impl_.cmd_type_)) + sizeof(_impl_.updated_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes src_node_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_src_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string to_group = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_to_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.to_group"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.CmdType cmd_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd_type(static_cast<::cn::seisys::dds::CmdType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.PodmanCmd podman_cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_podman_cmd(static_cast<::cn::seisys::dds::PodmanCmd>(val));
        } else
          goto handle_unusual;
        continue;
      // string cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.cmd"));
        } else
          goto handle_unusual;
        continue;
      // string paras = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_paras();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.paras"));
        } else
          goto handle_unusual;
        continue;
      // string paras_1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_paras_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.paras_1"));
        } else
          goto handle_unusual;
        continue;
      // string paras_2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_paras_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmd.paras_2"));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updated_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.NodeCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.src_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_node_id(), target);
  }

  // bytes src_node_name = 3;
  if (!this->_internal_src_node_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_src_node_name(), target);
  }

  // string to_node_id = 4;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.to_node_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_node_id(), target);
  }

  // string to_group = 5;
  if (!this->_internal_to_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_group().data(), static_cast<int>(this->_internal_to_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.to_group");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_to_group(), target);
  }

  // .cn.seisys.dds.CmdType cmd_type = 6;
  if (this->_internal_cmd_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cmd_type(), target);
  }

  // .cn.seisys.dds.PodmanCmd podman_cmd = 7;
  if (this->_internal_podman_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_podman_cmd(), target);
  }

  // string cmd = 8;
  if (!this->_internal_cmd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.cmd");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_cmd(), target);
  }

  // string paras = 9;
  if (!this->_internal_paras().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paras().data(), static_cast<int>(this->_internal_paras().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.paras");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_paras(), target);
  }

  // string paras_1 = 10;
  if (!this->_internal_paras_1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paras_1().data(), static_cast<int>(this->_internal_paras_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.paras_1");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_paras_1(), target);
  }

  // string paras_2 = 11;
  if (!this->_internal_paras_2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paras_2().data(), static_cast<int>(this->_internal_paras_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmd.paras_2");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_paras_2(), target);
  }

  // int64 created_at = 12;
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_created_at(), target);
  }

  // int64 updated_at = 13;
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.NodeCmd)
  return target;
}

size_t NodeCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.NodeCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // bytes src_node_name = 3;
  if (!this->_internal_src_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src_node_name());
  }

  // string to_node_id = 4;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // string to_group = 5;
  if (!this->_internal_to_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_group());
  }

  // string cmd = 8;
  if (!this->_internal_cmd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd());
  }

  // string paras = 9;
  if (!this->_internal_paras().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paras());
  }

  // string paras_1 = 10;
  if (!this->_internal_paras_1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paras_1());
  }

  // string paras_2 = 11;
  if (!this->_internal_paras_2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paras_2());
  }

  // .cn.seisys.dds.CmdType cmd_type = 6;
  if (this->_internal_cmd_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd_type());
  }

  // .cn.seisys.dds.PodmanCmd podman_cmd = 7;
  if (this->_internal_podman_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_podman_cmd());
  }

  // int64 created_at = 12;
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // int64 updated_at = 13;
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updated_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeCmd::GetClassData() const { return &_class_data_; }


void NodeCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeCmd*>(&to_msg);
  auto& from = static_cast<const NodeCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.NodeCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (!from._internal_src_node_name().empty()) {
    _this->_internal_set_src_node_name(from._internal_src_node_name());
  }
  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_to_group().empty()) {
    _this->_internal_set_to_group(from._internal_to_group());
  }
  if (!from._internal_cmd().empty()) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  if (!from._internal_paras().empty()) {
    _this->_internal_set_paras(from._internal_paras());
  }
  if (!from._internal_paras_1().empty()) {
    _this->_internal_set_paras_1(from._internal_paras_1());
  }
  if (!from._internal_paras_2().empty()) {
    _this->_internal_set_paras_2(from._internal_paras_2());
  }
  if (from._internal_cmd_type() != 0) {
    _this->_internal_set_cmd_type(from._internal_cmd_type());
  }
  if (from._internal_podman_cmd() != 0) {
    _this->_internal_set_podman_cmd(from._internal_podman_cmd());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeCmd::CopyFrom(const NodeCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.NodeCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeCmd::IsInitialized() const {
  return true;
}

void NodeCmd::InternalSwap(NodeCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_name_, lhs_arena,
      &other->_impl_.src_node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_group_, lhs_arena,
      &other->_impl_.to_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paras_, lhs_arena,
      &other->_impl_.paras_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paras_1_, lhs_arena,
      &other->_impl_.paras_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paras_2_, lhs_arena,
      &other->_impl_.paras_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeCmd, _impl_.updated_at_)
      + sizeof(NodeCmd::_impl_.updated_at_)
      - PROTOBUF_FIELD_OFFSET(NodeCmd, _impl_.cmd_type_)>(
          reinterpret_cast<char*>(&_impl_.cmd_type_),
          reinterpret_cast<char*>(&other->_impl_.cmd_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[16]);
}

// ===================================================================

class NodeCmdReply::_Internal {
 public:
};

NodeCmdReply::NodeCmdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.NodeCmdReply)
}
NodeCmdReply::NodeCmdReply(const NodeCmdReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeCmdReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.src_node_name_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_node_name_){}
    , decltype(_impl_.cmd_reply_uuid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.desc_str_){}
    , decltype(_impl_.cmd_type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.updated_at_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_name().empty()) {
    _this->_impl_.src_node_name_.Set(from._internal_src_node_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_name().empty()) {
    _this->_impl_.to_node_name_.Set(from._internal_to_node_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cmd_reply_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_reply_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmd_reply_uuid().empty()) {
    _this->_impl_.cmd_reply_uuid_.Set(from._internal_cmd_reply_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc_str().empty()) {
    _this->_impl_.desc_str_.Set(from._internal_desc_str(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cmd_type_, &from._impl_.cmd_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updated_at_) -
    reinterpret_cast<char*>(&_impl_.cmd_type_)) + sizeof(_impl_.updated_at_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.NodeCmdReply)
}

inline void NodeCmdReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.src_node_name_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.to_node_name_){}
    , decltype(_impl_.cmd_reply_uuid_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.desc_str_){}
    , decltype(_impl_.cmd_type_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.created_at_){int64_t{0}}
    , decltype(_impl_.updated_at_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_reply_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_reply_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeCmdReply::~NodeCmdReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.NodeCmdReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeCmdReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
  _impl_.uuid_.Destroy();
  _impl_.src_node_id_.Destroy();
  _impl_.src_node_name_.Destroy();
  _impl_.to_node_id_.Destroy();
  _impl_.to_node_name_.Destroy();
  _impl_.cmd_reply_uuid_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.desc_str_.Destroy();
}

void NodeCmdReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeCmdReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.NodeCmdReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _impl_.uuid_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  _impl_.src_node_name_.ClearToEmpty();
  _impl_.to_node_id_.ClearToEmpty();
  _impl_.to_node_name_.ClearToEmpty();
  _impl_.cmd_reply_uuid_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.desc_str_.ClearToEmpty();
  ::memset(&_impl_.cmd_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updated_at_) -
      reinterpret_cast<char*>(&_impl_.cmd_type_)) + sizeof(_impl_.updated_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeCmdReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmdReply.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmdReply.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes src_node_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_src_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmdReply.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes to_node_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_to_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cmd_reply_uuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cmd_reply_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.NodeCmdReply.cmd_reply_uuid"));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.CmdType cmd_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd_type(static_cast<::cn::seisys::dds::CmdType>(val));
        } else
          goto handle_unusual;
        continue;
      // .cn.seisys.dds.CommStatus status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::cn::seisys::dds::CommStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes desc_str = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_desc_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cn.seisys.dds.File result = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updated_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeCmdReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.NodeCmdReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmdReply.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmdReply.src_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_node_id(), target);
  }

  // bytes src_node_name = 3;
  if (!this->_internal_src_node_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_src_node_name(), target);
  }

  // string to_node_id = 4;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmdReply.to_node_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_node_id(), target);
  }

  // bytes to_node_name = 5;
  if (!this->_internal_to_node_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_to_node_name(), target);
  }

  // string cmd_reply_uuid = 6;
  if (!this->_internal_cmd_reply_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd_reply_uuid().data(), static_cast<int>(this->_internal_cmd_reply_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.NodeCmdReply.cmd_reply_uuid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cmd_reply_uuid(), target);
  }

  // .cn.seisys.dds.CmdType cmd_type = 7;
  if (this->_internal_cmd_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_cmd_type(), target);
  }

  // .cn.seisys.dds.CommStatus status = 8;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // bytes desc = 9;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_desc(), target);
  }

  // bytes desc_str = 10;
  if (!this->_internal_desc_str().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_desc_str(), target);
  }

  // repeated .cn.seisys.dds.File result = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 created_at = 12;
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_created_at(), target);
  }

  // int64 updated_at = 13;
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.NodeCmdReply)
  return target;
}

size_t NodeCmdReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.NodeCmdReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cn.seisys.dds.File result = 11;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_impl_.result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // bytes src_node_name = 3;
  if (!this->_internal_src_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src_node_name());
  }

  // string to_node_id = 4;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // bytes to_node_name = 5;
  if (!this->_internal_to_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_node_name());
  }

  // string cmd_reply_uuid = 6;
  if (!this->_internal_cmd_reply_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd_reply_uuid());
  }

  // bytes desc = 9;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // bytes desc_str = 10;
  if (!this->_internal_desc_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc_str());
  }

  // .cn.seisys.dds.CmdType cmd_type = 7;
  if (this->_internal_cmd_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd_type());
  }

  // .cn.seisys.dds.CommStatus status = 8;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 created_at = 12;
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // int64 updated_at = 13;
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updated_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeCmdReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeCmdReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeCmdReply::GetClassData() const { return &_class_data_; }


void NodeCmdReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeCmdReply*>(&to_msg);
  auto& from = static_cast<const NodeCmdReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.NodeCmdReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (!from._internal_src_node_name().empty()) {
    _this->_internal_set_src_node_name(from._internal_src_node_name());
  }
  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_to_node_name().empty()) {
    _this->_internal_set_to_node_name(from._internal_to_node_name());
  }
  if (!from._internal_cmd_reply_uuid().empty()) {
    _this->_internal_set_cmd_reply_uuid(from._internal_cmd_reply_uuid());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_desc_str().empty()) {
    _this->_internal_set_desc_str(from._internal_desc_str());
  }
  if (from._internal_cmd_type() != 0) {
    _this->_internal_set_cmd_type(from._internal_cmd_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeCmdReply::CopyFrom(const NodeCmdReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.NodeCmdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeCmdReply::IsInitialized() const {
  return true;
}

void NodeCmdReply::InternalSwap(NodeCmdReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_name_, lhs_arena,
      &other->_impl_.src_node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_name_, lhs_arena,
      &other->_impl_.to_node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_reply_uuid_, lhs_arena,
      &other->_impl_.cmd_reply_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_str_, lhs_arena,
      &other->_impl_.desc_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeCmdReply, _impl_.updated_at_)
      + sizeof(NodeCmdReply::_impl_.updated_at_)
      - PROTOBUF_FIELD_OFFSET(NodeCmdReply, _impl_.cmd_type_)>(
          reinterpret_cast<char*>(&_impl_.cmd_type_),
          reinterpret_cast<char*>(&other->_impl_.cmd_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeCmdReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::File*
Arena::CreateMaybeMessage< ::cn::seisys::dds::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::File >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::FileInfos*
Arena::CreateMaybeMessage< ::cn::seisys::dds::FileInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::FileInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Ping*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Cpu*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Cpu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Cpu >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Gpu*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Gpu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Gpu >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Ram*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Ram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Ram >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Disk*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Disk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Disk >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::MainBoard*
Arena::CreateMaybeMessage< ::cn::seisys::dds::MainBoard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::MainBoard >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::ProcessTime*
Arena::CreateMaybeMessage< ::cn::seisys::dds::ProcessTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::ProcessTime >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Process_EnvEntry_DoNotUse*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Process_EnvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Process_EnvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Process*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Process >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Network*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Network >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Network >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::OSInfo*
Arena::CreateMaybeMessage< ::cn::seisys::dds::OSInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::OSInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::MachineState*
Arena::CreateMaybeMessage< ::cn::seisys::dds::MachineState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::MachineState >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::Node*
Arena::CreateMaybeMessage< ::cn::seisys::dds::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::NodeReply*
Arena::CreateMaybeMessage< ::cn::seisys::dds::NodeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::NodeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::NodeCmd*
Arena::CreateMaybeMessage< ::cn::seisys::dds::NodeCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::NodeCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::NodeCmdReply*
Arena::CreateMaybeMessage< ::cn::seisys::dds::NodeCmdReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::NodeCmdReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
