// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_log_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_log_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_log_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_log_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_2eproto;
namespace cn {
namespace seisys {
namespace dds {
class LogData;
struct LogDataDefaultTypeInternal;
extern LogDataDefaultTypeInternal _LogData_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> ::cn::seisys::dds::LogData* Arena::CreateMaybeMessage<::cn::seisys::dds::LogData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cn {
namespace seisys {
namespace dds {

// ===================================================================

class LogData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.LogData) */ {
 public:
  inline LogData() : LogData(nullptr) {}
  ~LogData() override;
  explicit PROTOBUF_CONSTEXPR LogData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogData(const LogData& from);
  LogData(LogData&& from) noexcept
    : LogData() {
    *this = ::std::move(from);
  }

  inline LogData& operator=(const LogData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogData& operator=(LogData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogData* internal_default_instance() {
    return reinterpret_cast<const LogData*>(
               &_LogData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogData& a, LogData& b) {
    a.Swap(&b);
  }
  inline void Swap(LogData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogData& from) {
    LogData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.LogData";
  }
  protected:
  explicit LogData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSrcNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kFileNameFieldNumber = 4,
    kNewLogsFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string src_node_id = 2;
  void clear_src_node_id();
  const std::string& src_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_node_id();
  PROTOBUF_NODISCARD std::string* release_src_node_id();
  void set_allocated_src_node_id(std::string* src_node_id);
  private:
  const std::string& _internal_src_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_node_id(const std::string& value);
  std::string* _internal_mutable_src_node_id();
  public:

  // string to_node_id = 3;
  void clear_to_node_id();
  const std::string& to_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_node_id();
  PROTOBUF_NODISCARD std::string* release_to_node_id();
  void set_allocated_to_node_id(std::string* to_node_id);
  private:
  const std::string& _internal_to_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_node_id(const std::string& value);
  std::string* _internal_mutable_to_node_id();
  public:

  // string file_name = 4;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string new_logs = 5;
  void clear_new_logs();
  const std::string& new_logs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_logs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_logs();
  PROTOBUF_NODISCARD std::string* release_new_logs();
  void set_allocated_new_logs(std::string* new_logs);
  private:
  const std::string& _internal_new_logs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_logs(const std::string& value);
  std::string* _internal_mutable_new_logs();
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.LogData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_node_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_logs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogData

// string uuid = 1;
inline void LogData::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& LogData::uuid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.LogData.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogData::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.LogData.uuid)
}
inline std::string* LogData::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.LogData.uuid)
  return _s;
}
inline const std::string& LogData::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void LogData::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* LogData::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* LogData::release_uuid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.LogData.uuid)
  return _impl_.uuid_.Release();
}
inline void LogData::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.LogData.uuid)
}

// string src_node_id = 2;
inline void LogData::clear_src_node_id() {
  _impl_.src_node_id_.ClearToEmpty();
}
inline const std::string& LogData::src_node_id() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.LogData.src_node_id)
  return _internal_src_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogData::set_src_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.LogData.src_node_id)
}
inline std::string* LogData::mutable_src_node_id() {
  std::string* _s = _internal_mutable_src_node_id();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.LogData.src_node_id)
  return _s;
}
inline const std::string& LogData::_internal_src_node_id() const {
  return _impl_.src_node_id_.Get();
}
inline void LogData::_internal_set_src_node_id(const std::string& value) {
  
  _impl_.src_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LogData::_internal_mutable_src_node_id() {
  
  return _impl_.src_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LogData::release_src_node_id() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.LogData.src_node_id)
  return _impl_.src_node_id_.Release();
}
inline void LogData::set_allocated_src_node_id(std::string* src_node_id) {
  if (src_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.src_node_id_.SetAllocated(src_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_node_id_.IsDefault()) {
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.LogData.src_node_id)
}

// string to_node_id = 3;
inline void LogData::clear_to_node_id() {
  _impl_.to_node_id_.ClearToEmpty();
}
inline const std::string& LogData::to_node_id() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.LogData.to_node_id)
  return _internal_to_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogData::set_to_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.LogData.to_node_id)
}
inline std::string* LogData::mutable_to_node_id() {
  std::string* _s = _internal_mutable_to_node_id();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.LogData.to_node_id)
  return _s;
}
inline const std::string& LogData::_internal_to_node_id() const {
  return _impl_.to_node_id_.Get();
}
inline void LogData::_internal_set_to_node_id(const std::string& value) {
  
  _impl_.to_node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LogData::_internal_mutable_to_node_id() {
  
  return _impl_.to_node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LogData::release_to_node_id() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.LogData.to_node_id)
  return _impl_.to_node_id_.Release();
}
inline void LogData::set_allocated_to_node_id(std::string* to_node_id) {
  if (to_node_id != nullptr) {
    
  } else {
    
  }
  _impl_.to_node_id_.SetAllocated(to_node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_node_id_.IsDefault()) {
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.LogData.to_node_id)
}

// string file_name = 4;
inline void LogData::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& LogData::file_name() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.LogData.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogData::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.LogData.file_name)
}
inline std::string* LogData::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.LogData.file_name)
  return _s;
}
inline const std::string& LogData::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void LogData::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LogData::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LogData::release_file_name() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.LogData.file_name)
  return _impl_.file_name_.Release();
}
inline void LogData::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.LogData.file_name)
}

// string new_logs = 5;
inline void LogData::clear_new_logs() {
  _impl_.new_logs_.ClearToEmpty();
}
inline const std::string& LogData::new_logs() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.LogData.new_logs)
  return _internal_new_logs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogData::set_new_logs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_logs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.LogData.new_logs)
}
inline std::string* LogData::mutable_new_logs() {
  std::string* _s = _internal_mutable_new_logs();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.LogData.new_logs)
  return _s;
}
inline const std::string& LogData::_internal_new_logs() const {
  return _impl_.new_logs_.Get();
}
inline void LogData::_internal_set_new_logs(const std::string& value) {
  
  _impl_.new_logs_.Set(value, GetArenaForAllocation());
}
inline std::string* LogData::_internal_mutable_new_logs() {
  
  return _impl_.new_logs_.Mutable(GetArenaForAllocation());
}
inline std::string* LogData::release_new_logs() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.LogData.new_logs)
  return _impl_.new_logs_.Release();
}
inline void LogData::set_allocated_new_logs(std::string* new_logs) {
  if (new_logs != nullptr) {
    
  } else {
    
  }
  _impl_.new_logs_.SetAllocated(new_logs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_logs_.IsDefault()) {
    _impl_.new_logs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.LogData.new_logs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dds
}  // namespace seisys
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_log_2eproto
