// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#include "file.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cn {
namespace seisys {
namespace dds {
PROTOBUF_CONSTEXPR FileData::FileData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.save_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sub_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transfer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_total_size_)*/uint64_t{0u}
  , /*decltype(_impl_.f_modify_time_)*/int64_t{0}
  , /*decltype(_impl_.block_seq_)*/uint64_t{0u}
  , /*decltype(_impl_.total_block_num_)*/uint64_t{0u}
  , /*decltype(_impl_.block_content_len_)*/uint64_t{0u}
  , /*decltype(_impl_.is_end_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDataDefaultTypeInternal() {}
  union {
    FileData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDataDefaultTypeInternal _FileData_default_instance_;
PROTOBUF_CONSTEXPR FileDataReply::FileDataReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_losts_)*/{}
  , /*decltype(_impl_._block_losts_cached_byte_size_)*/{0}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reply_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sub_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_seq_)*/uint64_t{0u}
  , /*decltype(_impl_.total_block_num_)*/uint64_t{0u}
  , /*decltype(_impl_.file_total_size_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/int64_t{0}
  , /*decltype(_impl_.is_end_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDataReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDataReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDataReplyDefaultTypeInternal() {}
  union {
    FileDataReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDataReplyDefaultTypeInternal _FileDataReply_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
static ::_pb::Metadata file_level_metadata_file_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_file_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_file_2eproto = nullptr;

const uint32_t TableStruct_file_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.save_file_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.sub_dir_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.is_end_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.file_total_size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.f_modify_time_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.block_seq_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.total_block_num_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.block_content_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.block_content_len_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.transfer_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileData, _impl_.md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.src_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.to_node_id_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.reply_uuid_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.sub_dir_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.is_end_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.block_seq_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.total_block_num_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.file_total_size_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.block_losts_),
  PROTOBUF_FIELD_OFFSET(::cn::seisys::dds::FileDataReply, _impl_.state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cn::seisys::dds::FileData)},
  { 21, -1, -1, sizeof(::cn::seisys::dds::FileDataReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cn::seisys::dds::_FileData_default_instance_._instance,
  &::cn::seisys::dds::_FileDataReply_default_instance_._instance,
};

const char descriptor_table_protodef_file_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nfile.proto\022\rcn.seisys.dds\"\275\002\n\010FileData"
  "\022\014\n\004uuid\030\001 \001(\t\022\023\n\013src_node_id\030\002 \001(\t\022\022\n\nt"
  "o_node_id\030\003 \001(\t\022\021\n\tfile_name\030\004 \001(\014\022\026\n\016sa"
  "ve_file_name\030\005 \001(\014\022\017\n\007sub_dir\030\006 \001(\014\022\016\n\006i"
  "s_end\030\007 \001(\010\022\027\n\017file_total_size\030\010 \001(\004\022\025\n\r"
  "f_modify_time\030\t \001(\003\022\021\n\tblock_seq\030\n \001(\004\022\027"
  "\n\017total_block_num\030\013 \001(\004\022\025\n\rblock_content"
  "\030\014 \001(\014\022\031\n\021block_content_len\030\r \001(\004\022\023\n\013tra"
  "nsfer_id\030\016 \001(\t\022\013\n\003md5\030\017 \001(\t\"\367\001\n\rFileData"
  "Reply\022\014\n\004uuid\030\001 \001(\t\022\023\n\013src_node_id\030\002 \001(\t"
  "\022\022\n\nto_node_id\030\003 \001(\t\022\021\n\tfile_name\030\004 \001(\014\022"
  "\022\n\nreply_uuid\030\005 \001(\t\022\017\n\007sub_dir\030\006 \001(\014\022\016\n\006"
  "is_end\030\007 \001(\010\022\021\n\tblock_seq\030\010 \001(\004\022\027\n\017total"
  "_block_num\030\t \001(\004\022\027\n\017file_total_size\030\n \001("
  "\004\022\023\n\013block_losts\030\013 \003(\004\022\r\n\005state\030\014 \001(\003b\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_file_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_file_2eproto = {
    false, false, 605, descriptor_table_protodef_file_2eproto,
    "file.proto",
    &descriptor_table_file_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_file_2eproto::offsets,
    file_level_metadata_file_2eproto, file_level_enum_descriptors_file_2eproto,
    file_level_service_descriptors_file_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_file_2eproto_getter() {
  return &descriptor_table_file_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_file_2eproto(&descriptor_table_file_2eproto);
namespace cn {
namespace seisys {
namespace dds {

// ===================================================================

class FileData::_Internal {
 public:
};

FileData::FileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.FileData)
}
FileData::FileData(const FileData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.save_file_name_){}
    , decltype(_impl_.sub_dir_){}
    , decltype(_impl_.block_content_){}
    , decltype(_impl_.transfer_id_){}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.file_total_size_){}
    , decltype(_impl_.f_modify_time_){}
    , decltype(_impl_.block_seq_){}
    , decltype(_impl_.total_block_num_){}
    , decltype(_impl_.block_content_len_){}
    , decltype(_impl_.is_end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.save_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_save_file_name().empty()) {
    _this->_impl_.save_file_name_.Set(from._internal_save_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sub_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_dir().empty()) {
    _this->_impl_.sub_dir_.Set(from._internal_sub_dir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_content().empty()) {
    _this->_impl_.block_content_.Set(from._internal_block_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transfer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transfer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transfer_id().empty()) {
    _this->_impl_.transfer_id_.Set(from._internal_transfer_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    _this->_impl_.md5_.Set(from._internal_md5(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_total_size_, &from._impl_.file_total_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_end_) -
    reinterpret_cast<char*>(&_impl_.file_total_size_)) + sizeof(_impl_.is_end_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.FileData)
}

inline void FileData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.save_file_name_){}
    , decltype(_impl_.sub_dir_){}
    , decltype(_impl_.block_content_){}
    , decltype(_impl_.transfer_id_){}
    , decltype(_impl_.md5_){}
    , decltype(_impl_.file_total_size_){uint64_t{0u}}
    , decltype(_impl_.f_modify_time_){int64_t{0}}
    , decltype(_impl_.block_seq_){uint64_t{0u}}
    , decltype(_impl_.total_block_num_){uint64_t{0u}}
    , decltype(_impl_.block_content_len_){uint64_t{0u}}
    , decltype(_impl_.is_end_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.save_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sub_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transfer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transfer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileData::~FileData() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.FileData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.src_node_id_.Destroy();
  _impl_.to_node_id_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.save_file_name_.Destroy();
  _impl_.sub_dir_.Destroy();
  _impl_.block_content_.Destroy();
  _impl_.transfer_id_.Destroy();
  _impl_.md5_.Destroy();
}

void FileData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileData::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.FileData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  _impl_.to_node_id_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.save_file_name_.ClearToEmpty();
  _impl_.sub_dir_.ClearToEmpty();
  _impl_.block_content_.ClearToEmpty();
  _impl_.transfer_id_.ClearToEmpty();
  _impl_.md5_.ClearToEmpty();
  ::memset(&_impl_.file_total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_end_) -
      reinterpret_cast<char*>(&_impl_.file_total_size_)) + sizeof(_impl_.is_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileData.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileData.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string to_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileData.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes save_file_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_save_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sub_dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sub_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_total_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.file_total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 f_modify_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.f_modify_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_seq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.block_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_block_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.total_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_content = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_block_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_content_len = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.block_content_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transfer_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_transfer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileData.transfer_id"));
        } else
          goto handle_unusual;
        continue;
      // string md5 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileData.md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.FileData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileData.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileData.src_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_node_id(), target);
  }

  // string to_node_id = 3;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileData.to_node_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_node_id(), target);
  }

  // bytes file_name = 4;
  if (!this->_internal_file_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // bytes save_file_name = 5;
  if (!this->_internal_save_file_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_save_file_name(), target);
  }

  // bytes sub_dir = 6;
  if (!this->_internal_sub_dir().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sub_dir(), target);
  }

  // bool is_end = 7;
  if (this->_internal_is_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_end(), target);
  }

  // uint64 file_total_size = 8;
  if (this->_internal_file_total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_file_total_size(), target);
  }

  // int64 f_modify_time = 9;
  if (this->_internal_f_modify_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_f_modify_time(), target);
  }

  // uint64 block_seq = 10;
  if (this->_internal_block_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_block_seq(), target);
  }

  // uint64 total_block_num = 11;
  if (this->_internal_total_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_total_block_num(), target);
  }

  // bytes block_content = 12;
  if (!this->_internal_block_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_block_content(), target);
  }

  // uint64 block_content_len = 13;
  if (this->_internal_block_content_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_block_content_len(), target);
  }

  // string transfer_id = 14;
  if (!this->_internal_transfer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transfer_id().data(), static_cast<int>(this->_internal_transfer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileData.transfer_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_transfer_id(), target);
  }

  // string md5 = 15;
  if (!this->_internal_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileData.md5");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.FileData)
  return target;
}

size_t FileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.FileData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // string to_node_id = 3;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // bytes file_name = 4;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_name());
  }

  // bytes save_file_name = 5;
  if (!this->_internal_save_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_save_file_name());
  }

  // bytes sub_dir = 6;
  if (!this->_internal_sub_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sub_dir());
  }

  // bytes block_content = 12;
  if (!this->_internal_block_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_content());
  }

  // string transfer_id = 14;
  if (!this->_internal_transfer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transfer_id());
  }

  // string md5 = 15;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // uint64 file_total_size = 8;
  if (this->_internal_file_total_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_total_size());
  }

  // int64 f_modify_time = 9;
  if (this->_internal_f_modify_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_f_modify_time());
  }

  // uint64 block_seq = 10;
  if (this->_internal_block_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_seq());
  }

  // uint64 total_block_num = 11;
  if (this->_internal_total_block_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_block_num());
  }

  // uint64 block_content_len = 13;
  if (this->_internal_block_content_len() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_content_len());
  }

  // bool is_end = 7;
  if (this->_internal_is_end() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileData::GetClassData() const { return &_class_data_; }


void FileData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileData*>(&to_msg);
  auto& from = static_cast<const FileData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.FileData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_save_file_name().empty()) {
    _this->_internal_set_save_file_name(from._internal_save_file_name());
  }
  if (!from._internal_sub_dir().empty()) {
    _this->_internal_set_sub_dir(from._internal_sub_dir());
  }
  if (!from._internal_block_content().empty()) {
    _this->_internal_set_block_content(from._internal_block_content());
  }
  if (!from._internal_transfer_id().empty()) {
    _this->_internal_set_transfer_id(from._internal_transfer_id());
  }
  if (!from._internal_md5().empty()) {
    _this->_internal_set_md5(from._internal_md5());
  }
  if (from._internal_file_total_size() != 0) {
    _this->_internal_set_file_total_size(from._internal_file_total_size());
  }
  if (from._internal_f_modify_time() != 0) {
    _this->_internal_set_f_modify_time(from._internal_f_modify_time());
  }
  if (from._internal_block_seq() != 0) {
    _this->_internal_set_block_seq(from._internal_block_seq());
  }
  if (from._internal_total_block_num() != 0) {
    _this->_internal_set_total_block_num(from._internal_total_block_num());
  }
  if (from._internal_block_content_len() != 0) {
    _this->_internal_set_block_content_len(from._internal_block_content_len());
  }
  if (from._internal_is_end() != 0) {
    _this->_internal_set_is_end(from._internal_is_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileData::CopyFrom(const FileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.FileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileData::IsInitialized() const {
  return true;
}

void FileData::InternalSwap(FileData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.save_file_name_, lhs_arena,
      &other->_impl_.save_file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_dir_, lhs_arena,
      &other->_impl_.sub_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_content_, lhs_arena,
      &other->_impl_.block_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transfer_id_, lhs_arena,
      &other->_impl_.transfer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.md5_, lhs_arena,
      &other->_impl_.md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileData, _impl_.is_end_)
      + sizeof(FileData::_impl_.is_end_)
      - PROTOBUF_FIELD_OFFSET(FileData, _impl_.file_total_size_)>(
          reinterpret_cast<char*>(&_impl_.file_total_size_),
          reinterpret_cast<char*>(&other->_impl_.file_total_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[0]);
}

// ===================================================================

class FileDataReply::_Internal {
 public:
};

FileDataReply::FileDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cn.seisys.dds.FileDataReply)
}
FileDataReply::FileDataReply(const FileDataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileDataReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_losts_){from._impl_.block_losts_}
    , /*decltype(_impl_._block_losts_cached_byte_size_)*/{0}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.reply_uuid_){}
    , decltype(_impl_.sub_dir_){}
    , decltype(_impl_.block_seq_){}
    , decltype(_impl_.total_block_num_){}
    , decltype(_impl_.file_total_size_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.is_end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_node_id().empty()) {
    _this->_impl_.src_node_id_.Set(from._internal_src_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_node_id().empty()) {
    _this->_impl_.to_node_id_.Set(from._internal_to_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reply_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_uuid().empty()) {
    _this->_impl_.reply_uuid_.Set(from._internal_reply_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sub_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_dir().empty()) {
    _this->_impl_.sub_dir_.Set(from._internal_sub_dir(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_seq_, &from._impl_.block_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_end_) -
    reinterpret_cast<char*>(&_impl_.block_seq_)) + sizeof(_impl_.is_end_));
  // @@protoc_insertion_point(copy_constructor:cn.seisys.dds.FileDataReply)
}

inline void FileDataReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_losts_){arena}
    , /*decltype(_impl_._block_losts_cached_byte_size_)*/{0}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.src_node_id_){}
    , decltype(_impl_.to_node_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.reply_uuid_){}
    , decltype(_impl_.sub_dir_){}
    , decltype(_impl_.block_seq_){uint64_t{0u}}
    , decltype(_impl_.total_block_num_){uint64_t{0u}}
    , decltype(_impl_.file_total_size_){uint64_t{0u}}
    , decltype(_impl_.state_){int64_t{0}}
    , decltype(_impl_.is_end_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reply_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sub_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileDataReply::~FileDataReply() {
  // @@protoc_insertion_point(destructor:cn.seisys.dds.FileDataReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileDataReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_losts_.~RepeatedField();
  _impl_.uuid_.Destroy();
  _impl_.src_node_id_.Destroy();
  _impl_.to_node_id_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.reply_uuid_.Destroy();
  _impl_.sub_dir_.Destroy();
}

void FileDataReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cn.seisys.dds.FileDataReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_losts_.Clear();
  _impl_.uuid_.ClearToEmpty();
  _impl_.src_node_id_.ClearToEmpty();
  _impl_.to_node_id_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.reply_uuid_.ClearToEmpty();
  _impl_.sub_dir_.ClearToEmpty();
  ::memset(&_impl_.block_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_end_) -
      reinterpret_cast<char*>(&_impl_.block_seq_)) + sizeof(_impl_.is_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileDataReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileDataReply.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string src_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileDataReply.src_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string to_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileDataReply.to_node_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reply_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reply_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cn.seisys.dds.FileDataReply.reply_uuid"));
        } else
          goto handle_unusual;
        continue;
      // bytes sub_dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sub_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_seq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.block_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_block_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.total_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_total_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.file_total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 block_losts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_block_losts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_block_losts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileDataReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cn.seisys.dds.FileDataReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileDataReply.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_node_id().data(), static_cast<int>(this->_internal_src_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileDataReply.src_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_node_id(), target);
  }

  // string to_node_id = 3;
  if (!this->_internal_to_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_node_id().data(), static_cast<int>(this->_internal_to_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileDataReply.to_node_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_node_id(), target);
  }

  // bytes file_name = 4;
  if (!this->_internal_file_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // string reply_uuid = 5;
  if (!this->_internal_reply_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_uuid().data(), static_cast<int>(this->_internal_reply_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cn.seisys.dds.FileDataReply.reply_uuid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reply_uuid(), target);
  }

  // bytes sub_dir = 6;
  if (!this->_internal_sub_dir().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sub_dir(), target);
  }

  // bool is_end = 7;
  if (this->_internal_is_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_end(), target);
  }

  // uint64 block_seq = 8;
  if (this->_internal_block_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_block_seq(), target);
  }

  // uint64 total_block_num = 9;
  if (this->_internal_total_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total_block_num(), target);
  }

  // uint64 file_total_size = 10;
  if (this->_internal_file_total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_file_total_size(), target);
  }

  // repeated uint64 block_losts = 11;
  {
    int byte_size = _impl_._block_losts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_block_losts(), byte_size, target);
    }
  }

  // int64 state = 12;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cn.seisys.dds.FileDataReply)
  return target;
}

size_t FileDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cn.seisys.dds.FileDataReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 block_losts = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.block_losts_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._block_losts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string src_node_id = 2;
  if (!this->_internal_src_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_node_id());
  }

  // string to_node_id = 3;
  if (!this->_internal_to_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_node_id());
  }

  // bytes file_name = 4;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_name());
  }

  // string reply_uuid = 5;
  if (!this->_internal_reply_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_uuid());
  }

  // bytes sub_dir = 6;
  if (!this->_internal_sub_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sub_dir());
  }

  // uint64 block_seq = 8;
  if (this->_internal_block_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_seq());
  }

  // uint64 total_block_num = 9;
  if (this->_internal_total_block_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_block_num());
  }

  // uint64 file_total_size = 10;
  if (this->_internal_file_total_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_total_size());
  }

  // int64 state = 12;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_state());
  }

  // bool is_end = 7;
  if (this->_internal_is_end() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileDataReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileDataReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileDataReply::GetClassData() const { return &_class_data_; }


void FileDataReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileDataReply*>(&to_msg);
  auto& from = static_cast<const FileDataReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cn.seisys.dds.FileDataReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.block_losts_.MergeFrom(from._impl_.block_losts_);
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_src_node_id().empty()) {
    _this->_internal_set_src_node_id(from._internal_src_node_id());
  }
  if (!from._internal_to_node_id().empty()) {
    _this->_internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_reply_uuid().empty()) {
    _this->_internal_set_reply_uuid(from._internal_reply_uuid());
  }
  if (!from._internal_sub_dir().empty()) {
    _this->_internal_set_sub_dir(from._internal_sub_dir());
  }
  if (from._internal_block_seq() != 0) {
    _this->_internal_set_block_seq(from._internal_block_seq());
  }
  if (from._internal_total_block_num() != 0) {
    _this->_internal_set_total_block_num(from._internal_total_block_num());
  }
  if (from._internal_file_total_size() != 0) {
    _this->_internal_set_file_total_size(from._internal_file_total_size());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_is_end() != 0) {
    _this->_internal_set_is_end(from._internal_is_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileDataReply::CopyFrom(const FileDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cn.seisys.dds.FileDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDataReply::IsInitialized() const {
  return true;
}

void FileDataReply::InternalSwap(FileDataReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.block_losts_.InternalSwap(&other->_impl_.block_losts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_node_id_, lhs_arena,
      &other->_impl_.src_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_node_id_, lhs_arena,
      &other->_impl_.to_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_uuid_, lhs_arena,
      &other->_impl_.reply_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_dir_, lhs_arena,
      &other->_impl_.sub_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileDataReply, _impl_.is_end_)
      + sizeof(FileDataReply::_impl_.is_end_)
      - PROTOBUF_FIELD_OFFSET(FileDataReply, _impl_.block_seq_)>(
          reinterpret_cast<char*>(&_impl_.block_seq_),
          reinterpret_cast<char*>(&other->_impl_.block_seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileDataReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::FileData*
Arena::CreateMaybeMessage< ::cn::seisys::dds::FileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::FileData >(arena);
}
template<> PROTOBUF_NOINLINE ::cn::seisys::dds::FileDataReply*
Arena::CreateMaybeMessage< ::cn::seisys::dds::FileDataReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cn::seisys::dds::FileDataReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
