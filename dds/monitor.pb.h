// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_monitor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_monitor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_monitor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_monitor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_monitor_2eproto;
namespace cn {
namespace seisys {
namespace dds {
class TopicMonInfo;
struct TopicMonInfoDefaultTypeInternal;
extern TopicMonInfoDefaultTypeInternal _TopicMonInfo_default_instance_;
}  // namespace dds
}  // namespace seisys
}  // namespace cn
PROTOBUF_NAMESPACE_OPEN
template<> ::cn::seisys::dds::TopicMonInfo* Arena::CreateMaybeMessage<::cn::seisys::dds::TopicMonInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cn {
namespace seisys {
namespace dds {

// ===================================================================

class TopicMonInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cn.seisys.dds.TopicMonInfo) */ {
 public:
  inline TopicMonInfo() : TopicMonInfo(nullptr) {}
  ~TopicMonInfo() override;
  explicit PROTOBUF_CONSTEXPR TopicMonInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicMonInfo(const TopicMonInfo& from);
  TopicMonInfo(TopicMonInfo&& from) noexcept
    : TopicMonInfo() {
    *this = ::std::move(from);
  }

  inline TopicMonInfo& operator=(const TopicMonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicMonInfo& operator=(TopicMonInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicMonInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicMonInfo* internal_default_instance() {
    return reinterpret_cast<const TopicMonInfo*>(
               &_TopicMonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicMonInfo& a, TopicMonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicMonInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicMonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicMonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicMonInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicMonInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopicMonInfo& from) {
    TopicMonInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicMonInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cn.seisys.dds.TopicMonInfo";
  }
  protected:
  explicit TopicMonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSrcNodeIdFieldNumber = 3,
    kSrcNodeNameFieldNumber = 4,
    kToNodeIdFieldNumber = 5,
    kToNodeNameFieldNumber = 6,
    kTopicNameFieldNumber = 7,
    kProgarmNameFieldNumber = 13,
    kDomainFieldNumber = 2,
    kSrcTypeFieldNumber = 12,
    kCycleFieldNumber = 8,
    kUpdateTimeFieldNumber = 9,
    kNCountFieldNumber = 10,
    kNSizeFieldNumber = 11,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string srcNodeId = 3;
  void clear_srcnodeid();
  const std::string& srcnodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodeid();
  PROTOBUF_NODISCARD std::string* release_srcnodeid();
  void set_allocated_srcnodeid(std::string* srcnodeid);
  private:
  const std::string& _internal_srcnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodeid(const std::string& value);
  std::string* _internal_mutable_srcnodeid();
  public:

  // string srcNodeName = 4;
  void clear_srcnodename();
  const std::string& srcnodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcnodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcnodename();
  PROTOBUF_NODISCARD std::string* release_srcnodename();
  void set_allocated_srcnodename(std::string* srcnodename);
  private:
  const std::string& _internal_srcnodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcnodename(const std::string& value);
  std::string* _internal_mutable_srcnodename();
  public:

  // string toNodeId = 5;
  void clear_tonodeid();
  const std::string& tonodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodeid();
  PROTOBUF_NODISCARD std::string* release_tonodeid();
  void set_allocated_tonodeid(std::string* tonodeid);
  private:
  const std::string& _internal_tonodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodeid(const std::string& value);
  std::string* _internal_mutable_tonodeid();
  public:

  // string toNodeName = 6;
  void clear_tonodename();
  const std::string& tonodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tonodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tonodename();
  PROTOBUF_NODISCARD std::string* release_tonodename();
  void set_allocated_tonodename(std::string* tonodename);
  private:
  const std::string& _internal_tonodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tonodename(const std::string& value);
  std::string* _internal_mutable_tonodename();
  public:

  // string topicName = 7;
  void clear_topicname();
  const std::string& topicname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topicname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topicname();
  PROTOBUF_NODISCARD std::string* release_topicname();
  void set_allocated_topicname(std::string* topicname);
  private:
  const std::string& _internal_topicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicname(const std::string& value);
  std::string* _internal_mutable_topicname();
  public:

  // string progarmName = 13;
  void clear_progarmname();
  const std::string& progarmname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_progarmname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_progarmname();
  PROTOBUF_NODISCARD std::string* release_progarmname();
  void set_allocated_progarmname(std::string* progarmname);
  private:
  const std::string& _internal_progarmname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_progarmname(const std::string& value);
  std::string* _internal_mutable_progarmname();
  public:

  // int32 domain = 2;
  void clear_domain();
  int32_t domain() const;
  void set_domain(int32_t value);
  private:
  int32_t _internal_domain() const;
  void _internal_set_domain(int32_t value);
  public:

  // int32 srcType = 12;
  void clear_srctype();
  int32_t srctype() const;
  void set_srctype(int32_t value);
  private:
  int32_t _internal_srctype() const;
  void _internal_set_srctype(int32_t value);
  public:

  // int64 cycle = 8;
  void clear_cycle();
  int64_t cycle() const;
  void set_cycle(int64_t value);
  private:
  int64_t _internal_cycle() const;
  void _internal_set_cycle(int64_t value);
  public:

  // int64 updateTime = 9;
  void clear_updatetime();
  int64_t updatetime() const;
  void set_updatetime(int64_t value);
  private:
  int64_t _internal_updatetime() const;
  void _internal_set_updatetime(int64_t value);
  public:

  // int64 nCount = 10;
  void clear_ncount();
  int64_t ncount() const;
  void set_ncount(int64_t value);
  private:
  int64_t _internal_ncount() const;
  void _internal_set_ncount(int64_t value);
  public:

  // int64 nSize = 11;
  void clear_nsize();
  int64_t nsize() const;
  void set_nsize(int64_t value);
  private:
  int64_t _internal_nsize() const;
  void _internal_set_nsize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cn.seisys.dds.TopicMonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcnodename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tonodename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr progarmname_;
    int32_t domain_;
    int32_t srctype_;
    int64_t cycle_;
    int64_t updatetime_;
    int64_t ncount_;
    int64_t nsize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_monitor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicMonInfo

// string uuid = 1;
inline void TopicMonInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& TopicMonInfo::uuid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.uuid)
}
inline std::string* TopicMonInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.TopicMonInfo.uuid)
  return _s;
}
inline const std::string& TopicMonInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void TopicMonInfo::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonInfo::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.TopicMonInfo.uuid)
  return _impl_.uuid_.Release();
}
inline void TopicMonInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.TopicMonInfo.uuid)
}

// int32 domain = 2;
inline void TopicMonInfo::clear_domain() {
  _impl_.domain_ = 0;
}
inline int32_t TopicMonInfo::_internal_domain() const {
  return _impl_.domain_;
}
inline int32_t TopicMonInfo::domain() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.domain)
  return _internal_domain();
}
inline void TopicMonInfo::_internal_set_domain(int32_t value) {
  
  _impl_.domain_ = value;
}
inline void TopicMonInfo::set_domain(int32_t value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.domain)
}

// string srcNodeId = 3;
inline void TopicMonInfo::clear_srcnodeid() {
  _impl_.srcnodeid_.ClearToEmpty();
}
inline const std::string& TopicMonInfo::srcnodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.srcNodeId)
  return _internal_srcnodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonInfo::set_srcnodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.srcNodeId)
}
inline std::string* TopicMonInfo::mutable_srcnodeid() {
  std::string* _s = _internal_mutable_srcnodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.TopicMonInfo.srcNodeId)
  return _s;
}
inline const std::string& TopicMonInfo::_internal_srcnodeid() const {
  return _impl_.srcnodeid_.Get();
}
inline void TopicMonInfo::_internal_set_srcnodeid(const std::string& value) {
  
  _impl_.srcnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonInfo::_internal_mutable_srcnodeid() {
  
  return _impl_.srcnodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonInfo::release_srcnodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.TopicMonInfo.srcNodeId)
  return _impl_.srcnodeid_.Release();
}
inline void TopicMonInfo::set_allocated_srcnodeid(std::string* srcnodeid) {
  if (srcnodeid != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodeid_.SetAllocated(srcnodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodeid_.IsDefault()) {
    _impl_.srcnodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.TopicMonInfo.srcNodeId)
}

// string srcNodeName = 4;
inline void TopicMonInfo::clear_srcnodename() {
  _impl_.srcnodename_.ClearToEmpty();
}
inline const std::string& TopicMonInfo::srcnodename() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.srcNodeName)
  return _internal_srcnodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonInfo::set_srcnodename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.srcnodename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.srcNodeName)
}
inline std::string* TopicMonInfo::mutable_srcnodename() {
  std::string* _s = _internal_mutable_srcnodename();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.TopicMonInfo.srcNodeName)
  return _s;
}
inline const std::string& TopicMonInfo::_internal_srcnodename() const {
  return _impl_.srcnodename_.Get();
}
inline void TopicMonInfo::_internal_set_srcnodename(const std::string& value) {
  
  _impl_.srcnodename_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonInfo::_internal_mutable_srcnodename() {
  
  return _impl_.srcnodename_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonInfo::release_srcnodename() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.TopicMonInfo.srcNodeName)
  return _impl_.srcnodename_.Release();
}
inline void TopicMonInfo::set_allocated_srcnodename(std::string* srcnodename) {
  if (srcnodename != nullptr) {
    
  } else {
    
  }
  _impl_.srcnodename_.SetAllocated(srcnodename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.srcnodename_.IsDefault()) {
    _impl_.srcnodename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.TopicMonInfo.srcNodeName)
}

// string toNodeId = 5;
inline void TopicMonInfo::clear_tonodeid() {
  _impl_.tonodeid_.ClearToEmpty();
}
inline const std::string& TopicMonInfo::tonodeid() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.toNodeId)
  return _internal_tonodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonInfo::set_tonodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.toNodeId)
}
inline std::string* TopicMonInfo::mutable_tonodeid() {
  std::string* _s = _internal_mutable_tonodeid();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.TopicMonInfo.toNodeId)
  return _s;
}
inline const std::string& TopicMonInfo::_internal_tonodeid() const {
  return _impl_.tonodeid_.Get();
}
inline void TopicMonInfo::_internal_set_tonodeid(const std::string& value) {
  
  _impl_.tonodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonInfo::_internal_mutable_tonodeid() {
  
  return _impl_.tonodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonInfo::release_tonodeid() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.TopicMonInfo.toNodeId)
  return _impl_.tonodeid_.Release();
}
inline void TopicMonInfo::set_allocated_tonodeid(std::string* tonodeid) {
  if (tonodeid != nullptr) {
    
  } else {
    
  }
  _impl_.tonodeid_.SetAllocated(tonodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodeid_.IsDefault()) {
    _impl_.tonodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.TopicMonInfo.toNodeId)
}

// string toNodeName = 6;
inline void TopicMonInfo::clear_tonodename() {
  _impl_.tonodename_.ClearToEmpty();
}
inline const std::string& TopicMonInfo::tonodename() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.toNodeName)
  return _internal_tonodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonInfo::set_tonodename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tonodename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.toNodeName)
}
inline std::string* TopicMonInfo::mutable_tonodename() {
  std::string* _s = _internal_mutable_tonodename();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.TopicMonInfo.toNodeName)
  return _s;
}
inline const std::string& TopicMonInfo::_internal_tonodename() const {
  return _impl_.tonodename_.Get();
}
inline void TopicMonInfo::_internal_set_tonodename(const std::string& value) {
  
  _impl_.tonodename_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonInfo::_internal_mutable_tonodename() {
  
  return _impl_.tonodename_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonInfo::release_tonodename() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.TopicMonInfo.toNodeName)
  return _impl_.tonodename_.Release();
}
inline void TopicMonInfo::set_allocated_tonodename(std::string* tonodename) {
  if (tonodename != nullptr) {
    
  } else {
    
  }
  _impl_.tonodename_.SetAllocated(tonodename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tonodename_.IsDefault()) {
    _impl_.tonodename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.TopicMonInfo.toNodeName)
}

// string topicName = 7;
inline void TopicMonInfo::clear_topicname() {
  _impl_.topicname_.ClearToEmpty();
}
inline const std::string& TopicMonInfo::topicname() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.topicName)
  return _internal_topicname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonInfo::set_topicname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topicname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.topicName)
}
inline std::string* TopicMonInfo::mutable_topicname() {
  std::string* _s = _internal_mutable_topicname();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.TopicMonInfo.topicName)
  return _s;
}
inline const std::string& TopicMonInfo::_internal_topicname() const {
  return _impl_.topicname_.Get();
}
inline void TopicMonInfo::_internal_set_topicname(const std::string& value) {
  
  _impl_.topicname_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonInfo::_internal_mutable_topicname() {
  
  return _impl_.topicname_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonInfo::release_topicname() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.TopicMonInfo.topicName)
  return _impl_.topicname_.Release();
}
inline void TopicMonInfo::set_allocated_topicname(std::string* topicname) {
  if (topicname != nullptr) {
    
  } else {
    
  }
  _impl_.topicname_.SetAllocated(topicname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topicname_.IsDefault()) {
    _impl_.topicname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.TopicMonInfo.topicName)
}

// int64 cycle = 8;
inline void TopicMonInfo::clear_cycle() {
  _impl_.cycle_ = int64_t{0};
}
inline int64_t TopicMonInfo::_internal_cycle() const {
  return _impl_.cycle_;
}
inline int64_t TopicMonInfo::cycle() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.cycle)
  return _internal_cycle();
}
inline void TopicMonInfo::_internal_set_cycle(int64_t value) {
  
  _impl_.cycle_ = value;
}
inline void TopicMonInfo::set_cycle(int64_t value) {
  _internal_set_cycle(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.cycle)
}

// int64 updateTime = 9;
inline void TopicMonInfo::clear_updatetime() {
  _impl_.updatetime_ = int64_t{0};
}
inline int64_t TopicMonInfo::_internal_updatetime() const {
  return _impl_.updatetime_;
}
inline int64_t TopicMonInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.updateTime)
  return _internal_updatetime();
}
inline void TopicMonInfo::_internal_set_updatetime(int64_t value) {
  
  _impl_.updatetime_ = value;
}
inline void TopicMonInfo::set_updatetime(int64_t value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.updateTime)
}

// int64 nCount = 10;
inline void TopicMonInfo::clear_ncount() {
  _impl_.ncount_ = int64_t{0};
}
inline int64_t TopicMonInfo::_internal_ncount() const {
  return _impl_.ncount_;
}
inline int64_t TopicMonInfo::ncount() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.nCount)
  return _internal_ncount();
}
inline void TopicMonInfo::_internal_set_ncount(int64_t value) {
  
  _impl_.ncount_ = value;
}
inline void TopicMonInfo::set_ncount(int64_t value) {
  _internal_set_ncount(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.nCount)
}

// int64 nSize = 11;
inline void TopicMonInfo::clear_nsize() {
  _impl_.nsize_ = int64_t{0};
}
inline int64_t TopicMonInfo::_internal_nsize() const {
  return _impl_.nsize_;
}
inline int64_t TopicMonInfo::nsize() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.nSize)
  return _internal_nsize();
}
inline void TopicMonInfo::_internal_set_nsize(int64_t value) {
  
  _impl_.nsize_ = value;
}
inline void TopicMonInfo::set_nsize(int64_t value) {
  _internal_set_nsize(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.nSize)
}

// int32 srcType = 12;
inline void TopicMonInfo::clear_srctype() {
  _impl_.srctype_ = 0;
}
inline int32_t TopicMonInfo::_internal_srctype() const {
  return _impl_.srctype_;
}
inline int32_t TopicMonInfo::srctype() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.srcType)
  return _internal_srctype();
}
inline void TopicMonInfo::_internal_set_srctype(int32_t value) {
  
  _impl_.srctype_ = value;
}
inline void TopicMonInfo::set_srctype(int32_t value) {
  _internal_set_srctype(value);
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.srcType)
}

// string progarmName = 13;
inline void TopicMonInfo::clear_progarmname() {
  _impl_.progarmname_.ClearToEmpty();
}
inline const std::string& TopicMonInfo::progarmname() const {
  // @@protoc_insertion_point(field_get:cn.seisys.dds.TopicMonInfo.progarmName)
  return _internal_progarmname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonInfo::set_progarmname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.progarmname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cn.seisys.dds.TopicMonInfo.progarmName)
}
inline std::string* TopicMonInfo::mutable_progarmname() {
  std::string* _s = _internal_mutable_progarmname();
  // @@protoc_insertion_point(field_mutable:cn.seisys.dds.TopicMonInfo.progarmName)
  return _s;
}
inline const std::string& TopicMonInfo::_internal_progarmname() const {
  return _impl_.progarmname_.Get();
}
inline void TopicMonInfo::_internal_set_progarmname(const std::string& value) {
  
  _impl_.progarmname_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonInfo::_internal_mutable_progarmname() {
  
  return _impl_.progarmname_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonInfo::release_progarmname() {
  // @@protoc_insertion_point(field_release:cn.seisys.dds.TopicMonInfo.progarmName)
  return _impl_.progarmname_.Release();
}
inline void TopicMonInfo::set_allocated_progarmname(std::string* progarmname) {
  if (progarmname != nullptr) {
    
  } else {
    
  }
  _impl_.progarmname_.SetAllocated(progarmname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.progarmname_.IsDefault()) {
    _impl_.progarmname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cn.seisys.dds.TopicMonInfo.progarmName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dds
}  // namespace seisys
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_monitor_2eproto
